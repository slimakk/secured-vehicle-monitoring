
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800dea0  0800dea0  0001dea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6b8  0800e6b8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6b8  0800e6b8  0001e6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6c0  0800e6c0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6c0  0800e6c0  0001e6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6c4  0800e6c4  0001e6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  200001e0  0800e8a8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800e8a8  00020714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b575  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cc0  00000000  00000000  0003b785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0003f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  00040a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274fd  00000000  00000000  00041e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2dd  00000000  00000000  0006938d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3a9c  00000000  00000000  0008666a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007128  00000000  00000000  0016a158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de88 	.word	0x0800de88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800de88 	.word	0x0800de88

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <kline_init>:
/*
 * @brief	ISO 9141 and ISO 14230 slow initialization procedure
 * @param	None
 * @retval	OBD_PROTO_ISO9141 or OBD_PROTO_KWP2000_SLOW if the initialization is successful, OBD_NONE if there is no response
 * */
obd_protocol kline_init(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 8000ffe:	f000 f909 	bl	8001214 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 8001002:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001006:	f002 fd87 	bl	8003b18 <HAL_Delay>
	uart_pin_state(0); //0
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f918 	bl	8001240 <uart_pin_state>
	HAL_Delay(200);
 8001010:	20c8      	movs	r0, #200	; 0xc8
 8001012:	f002 fd81 	bl	8003b18 <HAL_Delay>
	uart_pin_state(1);//11
 8001016:	2001      	movs	r0, #1
 8001018:	f000 f912 	bl	8001240 <uart_pin_state>
	HAL_Delay(400);
 800101c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001020:	f002 fd7a 	bl	8003b18 <HAL_Delay>
	uart_pin_state(0);//00
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f90b 	bl	8001240 <uart_pin_state>
	HAL_Delay(400);
 800102a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800102e:	f002 fd73 	bl	8003b18 <HAL_Delay>
	uart_pin_state(1);//11
 8001032:	2001      	movs	r0, #1
 8001034:	f000 f904 	bl	8001240 <uart_pin_state>
	HAL_Delay(400);
 8001038:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800103c:	f002 fd6c 	bl	8003b18 <HAL_Delay>
	uart_pin_state(0);//00
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f8fd 	bl	8001240 <uart_pin_state>
	HAL_Delay(400);
 8001046:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800104a:	f002 fd65 	bl	8003b18 <HAL_Delay>
	uart_pin_state(1);//1
 800104e:	2001      	movs	r0, #1
 8001050:	f000 f8f6 	bl	8001240 <uart_pin_state>

	MX_USART1_UART_Init();
 8001054:	f001 ffa8 	bl	8002fa8 <MX_USART1_UART_Init>

	HAL_UART_Receive(KLINE, uartBuf, 3, 500);
 8001058:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800105c:	2203      	movs	r2, #3
 800105e:	492b      	ldr	r1, [pc, #172]	; (800110c <kline_init+0x114>)
 8001060:	482b      	ldr	r0, [pc, #172]	; (8001110 <kline_init+0x118>)
 8001062:	f006 fee8 	bl	8007e36 <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <kline_init+0x114>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b55      	cmp	r3, #85	; 0x55
 800106c:	d001      	beq.n	8001072 <kline_init+0x7a>
	{
		return (OBD_NONE);
 800106e:	2300      	movs	r3, #0
 8001070:	e047      	b.n	8001102 <kline_init+0x10a>
	}
	else if(uartBuf[1] == uartBuf[2])
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <kline_init+0x114>)
 8001074:	785a      	ldrb	r2, [r3, #1]
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <kline_init+0x114>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	429a      	cmp	r2, r3
 800107c:	d122      	bne.n	80010c4 <kline_init+0xcc>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 800107e:	4b23      	ldr	r3, [pc, #140]	; (800110c <kline_init+0x114>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	43db      	mvns	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8001088:	2019      	movs	r0, #25
 800108a:	f002 fd45 	bl	8003b18 <HAL_Delay>
			HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 800108e:	1df9      	adds	r1, r7, #7
 8001090:	2332      	movs	r3, #50	; 0x32
 8001092:	2201      	movs	r2, #1
 8001094:	481e      	ldr	r0, [pc, #120]	; (8001110 <kline_init+0x118>)
 8001096:	f006 fe3a 	bl	8007d0e <HAL_UART_Transmit>
			HAL_Delay(25);
 800109a:	2019      	movs	r0, #25
 800109c:	f002 fd3c 	bl	8003b18 <HAL_Delay>
			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <kline_init+0x118>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	8b1b      	ldrh	r3, [r3, #24]
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <kline_init+0x118>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0208 	orr.w	r2, r2, #8
 80010b0:	b292      	uxth	r2, r2
 80010b2:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4916      	ldr	r1, [pc, #88]	; (8001114 <kline_init+0x11c>)
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <kline_init+0x118>)
 80010bc:	f006 febb 	bl	8007e36 <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
			return (OBD_PROTO_ISO9141);
 80010c0:	2301      	movs	r3, #1
 80010c2:	e01e      	b.n	8001102 <kline_init+0x10a>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <kline_init+0x114>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 80010ce:	2019      	movs	r0, #25
 80010d0:	f002 fd22 	bl	8003b18 <HAL_Delay>
		HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 80010d4:	1db9      	adds	r1, r7, #6
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	2201      	movs	r2, #1
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <kline_init+0x118>)
 80010dc:	f006 fe17 	bl	8007d0e <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <kline_init+0x118>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	8b1b      	ldrh	r3, [r3, #24]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <kline_init+0x118>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 0208 	orr.w	r2, r2, #8
 80010f0:	b292      	uxth	r2, r2
 80010f2:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 80010f4:	2364      	movs	r3, #100	; 0x64
 80010f6:	2201      	movs	r2, #1
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <kline_init+0x11c>)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <kline_init+0x118>)
 80010fc:	f006 fe9b 	bl	8007e36 <HAL_UART_Receive>
		return (OBD_PROTO_KWP2000_SLOW);
 8001100:	2302      	movs	r3, #2
	}
	return (OBD_NONE);
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002f8 	.word	0x200002f8
 8001110:	20000500 	.word	0x20000500
 8001114:	20000213 	.word	0x20000213

08001118 <kwp2000_fast_init>:
 * @brief	ISO 14230 fast initialization procedure
 * @param	None
 * @retval	OBD_PROTO_KWP2000_FAST if the initialization is successful, OBD_NONE if there is no response
 * */
obd_protocol kwp2000_fast_init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 800111e:	4a37      	ldr	r2, [pc, #220]	; (80011fc <kwp2000_fast_init+0xe4>)
 8001120:	463b      	mov	r3, r7
 8001122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001126:	6018      	str	r0, [r3, #0]
 8001128:	3304      	adds	r3, #4
 800112a:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8001130:	4b33      	ldr	r3, [pc, #204]	; (8001200 <kwp2000_fast_init+0xe8>)
 8001132:	2201      	movs	r2, #1
 8001134:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_UART_DeInit(KLINE);
 8001138:	4832      	ldr	r0, [pc, #200]	; (8001204 <kwp2000_fast_init+0xec>)
 800113a:	f006 fdaf 	bl	8007c9c <HAL_UART_DeInit>
	HAL_Delay(3000);
 800113e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001142:	f002 fce9 	bl	8003b18 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8001146:	f000 f865 	bl	8001214 <MX_GPIO_KLineUART_Init>
	uart_pin_state(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f878 	bl	8001240 <uart_pin_state>
	HAL_Delay(25);
 8001150:	2019      	movs	r0, #25
 8001152:	f002 fce1 	bl	8003b18 <HAL_Delay>
	uart_pin_state(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f000 f872 	bl	8001240 <uart_pin_state>
	HAL_Delay(25);
 800115c:	2019      	movs	r0, #25
 800115e:	f002 fcdb 	bl	8003b18 <HAL_Delay>
	if (HAL_UART_Init(KLINE) != HAL_OK)
 8001162:	4828      	ldr	r0, [pc, #160]	; (8001204 <kwp2000_fast_init+0xec>)
 8001164:	f006 fd4c 	bl	8007c00 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <kwp2000_fast_init+0x5a>
	{
		Error_Handler();
 800116e:	f001 fc5a 	bl	8002a26 <Error_Handler>
	}
	HAL_UART_Transmit(KLINE, start_msg, 5, 10);
 8001172:	4639      	mov	r1, r7
 8001174:	230a      	movs	r3, #10
 8001176:	2205      	movs	r2, #5
 8001178:	4822      	ldr	r0, [pc, #136]	; (8001204 <kwp2000_fast_init+0xec>)
 800117a:	f006 fdc8 	bl	8007d0e <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);

	HAL_UART_Receive_DMA(KLINE, uartBuf, 8);
 800117e:	2208      	movs	r2, #8
 8001180:	4921      	ldr	r1, [pc, #132]	; (8001208 <kwp2000_fast_init+0xf0>)
 8001182:	4820      	ldr	r0, [pc, #128]	; (8001204 <kwp2000_fast_init+0xec>)
 8001184:	f006 ff7e 	bl	8008084 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(KLINE_TIMER);
 8001188:	4820      	ldr	r0, [pc, #128]	; (800120c <kwp2000_fast_init+0xf4>)
 800118a:	f006 fa87 	bl	800769c <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 800118e:	e000      	b.n	8001192 <kwp2000_fast_init+0x7a>
	{
		__NOP();
 8001190:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <kwp2000_fast_init+0xe8>)
 8001194:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <kwp2000_fast_init+0x8e>
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <kwp2000_fast_init+0xe8>)
 800119e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d1f4      	bne.n	8001190 <kwp2000_fast_init+0x78>
	}
	if(obd_comm.msg_type == 0)
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <kwp2000_fast_init+0xe8>)
 80011a8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d11f      	bne.n	80011f0 <kwp2000_fast_init+0xd8>
	{
		for(int i = 1; i < 7; i++)
 80011b0:	2301      	movs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	e009      	b.n	80011ca <kwp2000_fast_init+0xb2>
		{
			checksum = checksum + uartBuf[i];
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <kwp2000_fast_init+0xf0>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4413      	add	r3, r2
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4413      	add	r3, r2
 80011c2:	73fb      	strb	r3, [r7, #15]
		for(int i = 1; i < 7; i++)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3301      	adds	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	ddf2      	ble.n	80011b6 <kwp2000_fast_init+0x9e>
		}
		checksum = checksum % 256;
		if(checksum == uartBuf[7] && checksum != 0)
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <kwp2000_fast_init+0xf0>)
 80011d2:	79db      	ldrb	r3, [r3, #7]
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d108      	bne.n	80011ec <kwp2000_fast_init+0xd4>
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <kwp2000_fast_init+0xd4>
		{
			ecu_addr = uartBuf[3];
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <kwp2000_fast_init+0xf0>)
 80011e2:	78da      	ldrb	r2, [r3, #3]
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <kwp2000_fast_init+0xf8>)
 80011e6:	701a      	strb	r2, [r3, #0]
			return (OBD_PROTO_KWP2000_FAST);
 80011e8:	2303      	movs	r3, #3
 80011ea:	e002      	b.n	80011f2 <kwp2000_fast_init+0xda>
		}
		else
			return (OBD_NONE);
 80011ec:	2300      	movs	r3, #0
 80011ee:	e000      	b.n	80011f2 <kwp2000_fast_init+0xda>
	}
	else
		return (OBD_NONE);
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0800dea0 	.word	0x0800dea0
 8001200:	20000304 	.word	0x20000304
 8001204:	20000500 	.word	0x20000500
 8001208:	200002f8 	.word	0x200002f8
 800120c:	2000041c 	.word	0x2000041c
 8001210:	20000213 	.word	0x20000213

08001214 <MX_GPIO_KLineUART_Init>:
 * @brief	Initialization function for GPIO pins used by KLine UART interface
 * @param	None
 * @retval	None
 * */
static void MX_GPIO_KLineUART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = K_Line_TX_Pin;
 800121a:	2340      	movs	r3, #64	; 0x40
 800121c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(K_Line_TX_GPIO_Port, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_GPIO_KLineUART_Init+0x28>)
 8001230:	f004 fdcc 	bl	8005dcc <HAL_GPIO_Init>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	48000400 	.word	0x48000400

08001240 <uart_pin_state>:
 * @brief	Toggles K and L lines for slow address transmission -- inverted logic
 * @param	state	Requested state 1 or 0
 * @retval	None
 * */
static void uart_pin_state(uint8_t state)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10c      	bne.n	800126a <uart_pin_state+0x2a>
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <uart_pin_state+0x4c>)
 8001256:	f005 f80d 	bl	8006274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f005 f806 	bl	8006274 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
	}
}
 8001268:	e00b      	b.n	8001282 <uart_pin_state+0x42>
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2140      	movs	r1, #64	; 0x40
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <uart_pin_state+0x4c>)
 8001270:	f005 f800 	bl	8006274 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f004 fff9 	bl	8006274 <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000400 	.word	0x48000400

08001290 <kline_send_msg>:
 * @brief	Sends OBD II message via ISO 9141 protocol and checks the response.
 * @param	*tx_frame	Pointer to the requested TX frame
 * @retval	TRUE if valid message has been received, else FALSE
 * */
uint8_t kline_send_msg(uint8_t *tx_frame)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001298:	2368      	movs	r3, #104	; 0x68
 800129a:	723b      	strb	r3, [r7, #8]
 800129c:	236a      	movs	r3, #106	; 0x6a
 800129e:	727b      	strb	r3, [r7, #9]
 80012a0:	23f1      	movs	r3, #241	; 0xf1
 80012a2:	72bb      	strb	r3, [r7, #10]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	72fb      	strb	r3, [r7, #11]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	785b      	ldrb	r3, [r3, #1]
 80012ae:	733b      	strb	r3, [r7, #12]
 80012b0:	2300      	movs	r3, #0
 80012b2:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3301      	adds	r3, #1
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fe3c 	bl	8001f38 <PID_Get_Lenght>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <kline_send_msg+0x128>)
 80012c6:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	e00a      	b.n	80012e8 <kline_send_msg+0x58>
	{
		checksum += kline_msg[i];
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4413      	add	r3, r2
 80012da:	781a      	ldrb	r2, [r3, #0]
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	4413      	add	r3, r2
 80012e0:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d9f1      	bls.n	80012d2 <kline_send_msg+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(KLINE, kline_msg, sizeof(kline_msg), 12);
 80012f2:	f107 0108 	add.w	r1, r7, #8
 80012f6:	230c      	movs	r3, #12
 80012f8:	2206      	movs	r2, #6
 80012fa:	4830      	ldr	r0, [pc, #192]	; (80013bc <kline_send_msg+0x12c>)
 80012fc:	f006 fd07 	bl	8007d0e <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <kline_send_msg+0x12c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	8b1b      	ldrh	r3, [r3, #24]
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <kline_send_msg+0x12c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0208 	orr.w	r2, r2, #8
 8001310:	b292      	uxth	r2, r2
 8001312:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 4);
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <kline_send_msg+0x128>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3304      	adds	r3, #4
 800131c:	b29b      	uxth	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4927      	ldr	r1, [pc, #156]	; (80013c0 <kline_send_msg+0x130>)
 8001322:	4826      	ldr	r0, [pc, #152]	; (80013bc <kline_send_msg+0x12c>)
 8001324:	f006 feae 	bl	8008084 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start_IT(MSG_TIMER);
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <kline_send_msg+0x134>)
 800132a:	f006 f9b7 	bl	800769c <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 800132e:	e000      	b.n	8001332 <kline_send_msg+0xa2>
	{
		__NOP();
 8001330:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <kline_send_msg+0x138>)
 8001334:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <kline_send_msg+0xb6>
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <kline_send_msg+0x138>)
 800133e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001342:	2b01      	cmp	r3, #1
 8001344:	d1f4      	bne.n	8001330 <kline_send_msg+0xa0>
	}
	if(obd_comm.timeout == 1)
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <kline_send_msg+0x138>)
 8001348:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <kline_send_msg+0xc4>
	{
		return (FALSE);
 8001350:	2300      	movs	r3, #0
 8001352:	e02c      	b.n	80013ae <kline_send_msg+0x11e>
	}
	if(verify_checksum(kline_rx_buf, pid_length + 5))
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <kline_send_msg+0x128>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	3305      	adds	r3, #5
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <kline_send_msg+0x130>)
 8001360:	f000 f8dc 	bl	800151c <verify_checksum>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d020      	beq.n	80013ac <kline_send_msg+0x11c>
	{
		uint8_t j = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 800136e:	2302      	movs	r3, #2
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	e00b      	b.n	800138c <kline_send_msg+0xfc>
		{
			rx_frame[j] = kline_rx_buf[i];
 8001374:	7bba      	ldrb	r2, [r7, #14]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	4911      	ldr	r1, [pc, #68]	; (80013c0 <kline_send_msg+0x130>)
 800137a:	5c89      	ldrb	r1, [r1, r2]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <kline_send_msg+0x13c>)
 800137e:	54d1      	strb	r1, [r2, r3]
			j++;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	3301      	adds	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	3301      	adds	r3, #1
 800138a:	73bb      	strb	r3, [r7, #14]
 800138c:	7bba      	ldrb	r2, [r7, #14]
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <kline_send_msg+0x128>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	3304      	adds	r3, #4
 8001394:	429a      	cmp	r2, r3
 8001396:	dded      	ble.n	8001374 <kline_send_msg+0xe4>
		}
		obd_comm.current_value = obd2_pid_parse(rx_frame);
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <kline_send_msg+0x13c>)
 800139a:	f000 f9cd 	bl	8001738 <obd2_pid_parse>
 800139e:	eef0 7a40 	vmov.f32	s15, s0
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <kline_send_msg+0x138>)
 80013a4:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		return (TRUE);
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <kline_send_msg+0x11e>
	}
		return (FALSE);
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000214 	.word	0x20000214
 80013bc:	20000500 	.word	0x20000500
 80013c0:	200001fc 	.word	0x200001fc
 80013c4:	200004b4 	.word	0x200004b4
 80013c8:	20000304 	.word	0x20000304
 80013cc:	2000020c 	.word	0x2000020c

080013d0 <kwp2000_send_msg>:
 * @brief	Sends OBD II message via ISO 14230 protocol and checks the response.
 * @param	*tx_frame	Pointer to the requested TX frame
 * @retval	TRUE if valid message has been received, else FALSE
 * */
uint8_t kwp2000_send_msg(uint8_t *tx_frame)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 80013d8:	23c2      	movs	r3, #194	; 0xc2
 80013da:	723b      	strb	r3, [r7, #8]
 80013dc:	2333      	movs	r3, #51	; 0x33
 80013de:	727b      	strb	r3, [r7, #9]
 80013e0:	23f1      	movs	r3, #241	; 0xf1
 80013e2:	72bb      	strb	r3, [r7, #10]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	72fb      	strb	r3, [r7, #11]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	733b      	strb	r3, [r7, #12]
 80013f0:	2300      	movs	r3, #0
 80013f2:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3301      	adds	r3, #1
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fd9c 	bl	8001f38 <PID_Get_Lenght>
 8001400:	4603      	mov	r3, r0
 8001402:	461a      	mov	r2, r3
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <kwp2000_send_msg+0x134>)
 8001406:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <kwp2000_send_msg+0x138>)
 800140e:	2202      	movs	r2, #2
 8001410:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	e00a      	b.n	8001430 <kwp2000_send_msg+0x60>
	{
		checksum += kwp_msg[i];
 800141a:	f107 0208 	add.w	r2, r7, #8
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4413      	add	r3, r2
 8001422:	781a      	ldrb	r2, [r3, #0]
 8001424:	7dfb      	ldrb	r3, [r7, #23]
 8001426:	4413      	add	r3, r2
 8001428:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	3301      	adds	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b04      	cmp	r3, #4
 8001434:	d9f1      	bls.n	800141a <kwp2000_send_msg+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001436:	7dfb      	ldrb	r3, [r7, #23]
 8001438:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 800143a:	2014      	movs	r0, #20
 800143c:	f002 fb6c 	bl	8003b18 <HAL_Delay>

	HAL_UART_Transmit(KLINE, kwp_msg, sizeof(kwp_msg), 12);
 8001440:	f107 0108 	add.w	r1, r7, #8
 8001444:	230c      	movs	r3, #12
 8001446:	2206      	movs	r2, #6
 8001448:	4830      	ldr	r0, [pc, #192]	; (800150c <kwp2000_send_msg+0x13c>)
 800144a:	f006 fc60 	bl	8007d0e <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <kwp2000_send_msg+0x13c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	8b1b      	ldrh	r3, [r3, #24]
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <kwp2000_send_msg+0x13c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0208 	orr.w	r2, r2, #8
 800145e:	b292      	uxth	r2, r2
 8001460:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 5);
 8001462:	4b28      	ldr	r3, [pc, #160]	; (8001504 <kwp2000_send_msg+0x134>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	3305      	adds	r3, #5
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4928      	ldr	r1, [pc, #160]	; (8001510 <kwp2000_send_msg+0x140>)
 8001470:	4826      	ldr	r0, [pc, #152]	; (800150c <kwp2000_send_msg+0x13c>)
 8001472:	f006 fe07 	bl	8008084 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start_IT(MSG_TIMER);
 8001476:	4827      	ldr	r0, [pc, #156]	; (8001514 <kwp2000_send_msg+0x144>)
 8001478:	f006 f910 	bl	800769c <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 800147c:	e000      	b.n	8001480 <kwp2000_send_msg+0xb0>
	{
		__NOP();
 800147e:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <kwp2000_send_msg+0x138>)
 8001482:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <kwp2000_send_msg+0xc4>
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <kwp2000_send_msg+0x138>)
 800148c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001490:	2b01      	cmp	r3, #1
 8001492:	d1f4      	bne.n	800147e <kwp2000_send_msg+0xae>
	}
	if(obd_comm.timeout == 1)
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <kwp2000_send_msg+0x138>)
 8001496:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <kwp2000_send_msg+0xd2>
	{
		return (FALSE);
 800149e:	2300      	movs	r3, #0
 80014a0:	e02c      	b.n	80014fc <kwp2000_send_msg+0x12c>
	}
	if(verify_checksum(kline_rx_buf, pid_length + 5))
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <kwp2000_send_msg+0x134>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3305      	adds	r3, #5
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	4818      	ldr	r0, [pc, #96]	; (8001510 <kwp2000_send_msg+0x140>)
 80014ae:	f000 f835 	bl	800151c <verify_checksum>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <kwp2000_send_msg+0x12a>
	{
		uint8_t j = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80014bc:	2302      	movs	r3, #2
 80014be:	73bb      	strb	r3, [r7, #14]
 80014c0:	e00b      	b.n	80014da <kwp2000_send_msg+0x10a>
		{
			rx_frame[j] = kline_rx_buf[i];
 80014c2:	7bba      	ldrb	r2, [r7, #14]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4912      	ldr	r1, [pc, #72]	; (8001510 <kwp2000_send_msg+0x140>)
 80014c8:	5c89      	ldrb	r1, [r1, r2]
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <kwp2000_send_msg+0x148>)
 80014cc:	54d1      	strb	r1, [r2, r3]
			j++;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	3301      	adds	r3, #1
 80014d8:	73bb      	strb	r3, [r7, #14]
 80014da:	7bba      	ldrb	r2, [r7, #14]
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <kwp2000_send_msg+0x134>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	3304      	adds	r3, #4
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dded      	ble.n	80014c2 <kwp2000_send_msg+0xf2>
		}
		obd_comm.current_value = obd2_pid_parse(rx_frame);
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <kwp2000_send_msg+0x148>)
 80014e8:	f000 f926 	bl	8001738 <obd2_pid_parse>
 80014ec:	eef0 7a40 	vmov.f32	s15, s0
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <kwp2000_send_msg+0x138>)
 80014f2:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		return (TRUE);
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <kwp2000_send_msg+0x12c>
	}
	return (FALSE);
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000214 	.word	0x20000214
 8001508:	20000304 	.word	0x20000304
 800150c:	20000500 	.word	0x20000500
 8001510:	200001fc 	.word	0x200001fc
 8001514:	200004b4 	.word	0x200004b4
 8001518:	2000020c 	.word	0x2000020c

0800151c <verify_checksum>:
 * @param	*data	Received message
 * @param	length	Expected lenght of the message based on its PID
 * @retval	TRUE if the message has valid checksum
 * */
static uint8_t verify_checksum (uint8_t *data, uint8_t length)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	e009      	b.n	8001546 <verify_checksum+0x2a>
	{
		checksum += data[i];
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	4413      	add	r3, r2
 800153e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; i++)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	3301      	adds	r3, #1
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	3b01      	subs	r3, #1
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf0      	blt.n	8001532 <verify_checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[length - 1] == checksum)
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	3b01      	subs	r3, #1
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d101      	bne.n	8001564 <verify_checksum+0x48>
	{
		return (TRUE);
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <verify_checksum+0x4a>
	}
	return (FALSE);
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <kline_rx_callback>:
 * @brief	K line UART receive callback function
 * @param	None
 * @retval	None
 * */
void kline_rx_callback(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <kline_rx_callback+0x3c>)
 800157a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800157e:	2b01      	cmp	r3, #1
 8001580:	d107      	bne.n	8001592 <kline_rx_callback+0x1e>
	{
		HAL_TIM_Base_Stop_IT(KLINE_TIMER);
 8001582:	480c      	ldr	r0, [pc, #48]	; (80015b4 <kline_rx_callback+0x40>)
 8001584:	f006 f8de 	bl	8007744 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <kline_rx_callback+0x3c>)
 800158a:	2200      	movs	r2, #0
 800158c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	else if (obd_comm.msg_type == 2)
	{
		HAL_TIM_Base_Stop_IT(MSG_TIMER);
		obd_comm.msg_type = 0;
	}
}
 8001590:	e00b      	b.n	80015aa <kline_rx_callback+0x36>
	else if (obd_comm.msg_type == 2)
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <kline_rx_callback+0x3c>)
 8001594:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001598:	2b02      	cmp	r3, #2
 800159a:	d106      	bne.n	80015aa <kline_rx_callback+0x36>
		HAL_TIM_Base_Stop_IT(MSG_TIMER);
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <kline_rx_callback+0x44>)
 800159e:	f006 f8d1 	bl	8007744 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 80015a2:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <kline_rx_callback+0x3c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000304 	.word	0x20000304
 80015b4:	2000041c 	.word	0x2000041c
 80015b8:	200004b4 	.word	0x200004b4

080015bc <obd2_pid_decode>:
 * @brief	Extracts supported OBD II pids from 0x00, 0x20 and 0x40 requests
 * @param	*rx_frame	Pointer to the received frame
 * @reval	None
 * */
static void obd2_pid_decode(uint8_t* rx_frame)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	uint8_t number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3303      	adds	r3, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3304      	adds	r3, #4
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	041b      	lsls	r3, r3, #16
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3305      	adds	r3, #5
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3306      	adds	r3, #6
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	72fb      	strb	r3, [r7, #11]
	uint8_t j = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 32;
 80015fc:	2320      	movs	r3, #32
 80015fe:	73bb      	strb	r3, [r7, #14]
	uint8_t l = 64;
 8001600:	2340      	movs	r3, #64	; 0x40
 8001602:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8001604:	231f      	movs	r3, #31
 8001606:	733b      	strb	r3, [r7, #12]
	{
		uint8_t digit = number >> i;
 8001608:	7afa      	ldrb	r2, [r7, #11]
 800160a:	7b3b      	ldrb	r3, [r7, #12]
 800160c:	fa42 f303 	asr.w	r3, r2, r3
 8001610:	72bb      	strb	r3, [r7, #10]
		digit &= 1;
 8001612:	7abb      	ldrb	r3, [r7, #10]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	72bb      	strb	r3, [r7, #10]
		if(obd_comm.pid == 0x00)
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <obd2_pid_decode+0xac>)
 800161c:	785b      	ldrb	r3, [r3, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d108      	bne.n	8001634 <obd2_pid_decode+0x78>
		{
			obd_comm.available_pids[j] = digit;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <obd2_pid_decode+0xac>)
 8001626:	4413      	add	r3, r2
 8001628:	7aba      	ldrb	r2, [r7, #10]
 800162a:	70da      	strb	r2, [r3, #3]
			j++;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	3301      	adds	r3, #1
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e014      	b.n	800165e <obd2_pid_decode+0xa2>
		}
		else if(obd_comm.pid == 0x20)
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <obd2_pid_decode+0xac>)
 8001636:	785b      	ldrb	r3, [r3, #1]
 8001638:	2b20      	cmp	r3, #32
 800163a:	d108      	bne.n	800164e <obd2_pid_decode+0x92>
		{
			obd_comm.available_pids[k] = digit;
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <obd2_pid_decode+0xac>)
 8001640:	4413      	add	r3, r2
 8001642:	7aba      	ldrb	r2, [r7, #10]
 8001644:	70da      	strb	r2, [r3, #3]
			k++;
 8001646:	7bbb      	ldrb	r3, [r7, #14]
 8001648:	3301      	adds	r3, #1
 800164a:	73bb      	strb	r3, [r7, #14]
 800164c:	e007      	b.n	800165e <obd2_pid_decode+0xa2>
		}
		else
		{
			obd_comm.available_pids[l] = digit;
 800164e:	7b7b      	ldrb	r3, [r7, #13]
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <obd2_pid_decode+0xac>)
 8001652:	4413      	add	r3, r2
 8001654:	7aba      	ldrb	r2, [r7, #10]
 8001656:	70da      	strb	r2, [r3, #3]
			l++;
 8001658:	7b7b      	ldrb	r3, [r7, #13]
 800165a:	3301      	adds	r3, #1
 800165c:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 800165e:	7b3b      	ldrb	r3, [r7, #12]
 8001660:	3b01      	subs	r3, #1
 8001662:	733b      	strb	r3, [r7, #12]
	{
 8001664:	e7d0      	b.n	8001608 <obd2_pid_decode+0x4c>
 8001666:	bf00      	nop
 8001668:	20000304 	.word	0x20000304

0800166c <obd2_request>:
 * @brief	Sends an OBD II request via initialized protocol
 * @param	obd		OBD struct
 * @retval	TRUE if a response has been received
 * */
uint8_t obd2_request(OBD obd)
{
 800166c:	b084      	sub	sp, #16
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	f107 0c18 	add.w	ip, r7, #24
 8001678:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 800167c:	200a      	movs	r0, #10
 800167e:	f002 fa4b 	bl	8003b18 <HAL_Delay>
	uint8_t repeat = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
	if(obd.used_protocol == OBD_PROTO_CAN)
 8001686:	7e3b      	ldrb	r3, [r7, #24]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d122      	bne.n	80016d2 <obd2_request+0x66>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 800168c:	2302      	movs	r3, #2
 800168e:	713b      	strb	r3, [r7, #4]
 8001690:	2301      	movs	r3, #1
 8001692:	717b      	strb	r3, [r7, #5]
 8001694:	7e7b      	ldrb	r3, [r7, #25]
 8001696:	71bb      	strb	r3, [r7, #6]
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	2300      	movs	r3, #0
 800169e:	723b      	strb	r3, [r7, #8]
 80016a0:	2300      	movs	r3, #0
 80016a2:	727b      	strb	r3, [r7, #9]
 80016a4:	2300      	movs	r3, #0
 80016a6:	72bb      	strb	r3, [r7, #10]
 80016a8:	2300      	movs	r3, #0
 80016aa:	72fb      	strb	r3, [r7, #11]
		while (!(can_send_msg(tx_data_CAN)))
 80016ac:	e008      	b.n	80016c0 <obd2_request+0x54>
		{
			if(repeat < MAX_REQ_REPEAT)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d803      	bhi.n	80016bc <obd2_request+0x50>
			{
				repeat++;
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	e001      	b.n	80016c0 <obd2_request+0x54>
			}
			else
			{
				return (FALSE);
 80016bc:	2300      	movs	r3, #0
 80016be:	e033      	b.n	8001728 <obd2_request+0xbc>
		while (!(can_send_msg(tx_data_CAN)))
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 fd06 	bl	80020d4 <can_send_msg>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0ef      	beq.n	80016ae <obd2_request+0x42>
			}
		}
		return (TRUE);
 80016ce:	2301      	movs	r3, #1
 80016d0:	e02a      	b.n	8001728 <obd2_request+0xbc>
	}
	else if(obd.used_protocol == OBD_PROTO_ISO9141 || OBD_PROTO_KWP2000_SLOW || OBD_PROTO_KWP2000_FAST)
	{
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 80016d2:	2301      	movs	r3, #1
 80016d4:	703b      	strb	r3, [r7, #0]
 80016d6:	7e7b      	ldrb	r3, [r7, #25]
 80016d8:	707b      	strb	r3, [r7, #1]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 80016da:	7e3b      	ldrb	r3, [r7, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d11b      	bne.n	8001718 <obd2_request+0xac>
		{
			while (!(kline_send_msg(tx_data_ISO)))
 80016e0:	e008      	b.n	80016f4 <obd2_request+0x88>
			{
			if(repeat < MAX_REQ_REPEAT)
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d803      	bhi.n	80016f0 <obd2_request+0x84>
			{
				repeat++;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	3301      	adds	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e001      	b.n	80016f4 <obd2_request+0x88>
			}
			else
			{
				return (FALSE);
 80016f0:	2300      	movs	r3, #0
 80016f2:	e019      	b.n	8001728 <obd2_request+0xbc>
			while (!(kline_send_msg(tx_data_ISO)))
 80016f4:	463b      	mov	r3, r7
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fdca 	bl	8001290 <kline_send_msg>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0ef      	beq.n	80016e2 <obd2_request+0x76>
			}
			}
			return (TRUE);
 8001702:	2301      	movs	r3, #1
 8001704:	e010      	b.n	8001728 <obd2_request+0xbc>
		}
		else
		{
			while (!(kwp2000_send_msg(tx_data_ISO)))
			{
			if(repeat < MAX_REQ_REPEAT)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b09      	cmp	r3, #9
 800170a:	d803      	bhi.n	8001714 <obd2_request+0xa8>
			{
				repeat++;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	3301      	adds	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e001      	b.n	8001718 <obd2_request+0xac>
			}
			else
			{
				return (FALSE);
 8001714:	2300      	movs	r3, #0
 8001716:	e007      	b.n	8001728 <obd2_request+0xbc>
			while (!(kwp2000_send_msg(tx_data_ISO)))
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fe58 	bl	80013d0 <kwp2000_send_msg>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ef      	beq.n	8001706 <obd2_request+0x9a>
			}
			}
			return (TRUE);
 8001726:	2301      	movs	r3, #1
		}
		return (FALSE);
	}
	return (FALSE);
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001732:	b004      	add	sp, #16
 8001734:	4770      	bx	lr
	...

08001738 <obd2_pid_parse>:
 * @brief	Extracts the value from received frame based on the PID of the response and its equation form ISO 15031-5
 * @param	*rx_frame	Pointer to the received frame
 * @retval  Value in float and human-readable format
 * */
float obd2_pid_parse(uint8_t* rx_frame)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3302      	adds	r3, #2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2ba6      	cmp	r3, #166	; 0xa6
 800174e:	f200 83b6 	bhi.w	8001ebe <obd2_pid_parse+0x786>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <obd2_pid_parse+0x20>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080019f5 	.word	0x080019f5
 800175c:	08001ebf 	.word	0x08001ebf
 8001760:	08001ebf 	.word	0x08001ebf
 8001764:	08001ebf 	.word	0x08001ebf
 8001768:	08001a03 	.word	0x08001a03
 800176c:	08001a0b 	.word	0x08001a0b
 8001770:	08001a21 	.word	0x08001a21
 8001774:	08001a21 	.word	0x08001a21
 8001778:	08001a21 	.word	0x08001a21
 800177c:	08001a21 	.word	0x08001a21
 8001780:	08001a27 	.word	0x08001a27
 8001784:	08001a43 	.word	0x08001a43
 8001788:	08001a57 	.word	0x08001a57
 800178c:	08001a7d 	.word	0x08001a7d
 8001790:	08001a91 	.word	0x08001a91
 8001794:	08001aab 	.word	0x08001aab
 8001798:	08001ac1 	.word	0x08001ac1
 800179c:	08001aeb 	.word	0x08001aeb
 80017a0:	08001ebf 	.word	0x08001ebf
 80017a4:	08001ebf 	.word	0x08001ebf
 80017a8:	08001af3 	.word	0x08001af3
 80017ac:	08001af3 	.word	0x08001af3
 80017b0:	08001af3 	.word	0x08001af3
 80017b4:	08001af3 	.word	0x08001af3
 80017b8:	08001af3 	.word	0x08001af3
 80017bc:	08001af3 	.word	0x08001af3
 80017c0:	08001af3 	.word	0x08001af3
 80017c4:	08001af3 	.word	0x08001af3
 80017c8:	08001ebf 	.word	0x08001ebf
 80017cc:	08001ebf 	.word	0x08001ebf
 80017d0:	08001ebf 	.word	0x08001ebf
 80017d4:	08001b11 	.word	0x08001b11
 80017d8:	08001b2f 	.word	0x08001b2f
 80017dc:	08001b11 	.word	0x08001b11
 80017e0:	08001b3d 	.word	0x08001b3d
 80017e4:	08001b6f 	.word	0x08001b6f
 80017e8:	08001b95 	.word	0x08001b95
 80017ec:	08001b95 	.word	0x08001b95
 80017f0:	08001b95 	.word	0x08001b95
 80017f4:	08001b95 	.word	0x08001b95
 80017f8:	08001b95 	.word	0x08001b95
 80017fc:	08001b95 	.word	0x08001b95
 8001800:	08001b95 	.word	0x08001b95
 8001804:	08001b95 	.word	0x08001b95
 8001808:	08001b9d 	.word	0x08001b9d
 800180c:	08001ba5 	.word	0x08001ba5
 8001810:	08001bab 	.word	0x08001bab
 8001814:	08001bab 	.word	0x08001bab
 8001818:	08001bb3 	.word	0x08001bb3
 800181c:	08001bc7 	.word	0x08001bc7
 8001820:	08001be5 	.word	0x08001be5
 8001824:	08001c0b 	.word	0x08001c0b
 8001828:	08001c1f 	.word	0x08001c1f
 800182c:	08001c1f 	.word	0x08001c1f
 8001830:	08001c1f 	.word	0x08001c1f
 8001834:	08001c1f 	.word	0x08001c1f
 8001838:	08001c1f 	.word	0x08001c1f
 800183c:	08001c1f 	.word	0x08001c1f
 8001840:	08001c1f 	.word	0x08001c1f
 8001844:	08001c1f 	.word	0x08001c1f
 8001848:	08001c27 	.word	0x08001c27
 800184c:	08001c27 	.word	0x08001c27
 8001850:	08001c27 	.word	0x08001c27
 8001854:	08001c27 	.word	0x08001c27
 8001858:	08001c53 	.word	0x08001c53
 800185c:	08001ebf 	.word	0x08001ebf
 8001860:	08001c61 	.word	0x08001c61
 8001864:	08001c8b 	.word	0x08001c8b
 8001868:	08001c93 	.word	0x08001c93
 800186c:	08001c9b 	.word	0x08001c9b
 8001870:	08001ca3 	.word	0x08001ca3
 8001874:	08001cb9 	.word	0x08001cb9
 8001878:	08001cb9 	.word	0x08001cb9
 800187c:	08001cb9 	.word	0x08001cb9
 8001880:	08001cb9 	.word	0x08001cb9
 8001884:	08001cb9 	.word	0x08001cb9
 8001888:	08001cb9 	.word	0x08001cb9
 800188c:	08001cc1 	.word	0x08001cc1
 8001890:	08001cc1 	.word	0x08001cc1
 8001894:	08001cdf 	.word	0x08001cdf
 8001898:	08001ebf 	.word	0x08001ebf
 800189c:	08001ebf 	.word	0x08001ebf
 80018a0:	08001cf3 	.word	0x08001cf3
 80018a4:	08001d15 	.word	0x08001d15
 80018a8:	08001d47 	.word	0x08001d47
 80018ac:	08001d6b 	.word	0x08001d6b
 80018b0:	08001d6b 	.word	0x08001d6b
 80018b4:	08001d6b 	.word	0x08001d6b
 80018b8:	08001d6b 	.word	0x08001d6b
 80018bc:	08001d71 	.word	0x08001d71
 80018c0:	08001d8f 	.word	0x08001d8f
 80018c4:	08001d8f 	.word	0x08001d8f
 80018c8:	08001d97 	.word	0x08001d97
 80018cc:	08001dad 	.word	0x08001dad
 80018d0:	08001db3 	.word	0x08001db3
 80018d4:	08001ebf 	.word	0x08001ebf
 80018d8:	08001ebf 	.word	0x08001ebf
 80018dc:	08001de5 	.word	0x08001de5
 80018e0:	08001de5 	.word	0x08001de5
 80018e4:	08001dfb 	.word	0x08001dfb
 80018e8:	08001e19 	.word	0x08001e19
 80018ec:	08001ebf 	.word	0x08001ebf
 80018f0:	08001e2f 	.word	0x08001e2f
 80018f4:	08001e37 	.word	0x08001e37
 80018f8:	08001e37 	.word	0x08001e37
 80018fc:	08001ebf 	.word	0x08001ebf
 8001900:	08001ebf 	.word	0x08001ebf
 8001904:	08001ebf 	.word	0x08001ebf
 8001908:	08001ebf 	.word	0x08001ebf
 800190c:	08001ebf 	.word	0x08001ebf
 8001910:	08001ebf 	.word	0x08001ebf
 8001914:	08001ebf 	.word	0x08001ebf
 8001918:	08001ebf 	.word	0x08001ebf
 800191c:	08001ebf 	.word	0x08001ebf
 8001920:	08001ebf 	.word	0x08001ebf
 8001924:	08001ebf 	.word	0x08001ebf
 8001928:	08001ebf 	.word	0x08001ebf
 800192c:	08001ebf 	.word	0x08001ebf
 8001930:	08001ebf 	.word	0x08001ebf
 8001934:	08001ebf 	.word	0x08001ebf
 8001938:	08001ebf 	.word	0x08001ebf
 800193c:	08001ebf 	.word	0x08001ebf
 8001940:	08001ebf 	.word	0x08001ebf
 8001944:	08001ebf 	.word	0x08001ebf
 8001948:	08001e4d 	.word	0x08001e4d
 800194c:	08001ebf 	.word	0x08001ebf
 8001950:	08001ebf 	.word	0x08001ebf
 8001954:	08001ebf 	.word	0x08001ebf
 8001958:	08001ebf 	.word	0x08001ebf
 800195c:	08001ebf 	.word	0x08001ebf
 8001960:	08001ebf 	.word	0x08001ebf
 8001964:	08001ebf 	.word	0x08001ebf
 8001968:	08001ebf 	.word	0x08001ebf
 800196c:	08001ebf 	.word	0x08001ebf
 8001970:	08001ebf 	.word	0x08001ebf
 8001974:	08001ebf 	.word	0x08001ebf
 8001978:	08001ebf 	.word	0x08001ebf
 800197c:	08001ebf 	.word	0x08001ebf
 8001980:	08001ebf 	.word	0x08001ebf
 8001984:	08001ebf 	.word	0x08001ebf
 8001988:	08001ebf 	.word	0x08001ebf
 800198c:	08001ebf 	.word	0x08001ebf
 8001990:	08001ebf 	.word	0x08001ebf
 8001994:	08001ebf 	.word	0x08001ebf
 8001998:	08001ebf 	.word	0x08001ebf
 800199c:	08001ebf 	.word	0x08001ebf
 80019a0:	08001ebf 	.word	0x08001ebf
 80019a4:	08001ebf 	.word	0x08001ebf
 80019a8:	08001ebf 	.word	0x08001ebf
 80019ac:	08001ebf 	.word	0x08001ebf
 80019b0:	08001ebf 	.word	0x08001ebf
 80019b4:	08001ebf 	.word	0x08001ebf
 80019b8:	08001ebf 	.word	0x08001ebf
 80019bc:	08001ebf 	.word	0x08001ebf
 80019c0:	08001ebf 	.word	0x08001ebf
 80019c4:	08001ebf 	.word	0x08001ebf
 80019c8:	08001ebf 	.word	0x08001ebf
 80019cc:	08001ebf 	.word	0x08001ebf
 80019d0:	08001ebf 	.word	0x08001ebf
 80019d4:	08001ebf 	.word	0x08001ebf
 80019d8:	08001ebf 	.word	0x08001ebf
 80019dc:	08001ebf 	.word	0x08001ebf
 80019e0:	08001ebf 	.word	0x08001ebf
 80019e4:	08001ebf 	.word	0x08001ebf
 80019e8:	08001ebf 	.word	0x08001ebf
 80019ec:	08001ebf 	.word	0x08001ebf
 80019f0:	08001e79 	.word	0x08001e79
	{
	case 0x00:
		obd2_pid_decode(rx_frame);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff fde1 	bl	80015bc <obd2_pid_decode>
		value = 0;
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
		break;
 8001a00:	e260      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
		break;
 8001a08:	e25c      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x05:
		value = rx_frame[3] - 40;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3b28      	subs	r3, #40	; 0x28
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a1e:	e251      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001a20:	4bb9      	ldr	r3, [pc, #740]	; (8001d08 <obd2_pid_parse+0x5d0>)
 8001a22:	60fb      	str	r3, [r7, #12]
		break;
 8001a24:	e24e      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a40:	e240      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0B:
		value = rx_frame[3];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3303      	adds	r3, #3
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a50:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a54:	e236      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	3204      	adds	r2, #4
 8001a62:	7812      	ldrb	r2, [r2, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da00      	bge.n	8001a6c <obd2_pid_parse+0x334>
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	109b      	asrs	r3, r3, #2
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a76:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a7a:	e223      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0D:
		value = rx_frame[3];
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3303      	adds	r3, #3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a8e:	e219      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3303      	adds	r3, #3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	3b40      	subs	r3, #64	; 0x40
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aa8:	e20c      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3303      	adds	r3, #3
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	3b28      	subs	r3, #40	; 0x28
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aba:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001abe:	e201      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	021b      	lsls	r3, r3, #8
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	3204      	adds	r2, #4
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	4a8e      	ldr	r2, [pc, #568]	; (8001d0c <obd2_pid_parse+0x5d4>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1152      	asrs	r2, r2, #5
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ae8:	e1ec      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
		break;
 8001af0:	e1e8      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3303      	adds	r3, #3
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4a84      	ldr	r2, [pc, #528]	; (8001d0c <obd2_pid_parse+0x5d4>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b0e:	e1d9      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3303      	adds	r3, #3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	3204      	adds	r2, #4
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b28:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b2c:	e1ca      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x20:
		obd2_pid_decode(rx_frame);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd44 	bl	80015bc <obd2_pid_decode>
		value = 0;
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
		break;
 8001b3a:	e1c3      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	3204      	adds	r2, #4
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fce9 	bl	8000524 <__aeabi_i2d>
 8001b52:	a36b      	add	r3, pc, #428	; (adr r3, 8001d00 <obd2_pid_parse+0x5c8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd4e 	bl	80005f8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f840 	bl	8000be8 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	60fb      	str	r3, [r7, #12]
		break;
 8001b6c:	e1aa      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3303      	adds	r3, #3
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	3204      	adds	r2, #4
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b92:	e197      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
		break;
 8001b9a:	e193      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
		break;
 8001ba2:	e18f      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001ba4:	4b58      	ldr	r3, [pc, #352]	; (8001d08 <obd2_pid_parse+0x5d0>)
 8001ba6:	60fb      	str	r3, [r7, #12]
		break;
 8001ba8:	e18c      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
		break;
 8001bb0:	e188      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x30:
		value = rx_frame[3];
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001bc4:	e17e      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3303      	adds	r3, #3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	3204      	adds	r2, #4
 8001bd2:	7812      	ldrb	r2, [r2, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001be2:	e16f      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3303      	adds	r3, #3
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3204      	adds	r2, #4
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	da00      	bge.n	8001bfa <obd2_pid_parse+0x4c2>
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	109b      	asrs	r3, r3, #2
 8001bfc:	ee07 3a90 	vmov	s15, r3
 8001c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c04:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c08:	e15c      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x33:
		value = rx_frame[3];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3303      	adds	r3, #3
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c18:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c1c:	e152      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
		break;
 8001c24:	e14e      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3303      	adds	r3, #3
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	3204      	adds	r2, #4
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	4a35      	ldr	r2, [pc, #212]	; (8001d0c <obd2_pid_parse+0x5d4>)
 8001c38:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3c:	1152      	asrs	r2, r2, #5
 8001c3e:	17db      	asrs	r3, r3, #31
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	3b28      	subs	r3, #40	; 0x28
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c50:	e138      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x40:
		obd2_pid_decode(rx_frame);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fcb2 	bl	80015bc <obd2_pid_decode>
		value = 0;
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
		break;
 8001c5e:	e131      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3303      	adds	r3, #3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	3204      	adds	r2, #4
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	4a27      	ldr	r2, [pc, #156]	; (8001d10 <obd2_pid_parse+0x5d8>)
 8001c72:	fb82 1203 	smull	r1, r2, r2, r3
 8001c76:	1192      	asrs	r2, r2, #6
 8001c78:	17db      	asrs	r3, r3, #31
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c88:	e11c      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
		break;
 8001c90:	e118      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
		break;
 8001c98:	e114      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
		break;
 8001ca0:	e110      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x46:
		value = rx_frame[3] - 40;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	3b28      	subs	r3, #40	; 0x28
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cb6:	e105      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
		break;
 8001cbe:	e101      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	3204      	adds	r2, #4
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cdc:	e0f2      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x4F:
		value = rx_frame[3];
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cec:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cf0:	e0e8      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
		break;
 8001cf8:	e0e4      	b.n	8001ec4 <obd2_pid_parse+0x78c>
 8001cfa:	bf00      	nop
 8001cfc:	f3af 8000 	nop.w
 8001d00:	10624dd3 	.word	0x10624dd3
 8001d04:	3fb43958 	.word	0x3fb43958
 8001d08:	c2c80000 	.word	0xc2c80000
 8001d0c:	51eb851f 	.word	0x51eb851f
 8001d10:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3303      	adds	r3, #3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	3204      	adds	r2, #4
 8001d20:	7812      	ldrb	r2, [r2, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fbfd 	bl	8000524 <__aeabi_i2d>
 8001d2a:	a373      	add	r3, pc, #460	; (adr r3, 8001ef8 <obd2_pid_parse+0x7c0>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc62 	bl	80005f8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe ff54 	bl	8000be8 <__aeabi_d2f>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
		break;
 8001d44:	e0be      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3303      	adds	r3, #3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	3204      	adds	r2, #4
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001d5a:	3b7f      	subs	r3, #127	; 0x7f
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d68:	e0ac      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <obd2_pid_parse+0x7b0>)
 8001d6c:	60fb      	str	r3, [r7, #12]
		break;
 8001d6e:	e0a9      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3303      	adds	r3, #3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	3204      	adds	r2, #4
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d8c:	e09a      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
		break;
 8001d94:	e096      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	3b28      	subs	r3, #40	; 0x28
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001daa:	e08b      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <obd2_pid_parse+0x7b4>)
 8001dae:	60fb      	str	r3, [r7, #12]
		break;
 8001db0:	e088      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3303      	adds	r3, #3
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3204      	adds	r2, #4
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fbae 	bl	8000524 <__aeabi_i2d>
 8001dc8:	a343      	add	r3, pc, #268	; (adr r3, 8001ed8 <obd2_pid_parse+0x7a0>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe fc13 	bl	80005f8 <__aeabi_dmul>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe ff05 	bl	8000be8 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	60fb      	str	r3, [r7, #12]
		break;
 8001de2:	e06f      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3303      	adds	r3, #3
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	3b7d      	subs	r3, #125	; 0x7d
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001df8:	e064      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3303      	adds	r3, #3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	3204      	adds	r2, #4
 8001e06:	7812      	ldrb	r2, [r2, #0]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	ee07 3a90 	vmov	s15, r3
 8001e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e12:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e16:	e055      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x64:
		value = rx_frame[3] - 125;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3303      	adds	r3, #3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3b7d      	subs	r3, #125	; 0x7d
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e2c:	e04a      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
		break;
 8001e34:	e046      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3303      	adds	r3, #3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	3b28      	subs	r3, #40	; 0x28
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e46:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e4a:	e03b      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3303      	adds	r3, #3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	3204      	adds	r2, #4
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <obd2_pid_parse+0x7b8>)
 8001e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e62:	1152      	asrs	r2, r2, #5
 8001e64:	17db      	asrs	r3, r3, #31
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	3b28      	subs	r3, #40	; 0x28
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001e76:	e025      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3303      	adds	r3, #3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	061a      	lsls	r2, r3, #24
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3305      	adds	r3, #5
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	4313      	orrs	r3, r2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	3206      	adds	r2, #6
 8001e98:	7812      	ldrb	r2, [r2, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb41 	bl	8000524 <__aeabi_i2d>
 8001ea2:	a30f      	add	r3, pc, #60	; (adr r3, 8001ee0 <obd2_pid_parse+0x7a8>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fba6 	bl	80005f8 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe98 	bl	8000be8 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]
		break;
 8001ebc:	e002      	b.n	8001ec4 <obd2_pid_parse+0x78c>
	default:
		value = 255;
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <obd2_pid_parse+0x7bc>)
 8001ec0:	60fb      	str	r3, [r7, #12]
		break;
 8001ec2:	bf00      	nop
	}
	return (value);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	f3af 8000 	nop.w
 8001ed8:	9999999a 	.word	0x9999999a
 8001edc:	3fa99999 	.word	0x3fa99999
 8001ee0:	9999999a 	.word	0x9999999a
 8001ee4:	3fb99999 	.word	0x3fb99999
 8001ee8:	c2c80000 	.word	0xc2c80000
 8001eec:	c3520000 	.word	0xc3520000
 8001ef0:	51eb851f 	.word	0x51eb851f
 8001ef4:	437f0000 	.word	0x437f0000
 8001ef8:	47ae147b 	.word	0x47ae147b
 8001efc:	3f747ae1 	.word	0x3f747ae1

08001f00 <obd2_init>:
 * @brief 	Initializes communication with the vehicle - ISO 9141, ISO 14230 and ISO 15765
 * @param	None
 * @retval	Initialized obd_protocol
 * */
obd_protocol obd2_init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = kline_init();
 8001f06:	f7ff f877 	bl	8000ff8 <kline_init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10c      	bne.n	8001f2e <obd2_init+0x2e>
	{
		used_protocol = kwp2000_fast_init();
 8001f14:	f7ff f900 	bl	8001118 <kwp2000_fast_init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <obd2_init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001f22:	2304      	movs	r3, #4
 8001f24:	71fb      	strb	r3, [r7, #7]
			MX_CAN1_Init();
 8001f26:	f000 f817 	bl	8001f58 <MX_CAN1_Init>
			can_config();
 8001f2a:	f000 f89f 	bl	800206c <can_config>
		}
	}
	return (used_protocol);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	return (PID_LUT[pid][0]);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <PID_Get_Lenght+0x1c>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	0800e078 	.word	0x0800e078

08001f58 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <MX_CAN1_Init+0x68>)
 8001f60:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f64:	2210      	movs	r2, #16
 8001f66:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001f7a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_CAN1_Init+0x64>)
 8001fa8:	f002 fc8e 	bl	80048c8 <HAL_CAN_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001fb2:	f000 fd38 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000224 	.word	0x20000224
 8001fc0:	40006400 	.word	0x40006400

08001fc4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	; (8002060 <HAL_CAN_MspInit+0x9c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d138      	bne.n	8002058 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffe:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_CAN_MspInit+0xa0>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002016:	f44f 7340 	mov.w	r3, #768	; 0x300
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002028:	2309      	movs	r3, #9
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <HAL_CAN_MspInit+0xa4>)
 8002034:	f003 feca 	bl	8005dcc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002038:	2200      	movs	r2, #0
 800203a:	2100      	movs	r1, #0
 800203c:	2014      	movs	r0, #20
 800203e:	f003 fb78 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002042:	2014      	movs	r0, #20
 8002044:	f003 fb91 	bl	800576a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	2015      	movs	r0, #21
 800204e:	f003 fb70 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002052:	2015      	movs	r0, #21
 8002054:	f003 fb89 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	; 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40006400 	.word	0x40006400
 8002064:	40021000 	.word	0x40021000
 8002068:	48000400 	.word	0x48000400

0800206c <can_config>:
  }
}

/* USER CODE BEGIN 1 */
void can_config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 800207e:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8002082:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8002088:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800208c:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8002096:	2301      	movs	r3, #1
 8002098:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	480c      	ldr	r0, [pc, #48]	; (80020d0 <can_config+0x64>)
 80020a0:	f002 fd0d 	bl	8004abe <HAL_CAN_ConfigFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <can_config+0x42>
	{
		Error_Handler();
 80020aa:	f000 fcbc 	bl	8002a26 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <can_config+0x64>)
 80020b0:	f002 fdcf 	bl	8004c52 <HAL_CAN_Start>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <can_config+0x52>
	{
		Error_Handler();
 80020ba:	f000 fcb4 	bl	8002a26 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80020be:	2102      	movs	r1, #2
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <can_config+0x64>)
 80020c2:	f002 ffec 	bl	800509e <HAL_CAN_ActivateNotification>
}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000224 	.word	0x20000224

080020d4 <can_send_msg>:
 * @brief	Sends a message via ISO 15765 CAN
 * @param	*tx_frame	Pointer to the requested TX frame
 * @retval	TRUE if valid message has been received, else FALSE
 * */
uint8_t can_send_msg(uint8_t *tx_frame)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = 0x7DF;
 80020dc:	f240 73df 	movw	r3, #2015	; 0x7df
 80020e0:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 80020e2:	2308      	movs	r3, #8
 80020e4:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

	obd_comm.msg_type = 1;
 80020ee:	4b1b      	ldr	r3, [pc, #108]	; (800215c <can_send_msg+0x88>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	HAL_TIM_Base_Start_IT(MSG_TIMER);
 80020f6:	481a      	ldr	r0, [pc, #104]	; (8002160 <can_send_msg+0x8c>)
 80020f8:	f005 fad0 	bl	800769c <HAL_TIM_Base_Start_IT>
	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 80020fc:	f107 0108 	add.w	r1, r7, #8
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <can_send_msg+0x90>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	4818      	ldr	r0, [pc, #96]	; (8002168 <can_send_msg+0x94>)
 8002106:	f002 fde8 	bl	8004cda <HAL_CAN_AddTxMessage>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <can_send_msg+0x44>
	{
		Error_Handler();
 8002110:	f000 fc89 	bl	8002a26 <Error_Handler>
	}
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8002114:	e000      	b.n	8002118 <can_send_msg+0x44>
	{
		__NOP();
 8002116:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8002118:	4b10      	ldr	r3, [pc, #64]	; (800215c <can_send_msg+0x88>)
 800211a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <can_send_msg+0x58>
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <can_send_msg+0x88>)
 8002124:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002128:	2b01      	cmp	r3, #1
 800212a:	d1f4      	bne.n	8002116 <can_send_msg+0x42>
	}
	if(obd_comm.timeout == 1)
 800212c:	4b0b      	ldr	r3, [pc, #44]	; (800215c <can_send_msg+0x88>)
 800212e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <can_send_msg+0x6e>
	{
		obd_comm.timeout = 0;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <can_send_msg+0x88>)
 8002138:	2200      	movs	r2, #0
 800213a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		return (FALSE);
 800213e:	2300      	movs	r3, #0
 8002140:	e008      	b.n	8002154 <can_send_msg+0x80>
	}
	obd_comm.current_value = obd2_pid_parse(rx_mailbox);
 8002142:	480a      	ldr	r0, [pc, #40]	; (800216c <can_send_msg+0x98>)
 8002144:	f7ff faf8 	bl	8001738 <obd2_pid_parse>
 8002148:	eef0 7a40 	vmov.f32	s15, s0
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <can_send_msg+0x88>)
 800214e:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	return (TRUE);
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000304 	.word	0x20000304
 8002160:	200004b4 	.word	0x200004b4
 8002164:	20000218 	.word	0x20000218
 8002168:	20000224 	.word	0x20000224
 800216c:	2000021c 	.word	0x2000021c

08002170 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @brief	CAN receive callback function
 * @param	hcan	CAN handle
 * @retval	None
 * */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;

	obd_comm.msg_type = 0;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800217a:	2200      	movs	r2, #0
 800217c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_mailbox);
 8002180:	f107 020c 	add.w	r2, r7, #12
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002186:	2100      	movs	r1, #0
 8002188:	4806      	ldr	r0, [pc, #24]	; (80021a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800218a:	f002 fe76 	bl	8004e7a <HAL_CAN_GetRxMessage>

	HAL_TIM_Base_Stop_IT(MSG_TIMER);
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002190:	f005 fad8 	bl	8007744 <HAL_TIM_Base_Stop_IT>

//	HAL_IWDG_Refresh(&hiwdg);
}
 8002194:	bf00      	nop
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000304 	.word	0x20000304
 80021a0:	2000021c 	.word	0x2000021c
 80021a4:	20000224 	.word	0x20000224
 80021a8:	200004b4 	.word	0x200004b4

080021ac <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2210      	movs	r2, #16
 80021ba:	60da      	str	r2, [r3, #12]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021ce:	463b      	mov	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <MX_ADC1_Init+0xbc>)
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <MX_ADC1_Init+0xc0>)
 80021e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <MX_ADC1_Init+0xbc>)
 80021e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <MX_ADC1_Init+0xbc>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <MX_ADC1_Init+0xbc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <MX_ADC1_Init+0xbc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002200:	2204      	movs	r2, #4
 8002202:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002206:	2200      	movs	r2, #0
 8002208:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_ADC1_Init+0xbc>)
 800220c:	2201      	movs	r2, #1
 800220e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002212:	2201      	movs	r2, #1
 8002214:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002216:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <MX_ADC1_Init+0xbc>)
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002234:	2200      	movs	r2, #0
 8002236:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_ADC1_Init+0xbc>)
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002240:	4810      	ldr	r0, [pc, #64]	; (8002284 <MX_ADC1_Init+0xbc>)
 8002242:	f001 fe19 	bl	8003e78 <HAL_ADC_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800224c:	f000 fbeb 	bl	8002a26 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_ADC1_Init+0xc4>)
 8002252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002254:	2306      	movs	r3, #6
 8002256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800225c:	237f      	movs	r3, #127	; 0x7f
 800225e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002260:	2304      	movs	r3, #4
 8002262:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_ADC1_Init+0xbc>)
 800226e:	f001 ff4b 	bl	8004108 <HAL_ADC_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002278:	f000 fbd5 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000024c 	.word	0x2000024c
 8002288:	50040000 	.word	0x50040000
 800228c:	3ac04000 	.word	0x3ac04000

08002290 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0a0      	sub	sp, #128	; 0x80
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	225c      	movs	r2, #92	; 0x5c
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f007 fb05 	bl	80098c0 <memset>
  if(adcHandle->Instance==ADC1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a3a      	ldr	r2, [pc, #232]	; (80023a4 <HAL_ADC_MspInit+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d16d      	bne.n	800239c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80022c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80022c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80022ca:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80022cc:	2303      	movs	r3, #3
 80022ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80022d4:	2308      	movs	r3, #8
 80022d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80022d8:	2307      	movs	r3, #7
 80022da:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80022dc:	2302      	movs	r3, #2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80022e0:	2302      	movs	r3, #2
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80022e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fe72 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80022fa:	f000 fb94 	bl	8002a26 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002302:	4a29      	ldr	r2, [pc, #164]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 8002304:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_ADC_MspInit+0x118>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 800232e:	2320      	movs	r3, #32
 8002330:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002332:	230b      	movs	r3, #11
 8002334:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233e:	4619      	mov	r1, r3
 8002340:	481a      	ldr	r0, [pc, #104]	; (80023ac <HAL_ADC_MspInit+0x11c>)
 8002342:	f003 fd43 	bl	8005dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002348:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_ADC_MspInit+0x124>)
 800234a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 800234e:	2200      	movs	r2, #0
 8002350:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002354:	2200      	movs	r2, #0
 8002356:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002358:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 800235a:	2200      	movs	r2, #0
 800235c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 800236e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002372:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002380:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002382:	f003 fa1b 	bl	80057bc <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800238c:	f000 fb4b 	bl	8002a26 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
 8002396:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_ADC_MspInit+0x120>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800239c:	bf00      	nop
 800239e:	3780      	adds	r7, #128	; 0x80
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	50040000 	.word	0x50040000
 80023a8:	40021000 	.word	0x40021000
 80023ac:	48000800 	.word	0x48000800
 80023b0:	200002b0 	.word	0x200002b0
 80023b4:	40020008 	.word	0x40020008

080023b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_DMA_Init+0x58>)
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <MX_DMA_Init+0x58>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6493      	str	r3, [r2, #72]	; 0x48
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_DMA_Init+0x58>)
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	200b      	movs	r0, #11
 80023dc:	f003 f9a9 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023e0:	200b      	movs	r0, #11
 80023e2:	f003 f9c2 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	200f      	movs	r0, #15
 80023ec:	f003 f9a1 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80023f0:	200f      	movs	r0, #15
 80023f2:	f003 f9ba 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2010      	movs	r0, #16
 80023fc:	f003 f999 	bl	8005732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002400:	2010      	movs	r0, #16
 8002402:	f003 f9b2 	bl	800576a <HAL_NVIC_EnableIRQ>

}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40021000 	.word	0x40021000

08002414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800242a:	4b45      	ldr	r3, [pc, #276]	; (8002540 <MX_GPIO_Init+0x12c>)
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242e:	4a44      	ldr	r2, [pc, #272]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002436:	4b42      	ldr	r3, [pc, #264]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <MX_GPIO_Init+0x12c>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	4a38      	ldr	r2, [pc, #224]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002466:	4b36      	ldr	r3, [pc, #216]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002472:	4b33      	ldr	r3, [pc, #204]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a32      	ldr	r2, [pc, #200]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247e:	4b30      	ldr	r3, [pc, #192]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <MX_GPIO_Init+0x12c>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	4a2c      	ldr	r2, [pc, #176]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <MX_GPIO_Init+0x12c>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 80024a2:	2200      	movs	r2, #0
 80024a4:	210c      	movs	r1, #12
 80024a6:	4827      	ldr	r0, [pc, #156]	; (8002544 <MX_GPIO_Init+0x130>)
 80024a8:	f003 fee4 	bl	8006274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80024b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b6:	f003 fedd 	bl	8006274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2104      	movs	r1, #4
 80024be:	4822      	ldr	r0, [pc, #136]	; (8002548 <MX_GPIO_Init+0x134>)
 80024c0:	f003 fed8 	bl	8006274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 80024c4:	230c      	movs	r3, #12
 80024c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	481a      	ldr	r0, [pc, #104]	; (8002544 <MX_GPIO_Init+0x130>)
 80024dc:	f003 fc76 	bl	8005dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 80024e0:	2350      	movs	r3, #80	; 0x50
 80024e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f6:	f003 fc69 	bl	8005dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 80024fa:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80024fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002500:	2301      	movs	r3, #1
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002516:	f003 fc59 	bl	8005dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 800251a:	2304      	movs	r3, #4
 800251c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800251e:	2301      	movs	r3, #1
 8002520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_GPIO_Init+0x134>)
 8002532:	f003 fc4b 	bl	8005dcc <HAL_GPIO_Init>

}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40021000 	.word	0x40021000
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00

0800254c <acquire_vehicle_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void acquire_vehicle_data(float buffer[][2], float buffer_old[][2])
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0b5      	sub	sp, #212	; 0xd4
 8002550:	af30      	add	r7, sp, #192	; 0xc0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	uint8_t pids [3] = {0x5, 0xc, 0xd};
 8002556:	4a31      	ldr	r2, [pc, #196]	; (800261c <acquire_vehicle_data+0xd0>)
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	4611      	mov	r1, r2
 8002560:	8019      	strh	r1, [r3, #0]
 8002562:	3302      	adds	r3, #2
 8002564:	0c12      	lsrs	r2, r2, #16
 8002566:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(pids); i++)
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e04d      	b.n	800260a <acquire_vehicle_data+0xbe>
	{
		obd_comm.pid = pids[i];
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	3310      	adds	r3, #16
 8002572:	443b      	add	r3, r7
 8002574:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <acquire_vehicle_data+0xd4>)
 800257a:	705a      	strb	r2, [r3, #1]
		obd2_request(obd_comm);
 800257c:	4c28      	ldr	r4, [pc, #160]	; (8002620 <acquire_vehicle_data+0xd4>)
 800257e:	4668      	mov	r0, sp
 8002580:	f104 0310 	add.w	r3, r4, #16
 8002584:	22c0      	movs	r2, #192	; 0xc0
 8002586:	4619      	mov	r1, r3
 8002588:	f007 f98c 	bl	80098a4 <memcpy>
 800258c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002590:	f7ff f86c 	bl	800166c <obd2_request>
		if(obd2_request(obd_comm))
 8002594:	4c22      	ldr	r4, [pc, #136]	; (8002620 <acquire_vehicle_data+0xd4>)
 8002596:	4668      	mov	r0, sp
 8002598:	f104 0310 	add.w	r3, r4, #16
 800259c:	22c0      	movs	r2, #192	; 0xc0
 800259e:	4619      	mov	r1, r3
 80025a0:	f007 f980 	bl	80098a4 <memcpy>
 80025a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025a8:	f7ff f860 	bl	800166c <obd2_request>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d014      	beq.n	80025dc <acquire_vehicle_data+0x90>
		{
			buffer[i][0] = obd_comm.pid;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <acquire_vehicle_data+0xd4>)
 80025b4:	7859      	ldrb	r1, [r3, #1]
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	ee07 1a90 	vmov	s15, r1
 80025c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c6:	edc3 7a00 	vstr	s15, [r3]
			buffer[i][1] = obd_comm.current_value;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a13      	ldr	r2, [pc, #76]	; (8002620 <acquire_vehicle_data+0xd4>)
 80025d4:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	e013      	b.n	8002604 <acquire_vehicle_data+0xb8>
		}
		else
		{
			buffer[i][0] = buffer_old[i][0];
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	441a      	add	r2, r3
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	440b      	add	r3, r1
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	601a      	str	r2, [r3, #0]
			buffer[i][1] = buffer_old[i][1];
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	441a      	add	r2, r3
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	440b      	add	r3, r1
 8002600:	6852      	ldr	r2, [r2, #4]
 8002602:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < sizeof(pids); i++)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	3301      	adds	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d9ae      	bls.n	800256e <acquire_vehicle_data+0x22>
		}
	}
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}
 800261a:	bf00      	nop
 800261c:	0800dea8 	.word	0x0800dea8
 8002620:	20000304 	.word	0x20000304

08002624 <create_json>:

static void create_json(char buff[1000], float array[][2], float array_cpy[][2], int num_of_values)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b0a5      	sub	sp, #148	; 0x94
 8002628:	af02      	add	r7, sp, #8
 800262a:	6178      	str	r0, [r7, #20]
 800262c:	6139      	str	r1, [r7, #16]
 800262e:	60fa      	str	r2, [r7, #12]
 8002630:	60bb      	str	r3, [r7, #8]
    char json_string [10] = "{\n";
 8002632:	f640 237b 	movw	r3, #2683	; 0xa7b
 8002636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002638:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	809a      	strh	r2, [r3, #4]
    char temp[100];
    sprintf(buff, json_string);
 8002642:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002646:	4619      	mov	r1, r3
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f007 fdab 	bl	800a1a4 <siprintf>
    for (uint8_t i = 0; i <= num_of_values - 1; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002654:	e06b      	b.n	800272e <create_json+0x10a>
    {
        if(i == num_of_values - 1)
 8002656:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	429a      	cmp	r2, r3
 8002660:	d121      	bne.n	80026a6 <create_json+0x82>
        {
        	sprintf(temp, "\"0x%x\":%.2f}\n", (uint8_t)array[i][0], array[i][1]);
 8002662:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002674:	edc7 7a01 	vstr	s15, [r7, #4]
 8002678:	793b      	ldrb	r3, [r7, #4]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461c      	mov	r4, r3
 800267e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4413      	add	r3, r2
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff5c 	bl	8000548 <__aeabi_f2d>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	f107 0018 	add.w	r0, r7, #24
 8002698:	e9cd 2300 	strd	r2, r3, [sp]
 800269c:	4622      	mov	r2, r4
 800269e:	4929      	ldr	r1, [pc, #164]	; (8002744 <create_json+0x120>)
 80026a0:	f007 fd80 	bl	800a1a4 <siprintf>
 80026a4:	e020      	b.n	80026e8 <create_json+0xc4>
        }
        else
        {
        	sprintf(temp, "\"0x%x\":%.2f,\n", (uint8_t)array[i][0], array[i][1]);
 80026a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80026bc:	793b      	ldrb	r3, [r7, #4]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461c      	mov	r4, r3
 80026c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd ff3a 	bl	8000548 <__aeabi_f2d>
 80026d4:	4602      	mov	r2, r0
 80026d6:	460b      	mov	r3, r1
 80026d8:	f107 0018 	add.w	r0, r7, #24
 80026dc:	e9cd 2300 	strd	r2, r3, [sp]
 80026e0:	4622      	mov	r2, r4
 80026e2:	4919      	ldr	r1, [pc, #100]	; (8002748 <create_json+0x124>)
 80026e4:	f007 fd5e 	bl	800a1a4 <siprintf>
        }
        strcat(buff, temp);
 80026e8:	f107 0318 	add.w	r3, r7, #24
 80026ec:	4619      	mov	r1, r3
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f007 fd78 	bl	800a1e4 <strcat>
        array_cpy[i][0] = array[i][0];
 80026f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	441a      	add	r2, r3
 80026fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	440b      	add	r3, r1
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	601a      	str	r2, [r3, #0]
        array_cpy[i][1] = array[i][1];
 800270c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	441a      	add	r2, r3
 8002716:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	440b      	add	r3, r1
 8002720:	6852      	ldr	r2, [r2, #4]
 8002722:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i <= num_of_values - 1; i++)
 8002724:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002728:	3301      	adds	r3, #1
 800272a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800272e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	429a      	cmp	r2, r3
 8002736:	dc8e      	bgt.n	8002656 <create_json+0x32>
    }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	378c      	adds	r7, #140	; 0x8c
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	bf00      	nop
 8002744:	0800deac 	.word	0x0800deac
 8002748:	0800debc 	.word	0x0800debc

0800274c <acquire_position>:

static void acquire_position(char buff[1000])
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
	if(get_position())
 8002754:	f001 f874 	bl	8003840 <get_position>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d013      	beq.n	8002786 <acquire_position+0x3a>
	{
		double lat = pos.latitude;
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <acquire_position+0x44>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double lon = pos.longitude;
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <acquire_position+0x44>)
 800276a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800276e:	e9c7 2302 	strd	r2, r3, [r7, #8]

		sprintf(buff, "{\"lat\":%f,\"lon\":%f}\n",lat, lon);
 8002772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002776:	e9cd 2300 	strd	r2, r3, [sp]
 800277a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800277e:	4905      	ldr	r1, [pc, #20]	; (8002794 <acquire_position+0x48>)
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f007 fd0f 	bl	800a1a4 <siprintf>
	}
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200003e0 	.word	0x200003e0
 8002794:	0800decc 	.word	0x0800decc

08002798 <mqtt_start>:

static uint8_t mqtt_start(BG77 module)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	1d3b      	adds	r3, r7, #4
 80027a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	module.mqtt_status = mqtt_open(MQTT_IP,  MQTT_PORT, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f240 715b 	movw	r1, #1883	; 0x75b
 80027aa:	480f      	ldr	r0, [pc, #60]	; (80027e8 <mqtt_start+0x50>)
 80027ac:	f000 fec0 	bl	8003530 <mqtt_open>
 80027b0:	4603      	mov	r3, r0
 80027b2:	737b      	strb	r3, [r7, #13]
	if(module.mqtt_status != 0)
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <mqtt_start+0x26>
	{
		return (FALSE);
 80027ba:	2300      	movs	r3, #0
 80027bc:	e00f      	b.n	80027de <mqtt_start+0x46>
	}
	HAL_Delay(10000);
 80027be:	f242 7010 	movw	r0, #10000	; 0x2710
 80027c2:	f001 f9a9 	bl	8003b18 <HAL_Delay>
	if(mqtt_connect(0,"obd10h", &module))
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	461a      	mov	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <mqtt_start+0x54>)
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 ff3b 	bl	8003648 <mqtt_connect>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <mqtt_start+0x44>
	{
		return (TRUE);
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <mqtt_start+0x46>
	}
	return (TRUE);
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	0800dee4 	.word	0x0800dee4
 80027ec:	0800def4 	.word	0x0800def4

080027f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	f5ad 6d69 	sub.w	sp, sp, #3728	; 0xe90
 80027f6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	float obd_buf[99][2];
	float obd_buf_cpy[99][2];
	char buffer[1000];
	char gnss_buffer[1000];
	uint16_t adc_buffer[64] = {0};
 80027f8:	f607 6388 	addw	r3, r7, #3720	; 0xe88
 80027fc:	f6a3 6388 	subw	r3, r3, #3720	; 0xe88
 8002800:	4618      	mov	r0, r3
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	461a      	mov	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f007 f85a 	bl	80098c0 <memset>
	uint32_t timer = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 3e84 	str.w	r3, [r7, #3716]	; 0xe84
	uint32_t timer_adc = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3e80 	str.w	r3, [r7, #3712]	; 0xe80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002818:	f001 f90a 	bl	8003a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800281c:	f000 f8b4 	bl	8002988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002820:	f7ff fdf8 	bl	8002414 <MX_GPIO_Init>
  MX_DMA_Init();
 8002824:	f7ff fdc8 	bl	80023b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002828:	f7ff fcce 	bl	80021c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800282c:	f000 fbbc 	bl	8002fa8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002830:	f000 fbee 	bl	8003010 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002834:	f000 fa7c 	bl	8002d30 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002838:	f000 fab2 	bl	8002da0 <MX_TIM7_Init>
  MX_TIM16_Init();
 800283c:	f000 fae8 	bl	8002e10 <MX_TIM16_Init>
//		  obd_comm.voltage = measure_avg_voltage(adc_buffer);
//		  timer_adc = HAL_GetTick();
//	  }
//  }

  while(!module.initialized)
 8002840:	e006      	b.n	8002850 <main+0x60>
  {
	  module.initialized = module_init(&module);
 8002842:	484a      	ldr	r0, [pc, #296]	; (800296c <main+0x17c>)
 8002844:	f000 fdce 	bl	80033e4 <module_init>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <main+0x17c>)
 800284e:	70da      	strb	r2, [r3, #3]
  while(!module.initialized)
 8002850:	4b46      	ldr	r3, [pc, #280]	; (800296c <main+0x17c>)
 8002852:	78db      	ldrb	r3, [r3, #3]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f4      	beq.n	8002842 <main+0x52>
//  while(!module.gps)
//  {
//
//  }

  obd_comm.used_protocol = obd2_init();
 8002858:	f7ff fb52 	bl	8001f00 <obd2_init>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <main+0x180>)
 8002862:	701a      	strb	r2, [r3, #0]

  acquire_vehicle_data(obd_buf, obd_buf_cpy);
 8002864:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8002868:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 800286c:	4611      	mov	r1, r2
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fe6c 	bl	800254c <acquire_vehicle_data>

  create_json(buffer, obd_buf, obd_buf_cpy,3);
 8002874:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8002878:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800287c:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 8002880:	2303      	movs	r3, #3
 8002882:	f7ff fecf 	bl	8002624 <create_json>

  if(module.gps)
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <main+0x17c>)
 8002888:	7a9b      	ldrb	r3, [r3, #10]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <main+0xa8>
  {
	  acquire_position(gnss_buffer);
 800288e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff5a 	bl	800274c <acquire_position>
  }

  send_command("AT+QGPS=0\r\n","OK", DEFAULT_TIMEOUT, NB);
 8002898:	4b36      	ldr	r3, [pc, #216]	; (8002974 <main+0x184>)
 800289a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800289e:	4936      	ldr	r1, [pc, #216]	; (8002978 <main+0x188>)
 80028a0:	4836      	ldr	r0, [pc, #216]	; (800297c <main+0x18c>)
 80028a2:	f000 fdd3 	bl	800344c <send_command>

  module.connected = mqtt_start(module);
 80028a6:	4b31      	ldr	r3, [pc, #196]	; (800296c <main+0x17c>)
 80028a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ac:	f7ff ff74 	bl	8002798 <mqtt_start>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <main+0x17c>)
 80028b6:	709a      	strb	r2, [r3, #2]
//  while(!module.connected)
//  {
//
//  }

  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 80028b8:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <main+0x190>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2000      	movs	r0, #0
 80028ca:	f000 ff5d 	bl	8003788 <mqtt_publish>

  if(module.gps)
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <main+0x17c>)
 80028d0:	7a9b      	ldrb	r3, [r3, #10]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <main+0xfc>
  {
	  mqtt_publish(0,0,0,0,GPS_TOPIC, gnss_buffer);
 80028d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	4b29      	ldr	r3, [pc, #164]	; (8002984 <main+0x194>)
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2300      	movs	r3, #0
 80028e2:	2200      	movs	r2, #0
 80028e4:	2100      	movs	r1, #0
 80028e6:	2000      	movs	r0, #0
 80028e8:	f000 ff4e 	bl	8003788 <mqtt_publish>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer) >= 5000)
 80028ec:	f001 f908 	bl	8003b00 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f8d7 3e84 	ldr.w	r3, [r7, #3716]	; 0xe84
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3287 	movw	r2, #4999	; 0x1387
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d9f5      	bls.n	80028ec <main+0xfc>
	  {
		  acquire_vehicle_data(obd_buf, obd_buf_cpy);
 8002900:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8002904:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fe1e 	bl	800254c <acquire_vehicle_data>
		  create_json(buffer, obd_buf, obd_buf_cpy,3);
 8002910:	f507 6205 	add.w	r2, r7, #2128	; 0x850
 8002914:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8002918:	f507 608d 	add.w	r0, r7, #1128	; 0x468
 800291c:	2303      	movs	r3, #3
 800291e:	f7ff fe81 	bl	8002624 <create_json>
		  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 8002922:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <main+0x190>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	2000      	movs	r0, #0
 8002934:	f000 ff28 	bl	8003788 <mqtt_publish>
		  if(module.gps)
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <main+0x17c>)
 800293a:	7a9b      	ldrb	r3, [r3, #10]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00f      	beq.n	8002960 <main+0x170>
		  {
			  acquire_position(gnss_buffer);
 8002940:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff01 	bl	800274c <acquire_position>
			  mqtt_publish(0,0,0,0,GPS_TOPIC, gnss_buffer);
 800294a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <main+0x194>)
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	2000      	movs	r0, #0
 800295c:	f000 ff14 	bl	8003788 <mqtt_publish>
		  }
//		  obd_comm.voltage = measure_avg_voltagee_avg_voltage(adc_buffer);
		  timer = HAL_GetTick();
 8002960:	f001 f8ce 	bl	8003b00 <HAL_GetTick>
 8002964:	f8c7 0e84 	str.w	r0, [r7, #3716]	; 0xe84
	  if((HAL_GetTick() - timer) >= 5000)
 8002968:	e7c0      	b.n	80028ec <main+0xfc>
 800296a:	bf00      	nop
 800296c:	200003d4 	.word	0x200003d4
 8002970:	20000304 	.word	0x20000304
 8002974:	20000584 	.word	0x20000584
 8002978:	0800defc 	.word	0x0800defc
 800297c:	0800df00 	.word	0x0800df00
 8002980:	0800df0c 	.word	0x0800df0c
 8002984:	0800df18 	.word	0x0800df18

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b096      	sub	sp, #88	; 0x58
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	2244      	movs	r2, #68	; 0x44
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f006 ff92 	bl	80098c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	463b      	mov	r3, r7
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029ae:	f003 fc87 	bl	80062c0 <HAL_PWREx_ControlVoltageScaling>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029b8:	f000 f835 	bl	8002a26 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029bc:	2301      	movs	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c6:	2302      	movs	r3, #2
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029ca:	2303      	movs	r3, #3
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029ce:	2301      	movs	r3, #1
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80029d2:	230a      	movs	r3, #10
 80029d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029d6:	2307      	movs	r3, #7
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029da:	2302      	movs	r3, #2
 80029dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029de:	2302      	movs	r3, #2
 80029e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fcc0 	bl	800636c <HAL_RCC_OscConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80029f2:	f000 f818 	bl	8002a26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f6:	230f      	movs	r3, #15
 80029f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fa:	2303      	movs	r3, #3
 80029fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 f8c0 	bl	8006b94 <HAL_RCC_ClockConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002a1a:	f000 f804 	bl	8002a26 <Error_Handler>
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3758      	adds	r7, #88	; 0x58
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2a:	b672      	cpsid	i
}
 8002a2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <Error_Handler+0x8>

08002a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_MspInit+0x44>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_MspInit+0x44>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6613      	str	r3, [r2, #96]	; 0x60
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_MspInit+0x44>)
 8002a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_MspInit+0x44>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_MspInit+0x44>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_MspInit+0x44>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <NMI_Handler+0x4>

08002a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a82:	e7fe      	b.n	8002a82 <HardFault_Handler+0x4>

08002a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a88:	e7fe      	b.n	8002a88 <MemManage_Handler+0x4>

08002a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8e:	e7fe      	b.n	8002a8e <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	e7fe      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac4:	f001 f808 	bl	8003ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <DMA1_Channel1_IRQHandler+0x10>)
 8002ad2:	f003 f89c 	bl	8005c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200002b0 	.word	0x200002b0

08002ae0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <DMA1_Channel5_IRQHandler+0x10>)
 8002ae6:	f003 f892 	bl	8005c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000608 	.word	0x20000608

08002af4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <DMA1_Channel6_IRQHandler+0x10>)
 8002afa:	f003 f888 	bl	8005c0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000650 	.word	0x20000650

08002b08 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <CAN1_RX0_IRQHandler+0x10>)
 8002b0e:	f002 faec 	bl	80050ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000224 	.word	0x20000224

08002b1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b22:	f004 fe3e 	bl	80077a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200004b4 	.word	0x200004b4

08002b30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <USART1_IRQHandler+0x10>)
 8002b36:	f005 fafb 	bl	8008130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000500 	.word	0x20000500

08002b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <USART2_IRQHandler+0x10>)
 8002b4a:	f005 faf1 	bl	8008130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000584 	.word	0x20000584

08002b58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM6_DAC_IRQHandler+0x10>)
 8002b5e:	f004 fe20 	bl	80077a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2000041c 	.word	0x2000041c

08002b6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <TIM7_IRQHandler+0x10>)
 8002b72:	f004 fe16 	bl	80077a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000468 	.word	0x20000468

08002b80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
	return 1;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_kill>:

int _kill(int pid, int sig)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b9a:	f006 fe59 	bl	8009850 <__errno>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2216      	movs	r2, #22
 8002ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_exit>:

void _exit (int status)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ffe7 	bl	8002b90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bc2:	e7fe      	b.n	8002bc2 <_exit+0x12>

08002bc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e00a      	b.n	8002bec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bd6:	f3af 8000 	nop.w
 8002bda:	4601      	mov	r1, r0
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	60ba      	str	r2, [r7, #8]
 8002be2:	b2ca      	uxtb	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbf0      	blt.n	8002bd6 <_read+0x12>
	}

return len;
 8002bf4:	687b      	ldr	r3, [r7, #4]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e009      	b.n	8002c24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	60ba      	str	r2, [r7, #8]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	dbf1      	blt.n	8002c10 <_write+0x12>
	}
	return len;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_close>:

int _close(int file)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_isatty>:

int _isatty(int file)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	return 1;
 8002c76:	2301      	movs	r3, #1
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca8:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <_sbrk+0x5c>)
 8002caa:	4b15      	ldr	r3, [pc, #84]	; (8002d00 <_sbrk+0x60>)
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <_sbrk+0x64>)
 8002cbe:	4a12      	ldr	r2, [pc, #72]	; (8002d08 <_sbrk+0x68>)
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <_sbrk+0x64>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d207      	bcs.n	8002ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cd0:	f006 fdbe 	bl	8009850 <__errno>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	e009      	b.n	8002cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <_sbrk+0x64>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <_sbrk+0x64>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <_sbrk+0x64>)
 8002cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20010000 	.word	0x20010000
 8002d00:	00000400 	.word	0x00000400
 8002d04:	20000418 	.word	0x20000418
 8002d08:	20000718 	.word	0x20000718

08002d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <SystemInit+0x20>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	4a05      	ldr	r2, [pc, #20]	; (8002d2c <SystemInit+0x20>)
 8002d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <MX_TIM6_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <MX_TIM6_Init+0x6c>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d56:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d64:	f004 fc42 	bl	80075ec <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002d6e:	f7ff fe5a 	bl	8002a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <MX_TIM6_Init+0x68>)
 8002d80:	f004 feba 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002d8a:	f7ff fe4c 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000041c 	.word	0x2000041c
 8002d9c:	40001000 	.word	0x40001000

08002da0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002db2:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <MX_TIM7_Init+0x6c>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002db8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002dbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002dc6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002dca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002dd4:	f004 fc0a 	bl	80075ec <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002dde:	f7ff fe22 	bl	8002a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <MX_TIM7_Init+0x68>)
 8002df0:	f004 fe82 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002dfa:	f7ff fe14 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000468 	.word	0x20000468
 8002e0c:	40001400 	.word	0x40001400

08002e10 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002e14:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e16:	4a11      	ldr	r2, [pc, #68]	; (8002e5c <MX_TIM16_Init+0x4c>)
 8002e18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e1c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002e20:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3999;
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e2a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002e2e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e30:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002e36:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002e42:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_TIM16_Init+0x48>)
 8002e44:	f004 fbd2 	bl	80075ec <HAL_TIM_Base_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002e4e:	f7ff fdea 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	200004b4 	.word	0x200004b4
 8002e5c:	40014400 	.word	0x40014400

08002e60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_TIM_Base_MspInit+0xac>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d114      	bne.n	8002e9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e72:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002e78:	f043 0310 	orr.w	r3, r3, #16
 8002e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	2036      	movs	r0, #54	; 0x36
 8002e90:	f002 fc4f 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e94:	2036      	movs	r0, #54	; 0x36
 8002e96:	f002 fc68 	bl	800576a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002e9a:	e032      	b.n	8002f02 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1c      	ldr	r2, [pc, #112]	; (8002f14 <HAL_TIM_Base_MspInit+0xb4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d114      	bne.n	8002ed0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002eac:	f043 0320 	orr.w	r3, r3, #32
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	2037      	movs	r0, #55	; 0x37
 8002ec4:	f002 fc35 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ec8:	2037      	movs	r0, #55	; 0x37
 8002eca:	f002 fc4e 	bl	800576a <HAL_NVIC_EnableIRQ>
}
 8002ece:	e018      	b.n	8002f02 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_TIM_Base_MspInit+0xb8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d113      	bne.n	8002f02 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_TIM_Base_MspInit+0xb0>)
 8002ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 2, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	2019      	movs	r0, #25
 8002ef8:	f002 fc1b 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002efc:	2019      	movs	r0, #25
 8002efe:	f002 fc34 	bl	800576a <HAL_NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40001000 	.word	0x40001000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40001400 	.word	0x40001400
 8002f18:	40014400 	.word	0x40014400

08002f1c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
	    HAL_IncTick();
 8002f2e:	f000 fdd3 	bl	8003ad8 <HAL_IncTick>
	}
	if(htim->Instance == TIM6)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10e      	bne.n	8002f5a <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		if(obd_comm.msg_type == 0)
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f3e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			__NOP();
 8002f46:	bf00      	nop
 8002f48:	e003      	b.n	8002f52 <HAL_TIM_PeriodElapsedCallback+0x36>
		}
		else
		{
			obd_comm.msg_type = 3;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}
		HAL_TIM_Base_Stop_IT(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f004 fbf6 	bl	8007744 <HAL_TIM_Base_Stop_IT>
	else if(htim->Instance == TIM16)
	{
		obd_comm.timeout = 1;
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 8002f58:	e017      	b.n	8002f8a <HAL_TIM_PeriodElapsedCallback+0x6e>
	else if(htim->Instance == TIM7)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d106      	bne.n	8002f72 <HAL_TIM_PeriodElapsedCallback+0x56>
		module.received = 1;
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop_IT(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f004 fbea 	bl	8007744 <HAL_TIM_Base_Stop_IT>
}
 8002f70:	e00b      	b.n	8002f8a <HAL_TIM_PeriodElapsedCallback+0x6e>
	else if(htim->Instance == TIM16)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d106      	bne.n	8002f8a <HAL_TIM_PeriodElapsedCallback+0x6e>
		obd_comm.timeout = 1;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		HAL_TIM_Base_Stop_IT(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f004 fbdd 	bl	8007744 <HAL_TIM_Base_Stop_IT>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40001000 	.word	0x40001000
 8002f98:	20000304 	.word	0x20000304
 8002f9c:	40001400 	.word	0x40001400
 8002fa0:	200003d4 	.word	0x200003d4
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <MX_USART1_UART_Init+0x64>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fb4:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002fb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8002fe4:	4b08      	ldr	r3, [pc, #32]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002fec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ff0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_USART1_UART_Init+0x60>)
 8002ff4:	f004 fe04 	bl	8007c00 <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002ffe:	f7ff fd12 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000500 	.word	0x20000500
 800300c:	40013800 	.word	0x40013800

08003010 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003016:	4a17      	ldr	r2, [pc, #92]	; (8003074 <MX_USART2_UART_Init+0x64>)
 8003018:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <MX_USART2_UART_Init+0x60>)
 800301c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003020:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003022:	4b13      	ldr	r3, [pc, #76]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003028:	4b11      	ldr	r3, [pc, #68]	; (8003070 <MX_USART2_UART_Init+0x60>)
 800302a:	2200      	movs	r2, #0
 800302c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003036:	220c      	movs	r2, #12
 8003038:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <MX_USART2_UART_Init+0x60>)
 800303c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003040:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <MX_USART2_UART_Init+0x60>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003050:	2208      	movs	r2, #8
 8003052:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <MX_USART2_UART_Init+0x60>)
 8003056:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800305a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800305c:	4804      	ldr	r0, [pc, #16]	; (8003070 <MX_USART2_UART_Init+0x60>)
 800305e:	f004 fdcf 	bl	8007c00 <HAL_UART_Init>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003068:	f7ff fcdd 	bl	8002a26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20000584 	.word	0x20000584
 8003074:	40004400 	.word	0x40004400

08003078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b0a2      	sub	sp, #136	; 0x88
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003090:	f107 0318 	add.w	r3, r7, #24
 8003094:	225c      	movs	r2, #92	; 0x5c
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f006 fc11 	bl	80098c0 <memset>
  if(uartHandle->Instance==USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7a      	ldr	r2, [pc, #488]	; (800328c <HAL_UART_MspInit+0x214>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d169      	bne.n	800317c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030ac:	2300      	movs	r3, #0
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030b0:	f107 0318 	add.w	r3, r7, #24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 ff8f 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030c0:	f7ff fcb1 	bl	8002a26 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c4:	4b72      	ldr	r3, [pc, #456]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c8:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ce:	6613      	str	r3, [r2, #96]	; 0x60
 80030d0:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	4a6b      	ldr	r2, [pc, #428]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030e2:	f043 0302 	orr.w	r3, r3, #2
 80030e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_UART_MspInit+0x218>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 80030f4:	23c0      	movs	r3, #192	; 0xc0
 80030f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f8:	2302      	movs	r3, #2
 80030fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003106:	2307      	movs	r3, #7
 8003108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003110:	4619      	mov	r1, r3
 8003112:	4860      	ldr	r0, [pc, #384]	; (8003294 <HAL_UART_MspInit+0x21c>)
 8003114:	f002 fe5a 	bl	8005dcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003118:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <HAL_UART_MspInit+0x220>)
 800311a:	4a60      	ldr	r2, [pc, #384]	; (800329c <HAL_UART_MspInit+0x224>)
 800311c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800311e:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003120:	2202      	movs	r2, #2
 8003122:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003124:	4b5c      	ldr	r3, [pc, #368]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <HAL_UART_MspInit+0x220>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003136:	4b58      	ldr	r3, [pc, #352]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313c:	4b56      	ldr	r3, [pc, #344]	; (8003298 <HAL_UART_MspInit+0x220>)
 800313e:	2200      	movs	r2, #0
 8003140:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003142:	4b55      	ldr	r3, [pc, #340]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_UART_MspInit+0x220>)
 800314a:	2200      	movs	r2, #0
 800314c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800314e:	4852      	ldr	r0, [pc, #328]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003150:	f002 fb34 	bl	80057bc <HAL_DMA_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800315a:	f7ff fc64 	bl	8002a26 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4d      	ldr	r2, [pc, #308]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003162:	671a      	str	r2, [r3, #112]	; 0x70
 8003164:	4a4c      	ldr	r2, [pc, #304]	; (8003298 <HAL_UART_MspInit+0x220>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800316a:	2200      	movs	r2, #0
 800316c:	2101      	movs	r1, #1
 800316e:	2025      	movs	r0, #37	; 0x25
 8003170:	f002 fadf 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003174:	2025      	movs	r0, #37	; 0x25
 8003176:	f002 faf8 	bl	800576a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800317a:	e082      	b.n	8003282 <HAL_UART_MspInit+0x20a>
  else if(uartHandle->Instance==USART2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a47      	ldr	r2, [pc, #284]	; (80032a0 <HAL_UART_MspInit+0x228>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d17d      	bne.n	8003282 <HAL_UART_MspInit+0x20a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003186:	2302      	movs	r3, #2
 8003188:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800318a:	2300      	movs	r3, #0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800318e:	f107 0318 	add.w	r3, r7, #24
 8003192:	4618      	mov	r0, r3
 8003194:	f003 ff20 	bl	8006fd8 <HAL_RCCEx_PeriphCLKConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800319e:	f7ff fc42 	bl	8002a26 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ac:	6593      	str	r3, [r2, #88]	; 0x58
 80031ae:	4b38      	ldr	r3, [pc, #224]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ba:	4b35      	ldr	r3, [pc, #212]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c6:	4b32      	ldr	r3, [pc, #200]	; (8003290 <HAL_UART_MspInit+0x218>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 80031d2:	230b      	movs	r3, #11
 80031d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031e4:	2307      	movs	r3, #7
 80031e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031ee:	4619      	mov	r1, r3
 80031f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f4:	f002 fdea 	bl	8005dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 80031f8:	2304      	movs	r3, #4
 80031fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003200:	2301      	movs	r3, #1
 8003202:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800320a:	2307      	movs	r3, #7
 800320c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 8003210:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003214:	4619      	mov	r1, r3
 8003216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321a:	f002 fdd7 	bl	8005dcc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003220:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_UART_MspInit+0x230>)
 8003222:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003226:	2202      	movs	r2, #2
 8003228:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003238:	2280      	movs	r2, #128	; 0x80
 800323a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 800323e:	2200      	movs	r2, #0
 8003240:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 800324a:	2220      	movs	r2, #32
 800324c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003250:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003256:	4813      	ldr	r0, [pc, #76]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 8003258:	f002 fab0 	bl	80057bc <HAL_DMA_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8003262:	f7ff fbe0 	bl	8002a26 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 800326a:	671a      	str	r2, [r3, #112]	; 0x70
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_UART_MspInit+0x22c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2101      	movs	r1, #1
 8003276:	2026      	movs	r0, #38	; 0x26
 8003278:	f002 fa5b 	bl	8005732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800327c:	2026      	movs	r0, #38	; 0x26
 800327e:	f002 fa74 	bl	800576a <HAL_NVIC_EnableIRQ>
}
 8003282:	bf00      	nop
 8003284:	3788      	adds	r7, #136	; 0x88
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40013800 	.word	0x40013800
 8003290:	40021000 	.word	0x40021000
 8003294:	48000400 	.word	0x48000400
 8003298:	20000608 	.word	0x20000608
 800329c:	40020058 	.word	0x40020058
 80032a0:	40004400 	.word	0x40004400
 80032a4:	20000650 	.word	0x20000650
 80032a8:	4002006c 	.word	0x4002006c

080032ac <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_UART_MspDeInit+0x70>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d112      	bne.n	80032e4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_UART_MspDeInit+0x74>)
 80032c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_UART_MspDeInit+0x74>)
 80032c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c8:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, K_Line_TX_Pin|K_Line_RX_Pin);
 80032ca:	21c0      	movs	r1, #192	; 0xc0
 80032cc:	4815      	ldr	r0, [pc, #84]	; (8003324 <HAL_UART_MspDeInit+0x78>)
 80032ce:	f002 fef7 	bl	80060c0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4618      	mov	r0, r3
 80032d8:	f002 fb28 	bl	800592c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80032dc:	2025      	movs	r0, #37	; 0x25
 80032de:	f002 fa52 	bl	8005786 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80032e2:	e017      	b.n	8003314 <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_UART_MspDeInit+0x7c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d112      	bne.n	8003314 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_UART_MspDeInit+0x74>)
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HAL_UART_MspDeInit+0x74>)
 80032f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032f8:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, IoT_CTS_Pin|IoT_RTS_Pin|IoT_TX_Pin|IoT_RX_Pin);
 80032fa:	210f      	movs	r1, #15
 80032fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003300:	f002 fede 	bl	80060c0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fb0f 	bl	800592c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800330e:	2026      	movs	r0, #38	; 0x26
 8003310:	f002 fa39 	bl	8005786 <HAL_NVIC_DisableIRQ>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40013800 	.word	0x40013800
 8003320:	40021000 	.word	0x40021000
 8003324:	48000400 	.word	0x48000400
 8003328:	40004400 	.word	0x40004400

0800332c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_UART_RxCpltCallback+0x2c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d102      	bne.n	8003342 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 800333c:	f7fe f91a 	bl	8001574 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 8003340:	e005      	b.n	800334e <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a05      	ldr	r2, [pc, #20]	; (800335c <HAL_UART_RxCpltCallback+0x30>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 800334a:	f000 f8c7 	bl	80034dc <nb_rx_callback>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000500 	.word	0x20000500
 800335c:	20000584 	.word	0x20000584

08003360 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 800336c:	f000 f8b6 	bl	80034dc <nb_rx_callback>
}
 8003370:	bf00      	nop
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	__NOP();
 8003380:	bf00      	nop
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003394:	f7ff fcba 	bl	8002d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003398:	480c      	ldr	r0, [pc, #48]	; (80033cc <LoopForever+0x6>)
  ldr r1, =_edata
 800339a:	490d      	ldr	r1, [pc, #52]	; (80033d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <LoopForever+0xe>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033a0:	e002      	b.n	80033a8 <LoopCopyDataInit>

080033a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a6:	3304      	adds	r3, #4

080033a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ac:	d3f9      	bcc.n	80033a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ae:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b0:	4c0a      	ldr	r4, [pc, #40]	; (80033dc <LoopForever+0x16>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b4:	e001      	b.n	80033ba <LoopFillZerobss>

080033b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b8:	3204      	adds	r2, #4

080033ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033bc:	d3fb      	bcc.n	80033b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033be:	f006 fa4d 	bl	800985c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033c2:	f7ff fa15 	bl	80027f0 <main>

080033c6 <LoopForever>:

LoopForever:
    b LoopForever
 80033c6:	e7fe      	b.n	80033c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80033d4:	0800e6c8 	.word	0x0800e6c8
  ldr r2, =_sbss
 80033d8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80033dc:	20000714 	.word	0x20000714

080033e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033e0:	e7fe      	b.n	80033e0 <ADC1_IRQHandler>
	...

080033e4 <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	pointer to a BG77 struct
 */
uint8_t module_init(BG77 *module)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	uint8_t repeat = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	73fb      	strb	r3, [r7, #15]
	power_on();
 80033f0:	f000 fafa 	bl	80039e8 <power_on>
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 80033f4:	e007      	b.n	8003406 <module_init+0x22>
	{
		if(repeat > MAX_REPEAT)
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	2b0a      	cmp	r3, #10
 80033fa:	d901      	bls.n	8003400 <module_init+0x1c>
		{
			return (FALSE);
 80033fc:	2300      	movs	r3, #0
 80033fe:	e019      	b.n	8003434 <module_init+0x50>
		}
		repeat++;
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	3301      	adds	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <module_init+0x58>)
 8003408:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800340c:	490c      	ldr	r1, [pc, #48]	; (8003440 <module_init+0x5c>)
 800340e:	480d      	ldr	r0, [pc, #52]	; (8003444 <module_init+0x60>)
 8003410:	f000 f81c 	bl	800344c <send_command>
 8003414:	4603      	mov	r3, r0
 8003416:	2b01      	cmp	r3, #1
 8003418:	d1ed      	bne.n	80033f6 <module_init+0x12>
	}
	if(send_command("ATE0\r\n", "OK", DEFAULT_TIMEOUT, NB))
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <module_init+0x58>)
 800341c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <module_init+0x5c>)
 8003422:	4809      	ldr	r0, [pc, #36]	; (8003448 <module_init+0x64>)
 8003424:	f000 f812 	bl	800344c <send_command>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <module_init+0x4e>
	{
		return (TRUE);
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <module_init+0x50>
	}
	return (FALSE);
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000584 	.word	0x20000584
 8003440:	0800df24 	.word	0x0800df24
 8003444:	0800df28 	.word	0x0800df28
 8003448:	0800df30 	.word	0x0800df30

0800344c <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval (TRUE) if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 800345c:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <send_command+0x80>)
 800345e:	2200      	movs	r2, #0
 8003460:	711a      	strb	r2, [r3, #4]
	clear_rx_buff();
 8003462:	f000 fad5 	bl	8003a10 <clear_rx_buff>
//	__HAL_UART_SEND_REQ(NB, UART_RXDATA_FLUSH_REQUEST);
	uint8_t length = strlen(command);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f7fc feb2 	bl	80001d0 <strlen>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Receive_IT(interface, &rx_data, 1);
 8003470:	2201      	movs	r2, #1
 8003472:	4917      	ldr	r1, [pc, #92]	; (80034d0 <send_command+0x84>)
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	f004 fdaf 	bl	8007fd8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	b29a      	uxth	r2, r3
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	6838      	ldr	r0, [r7, #0]
 8003484:	f004 fc43 	bl	8007d0e <HAL_UART_Transmit>
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <send_command+0x88>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0201 	mvn.w	r2, #1
 8003490:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 8003492:	4810      	ldr	r0, [pc, #64]	; (80034d4 <send_command+0x88>)
 8003494:	f004 f902 	bl	800769c <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 8003498:	e000      	b.n	800349c <send_command+0x50>
	{
		__NOP();
 800349a:	bf00      	nop
	while(module.received == 0)
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <send_command+0x80>)
 800349e:	791b      	ldrb	r3, [r3, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0fa      	beq.n	800349a <send_command+0x4e>
	}
	if(module.received != 1)
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <send_command+0x80>)
 80034a6:	791b      	ldrb	r3, [r3, #4]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <send_command+0x64>
	{
		return (FALSE);
 80034ac:	2300      	movs	r3, #0
 80034ae:	e009      	b.n	80034c4 <send_command+0x78>
	}
	if(strstr((char *)rx_buffer, reply) != NULL)
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4809      	ldr	r0, [pc, #36]	; (80034d8 <send_command+0x8c>)
 80034b4:	f006 fea5 	bl	800a202 <strstr>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <send_command+0x76>
	{
		return (TRUE);
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <send_command+0x78>
	}
	return (FALSE);
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200003d4 	.word	0x200003d4
 80034d0:	20000698 	.word	0x20000698
 80034d4:	20000468 	.word	0x20000468
 80034d8:	2000069c 	.word	0x2000069c

080034dc <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
	rx_buffer[module.rx_index++] = rx_data;
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <nb_rx_callback+0x40>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	b2d1      	uxtb	r1, r2
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <nb_rx_callback+0x40>)
 80034ea:	7011      	strb	r1, [r2, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <nb_rx_callback+0x44>)
 80034f0:	7819      	ldrb	r1, [r3, #0]
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <nb_rx_callback+0x48>)
 80034f4:	5499      	strb	r1, [r3, r2]
	HAL_TIM_Base_Stop_IT(UART_TIMER);
 80034f6:	480c      	ldr	r0, [pc, #48]	; (8003528 <nb_rx_callback+0x4c>)
 80034f8:	f004 f924 	bl	8007744 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <nb_rx_callback+0x4c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0201 	mvn.w	r2, #1
 8003504:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 8003506:	4808      	ldr	r0, [pc, #32]	; (8003528 <nb_rx_callback+0x4c>)
 8003508:	f004 f8c8 	bl	800769c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(NB, &rx_data, 1);
 800350c:	2201      	movs	r2, #1
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <nb_rx_callback+0x44>)
 8003510:	4806      	ldr	r0, [pc, #24]	; (800352c <nb_rx_callback+0x50>)
 8003512:	f004 fd61 	bl	8007fd8 <HAL_UART_Receive_IT>
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200003d4 	.word	0x200003d4
 8003520:	20000698 	.word	0x20000698
 8003524:	2000069c 	.word	0x2000069c
 8003528:	20000468 	.word	0x20000468
 800352c:	20000584 	.word	0x20000584

08003530 <mqtt_open>:
 *	@param	port			Port of desired MQTT broker
 *	@param	id				Connection ID (0-5)
 *	@retval	(TRUE) or (FALSE) depending on the response
 * */
uint8_t mqtt_open(const char* broker_address, uint16_t port, uint8_t id)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0c8      	sub	sp, #288	; 0x120
 8003534:	af02      	add	r7, sp, #8
 8003536:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800353a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800353e:	6018      	str	r0, [r3, #0]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003548:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800354c:	4602      	mov	r2, r0
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003554:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8003558:	460a      	mov	r2, r1
 800355a:	701a      	strb	r2, [r3, #0]
//	wake_up();
	char command [COMMAND_SIZE];
	uint8_t ret [2] = {255};
 800355c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003560:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003564:	22ff      	movs	r2, #255	; 0xff
 8003566:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command, "AT+QMTOPEN=%d,\"%s\",%d\r\n", id, broker_address, port);
 800356e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003572:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8003576:	7819      	ldrb	r1, [r3, #0]
 8003578:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800357c:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8003580:	881a      	ldrh	r2, [r3, #0]
 8003582:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003586:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800358a:	f107 0010 	add.w	r0, r7, #16
 800358e:	9200      	str	r2, [sp, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	460a      	mov	r2, r1
 8003594:	4926      	ldr	r1, [pc, #152]	; (8003630 <mqtt_open+0x100>)
 8003596:	f006 fe05 	bl	800a1a4 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 800359a:	f107 0010 	add.w	r0, r7, #16
 800359e:	4b25      	ldr	r3, [pc, #148]	; (8003634 <mqtt_open+0x104>)
 80035a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035a4:	4924      	ldr	r1, [pc, #144]	; (8003638 <mqtt_open+0x108>)
 80035a6:	f7ff ff51 	bl	800344c <send_command>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <mqtt_open+0x84>
	{
		return (FALSE);
 80035b0:	2300      	movs	r3, #0
 80035b2:	e037      	b.n	8003624 <mqtt_open+0xf4>
	}
	char *token = strtok((char*)rx_buffer, " ");
 80035b4:	4921      	ldr	r1, [pc, #132]	; (800363c <mqtt_open+0x10c>)
 80035b6:	4822      	ldr	r0, [pc, #136]	; (8003640 <mqtt_open+0x110>)
 80035b8:	f007 fc68 	bl	800ae8c <strtok>
 80035bc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 80035c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <mqtt_open+0x9c>
	{
		return (FALSE);
 80035c8:	2300      	movs	r3, #0
 80035ca:	e02b      	b.n	8003624 <mqtt_open+0xf4>
	}
	token = strtok(NULL, ",");
 80035cc:	491d      	ldr	r1, [pc, #116]	; (8003644 <mqtt_open+0x114>)
 80035ce:	2000      	movs	r0, #0
 80035d0:	f007 fc5c 	bl	800ae8c <strtok>
 80035d4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 80035d8:	e01b      	b.n	8003612 <mqtt_open+0xe2>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 80035da:	f107 0308 	add.w	r3, r7, #8
 80035de:	220a      	movs	r2, #10
 80035e0:	4619      	mov	r1, r3
 80035e2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80035e6:	f007 fd2f 	bl	800b048 <strtol>
 80035ea:	4602      	mov	r2, r0
 80035ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035f0:	b2d1      	uxtb	r1, r2
 80035f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80035f6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035fa:	54d1      	strb	r1, [r2, r3]
		token = strtok(NULL, ",");
 80035fc:	4911      	ldr	r1, [pc, #68]	; (8003644 <mqtt_open+0x114>)
 80035fe:	2000      	movs	r0, #0
 8003600:	f007 fc44 	bl	800ae8c <strtok>
 8003604:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800360c:	3301      	adds	r3, #1
 800360e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 8003612:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1df      	bne.n	80035da <mqtt_open+0xaa>
	}
	return (ret[1]);
 800361a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800361e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003622:	785b      	ldrb	r3, [r3, #1]
}
 8003624:	4618      	mov	r0, r3
 8003626:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	0800df74 	.word	0x0800df74
 8003634:	20000584 	.word	0x20000584
 8003638:	0800df24 	.word	0x0800df24
 800363c:	0800df44 	.word	0x0800df44
 8003640:	2000069c 	.word	0x2000069c
 8003644:	0800df48 	.word	0x0800df48

08003648 <mqtt_connect>:
 * @param	module		pointer to a BG77 struct
 * @retval	return code for the command
 */
//TODO
uint8_t mqtt_connect(uint8_t id, const char* client_id, BG77 *module)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b0c8      	sub	sp, #288	; 0x120
 800364c:	af00      	add	r7, sp, #0
 800364e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003652:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003656:	6019      	str	r1, [r3, #0]
 8003658:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800365c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003666:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800366a:	4602      	mov	r2, r0
 800366c:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [3] = {255};
 800366e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003676:	4a3d      	ldr	r2, [pc, #244]	; (800376c <mqtt_connect+0x124>)
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	709a      	strb	r2, [r3, #2]
	uint8_t i = 0;
 8003680:	2300      	movs	r3, #0
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	sprintf(command, "AT+QMTCONN=%d,\"%s\"\r\n",id,client_id);
 8003686:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800368a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800368e:	781a      	ldrb	r2, [r3, #0]
 8003690:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003694:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003698:	f107 0018 	add.w	r0, r7, #24
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4934      	ldr	r1, [pc, #208]	; (8003770 <mqtt_connect+0x128>)
 80036a0:	f006 fd80 	bl	800a1a4 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 80036a4:	f107 0018 	add.w	r0, r7, #24
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <mqtt_connect+0x12c>)
 80036aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036ae:	4932      	ldr	r1, [pc, #200]	; (8003778 <mqtt_connect+0x130>)
 80036b0:	f7ff fecc 	bl	800344c <send_command>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <mqtt_connect+0x76>
	{
		return (FALSE);
 80036ba:	2300      	movs	r3, #0
 80036bc:	e050      	b.n	8003760 <mqtt_connect+0x118>
	}
	char *token = strtok((char *)rx_buffer, " ");
 80036be:	492f      	ldr	r1, [pc, #188]	; (800377c <mqtt_connect+0x134>)
 80036c0:	482f      	ldr	r0, [pc, #188]	; (8003780 <mqtt_connect+0x138>)
 80036c2:	f007 fbe3 	bl	800ae8c <strtok>
 80036c6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if(!token)
 80036ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <mqtt_connect+0x8e>
	{
		return (FALSE);
 80036d2:	2300      	movs	r3, #0
 80036d4:	e044      	b.n	8003760 <mqtt_connect+0x118>
	}
	token = strtok(NULL, ",");
 80036d6:	492b      	ldr	r1, [pc, #172]	; (8003784 <mqtt_connect+0x13c>)
 80036d8:	2000      	movs	r0, #0
 80036da:	f007 fbd7 	bl	800ae8c <strtok>
 80036de:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 80036e2:	e01b      	b.n	800371c <mqtt_connect+0xd4>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 80036e4:	f107 0310 	add.w	r3, r7, #16
 80036e8:	220a      	movs	r2, #10
 80036ea:	4619      	mov	r1, r3
 80036ec:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80036f0:	f007 fcaa 	bl	800b048 <strtol>
 80036f4:	4602      	mov	r2, r0
 80036f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036fa:	b2d1      	uxtb	r1, r2
 80036fc:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003700:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003704:	54d1      	strb	r1, [r2, r3]
		i++;
 8003706:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800370a:	3301      	adds	r3, #1
 800370c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		token = strtok(NULL, ",");
 8003710:	491c      	ldr	r1, [pc, #112]	; (8003784 <mqtt_connect+0x13c>)
 8003712:	2000      	movs	r0, #0
 8003714:	f007 fbba 	bl	800ae8c <strtok>
 8003718:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 800371c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1df      	bne.n	80036e4 <mqtt_connect+0x9c>
	}
	if(ret[1] == (0 || 1))
 8003724:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003728:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800372c:	785b      	ldrb	r3, [r3, #1]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d115      	bne.n	800375e <mqtt_connect+0x116>
	{
		switch(ret[2])
 8003732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003736:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800373a:	789b      	ldrb	r3, [r3, #2]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <mqtt_connect+0xfc>
		{
			case 0:
				return (TRUE);
 8003740:	2301      	movs	r3, #1
 8003742:	e00d      	b.n	8003760 <mqtt_connect+0x118>
				break;
			default:
				module->error = ret[2];
 8003744:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800374c:	789a      	ldrb	r2, [r3, #2]
 800374e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003752:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	71da      	strb	r2, [r3, #7]
				return (FALSE);
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <mqtt_connect+0x118>
		}
	}
	return (FALSE);
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	0800dfa4 	.word	0x0800dfa4
 8003770:	0800df8c 	.word	0x0800df8c
 8003774:	20000584 	.word	0x20000584
 8003778:	0800df24 	.word	0x0800df24
 800377c:	0800df44 	.word	0x0800df44
 8003780:	2000069c 	.word	0x2000069c
 8003784:	0800df48 	.word	0x0800df48

08003788 <mqtt_publish>:
 *	@param	topic	MQTT topic
 *	@param	msg		data to be published
 *	@retval	(TRUE) if the publication is successful
 */
uint8_t mqtt_publish(uint8_t id, uint8_t msg_id, uint8_t qos, uint8_t retain, const char *topic, const char *msg)
{
 8003788:	b5b0      	push	{r4, r5, r7, lr}
 800378a:	b0c6      	sub	sp, #280	; 0x118
 800378c:	af04      	add	r7, sp, #16
 800378e:	4605      	mov	r5, r0
 8003790:	460c      	mov	r4, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800379a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800379e:	462a      	mov	r2, r5
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037a6:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80037aa:	4622      	mov	r2, r4
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037b2:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80037b6:	4602      	mov	r2, r0
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037c2:	460a      	mov	r2, r1
 80037c4:	701a      	strb	r2, [r3, #0]
	char command[COMMAND_SIZE];
	sprintf(command, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",\"%s\"\r\n",id, msg_id, qos, retain, topic, msg);
 80037c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ca:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80037ce:	781c      	ldrb	r4, [r3, #0]
 80037d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80037d8:	781d      	ldrb	r5, [r3, #0]
 80037da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037de:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80037e8:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	f107 0008 	add.w	r0, r7, #8
 80037f2:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80037f6:	9103      	str	r1, [sp, #12]
 80037f8:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80037fc:	9102      	str	r1, [sp, #8]
 80037fe:	9201      	str	r2, [sp, #4]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	462b      	mov	r3, r5
 8003804:	4622      	mov	r2, r4
 8003806:	490b      	ldr	r1, [pc, #44]	; (8003834 <mqtt_publish+0xac>)
 8003808:	f006 fccc 	bl	800a1a4 <siprintf>
	if(send_command(command, "OK", DEFAULT_TIMEOUT, NB))
 800380c:	f107 0008 	add.w	r0, r7, #8
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <mqtt_publish+0xb0>)
 8003812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003816:	4909      	ldr	r1, [pc, #36]	; (800383c <mqtt_publish+0xb4>)
 8003818:	f7ff fe18 	bl	800344c <send_command>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <mqtt_publish+0x9e>
	{
		return (TRUE);
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <mqtt_publish+0xa0>
	}
	return (FALSE);
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}
 8003832:	bf00      	nop
 8003834:	0800e000 	.word	0x0800e000
 8003838:	20000584 	.word	0x20000584
 800383c:	0800df24 	.word	0x0800df24

08003840 <get_position>:
/*
 *	@brief	Acquires positional data from the GNSS portion of the module
 *	@retval	(TRUE) if GNSS has a fix and responds with positional data
 */
uint8_t get_position(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
//	wake_up();
	if(module.gps == 0)
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <get_position+0x64>)
 8003846:	7a9b      	ldrb	r3, [r3, #10]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <get_position+0x10>
	{
		return (FALSE);
 800384c:	2300      	movs	r3, #0
 800384e:	e026      	b.n	800389e <get_position+0x5e>
	}
	if(!(send_command("AT+QGPSCFG=\"priority\",0\r\n","OK", DEFAULT_TIMEOUT, NB)))
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <get_position+0x68>)
 8003852:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003856:	4915      	ldr	r1, [pc, #84]	; (80038ac <get_position+0x6c>)
 8003858:	4815      	ldr	r0, [pc, #84]	; (80038b0 <get_position+0x70>)
 800385a:	f7ff fdf7 	bl	800344c <send_command>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <get_position+0x28>
	{
		return (FALSE);
 8003864:	2300      	movs	r3, #0
 8003866:	e01a      	b.n	800389e <get_position+0x5e>
	}
	if(send_command("AT+QGPSLOC?\r\n", "OK", DEFAULT_TIMEOUT, NB))
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <get_position+0x68>)
 800386a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800386e:	490f      	ldr	r1, [pc, #60]	; (80038ac <get_position+0x6c>)
 8003870:	4810      	ldr	r0, [pc, #64]	; (80038b4 <get_position+0x74>)
 8003872:	f7ff fdeb 	bl	800344c <send_command>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00f      	beq.n	800389c <get_position+0x5c>
	{
		parse_location();
 800387c:	f000 f81e 	bl	80038bc <parse_location>
		if(send_command("AT+QGPSCFG=\"priority\",1\r\n","OK", DEFAULT_TIMEOUT, NB))
 8003880:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <get_position+0x68>)
 8003882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003886:	4909      	ldr	r1, [pc, #36]	; (80038ac <get_position+0x6c>)
 8003888:	480b      	ldr	r0, [pc, #44]	; (80038b8 <get_position+0x78>)
 800388a:	f7ff fddf 	bl	800344c <send_command>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <get_position+0x58>
		{
			return (TRUE);
 8003894:	2301      	movs	r3, #1
 8003896:	e002      	b.n	800389e <get_position+0x5e>
		}
		return (FALSE);
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <get_position+0x5e>
	}
	return (FALSE);
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200003d4 	.word	0x200003d4
 80038a8:	20000584 	.word	0x20000584
 80038ac:	0800df24 	.word	0x0800df24
 80038b0:	0800e040 	.word	0x0800e040
 80038b4:	0800e030 	.word	0x0800e030
 80038b8:	0800e05c 	.word	0x0800e05c

080038bc <parse_location>:
/*
 *	@brief Splits received location string into individual variables from location struct
 *	@retval	None
 */
void parse_location(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
	char *token = strtok((char *)rx_buffer, " ");
 80038c2:	4945      	ldr	r1, [pc, #276]	; (80039d8 <parse_location+0x11c>)
 80038c4:	4845      	ldr	r0, [pc, #276]	; (80039dc <parse_location+0x120>)
 80038c6:	f007 fae1 	bl	800ae8c <strtok>
 80038ca:	60f8      	str	r0, [r7, #12]
	if(token)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07e      	beq.n	80039d0 <parse_location+0x114>
	{
		token = strtok(NULL, ",");
 80038d2:	4943      	ldr	r1, [pc, #268]	; (80039e0 <parse_location+0x124>)
 80038d4:	2000      	movs	r0, #0
 80038d6:	f007 fad9 	bl	800ae8c <strtok>
 80038da:	60f8      	str	r0, [r7, #12]
		uint8_t i = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	72fb      	strb	r3, [r7, #11]
		while(token != NULL)
 80038e0:	e073      	b.n	80039ca <parse_location+0x10e>
		{
			char *ptr;
			switch(i)
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d867      	bhi.n	80039b8 <parse_location+0xfc>
 80038e8:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <parse_location+0x34>)
 80038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ee:	bf00      	nop
 80038f0:	08003919 	.word	0x08003919
 80038f4:	0800392f 	.word	0x0800392f
 80038f8:	0800394f 	.word	0x0800394f
 80038fc:	080039b9 	.word	0x080039b9
 8003900:	0800396f 	.word	0x0800396f
 8003904:	080039b9 	.word	0x080039b9
 8003908:	080039b9 	.word	0x080039b9
 800390c:	08003989 	.word	0x08003989
 8003910:	080039b9 	.word	0x080039b9
 8003914:	080039a3 	.word	0x080039a3
			{
				case 0:
					pos.time = strtol(token, &ptr, 10);
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	220a      	movs	r2, #10
 800391c:	4619      	mov	r1, r3
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f007 fb92 	bl	800b048 <strtol>
 8003924:	4603      	mov	r3, r0
 8003926:	b29a      	uxth	r2, r3
 8003928:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <parse_location+0x128>)
 800392a:	861a      	strh	r2, [r3, #48]	; 0x30
					break;
 800392c:	e045      	b.n	80039ba <parse_location+0xfe>
				case 1:
					pos.latitude = strtod(token, &ptr);
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	4619      	mov	r1, r3
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f007 fa9e 	bl	800ae74 <strtod>
 8003938:	eeb0 7a40 	vmov.f32	s14, s0
 800393c:	eef0 7a60 	vmov.f32	s15, s1
 8003940:	4b28      	ldr	r3, [pc, #160]	; (80039e4 <parse_location+0x128>)
 8003942:	ed83 7b00 	vstr	d7, [r3]
					pos.lat_ort = ptr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <parse_location+0x128>)
 800394a:	6093      	str	r3, [r2, #8]
					break;
 800394c:	e035      	b.n	80039ba <parse_location+0xfe>
				case 2:
					pos.longitude = strtod(token, &ptr);
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	4619      	mov	r1, r3
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f007 fa8e 	bl	800ae74 <strtod>
 8003958:	eeb0 7a40 	vmov.f32	s14, s0
 800395c:	eef0 7a60 	vmov.f32	s15, s1
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <parse_location+0x128>)
 8003962:	ed83 7b04 	vstr	d7, [r3, #16]
					pos.long_ort = ptr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1e      	ldr	r2, [pc, #120]	; (80039e4 <parse_location+0x128>)
 800396a:	6193      	str	r3, [r2, #24]
					break;
 800396c:	e025      	b.n	80039ba <parse_location+0xfe>
				case 4:
					pos.altitude = strtod(token, &ptr);
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	4619      	mov	r1, r3
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f007 fa7e 	bl	800ae74 <strtod>
 8003978:	eeb0 7a40 	vmov.f32	s14, s0
 800397c:	eef0 7a60 	vmov.f32	s15, s1
 8003980:	4b18      	ldr	r3, [pc, #96]	; (80039e4 <parse_location+0x128>)
 8003982:	ed83 7b08 	vstr	d7, [r3, #32]
					break;
 8003986:	e018      	b.n	80039ba <parse_location+0xfe>
				case 7:
					pos.speed = strtod(token, &ptr);
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	4619      	mov	r1, r3
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f007 fa71 	bl	800ae74 <strtod>
 8003992:	eeb0 7a40 	vmov.f32	s14, s0
 8003996:	eef0 7a60 	vmov.f32	s15, s1
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <parse_location+0x128>)
 800399c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
					break;
 80039a0:	e00b      	b.n	80039ba <parse_location+0xfe>
				case 9:
					pos.date = strtol(token, &ptr, 10);
 80039a2:	1d3b      	adds	r3, r7, #4
 80039a4:	220a      	movs	r2, #10
 80039a6:	4619      	mov	r1, r3
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f007 fb4d 	bl	800b048 <strtol>
 80039ae:	4603      	mov	r3, r0
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <parse_location+0x128>)
 80039b4:	865a      	strh	r2, [r3, #50]	; 0x32
					break;
 80039b6:	e000      	b.n	80039ba <parse_location+0xfe>
				default:
					break;
 80039b8:	bf00      	nop
			}
			token = strtok(NULL, ",");
 80039ba:	4909      	ldr	r1, [pc, #36]	; (80039e0 <parse_location+0x124>)
 80039bc:	2000      	movs	r0, #0
 80039be:	f007 fa65 	bl	800ae8c <strtok>
 80039c2:	60f8      	str	r0, [r7, #12]
			i++;
 80039c4:	7afb      	ldrb	r3, [r7, #11]
 80039c6:	3301      	adds	r3, #1
 80039c8:	72fb      	strb	r3, [r7, #11]
		while(token != NULL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d188      	bne.n	80038e2 <parse_location+0x26>
		}
	}
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	0800df44 	.word	0x0800df44
 80039dc:	2000069c 	.word	0x2000069c
 80039e0:	0800df48 	.word	0x0800df48
 80039e4:	200003e0 	.word	0x200003e0

080039e8 <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 80039ec:	2201      	movs	r2, #1
 80039ee:	2120      	movs	r1, #32
 80039f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039f4:	f002 fc3e 	bl	8006274 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 80039f8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80039fc:	f000 f88c 	bl	8003b18 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 8003a00:	2200      	movs	r2, #0
 8003a02:	2120      	movs	r1, #32
 8003a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a08:	f002 fc34 	bl	8006274 <HAL_GPIO_WritePin>
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <clear_rx_buff+0x18>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 8003a1a:	2264      	movs	r2, #100	; 0x64
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4803      	ldr	r0, [pc, #12]	; (8003a2c <clear_rx_buff+0x1c>)
 8003a20:	f005 ff4e 	bl	80098c0 <memset>
}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200003d4 	.word	0x200003d4
 8003a2c:	2000069c 	.word	0x2000069c

08003a30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	f001 fe6e 	bl	800571c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a40:	200f      	movs	r0, #15
 8003a42:	f000 f80d 	bl	8003a60 <HAL_InitTick>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	e001      	b.n	8003a56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a52:	f7fe ffed 	bl	8002a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a56:	79fb      	ldrb	r3, [r7, #7]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <HAL_InitTick+0x6c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d023      	beq.n	8003abc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_InitTick+0x70>)
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_InitTick+0x6c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 fe89 	bl	80057a2 <HAL_SYSTICK_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10f      	bne.n	8003ab6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b0f      	cmp	r3, #15
 8003a9a:	d809      	bhi.n	8003ab0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	f001 fe45 	bl	8005732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <HAL_InitTick+0x74>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e007      	b.n	8003ac0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e004      	b.n	8003ac0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	e001      	b.n	8003ac0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000008 	.word	0x20000008
 8003ad0:	20000000 	.word	0x20000000
 8003ad4:	20000004 	.word	0x20000004

08003ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_IncTick+0x20>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_IncTick+0x24>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_IncTick+0x24>)
 8003aea:	6013      	str	r3, [r2, #0]
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000008 	.word	0x20000008
 8003afc:	20000700 	.word	0x20000700

08003b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return uwTick;
 8003b04:	4b03      	ldr	r3, [pc, #12]	; (8003b14 <HAL_GetTick+0x14>)
 8003b06:	681b      	ldr	r3, [r3, #0]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000700 	.word	0x20000700

08003b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff ffee 	bl	8003b00 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b30:	d005      	beq.n	8003b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_Delay+0x44>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b3e:	bf00      	nop
 8003b40:	f7ff ffde 	bl	8003b00 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d8f7      	bhi.n	8003b40 <HAL_Delay+0x28>
  {
  }
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000008 	.word	0x20000008

08003b60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	609a      	str	r2, [r3, #8]
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3360      	adds	r3, #96	; 0x60
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <LL_ADC_SetOffset+0x44>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	03fff000 	.word	0x03fff000

08003c10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3360      	adds	r3, #96	; 0x60
 8003c1e:	461a      	mov	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3360      	adds	r3, #96	; 0x60
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3330      	adds	r3, #48	; 0x30
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	4413      	add	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 031f 	and.w	r3, r3, #31
 8003c9c:	211f      	movs	r1, #31
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	0e9b      	lsrs	r3, r3, #26
 8003caa:	f003 011f 	and.w	r1, r3, #31
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3314      	adds	r3, #20
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	0e5b      	lsrs	r3, r3, #25
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	4413      	add	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0d1b      	lsrs	r3, r3, #20
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2107      	movs	r1, #7
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	401a      	ands	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	0d1b      	lsrs	r3, r3, #20
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0318 	and.w	r3, r3, #24
 8003d42:	4908      	ldr	r1, [pc, #32]	; (8003d64 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003d44:	40d9      	lsrs	r1, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	400b      	ands	r3, r1
 8003d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	0007ffff 	.word	0x0007ffff

08003d68 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6093      	str	r3, [r2, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da0:	d101      	bne.n	8003da6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003dc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df0:	d101      	bne.n	8003df6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <LL_ADC_IsEnabled+0x18>
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <LL_ADC_IsEnabled+0x1a>
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d101      	bne.n	8003e42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d101      	bne.n	8003e68 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e12c      	b.n	80040ec <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fe f9f5 	bl	8002290 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff67 	bl	8003d8c <LL_ADC_IsDeepPowerDownEnabled>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d004      	beq.n	8003ece <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff ff4d 	bl	8003d68 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ff82 	bl	8003ddc <LL_ADC_IsInternalRegulatorEnabled>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d115      	bne.n	8003f0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ff66 	bl	8003db4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ee8:	4b82      	ldr	r3, [pc, #520]	; (80040f4 <HAL_ADC_Init+0x27c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_ADC_Init+0x280>)
 8003ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef4:	099b      	lsrs	r3, r3, #6
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003efc:	e002      	b.n	8003f04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f9      	bne.n	8003efe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff64 	bl	8003ddc <LL_ADC_IsInternalRegulatorEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff75 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 8003f40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 80c5 	bne.w	80040da <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 80c1 	bne.w	80040da <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f60:	f043 0202 	orr.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff49 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f78:	4860      	ldr	r0, [pc, #384]	; (80040fc <HAL_ADC_Init+0x284>)
 8003f7a:	f7ff ff43 	bl	8003e04 <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	485d      	ldr	r0, [pc, #372]	; (8004100 <HAL_ADC_Init+0x288>)
 8003f8c:	f7ff fde8 	bl	8003b60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7e5b      	ldrb	r3, [r3, #25]
 8003f94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003fa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003fa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d106      	bne.n	8003fcc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	045b      	lsls	r3, r3, #17
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d009      	beq.n	8003fe8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	4b45      	ldr	r3, [pc, #276]	; (8004104 <HAL_ADC_Init+0x28c>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff12 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 8004006:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff1f 	bl	8003e50 <LL_ADC_INJ_IsConversionOngoing>
 8004012:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d13d      	bne.n	8004096 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d13a      	bne.n	8004096 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004024:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800402c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800403c:	f023 0302 	bic.w	r3, r3, #2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	69b9      	ldr	r1, [r7, #24]
 8004046:	430b      	orrs	r3, r1
 8004048:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004050:	2b01      	cmp	r3, #1
 8004052:	d118      	bne.n	8004086 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800405e:	f023 0304 	bic.w	r3, r3, #4
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800406a:	4311      	orrs	r1, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004076:	430a      	orrs	r2, r1
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	e007      	b.n	8004096 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d10c      	bne.n	80040b8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f023 010f 	bic.w	r1, r3, #15
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
 80040b6:	e007      	b.n	80040c8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 020f 	bic.w	r2, r2, #15
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f023 0303 	bic.w	r3, r3, #3
 80040d0:	f043 0201 	orr.w	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	655a      	str	r2, [r3, #84]	; 0x54
 80040d8:	e007      	b.n	80040ea <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f043 0210 	orr.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000000 	.word	0x20000000
 80040f8:	053e2d63 	.word	0x053e2d63
 80040fc:	50040000 	.word	0x50040000
 8004100:	50040300 	.word	0x50040300
 8004104:	fff0c007 	.word	0xfff0c007

08004108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b0b6      	sub	sp, #216	; 0xd8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x22>
 8004126:	2302      	movs	r3, #2
 8004128:	e3b9      	b.n	800489e <HAL_ADC_ConfigChannel+0x796>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fe77 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 839e 	bne.w	8004880 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b05      	cmp	r3, #5
 800414a:	d824      	bhi.n	8004196 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	3b02      	subs	r3, #2
 8004152:	2b03      	cmp	r3, #3
 8004154:	d81b      	bhi.n	800418e <HAL_ADC_ConfigChannel+0x86>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <HAL_ADC_ConfigChannel+0x54>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	0800416d 	.word	0x0800416d
 8004160:	08004175 	.word	0x08004175
 8004164:	0800417d 	.word	0x0800417d
 8004168:	08004185 	.word	0x08004185
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	220c      	movs	r2, #12
 8004170:	605a      	str	r2, [r3, #4]
          break;
 8004172:	e011      	b.n	8004198 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2212      	movs	r2, #18
 8004178:	605a      	str	r2, [r3, #4]
          break;
 800417a:	e00d      	b.n	8004198 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2218      	movs	r2, #24
 8004180:	605a      	str	r2, [r3, #4]
          break;
 8004182:	e009      	b.n	8004198 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800418a:	605a      	str	r2, [r3, #4]
          break;
 800418c:	e004      	b.n	8004198 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2206      	movs	r2, #6
 8004192:	605a      	str	r2, [r3, #4]
          break;
 8004194:	e000      	b.n	8004198 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004196:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f7ff fd64 	bl	8003c72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe3b 	bl	8003e2a <LL_ADC_REG_IsConversionOngoing>
 80041b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fe47 	bl	8003e50 <LL_ADC_INJ_IsConversionOngoing>
 80041c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 81a6 	bne.w	800451c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 81a1 	bne.w	800451c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	6819      	ldr	r1, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7ff fd6f 	bl	8003cca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00a      	beq.n	8004224 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6919      	ldr	r1, [r3, #16]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800421e:	f7ff fcd3 	bl	8003bc8 <LL_ADC_SetOffset>
 8004222:	e17b      	b.n	800451c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fcf0 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004230:	4603      	mov	r3, r0
 8004232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x148>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2100      	movs	r1, #0
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fce5 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004246:	4603      	mov	r3, r0
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	f003 021f 	and.w	r2, r3, #31
 800424e:	e01e      	b.n	800428e <HAL_ADC_ConfigChannel+0x186>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fcda 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 800425c:	4603      	mov	r3, r0
 800425e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004266:	fa93 f3a3 	rbit	r3, r3
 800426a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800426e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004272:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800427e:	2320      	movs	r3, #32
 8004280:	e004      	b.n	800428c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x19e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	0e9b      	lsrs	r3, r3, #26
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	e018      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x1d0>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80042ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80042c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e004      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80042ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042d8:	429a      	cmp	r2, r3
 80042da:	d106      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff fca9 	bl	8003c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2101      	movs	r1, #1
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fc8d 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x20e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2101      	movs	r1, #1
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fc82 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	e01e      	b.n	8004354 <HAL_ADC_ConfigChannel+0x24c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2101      	movs	r1, #1
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fc77 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004322:	4603      	mov	r3, r0
 8004324:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004334:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800433c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004344:	2320      	movs	r3, #32
 8004346:	e004      	b.n	8004352 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800434c:	fab3 f383 	clz	r3, r3
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_ADC_ConfigChannel+0x264>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	e018      	b.n	800439e <HAL_ADC_ConfigChannel+0x296>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004380:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e004      	b.n	800439e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004398:	fab3 f383 	clz	r3, r3
 800439c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800439e:	429a      	cmp	r2, r3
 80043a0:	d106      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fc46 	bl	8003c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2102      	movs	r1, #2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff fc2a 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80043bc:	4603      	mov	r3, r0
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x2d4>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2102      	movs	r1, #2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fc1f 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	0e9b      	lsrs	r3, r3, #26
 80043d6:	f003 021f 	and.w	r2, r3, #31
 80043da:	e01e      	b.n	800441a <HAL_ADC_ConfigChannel+0x312>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fc14 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80043fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800440a:	2320      	movs	r3, #32
 800440c:	e004      	b.n	8004418 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800440e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004422:	2b00      	cmp	r3, #0
 8004424:	d105      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x32a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	0e9b      	lsrs	r3, r3, #26
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	e016      	b.n	8004460 <HAL_ADC_ConfigChannel+0x358>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800444a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004452:	2320      	movs	r3, #32
 8004454:	e004      	b.n	8004460 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004460:	429a      	cmp	r2, r3
 8004462:	d106      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2200      	movs	r2, #0
 800446a:	2102      	movs	r1, #2
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff fbe5 	bl	8003c3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2103      	movs	r1, #3
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fbc9 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 800447e:	4603      	mov	r3, r0
 8004480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10a      	bne.n	800449e <HAL_ADC_ConfigChannel+0x396>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2103      	movs	r1, #3
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fbbe 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004494:	4603      	mov	r3, r0
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	f003 021f 	and.w	r2, r3, #31
 800449c:	e017      	b.n	80044ce <HAL_ADC_ConfigChannel+0x3c6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2103      	movs	r1, #3
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fbb3 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80044aa:	4603      	mov	r3, r0
 80044ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80044b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80044ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e003      	b.n	80044cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80044c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x3de>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	0e9b      	lsrs	r3, r3, #26
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	e011      	b.n	800450a <HAL_ADC_ConfigChannel+0x402>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80044f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80044f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80044fe:	2320      	movs	r3, #32
 8004500:	e003      	b.n	800450a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800450a:	429a      	cmp	r2, r3
 800450c:	d106      	bne.n	800451c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	2103      	movs	r1, #3
 8004516:	4618      	mov	r0, r3
 8004518:	f7ff fb90 	bl	8003c3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fc6f 	bl	8003e04 <LL_ADC_IsEnabled>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	f040 813f 	bne.w	80047ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6819      	ldr	r1, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f7ff fbf0 	bl	8003d20 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a8e      	ldr	r2, [pc, #568]	; (8004780 <HAL_ADC_ConfigChannel+0x678>)
 8004546:	4293      	cmp	r3, r2
 8004548:	f040 8130 	bne.w	80047ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x46c>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0e9b      	lsrs	r3, r3, #26
 8004562:	3301      	adds	r3, #1
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2b09      	cmp	r3, #9
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e019      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x4a0>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457c:	fa93 f3a3 	rbit	r3, r3
 8004580:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004584:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800458c:	2320      	movs	r3, #32
 800458e:	e003      	b.n	8004598 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	3301      	adds	r3, #1
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2b09      	cmp	r3, #9
 80045a0:	bf94      	ite	ls
 80045a2:	2301      	movls	r3, #1
 80045a4:	2300      	movhi	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d079      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x4c0>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	0e9b      	lsrs	r3, r3, #26
 80045be:	3301      	adds	r3, #1
 80045c0:	069b      	lsls	r3, r3, #26
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c6:	e015      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x4ec>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80045da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e003      	b.n	80045ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80045e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	069b      	lsls	r3, r3, #26
 80045f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x50c>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0e9b      	lsrs	r3, r3, #26
 8004606:	3301      	adds	r3, #1
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	e017      	b.n	8004644 <HAL_ADC_ConfigChannel+0x53c>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	e003      	b.n	8004638 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	2101      	movs	r1, #1
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	ea42 0103 	orr.w	r1, r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10a      	bne.n	800466a <HAL_ADC_ConfigChannel+0x562>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	3301      	adds	r3, #1
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	051b      	lsls	r3, r3, #20
 8004668:	e018      	b.n	800469c <HAL_ADC_ConfigChannel+0x594>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	fa93 f3a3 	rbit	r3, r3
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800467c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004682:	2320      	movs	r3, #32
 8004684:	e003      	b.n	800468e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004688:	fab3 f383 	clz	r3, r3
 800468c:	b2db      	uxtb	r3, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	4613      	mov	r3, r2
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	4413      	add	r3, r2
 800469a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800469c:	430b      	orrs	r3, r1
 800469e:	e080      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x5b4>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	3301      	adds	r3, #1
 80046b4:	069b      	lsls	r3, r3, #26
 80046b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ba:	e015      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x5e0>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	069b      	lsls	r3, r3, #26
 80046e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x600>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	e017      	b.n	8004738 <HAL_ADC_ConfigChannel+0x630>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	61fb      	str	r3, [r7, #28]
  return result;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e003      	b.n	800472c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3301      	adds	r3, #1
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x65c>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	3301      	adds	r3, #1
 8004750:	f003 021f 	and.w	r2, r3, #31
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	3b1e      	subs	r3, #30
 800475c:	051b      	lsls	r3, r3, #20
 800475e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004762:	e01d      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x698>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	613b      	str	r3, [r7, #16]
  return result;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e005      	b.n	800478c <HAL_ADC_ConfigChannel+0x684>
 8004780:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	3301      	adds	r3, #1
 800478e:	f003 021f 	and.w	r2, r3, #31
 8004792:	4613      	mov	r3, r2
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	4413      	add	r3, r2
 8004798:	3b1e      	subs	r3, #30
 800479a:	051b      	lsls	r3, r3, #20
 800479c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a0:	430b      	orrs	r3, r1
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	6892      	ldr	r2, [r2, #8]
 80047a6:	4619      	mov	r1, r3
 80047a8:	f7ff fa8f 	bl	8003cca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <HAL_ADC_ConfigChannel+0x7a0>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d06c      	beq.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b8:	483c      	ldr	r0, [pc, #240]	; (80048ac <HAL_ADC_ConfigChannel+0x7a4>)
 80047ba:	f7ff f9f7 	bl	8003bac <LL_ADC_GetCommonPathInternalCh>
 80047be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a3a      	ldr	r2, [pc, #232]	; (80048b0 <HAL_ADC_ConfigChannel+0x7a8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d127      	bne.n	800481c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d121      	bne.n	800481c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_ADC_ConfigChannel+0x7ac>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d157      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047ea:	4619      	mov	r1, r3
 80047ec:	482f      	ldr	r0, [pc, #188]	; (80048ac <HAL_ADC_ConfigChannel+0x7a4>)
 80047ee:	f7ff f9ca 	bl	8003b86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_ADC_ConfigChannel+0x7b0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	4a30      	ldr	r2, [pc, #192]	; (80048bc <HAL_ADC_ConfigChannel+0x7b4>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	099b      	lsrs	r3, r3, #6
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800480c:	e002      	b.n	8004814 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3b01      	subs	r3, #1
 8004812:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f9      	bne.n	800480e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800481a:	e03a      	b.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a27      	ldr	r2, [pc, #156]	; (80048c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d113      	bne.n	800484e <HAL_ADC_ConfigChannel+0x746>
 8004826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800482a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10d      	bne.n	800484e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d12a      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800483c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004844:	4619      	mov	r1, r3
 8004846:	4819      	ldr	r0, [pc, #100]	; (80048ac <HAL_ADC_ConfigChannel+0x7a4>)
 8004848:	f7ff f99d 	bl	8003b86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800484c:	e021      	b.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d11c      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004858:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800485c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d116      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a12      	ldr	r2, [pc, #72]	; (80048b4 <HAL_ADC_ConfigChannel+0x7ac>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d111      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800486e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004872:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004876:	4619      	mov	r1, r3
 8004878:	480c      	ldr	r0, [pc, #48]	; (80048ac <HAL_ADC_ConfigChannel+0x7a4>)
 800487a:	f7ff f984 	bl	8003b86 <LL_ADC_SetCommonPathInternalCh>
 800487e:	e008      	b.n	8004892 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800489a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800489e:	4618      	mov	r0, r3
 80048a0:	37d8      	adds	r7, #216	; 0xd8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	80080000 	.word	0x80080000
 80048ac:	50040300 	.word	0x50040300
 80048b0:	c7520000 	.word	0xc7520000
 80048b4:	50040000 	.word	0x50040000
 80048b8:	20000000 	.word	0x20000000
 80048bc:	053e2d63 	.word	0x053e2d63
 80048c0:	cb840000 	.word	0xcb840000
 80048c4:	80000001 	.word	0x80000001

080048c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0ed      	b.n	8004ab6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d102      	bne.n	80048ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fb6c 	bl	8001fc4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048fc:	f7ff f900 	bl	8003b00 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004902:	e012      	b.n	800492a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004904:	f7ff f8fc 	bl	8003b00 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b0a      	cmp	r3, #10
 8004910:	d90b      	bls.n	800492a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2205      	movs	r2, #5
 8004922:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e0c5      	b.n	8004ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0e5      	beq.n	8004904 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0202 	bic.w	r2, r2, #2
 8004946:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004948:	f7ff f8da 	bl	8003b00 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800494e:	e012      	b.n	8004976 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004950:	f7ff f8d6 	bl	8003b00 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b0a      	cmp	r3, #10
 800495c:	d90b      	bls.n	8004976 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2205      	movs	r2, #5
 800496e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e09f      	b.n	8004ab6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	7e1b      	ldrb	r3, [r3, #24]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d108      	bne.n	800499e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e007      	b.n	80049ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	7e5b      	ldrb	r3, [r3, #25]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d108      	bne.n	80049c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	e007      	b.n	80049d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7e9b      	ldrb	r3, [r3, #26]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d108      	bne.n	80049f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0220 	orr.w	r2, r2, #32
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e007      	b.n	8004a02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0220 	bic.w	r2, r2, #32
 8004a00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7edb      	ldrb	r3, [r3, #27]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d108      	bne.n	8004a1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0210 	bic.w	r2, r2, #16
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e007      	b.n	8004a2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0210 	orr.w	r2, r2, #16
 8004a2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7f1b      	ldrb	r3, [r3, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d108      	bne.n	8004a46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e007      	b.n	8004a56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0208 	bic.w	r2, r2, #8
 8004a54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	7f5b      	ldrb	r3, [r3, #29]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d108      	bne.n	8004a70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0204 	orr.w	r2, r2, #4
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e007      	b.n	8004a80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	1e5a      	subs	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b087      	sub	sp, #28
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ad4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d003      	beq.n	8004ae4 <HAL_CAN_ConfigFilter+0x26>
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	f040 80aa 	bne.w	8004c38 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2201      	movs	r2, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	401a      	ands	r2, r3
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d123      	bne.n	8004b66 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	401a      	ands	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3248      	adds	r2, #72	; 0x48
 8004b46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	3348      	adds	r3, #72	; 0x48
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	440b      	add	r3, r1
 8004b64:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d122      	bne.n	8004bb4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004b8e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3248      	adds	r2, #72	; 0x48
 8004b94:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ba8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004baa:	6979      	ldr	r1, [r7, #20]
 8004bac:	3348      	adds	r3, #72	; 0x48
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d109      	bne.n	8004bd0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004bce:	e007      	b.n	8004be0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004bfa:	e007      	b.n	8004c0c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	e006      	b.n	8004c46 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
  }
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d12e      	bne.n	8004cc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c7e:	f7fe ff3f 	bl	8003b00 <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004c84:	e012      	b.n	8004cac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c86:	f7fe ff3b 	bl	8003b00 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b0a      	cmp	r3, #10
 8004c92:	d90b      	bls.n	8004cac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2205      	movs	r2, #5
 8004ca4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e012      	b.n	8004cd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e5      	bne.n	8004c86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e006      	b.n	8004cd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b089      	sub	sp, #36	; 0x24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cf8:	7ffb      	ldrb	r3, [r7, #31]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d003      	beq.n	8004d06 <HAL_CAN_AddTxMessage+0x2c>
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	f040 80ad 	bne.w	8004e60 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d105      	bne.n	8004d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 8095 	beq.w	8004e50 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	0e1b      	lsrs	r3, r3, #24
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d30:	2201      	movs	r2, #1
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	409a      	lsls	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004d4c:	68f9      	ldr	r1, [r7, #12]
 8004d4e:	6809      	ldr	r1, [r1, #0]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3318      	adds	r3, #24
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	440b      	add	r3, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	e00f      	b.n	8004d7e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004d72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3318      	adds	r3, #24
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	440b      	add	r3, r1
 8004d7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3318      	adds	r3, #24
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3304      	adds	r3, #4
 8004d90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	7d1b      	ldrb	r3, [r3, #20]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d111      	bne.n	8004dbe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3318      	adds	r3, #24
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	4413      	add	r3, r2
 8004da6:	3304      	adds	r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	6811      	ldr	r1, [r2, #0]
 8004dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3318      	adds	r3, #24
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	440b      	add	r3, r1
 8004dba:	3304      	adds	r3, #4
 8004dbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	061a      	lsls	r2, r3, #24
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3306      	adds	r3, #6
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3305      	adds	r3, #5
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	3204      	adds	r2, #4
 8004dde:	7812      	ldrb	r2, [r2, #0]
 8004de0:	4610      	mov	r0, r2
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6811      	ldr	r1, [r2, #0]
 8004de6:	ea43 0200 	orr.w	r2, r3, r0
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	440b      	add	r3, r1
 8004df0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004df4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3303      	adds	r3, #3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	061a      	lsls	r2, r3, #24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3302      	adds	r3, #2
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	4313      	orrs	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	4610      	mov	r0, r2
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	6811      	ldr	r1, [r2, #0]
 8004e1c:	ea43 0200 	orr.w	r2, r3, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	440b      	add	r3, r1
 8004e26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004e2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3318      	adds	r3, #24
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4413      	add	r3, r2
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6811      	ldr	r1, [r2, #0]
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3318      	adds	r3, #24
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	440b      	add	r3, r1
 8004e4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e00e      	b.n	8004e6e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e006      	b.n	8004e6e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d003      	beq.n	8004e9e <HAL_CAN_GetRxMessage+0x24>
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f040 80f3 	bne.w	8005084 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d116      	bne.n	8004ee0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e0e7      	b.n	8005092 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0d8      	b.n	8005092 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	331b      	adds	r3, #27
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	4413      	add	r3, r2
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0204 	and.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	331b      	adds	r3, #27
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	4413      	add	r3, r2
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	0d5b      	lsrs	r3, r3, #21
 8004f0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	331b      	adds	r3, #27
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	4413      	add	r3, r2
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	08db      	lsrs	r3, r3, #3
 8004f28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	331b      	adds	r3, #27
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	4413      	add	r3, r2
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0202 	and.w	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	331b      	adds	r3, #27
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	4413      	add	r3, r2
 8004f52:	3304      	adds	r3, #4
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	331b      	adds	r3, #27
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	4413      	add	r3, r2
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	0a1b      	lsrs	r3, r3, #8
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	331b      	adds	r3, #27
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	4413      	add	r3, r2
 8004f82:	3304      	adds	r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	0a1a      	lsrs	r2, r3, #8
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0c1a      	lsrs	r2, r3, #16
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0e1a      	lsrs	r2, r3, #24
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	3303      	adds	r3, #3
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	3304      	adds	r3, #4
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	4413      	add	r3, r2
 8005014:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	0a1a      	lsrs	r2, r3, #8
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	3305      	adds	r3, #5
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	4413      	add	r3, r2
 800502e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	0c1a      	lsrs	r2, r3, #16
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	3306      	adds	r3, #6
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	4413      	add	r3, r2
 8005048:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	0e1a      	lsrs	r2, r3, #24
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	3307      	adds	r3, #7
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	e007      	b.n	8005080 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f042 0220 	orr.w	r2, r2, #32
 800507e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e006      	b.n	8005092 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d002      	beq.n	80050bc <HAL_CAN_ActivateNotification+0x1e>
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d109      	bne.n	80050d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6959      	ldr	r1, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e006      	b.n	80050de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08a      	sub	sp, #40	; 0x28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d07c      	beq.n	800522a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d023      	beq.n	8005182 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f983 	bl	8005458 <HAL_CAN_TxMailbox0CompleteCallback>
 8005152:	e016      	b.n	8005182 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f003 0304 	and.w	r3, r3, #4
 800515a:	2b00      	cmp	r3, #0
 800515c:	d004      	beq.n	8005168 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	e00c      	b.n	8005182 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
 800517a:	e002      	b.n	8005182 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f989 	bl	8005494 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d024      	beq.n	80051d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005194:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f963 	bl	800546c <HAL_CAN_TxMailbox1CompleteCallback>
 80051a6:	e016      	b.n	80051d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e00c      	b.n	80051d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	e002      	b.n	80051d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f969 	bl	80054a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d024      	beq.n	800522a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80051e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f943 	bl	8005480 <HAL_CAN_TxMailbox2CompleteCallback>
 80051fa:	e016      	b.n	800522a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	e00c      	b.n	800522a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d004      	beq.n	8005224 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e002      	b.n	800522a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f949 	bl	80054bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005244:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2210      	movs	r2, #16
 800524c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d006      	beq.n	8005270 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2208      	movs	r2, #8
 8005268:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f930 	bl	80054d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fc ff71 	bl	8002170 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0310 	and.w	r3, r3, #16
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2210      	movs	r2, #16
 80052b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2208      	movs	r2, #8
 80052cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f912 	bl	80054f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	f003 0310 	and.w	r3, r3, #16
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8f9 	bl	80054e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00b      	beq.n	8005314 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2210      	movs	r2, #16
 800530c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8fc 	bl	800550c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d006      	beq.n	8005336 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f8f5 	bl	8005520 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d07b      	beq.n	8005438 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	d072      	beq.n	8005430 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005366:	6a3b      	ldr	r3, [r7, #32]
 8005368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d043      	beq.n	8005430 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d03e      	beq.n	8005430 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d02b      	beq.n	8005414 <HAL_CAN_IRQHandler+0x32a>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d82e      	bhi.n	800541e <HAL_CAN_IRQHandler+0x334>
 80053c0:	2b50      	cmp	r3, #80	; 0x50
 80053c2:	d022      	beq.n	800540a <HAL_CAN_IRQHandler+0x320>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d82a      	bhi.n	800541e <HAL_CAN_IRQHandler+0x334>
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d019      	beq.n	8005400 <HAL_CAN_IRQHandler+0x316>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d826      	bhi.n	800541e <HAL_CAN_IRQHandler+0x334>
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d010      	beq.n	80053f6 <HAL_CAN_IRQHandler+0x30c>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d822      	bhi.n	800541e <HAL_CAN_IRQHandler+0x334>
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d002      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x2f8>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d005      	beq.n	80053ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80053e0:	e01d      	b.n	800541e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ea:	e019      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	f043 0310 	orr.w	r3, r3, #16
 80053f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053f4:	e014      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	f043 0320 	orr.w	r3, r3, #32
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053fe:	e00f      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005408:	e00a      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005412:	e005      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800541a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800541c:	e000      	b.n	8005420 <HAL_CAN_IRQHandler+0x336>
            break;
 800541e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800542e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2204      	movs	r2, #4
 8005436:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc feae 	bl	80021ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005450:	bf00      	nop
 8005452:	3728      	adds	r7, #40	; 0x28
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <__NVIC_SetPriorityGrouping+0x44>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005550:	4013      	ands	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800555c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005566:	4a04      	ldr	r2, [pc, #16]	; (8005578 <__NVIC_SetPriorityGrouping+0x44>)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	60d3      	str	r3, [r2, #12]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000ed00 	.word	0xe000ed00

0800557c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005580:	4b04      	ldr	r3, [pc, #16]	; (8005594 <__NVIC_GetPriorityGrouping+0x18>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	0a1b      	lsrs	r3, r3, #8
 8005586:	f003 0307 	and.w	r3, r3, #7
}
 800558a:	4618      	mov	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	db0b      	blt.n	80055c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	f003 021f 	and.w	r2, r3, #31
 80055b0:	4907      	ldr	r1, [pc, #28]	; (80055d0 <__NVIC_EnableIRQ+0x38>)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	2001      	movs	r0, #1
 80055ba:	fa00 f202 	lsl.w	r2, r0, r2
 80055be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000e100 	.word	0xe000e100

080055d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db12      	blt.n	800560c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	490a      	ldr	r1, [pc, #40]	; (8005618 <__NVIC_DisableIRQ+0x44>)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2001      	movs	r0, #1
 80055f6:	fa00 f202 	lsl.w	r2, r0, r2
 80055fa:	3320      	adds	r3, #32
 80055fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005600:	f3bf 8f4f 	dsb	sy
}
 8005604:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005606:	f3bf 8f6f 	isb	sy
}
 800560a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	e000e100 	.word	0xe000e100

0800561c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	6039      	str	r1, [r7, #0]
 8005626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562c:	2b00      	cmp	r3, #0
 800562e:	db0a      	blt.n	8005646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	490c      	ldr	r1, [pc, #48]	; (8005668 <__NVIC_SetPriority+0x4c>)
 8005636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	440b      	add	r3, r1
 8005640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005644:	e00a      	b.n	800565c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4908      	ldr	r1, [pc, #32]	; (800566c <__NVIC_SetPriority+0x50>)
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	3b04      	subs	r3, #4
 8005654:	0112      	lsls	r2, r2, #4
 8005656:	b2d2      	uxtb	r2, r2
 8005658:	440b      	add	r3, r1
 800565a:	761a      	strb	r2, [r3, #24]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	e000e100 	.word	0xe000e100
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	; 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f1c3 0307 	rsb	r3, r3, #7
 800568a:	2b04      	cmp	r3, #4
 800568c:	bf28      	it	cs
 800568e:	2304      	movcs	r3, #4
 8005690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3304      	adds	r3, #4
 8005696:	2b06      	cmp	r3, #6
 8005698:	d902      	bls.n	80056a0 <NVIC_EncodePriority+0x30>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3b03      	subs	r3, #3
 800569e:	e000      	b.n	80056a2 <NVIC_EncodePriority+0x32>
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a4:	f04f 32ff 	mov.w	r2, #4294967295
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	401a      	ands	r2, r3
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056b8:	f04f 31ff 	mov.w	r1, #4294967295
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	43d9      	mvns	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	4313      	orrs	r3, r2
         );
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3724      	adds	r7, #36	; 0x24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056e8:	d301      	bcc.n	80056ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ea:	2301      	movs	r3, #1
 80056ec:	e00f      	b.n	800570e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ee:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <SysTick_Config+0x40>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056f6:	210f      	movs	r1, #15
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295
 80056fc:	f7ff ff8e 	bl	800561c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <SysTick_Config+0x40>)
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005706:	4b04      	ldr	r3, [pc, #16]	; (8005718 <SysTick_Config+0x40>)
 8005708:	2207      	movs	r2, #7
 800570a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	e000e010 	.word	0xe000e010

0800571c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7ff ff05 	bl	8005534 <__NVIC_SetPriorityGrouping>
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b086      	sub	sp, #24
 8005736:	af00      	add	r7, sp, #0
 8005738:	4603      	mov	r3, r0
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005744:	f7ff ff1a 	bl	800557c <__NVIC_GetPriorityGrouping>
 8005748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff ff8e 	bl	8005670 <NVIC_EncodePriority>
 8005754:	4602      	mov	r2, r0
 8005756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff5d 	bl	800561c <__NVIC_SetPriority>
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	4603      	mov	r3, r0
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff0d 	bl	8005598 <__NVIC_EnableIRQ>
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	4603      	mov	r3, r0
 800578e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ff1d 	bl	80055d4 <__NVIC_DisableIRQ>
}
 800579a:	bf00      	nop
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ff94 	bl	80056d8 <SysTick_Config>
 80057b0:	4603      	mov	r3, r0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e098      	b.n	8005900 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b4d      	ldr	r3, [pc, #308]	; (800590c <HAL_DMA_Init+0x150>)
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d80f      	bhi.n	80057fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	4b4b      	ldr	r3, [pc, #300]	; (8005910 <HAL_DMA_Init+0x154>)
 80057e2:	4413      	add	r3, r2
 80057e4:	4a4b      	ldr	r2, [pc, #300]	; (8005914 <HAL_DMA_Init+0x158>)
 80057e6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a48      	ldr	r2, [pc, #288]	; (8005918 <HAL_DMA_Init+0x15c>)
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
 80057f8:	e00e      	b.n	8005818 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	4b46      	ldr	r3, [pc, #280]	; (800591c <HAL_DMA_Init+0x160>)
 8005802:	4413      	add	r3, r2
 8005804:	4a43      	ldr	r2, [pc, #268]	; (8005914 <HAL_DMA_Init+0x158>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	091b      	lsrs	r3, r3, #4
 800580c:	009a      	lsls	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a42      	ldr	r2, [pc, #264]	; (8005920 <HAL_DMA_Init+0x164>)
 8005816:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800583c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005872:	d039      	beq.n	80058e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <HAL_DMA_Init+0x15c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d11a      	bne.n	80058b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800587e:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_DMA_Init+0x168>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005886:	f003 031c 	and.w	r3, r3, #28
 800588a:	210f      	movs	r1, #15
 800588c:	fa01 f303 	lsl.w	r3, r1, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	4924      	ldr	r1, [pc, #144]	; (8005924 <HAL_DMA_Init+0x168>)
 8005894:	4013      	ands	r3, r2
 8005896:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <HAL_DMA_Init+0x168>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6859      	ldr	r1, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a4:	f003 031c 	and.w	r3, r3, #28
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	491d      	ldr	r1, [pc, #116]	; (8005924 <HAL_DMA_Init+0x168>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
 80058b2:	e019      	b.n	80058e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058b4:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <HAL_DMA_Init+0x16c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058bc:	f003 031c 	and.w	r3, r3, #28
 80058c0:	210f      	movs	r1, #15
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	43db      	mvns	r3, r3
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_DMA_Init+0x16c>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80058ce:	4b16      	ldr	r3, [pc, #88]	; (8005928 <HAL_DMA_Init+0x16c>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6859      	ldr	r1, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058da:	f003 031c 	and.w	r3, r3, #28
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	4911      	ldr	r1, [pc, #68]	; (8005928 <HAL_DMA_Init+0x16c>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40020407 	.word	0x40020407
 8005910:	bffdfff8 	.word	0xbffdfff8
 8005914:	cccccccd 	.word	0xcccccccd
 8005918:	40020000 	.word	0x40020000
 800591c:	bffdfbf8 	.word	0xbffdfbf8
 8005920:	40020400 	.word	0x40020400
 8005924:	400200a8 	.word	0x400200a8
 8005928:	400204a8 	.word	0x400204a8

0800592c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e072      	b.n	8005a24 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <HAL_DMA_DeInit+0x104>)
 8005956:	429a      	cmp	r2, r3
 8005958:	d80f      	bhi.n	800597a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <HAL_DMA_DeInit+0x108>)
 8005962:	4413      	add	r3, r2
 8005964:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <HAL_DMA_DeInit+0x10c>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	091b      	lsrs	r3, r3, #4
 800596c:	009a      	lsls	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a31      	ldr	r2, [pc, #196]	; (8005a3c <HAL_DMA_DeInit+0x110>)
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
 8005978:	e00e      	b.n	8005998 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	4b2f      	ldr	r3, [pc, #188]	; (8005a40 <HAL_DMA_DeInit+0x114>)
 8005982:	4413      	add	r3, r2
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_DMA_DeInit+0x10c>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	091b      	lsrs	r3, r3, #4
 800598c:	009a      	lsls	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <HAL_DMA_DeInit+0x118>)
 8005996:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a4:	f003 021c 	and.w	r2, r3, #28
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f202 	lsl.w	r2, r1, r2
 80059b2:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <HAL_DMA_DeInit+0x110>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10d      	bne.n	80059da <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_DMA_DeInit+0x11c>)
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f003 031c 	and.w	r3, r3, #28
 80059ca:	210f      	movs	r1, #15
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	491d      	ldr	r1, [pc, #116]	; (8005a48 <HAL_DMA_DeInit+0x11c>)
 80059d4:	4013      	ands	r3, r2
 80059d6:	600b      	str	r3, [r1, #0]
 80059d8:	e00c      	b.n	80059f4 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80059da:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <HAL_DMA_DeInit+0x120>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f003 031c 	and.w	r3, r3, #28
 80059e6:	210f      	movs	r1, #15
 80059e8:	fa01 f303 	lsl.w	r3, r1, r3
 80059ec:	43db      	mvns	r3, r3
 80059ee:	4917      	ldr	r1, [pc, #92]	; (8005a4c <HAL_DMA_DeInit+0x120>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	40020407 	.word	0x40020407
 8005a34:	bffdfff8 	.word	0xbffdfff8
 8005a38:	cccccccd 	.word	0xcccccccd
 8005a3c:	40020000 	.word	0x40020000
 8005a40:	bffdfbf8 	.word	0xbffdfbf8
 8005a44:	40020400 	.word	0x40020400
 8005a48:	400200a8 	.word	0x400200a8
 8005a4c:	400204a8 	.word	0x400204a8

08005a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_DMA_Start_IT+0x20>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e04b      	b.n	8005b08 <HAL_DMA_Start_IT+0xb8>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d13a      	bne.n	8005afa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f95f 	bl	8005d6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 020e 	orr.w	r2, r2, #14
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	e00f      	b.n	8005ae8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0204 	bic.w	r2, r2, #4
 8005ad6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 020a 	orr.w	r2, r2, #10
 8005ae6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e005      	b.n	8005b06 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d008      	beq.n	8005b3a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e022      	b.n	8005b80 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 020e 	bic.w	r2, r2, #14
 8005b48:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	f003 021c 	and.w	r2, r3, #28
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d005      	beq.n	8005bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
 8005bae:	e029      	b.n	8005c04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 020e 	bic.w	r2, r2, #14
 8005bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	f003 021c 	and.w	r2, r3, #28
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f202 	lsl.w	r2, r1, r2
 8005be2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
    }
  }
  return status;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f003 031c 	and.w	r3, r3, #28
 8005c2e:	2204      	movs	r2, #4
 8005c30:	409a      	lsls	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d026      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x7a>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d021      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d107      	bne.n	8005c62 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0204 	bic.w	r2, r2, #4
 8005c60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f003 021c 	and.w	r2, r3, #28
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2104      	movs	r1, #4
 8005c70:	fa01 f202 	lsl.w	r2, r1, r2
 8005c74:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d071      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005c86:	e06c      	b.n	8005d62 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	f003 031c 	and.w	r3, r3, #28
 8005c90:	2202      	movs	r2, #2
 8005c92:	409a      	lsls	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02e      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xec>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d029      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 020a 	bic.w	r2, r2, #10
 8005cc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	f003 021c 	and.w	r2, r3, #28
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	2102      	movs	r1, #2
 8005cda:	fa01 f202 	lsl.w	r2, r1, r2
 8005cde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d038      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005cf8:	e033      	b.n	8005d62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	f003 031c 	and.w	r3, r3, #28
 8005d02:	2208      	movs	r2, #8
 8005d04:	409a      	lsls	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02a      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x156>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d025      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 020e 	bic.w	r2, r2, #14
 8005d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2c:	f003 021c 	and.w	r2, r3, #28
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
}
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f003 021c 	and.w	r2, r3, #28
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2101      	movs	r1, #1
 8005d88:	fa01 f202 	lsl.w	r2, r1, r2
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d108      	bne.n	8005db0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005dae:	e007      	b.n	8005dc0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dda:	e154      	b.n	8006086 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	2101      	movs	r1, #1
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8146 	beq.w	8006080 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d005      	beq.n	8005e0c <HAL_GPIO_Init+0x40>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d130      	bne.n	8005e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	2203      	movs	r2, #3
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4013      	ands	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68da      	ldr	r2, [r3, #12]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e42:	2201      	movs	r2, #1
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	091b      	lsrs	r3, r3, #4
 8005e58:	f003 0201 	and.w	r2, r3, #1
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d017      	beq.n	8005eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	2203      	movs	r2, #3
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d123      	bne.n	8005efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	08da      	lsrs	r2, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3208      	adds	r2, #8
 8005ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	220f      	movs	r2, #15
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	43db      	mvns	r3, r3
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691a      	ldr	r2, [r3, #16]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	08da      	lsrs	r2, r3, #3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3208      	adds	r2, #8
 8005ef8:	6939      	ldr	r1, [r7, #16]
 8005efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	2203      	movs	r2, #3
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	4013      	ands	r3, r2
 8005f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0203 	and.w	r2, r3, #3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80a0 	beq.w	8006080 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f40:	4b58      	ldr	r3, [pc, #352]	; (80060a4 <HAL_GPIO_Init+0x2d8>)
 8005f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f44:	4a57      	ldr	r2, [pc, #348]	; (80060a4 <HAL_GPIO_Init+0x2d8>)
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6613      	str	r3, [r2, #96]	; 0x60
 8005f4c:	4b55      	ldr	r3, [pc, #340]	; (80060a4 <HAL_GPIO_Init+0x2d8>)
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	60bb      	str	r3, [r7, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f58:	4a53      	ldr	r2, [pc, #332]	; (80060a8 <HAL_GPIO_Init+0x2dc>)
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	3302      	adds	r3, #2
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f003 0303 	and.w	r3, r3, #3
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	220f      	movs	r2, #15
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005f82:	d019      	beq.n	8005fb8 <HAL_GPIO_Init+0x1ec>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a49      	ldr	r2, [pc, #292]	; (80060ac <HAL_GPIO_Init+0x2e0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_GPIO_Init+0x1e8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a48      	ldr	r2, [pc, #288]	; (80060b0 <HAL_GPIO_Init+0x2e4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00d      	beq.n	8005fb0 <HAL_GPIO_Init+0x1e4>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a47      	ldr	r2, [pc, #284]	; (80060b4 <HAL_GPIO_Init+0x2e8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <HAL_GPIO_Init+0x1e0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a46      	ldr	r2, [pc, #280]	; (80060b8 <HAL_GPIO_Init+0x2ec>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <HAL_GPIO_Init+0x1dc>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	e008      	b.n	8005fba <HAL_GPIO_Init+0x1ee>
 8005fa8:	2307      	movs	r3, #7
 8005faa:	e006      	b.n	8005fba <HAL_GPIO_Init+0x1ee>
 8005fac:	2303      	movs	r3, #3
 8005fae:	e004      	b.n	8005fba <HAL_GPIO_Init+0x1ee>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e002      	b.n	8005fba <HAL_GPIO_Init+0x1ee>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_GPIO_Init+0x1ee>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f002 0203 	and.w	r2, r2, #3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4093      	lsls	r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fca:	4937      	ldr	r1, [pc, #220]	; (80060a8 <HAL_GPIO_Init+0x2dc>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fd8:	4b38      	ldr	r3, [pc, #224]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ffc:	4a2f      	ldr	r2, [pc, #188]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006002:	4b2e      	ldr	r3, [pc, #184]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006026:	4a25      	ldr	r2, [pc, #148]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800602c:	4b23      	ldr	r3, [pc, #140]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	43db      	mvns	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006050:	4a1a      	ldr	r2, [pc, #104]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800607a:	4a10      	ldr	r2, [pc, #64]	; (80060bc <HAL_GPIO_Init+0x2f0>)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f aea3 	bne.w	8005ddc <HAL_GPIO_Init+0x10>
  }
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40010000 	.word	0x40010000
 80060ac:	48000400 	.word	0x48000400
 80060b0:	48000800 	.word	0x48000800
 80060b4:	48000c00 	.word	0x48000c00
 80060b8:	48001000 	.word	0x48001000
 80060bc:	40010400 	.word	0x40010400

080060c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80060ce:	e0b7      	b.n	8006240 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80060d0:	2201      	movs	r2, #1
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	4013      	ands	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80aa 	beq.w	800623a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80060e6:	4a5d      	ldr	r2, [pc, #372]	; (800625c <HAL_GPIO_DeInit+0x19c>)
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	089b      	lsrs	r3, r3, #2
 80060ec:	3302      	adds	r3, #2
 80060ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	220f      	movs	r2, #15
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4013      	ands	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800610e:	d019      	beq.n	8006144 <HAL_GPIO_DeInit+0x84>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a53      	ldr	r2, [pc, #332]	; (8006260 <HAL_GPIO_DeInit+0x1a0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_GPIO_DeInit+0x80>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a52      	ldr	r2, [pc, #328]	; (8006264 <HAL_GPIO_DeInit+0x1a4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00d      	beq.n	800613c <HAL_GPIO_DeInit+0x7c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a51      	ldr	r2, [pc, #324]	; (8006268 <HAL_GPIO_DeInit+0x1a8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d007      	beq.n	8006138 <HAL_GPIO_DeInit+0x78>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a50      	ldr	r2, [pc, #320]	; (800626c <HAL_GPIO_DeInit+0x1ac>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <HAL_GPIO_DeInit+0x74>
 8006130:	2304      	movs	r3, #4
 8006132:	e008      	b.n	8006146 <HAL_GPIO_DeInit+0x86>
 8006134:	2307      	movs	r3, #7
 8006136:	e006      	b.n	8006146 <HAL_GPIO_DeInit+0x86>
 8006138:	2303      	movs	r3, #3
 800613a:	e004      	b.n	8006146 <HAL_GPIO_DeInit+0x86>
 800613c:	2302      	movs	r3, #2
 800613e:	e002      	b.n	8006146 <HAL_GPIO_DeInit+0x86>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_GPIO_DeInit+0x86>
 8006144:	2300      	movs	r3, #0
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	f002 0203 	and.w	r2, r2, #3
 800614c:	0092      	lsls	r2, r2, #2
 800614e:	4093      	lsls	r3, r2
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	429a      	cmp	r2, r3
 8006154:	d132      	bne.n	80061bc <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006156:	4b46      	ldr	r3, [pc, #280]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	43db      	mvns	r3, r3
 800615e:	4944      	ldr	r1, [pc, #272]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 8006160:	4013      	ands	r3, r2
 8006162:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006164:	4b42      	ldr	r3, [pc, #264]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	43db      	mvns	r3, r3
 800616c:	4940      	ldr	r1, [pc, #256]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 800616e:	4013      	ands	r3, r2
 8006170:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006172:	4b3f      	ldr	r3, [pc, #252]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	43db      	mvns	r3, r3
 800617a:	493d      	ldr	r1, [pc, #244]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 800617c:	4013      	ands	r3, r2
 800617e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006180:	4b3b      	ldr	r3, [pc, #236]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	43db      	mvns	r3, r3
 8006188:	4939      	ldr	r1, [pc, #228]	; (8006270 <HAL_GPIO_DeInit+0x1b0>)
 800618a:	4013      	ands	r3, r2
 800618c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	220f      	movs	r2, #15
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800619e:	4a2f      	ldr	r2, [pc, #188]	; (800625c <HAL_GPIO_DeInit+0x19c>)
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	089b      	lsrs	r3, r3, #2
 80061a4:	3302      	adds	r3, #2
 80061a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	43da      	mvns	r2, r3
 80061ae:	482b      	ldr	r0, [pc, #172]	; (800625c <HAL_GPIO_DeInit+0x19c>)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	400a      	ands	r2, r1
 80061b6:	3302      	adds	r3, #2
 80061b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	2103      	movs	r1, #3
 80061c6:	fa01 f303 	lsl.w	r3, r1, r3
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	08da      	lsrs	r2, r3, #3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3208      	adds	r2, #8
 80061d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	220f      	movs	r2, #15
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	43db      	mvns	r3, r3
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	08d2      	lsrs	r2, r2, #3
 80061f0:	4019      	ands	r1, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3208      	adds	r2, #8
 80061f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	2103      	movs	r1, #3
 8006204:	fa01 f303 	lsl.w	r3, r1, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	401a      	ands	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	2101      	movs	r1, #1
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	fa01 f303 	lsl.w	r3, r1, r3
 800621c:	43db      	mvns	r3, r3
 800621e:	401a      	ands	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	2103      	movs	r1, #3
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	401a      	ands	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	3301      	adds	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	2b00      	cmp	r3, #0
 800624a:	f47f af41 	bne.w	80060d0 <HAL_GPIO_DeInit+0x10>
  }
}
 800624e:	bf00      	nop
 8006250:	bf00      	nop
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	40010000 	.word	0x40010000
 8006260:	48000400 	.word	0x48000400
 8006264:	48000800 	.word	0x48000800
 8006268:	48000c00 	.word	0x48000c00
 800626c:	48001000 	.word	0x48001000
 8006270:	40010400 	.word	0x40010400

08006274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	807b      	strh	r3, [r7, #2]
 8006280:	4613      	mov	r3, r2
 8006282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006284:	787b      	ldrb	r3, [r7, #1]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800628a:	887a      	ldrh	r2, [r7, #2]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006290:	e002      	b.n	8006298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006292:	887a      	ldrh	r2, [r7, #2]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <HAL_PWREx_GetVoltageRange+0x18>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40007000 	.word	0x40007000

080062c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ce:	d130      	bne.n	8006332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d0:	4b23      	ldr	r3, [pc, #140]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062dc:	d038      	beq.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2232      	movs	r2, #50	; 0x32
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0c9b      	lsrs	r3, r3, #18
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006304:	e002      	b.n	800630c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b01      	subs	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d102      	bne.n	8006320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f2      	bne.n	8006306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d110      	bne.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e00f      	b.n	8006352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633e:	d007      	beq.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800634e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40007000 	.word	0x40007000
 8006364:	20000000 	.word	0x20000000
 8006368:	431bde83 	.word	0x431bde83

0800636c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d102      	bne.n	8006380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f000 bc02 	b.w	8006b84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006380:	4b96      	ldr	r3, [pc, #600]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800638a:	4b94      	ldr	r3, [pc, #592]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f003 0303 	and.w	r3, r3, #3
 8006392:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0310 	and.w	r3, r3, #16
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80e4 	beq.w	800656a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4c>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	2b0c      	cmp	r3, #12
 80063ac:	f040 808b 	bne.w	80064c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	f040 8087 	bne.w	80064c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80063b8:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_RCC_OscConfig+0x64>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e3d9      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <HAL_RCC_OscConfig+0x7e>
 80063e0:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e8:	e005      	b.n	80063f6 <HAL_RCC_OscConfig+0x8a>
 80063ea:	4b7c      	ldr	r3, [pc, #496]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80063ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d223      	bcs.n	8006442 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 fd8a 	bl	8006f18 <RCC_SetFlashLatencyFromMSIRange>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e3ba      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800640e:	4b73      	ldr	r3, [pc, #460]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a72      	ldr	r2, [pc, #456]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006414:	f043 0308 	orr.w	r3, r3, #8
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b70      	ldr	r3, [pc, #448]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	496d      	ldr	r1, [pc, #436]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006428:	4313      	orrs	r3, r2
 800642a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800642c:	4b6b      	ldr	r3, [pc, #428]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4968      	ldr	r1, [pc, #416]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800643c:	4313      	orrs	r3, r2
 800643e:	604b      	str	r3, [r1, #4]
 8006440:	e025      	b.n	800648e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006442:	4b66      	ldr	r3, [pc, #408]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a65      	ldr	r2, [pc, #404]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006448:	f043 0308 	orr.w	r3, r3, #8
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4b63      	ldr	r3, [pc, #396]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	4960      	ldr	r1, [pc, #384]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800645c:	4313      	orrs	r3, r2
 800645e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006460:	4b5e      	ldr	r3, [pc, #376]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	495b      	ldr	r1, [pc, #364]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006470:	4313      	orrs	r3, r2
 8006472:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fd4a 	bl	8006f18 <RCC_SetFlashLatencyFromMSIRange>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e37a      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800648e:	f000 fc81 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8006492:	4602      	mov	r2, r0
 8006494:	4b51      	ldr	r3, [pc, #324]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	4950      	ldr	r1, [pc, #320]	; (80065e0 <HAL_RCC_OscConfig+0x274>)
 80064a0:	5ccb      	ldrb	r3, [r1, r3]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	fa22 f303 	lsr.w	r3, r2, r3
 80064aa:	4a4e      	ldr	r2, [pc, #312]	; (80065e4 <HAL_RCC_OscConfig+0x278>)
 80064ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80064ae:	4b4e      	ldr	r3, [pc, #312]	; (80065e8 <HAL_RCC_OscConfig+0x27c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fd fad4 	bl	8003a60 <HAL_InitTick>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d052      	beq.n	8006568 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	e35e      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d032      	beq.n	8006534 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064ce:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a42      	ldr	r2, [pc, #264]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064da:	f7fd fb11 	bl	8003b00 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064e2:	f7fd fb0d 	bl	8003b00 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e347      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064f4:	4b39      	ldr	r3, [pc, #228]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0f0      	beq.n	80064e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006500:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a35      	ldr	r2, [pc, #212]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006506:	f043 0308 	orr.w	r3, r3, #8
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b33      	ldr	r3, [pc, #204]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	4930      	ldr	r1, [pc, #192]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800651a:	4313      	orrs	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800651e:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	492b      	ldr	r1, [pc, #172]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800652e:	4313      	orrs	r3, r2
 8006530:	604b      	str	r3, [r1, #4]
 8006532:	e01a      	b.n	800656a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006534:	4b29      	ldr	r3, [pc, #164]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a28      	ldr	r2, [pc, #160]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006540:	f7fd fade 	bl	8003b00 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006548:	f7fd fada 	bl	8003b00 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e314      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800655a:	4b20      	ldr	r3, [pc, #128]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x1dc>
 8006566:	e000      	b.n	800656a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d073      	beq.n	800665e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d005      	beq.n	8006588 <HAL_RCC_OscConfig+0x21c>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b0c      	cmp	r3, #12
 8006580:	d10e      	bne.n	80065a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d10b      	bne.n	80065a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d063      	beq.n	800665c <HAL_RCC_OscConfig+0x2f0>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d15f      	bne.n	800665c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e2f1      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d106      	bne.n	80065b8 <HAL_RCC_OscConfig+0x24c>
 80065aa:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a0b      	ldr	r2, [pc, #44]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e025      	b.n	8006604 <HAL_RCC_OscConfig+0x298>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c0:	d114      	bne.n	80065ec <HAL_RCC_OscConfig+0x280>
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a05      	ldr	r2, [pc, #20]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a02      	ldr	r2, [pc, #8]	; (80065dc <HAL_RCC_OscConfig+0x270>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e013      	b.n	8006604 <HAL_RCC_OscConfig+0x298>
 80065dc:	40021000 	.word	0x40021000
 80065e0:	0800e178 	.word	0x0800e178
 80065e4:	20000000 	.word	0x20000000
 80065e8:	20000004 	.word	0x20000004
 80065ec:	4ba0      	ldr	r3, [pc, #640]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a9f      	ldr	r2, [pc, #636]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80065f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	4b9d      	ldr	r3, [pc, #628]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a9c      	ldr	r2, [pc, #624]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80065fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d013      	beq.n	8006634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd fa78 	bl	8003b00 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006614:	f7fd fa74 	bl	8003b00 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b64      	cmp	r3, #100	; 0x64
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e2ae      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006626:	4b92      	ldr	r3, [pc, #584]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x2a8>
 8006632:	e014      	b.n	800665e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006634:	f7fd fa64 	bl	8003b00 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800663c:	f7fd fa60 	bl	8003b00 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b64      	cmp	r3, #100	; 0x64
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e29a      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800664e:	4b88      	ldr	r3, [pc, #544]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x2d0>
 800665a:	e000      	b.n	800665e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800665c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d060      	beq.n	800672c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b04      	cmp	r3, #4
 800666e:	d005      	beq.n	800667c <HAL_RCC_OscConfig+0x310>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b0c      	cmp	r3, #12
 8006674:	d119      	bne.n	80066aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b02      	cmp	r3, #2
 800667a:	d116      	bne.n	80066aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800667c:	4b7c      	ldr	r3, [pc, #496]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_OscConfig+0x328>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e277      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006694:	4b76      	ldr	r3, [pc, #472]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	061b      	lsls	r3, r3, #24
 80066a2:	4973      	ldr	r1, [pc, #460]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066a8:	e040      	b.n	800672c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d023      	beq.n	80066fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b2:	4b6f      	ldr	r3, [pc, #444]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a6e      	ldr	r2, [pc, #440]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fd fa1f 	bl	8003b00 <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fd fa1b 	bl	8003b00 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e255      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d8:	4b65      	ldr	r3, [pc, #404]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	4b62      	ldr	r3, [pc, #392]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	061b      	lsls	r3, r3, #24
 80066f2:	495f      	ldr	r1, [pc, #380]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	604b      	str	r3, [r1, #4]
 80066f8:	e018      	b.n	800672c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fa:	4b5d      	ldr	r3, [pc, #372]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a5c      	ldr	r2, [pc, #368]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006706:	f7fd f9fb 	bl	8003b00 <HAL_GetTick>
 800670a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800670c:	e008      	b.n	8006720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800670e:	f7fd f9f7 	bl	8003b00 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	2b02      	cmp	r3, #2
 800671a:	d901      	bls.n	8006720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	e231      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006720:	4b53      	ldr	r3, [pc, #332]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f0      	bne.n	800670e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d03c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01c      	beq.n	800677a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006740:	4b4b      	ldr	r3, [pc, #300]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006746:	4a4a      	ldr	r2, [pc, #296]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006750:	f7fd f9d6 	bl	8003b00 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006758:	f7fd f9d2 	bl	8003b00 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e20c      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800676a:	4b41      	ldr	r3, [pc, #260]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800676c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006770:	f003 0302 	and.w	r3, r3, #2
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0ef      	beq.n	8006758 <HAL_RCC_OscConfig+0x3ec>
 8006778:	e01b      	b.n	80067b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800677a:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006780:	4a3b      	ldr	r2, [pc, #236]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678a:	f7fd f9b9 	bl	8003b00 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006792:	f7fd f9b5 	bl	8003b00 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e1ef      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067a4:	4b32      	ldr	r3, [pc, #200]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80067a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1ef      	bne.n	8006792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80a6 	beq.w	800690c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067c0:	2300      	movs	r3, #0
 80067c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067c4:	4b2a      	ldr	r3, [pc, #168]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d0:	4b27      	ldr	r3, [pc, #156]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80067d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d4:	4a26      	ldr	r2, [pc, #152]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067da:	6593      	str	r3, [r2, #88]	; 0x58
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067e8:	2301      	movs	r3, #1
 80067ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_RCC_OscConfig+0x508>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d118      	bne.n	800682a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067f8:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <HAL_RCC_OscConfig+0x508>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_RCC_OscConfig+0x508>)
 80067fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006804:	f7fd f97c 	bl	8003b00 <HAL_GetTick>
 8006808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800680a:	e008      	b.n	800681e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680c:	f7fd f978 	bl	8003b00 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e1b2      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800681e:	4b15      	ldr	r3, [pc, #84]	; (8006874 <HAL_RCC_OscConfig+0x508>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0f0      	beq.n	800680c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d108      	bne.n	8006844 <HAL_RCC_OscConfig+0x4d8>
 8006832:	4b0f      	ldr	r3, [pc, #60]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006842:	e029      	b.n	8006898 <HAL_RCC_OscConfig+0x52c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	2b05      	cmp	r3, #5
 800684a:	d115      	bne.n	8006878 <HAL_RCC_OscConfig+0x50c>
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	4a07      	ldr	r2, [pc, #28]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006854:	f043 0304 	orr.w	r3, r3, #4
 8006858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	4a03      	ldr	r2, [pc, #12]	; (8006870 <HAL_RCC_OscConfig+0x504>)
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800686c:	e014      	b.n	8006898 <HAL_RCC_OscConfig+0x52c>
 800686e:	bf00      	nop
 8006870:	40021000 	.word	0x40021000
 8006874:	40007000 	.word	0x40007000
 8006878:	4b9a      	ldr	r3, [pc, #616]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687e:	4a99      	ldr	r2, [pc, #612]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006880:	f023 0301 	bic.w	r3, r3, #1
 8006884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006888:	4b96      	ldr	r3, [pc, #600]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688e:	4a95      	ldr	r2, [pc, #596]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006890:	f023 0304 	bic.w	r3, r3, #4
 8006894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d016      	beq.n	80068ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fd f92e 	bl	8003b00 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a6:	e00a      	b.n	80068be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fd f92a 	bl	8003b00 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e162      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068be:	4b89      	ldr	r3, [pc, #548]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d0ed      	beq.n	80068a8 <HAL_RCC_OscConfig+0x53c>
 80068cc:	e015      	b.n	80068fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fd f917 	bl	8003b00 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068d6:	f7fd f913 	bl	8003b00 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e14b      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068ec:	4b7d      	ldr	r3, [pc, #500]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1ed      	bne.n	80068d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068fa:	7ffb      	ldrb	r3, [r7, #31]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d105      	bne.n	800690c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006900:	4b78      	ldr	r3, [pc, #480]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006904:	4a77      	ldr	r2, [pc, #476]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800690a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0320 	and.w	r3, r3, #32
 8006914:	2b00      	cmp	r3, #0
 8006916:	d03c      	beq.n	8006992 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01c      	beq.n	800695a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006920:	4b70      	ldr	r3, [pc, #448]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006926:	4a6f      	ldr	r2, [pc, #444]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006930:	f7fd f8e6 	bl	8003b00 <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006938:	f7fd f8e2 	bl	8003b00 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e11c      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800694a:	4b66      	ldr	r3, [pc, #408]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 800694c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0ef      	beq.n	8006938 <HAL_RCC_OscConfig+0x5cc>
 8006958:	e01b      	b.n	8006992 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800695a:	4b62      	ldr	r3, [pc, #392]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 800695c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006960:	4a60      	ldr	r2, [pc, #384]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800696a:	f7fd f8c9 	bl	8003b00 <HAL_GetTick>
 800696e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006972:	f7fd f8c5 	bl	8003b00 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e0ff      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006984:	4b57      	ldr	r3, [pc, #348]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1ef      	bne.n	8006972 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80f3 	beq.w	8006b82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f040 80c9 	bne.w	8006b38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069a6:	4b4f      	ldr	r3, [pc, #316]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f003 0203 	and.w	r2, r3, #3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d12c      	bne.n	8006a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c4:	3b01      	subs	r3, #1
 80069c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d123      	bne.n	8006a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d11b      	bne.n	8006a14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d113      	bne.n	8006a14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	085b      	lsrs	r3, r3, #1
 80069f8:	3b01      	subs	r3, #1
 80069fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d109      	bne.n	8006a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d06b      	beq.n	8006aec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	2b0c      	cmp	r3, #12
 8006a18:	d062      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a1a:	4b32      	ldr	r3, [pc, #200]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e0ac      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a36:	f7fd f863 	bl	8003b00 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3e:	f7fd f85f 	bl	8003b00 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e099      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a50:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f0      	bne.n	8006a3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a5c:	4b21      	ldr	r3, [pc, #132]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <HAL_RCC_OscConfig+0x77c>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	0112      	lsls	r2, r2, #4
 8006a70:	4311      	orrs	r1, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a76:	0212      	lsls	r2, r2, #8
 8006a78:	4311      	orrs	r1, r2
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a7e:	0852      	lsrs	r2, r2, #1
 8006a80:	3a01      	subs	r2, #1
 8006a82:	0552      	lsls	r2, r2, #21
 8006a84:	4311      	orrs	r1, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006a8a:	0852      	lsrs	r2, r2, #1
 8006a8c:	3a01      	subs	r2, #1
 8006a8e:	0652      	lsls	r2, r2, #25
 8006a90:	4311      	orrs	r1, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a96:	06d2      	lsls	r2, r2, #27
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	4912      	ldr	r1, [pc, #72]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006aa0:	4b10      	ldr	r3, [pc, #64]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0f      	ldr	r2, [pc, #60]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aac:	4b0d      	ldr	r3, [pc, #52]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ab8:	f7fd f822 	bl	8003b00 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac0:	f7fd f81e 	bl	8003b00 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e058      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ad2:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <HAL_RCC_OscConfig+0x778>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ade:	e050      	b.n	8006b82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e04f      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006aec:	4b27      	ldr	r3, [pc, #156]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d144      	bne.n	8006b82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006af8:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a23      	ldr	r2, [pc, #140]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b04:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4a20      	ldr	r2, [pc, #128]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b10:	f7fc fff6 	bl	8003b00 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b18:	f7fc fff2 	bl	8003b00 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e02c      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2a:	4b18      	ldr	r3, [pc, #96]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0f0      	beq.n	8006b18 <HAL_RCC_OscConfig+0x7ac>
 8006b36:	e024      	b.n	8006b82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b0c      	cmp	r3, #12
 8006b3c:	d01f      	beq.n	8006b7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b13      	ldr	r3, [pc, #76]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a12      	ldr	r2, [pc, #72]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4a:	f7fc ffd9 	bl	8003b00 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fc ffd5 	bl	8003b00 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e00f      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b64:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	4905      	ldr	r1, [pc, #20]	; (8006b8c <HAL_RCC_OscConfig+0x820>)
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_OscConfig+0x824>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	60cb      	str	r3, [r1, #12]
 8006b7c:	e001      	b.n	8006b82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e000      	b.n	8006b84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40021000 	.word	0x40021000
 8006b90:	feeefffc 	.word	0xfeeefffc

08006b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0e7      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b75      	ldr	r3, [pc, #468]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d910      	bls.n	8006bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b72      	ldr	r3, [pc, #456]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f023 0207 	bic.w	r2, r3, #7
 8006bbe:	4970      	ldr	r1, [pc, #448]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc6:	4b6e      	ldr	r3, [pc, #440]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d001      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0cf      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	4b66      	ldr	r3, [pc, #408]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d908      	bls.n	8006c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf4:	4b63      	ldr	r3, [pc, #396]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4960      	ldr	r1, [pc, #384]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04c      	beq.n	8006cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c1a:	4b5a      	ldr	r3, [pc, #360]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d121      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e0a6      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d107      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c32:	4b54      	ldr	r3, [pc, #336]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d115      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e09a      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c4a:	4b4e      	ldr	r3, [pc, #312]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d109      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e08e      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c5a:	4b4a      	ldr	r3, [pc, #296]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e086      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c6a:	4b46      	ldr	r3, [pc, #280]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f023 0203 	bic.w	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	4943      	ldr	r1, [pc, #268]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fc ff40 	bl	8003b00 <HAL_GetTick>
 8006c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c82:	e00a      	b.n	8006c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c84:	f7fc ff3c 	bl	8003b00 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e06e      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9a:	4b3a      	ldr	r3, [pc, #232]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 020c 	and.w	r2, r3, #12
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d1eb      	bne.n	8006c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	4b31      	ldr	r3, [pc, #196]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d208      	bcs.n	8006cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cc8:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	492b      	ldr	r1, [pc, #172]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cda:	4b29      	ldr	r3, [pc, #164]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d210      	bcs.n	8006d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce8:	4b25      	ldr	r3, [pc, #148]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f023 0207 	bic.w	r2, r3, #7
 8006cf0:	4923      	ldr	r1, [pc, #140]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf8:	4b21      	ldr	r3, [pc, #132]	; (8006d80 <HAL_RCC_ClockConfig+0x1ec>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e036      	b.n	8006d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d16:	4b1b      	ldr	r3, [pc, #108]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	4918      	ldr	r1, [pc, #96]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	4910      	ldr	r1, [pc, #64]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d48:	f000 f824 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <HAL_RCC_ClockConfig+0x1f0>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	091b      	lsrs	r3, r3, #4
 8006d54:	f003 030f 	and.w	r3, r3, #15
 8006d58:	490b      	ldr	r1, [pc, #44]	; (8006d88 <HAL_RCC_ClockConfig+0x1f4>)
 8006d5a:	5ccb      	ldrb	r3, [r1, r3]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	fa22 f303 	lsr.w	r3, r2, r3
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_RCC_ClockConfig+0x1f8>)
 8006d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <HAL_RCC_ClockConfig+0x1fc>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fc fe77 	bl	8003a60 <HAL_InitTick>
 8006d72:	4603      	mov	r3, r0
 8006d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8006d76:	7afb      	ldrb	r3, [r7, #11]
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40022000 	.word	0x40022000
 8006d84:	40021000 	.word	0x40021000
 8006d88:	0800e178 	.word	0x0800e178
 8006d8c:	20000000 	.word	0x20000000
 8006d90:	20000004 	.word	0x20000004

08006d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b089      	sub	sp, #36	; 0x24
 8006d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da2:	4b3e      	ldr	r3, [pc, #248]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 030c 	and.w	r3, r3, #12
 8006daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dac:	4b3b      	ldr	r3, [pc, #236]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2b0c      	cmp	r3, #12
 8006dc0:	d121      	bne.n	8006e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d11e      	bne.n	8006e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006dc8:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d107      	bne.n	8006de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006dd4:	4b31      	ldr	r3, [pc, #196]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	61fb      	str	r3, [r7, #28]
 8006de2:	e005      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006de4:	4b2d      	ldr	r3, [pc, #180]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	091b      	lsrs	r3, r3, #4
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006df0:	4a2b      	ldr	r2, [pc, #172]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10d      	bne.n	8006e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d102      	bne.n	8006e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e0e:	61bb      	str	r3, [r7, #24]
 8006e10:	e004      	b.n	8006e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e18:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b0c      	cmp	r3, #12
 8006e20:	d134      	bne.n	8006e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e22:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d003      	beq.n	8006e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d003      	beq.n	8006e40 <HAL_RCC_GetSysClockFreq+0xac>
 8006e38:	e005      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e3c:	617b      	str	r3, [r7, #20]
      break;
 8006e3e:	e005      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e40:	4b18      	ldr	r3, [pc, #96]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e42:	617b      	str	r3, [r7, #20]
      break;
 8006e44:	e002      	b.n	8006e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	617b      	str	r3, [r7, #20]
      break;
 8006e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e4c:	4b13      	ldr	r3, [pc, #76]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	091b      	lsrs	r3, r3, #4
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	3301      	adds	r3, #1
 8006e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e5a:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	fb03 f202 	mul.w	r2, r3, r2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	0e5b      	lsrs	r3, r3, #25
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3724      	adds	r7, #36	; 0x24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	0800e190 	.word	0x0800e190
 8006ea4:	00f42400 	.word	0x00f42400

08006ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eac:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8006eae:	681b      	ldr	r3, [r3, #0]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000000 	.word	0x20000000

08006ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ec4:	f7ff fff0 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	f003 0307 	and.w	r3, r3, #7
 8006ed4:	4904      	ldr	r1, [pc, #16]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ed6:	5ccb      	ldrb	r3, [r1, r3]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40021000 	.word	0x40021000
 8006ee8:	0800e188 	.word	0x0800e188

08006eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ef0:	f7ff ffda 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0adb      	lsrs	r3, r3, #11
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4904      	ldr	r1, [pc, #16]	; (8006f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	f003 031f 	and.w	r3, r3, #31
 8006f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	40021000 	.word	0x40021000
 8006f14:	0800e188 	.word	0x0800e188

08006f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f30:	f7ff f9b8 	bl	80062a4 <HAL_PWREx_GetVoltageRange>
 8006f34:	6178      	str	r0, [r7, #20]
 8006f36:	e014      	b.n	8006f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f38:	4b25      	ldr	r3, [pc, #148]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	4a24      	ldr	r2, [pc, #144]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f42:	6593      	str	r3, [r2, #88]	; 0x58
 8006f44:	4b22      	ldr	r3, [pc, #136]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f50:	f7ff f9a8 	bl	80062a4 <HAL_PWREx_GetVoltageRange>
 8006f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f56:	4b1e      	ldr	r3, [pc, #120]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f68:	d10b      	bne.n	8006f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d919      	bls.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2ba0      	cmp	r3, #160	; 0xa0
 8006f74:	d902      	bls.n	8006f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f76:	2302      	movs	r3, #2
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	e013      	b.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e010      	b.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d902      	bls.n	8006f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f88:	2303      	movs	r3, #3
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	e00a      	b.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d102      	bne.n	8006f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f94:	2302      	movs	r3, #2
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	e004      	b.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b70      	cmp	r3, #112	; 0x70
 8006f9e:	d101      	bne.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fa4:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f023 0207 	bic.w	r2, r3, #7
 8006fac:	4909      	ldr	r1, [pc, #36]	; (8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006fb4:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d001      	beq.n	8006fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e000      	b.n	8006fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40022000 	.word	0x40022000

08006fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d031      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ffc:	d01a      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006ffe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007002:	d814      	bhi.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007008:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800700c:	d10f      	bne.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800700e:	4b5d      	ldr	r3, [pc, #372]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	4a5c      	ldr	r2, [pc, #368]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800701a:	e00c      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f9f0 	bl	8007408 <RCCEx_PLLSAI1_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800702c:	e003      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	74fb      	strb	r3, [r7, #19]
      break;
 8007032:	e000      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007036:	7cfb      	ldrb	r3, [r7, #19]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800703c:	4b51      	ldr	r3, [pc, #324]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	494e      	ldr	r1, [pc, #312]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007052:	e001      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	7cfb      	ldrb	r3, [r7, #19]
 8007056:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 809e 	beq.w	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007066:	2300      	movs	r3, #0
 8007068:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800706a:	4b46      	ldr	r3, [pc, #280]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00d      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007080:	4b40      	ldr	r3, [pc, #256]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007084:	4a3f      	ldr	r2, [pc, #252]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708a:	6593      	str	r3, [r2, #88]	; 0x58
 800708c:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800708e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007094:	60bb      	str	r3, [r7, #8]
 8007096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007098:	2301      	movs	r3, #1
 800709a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800709c:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a39      	ldr	r2, [pc, #228]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070a8:	f7fc fd2a 	bl	8003b00 <HAL_GetTick>
 80070ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070ae:	e009      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070b0:	f7fc fd26 	bl	8003b00 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d902      	bls.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	74fb      	strb	r3, [r7, #19]
        break;
 80070c2:	e005      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0ef      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80070d0:	7cfb      	ldrb	r3, [r7, #19]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d15a      	bne.n	800718c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070d6:	4b2b      	ldr	r3, [pc, #172]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01e      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d019      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070f2:	4b24      	ldr	r3, [pc, #144]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070fe:	4b21      	ldr	r3, [pc, #132]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800711e:	4a19      	ldr	r2, [pc, #100]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fc fce6 	bl	8003b00 <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007136:	e00b      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fc fce2 	bl	8003b00 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d902      	bls.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	74fb      	strb	r3, [r7, #19]
            break;
 800714e:	e006      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007150:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0ec      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800715e:	7cfb      	ldrb	r3, [r7, #19]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007164:	4b07      	ldr	r3, [pc, #28]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800716a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	4904      	ldr	r1, [pc, #16]	; (8007184 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007174:	4313      	orrs	r3, r2
 8007176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800717a:	e009      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800717c:	7cfb      	ldrb	r3, [r7, #19]
 800717e:	74bb      	strb	r3, [r7, #18]
 8007180:	e006      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007182:	bf00      	nop
 8007184:	40021000 	.word	0x40021000
 8007188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718c:	7cfb      	ldrb	r3, [r7, #19]
 800718e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007190:	7c7b      	ldrb	r3, [r7, #17]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d105      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007196:	4b9b      	ldr	r3, [pc, #620]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800719a:	4a9a      	ldr	r2, [pc, #616]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800719c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071ae:	4b95      	ldr	r3, [pc, #596]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b4:	f023 0203 	bic.w	r2, r3, #3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	4991      	ldr	r1, [pc, #580]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071d0:	4b8c      	ldr	r3, [pc, #560]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f023 020c 	bic.w	r2, r3, #12
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	4989      	ldr	r1, [pc, #548]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071f2:	4b84      	ldr	r3, [pc, #528]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	4980      	ldr	r1, [pc, #512]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007214:	4b7b      	ldr	r3, [pc, #492]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	4978      	ldr	r1, [pc, #480]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007236:	4b73      	ldr	r3, [pc, #460]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007244:	496f      	ldr	r1, [pc, #444]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007258:	4b6a      	ldr	r3, [pc, #424]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800725a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	4967      	ldr	r1, [pc, #412]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007268:	4313      	orrs	r3, r2
 800726a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800727a:	4b62      	ldr	r3, [pc, #392]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800727c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007280:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	495e      	ldr	r1, [pc, #376]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800729c:	4b59      	ldr	r3, [pc, #356]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800729e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072aa:	4956      	ldr	r1, [pc, #344]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072be:	4b51      	ldr	r3, [pc, #324]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	494d      	ldr	r1, [pc, #308]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d028      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072e0:	4b48      	ldr	r3, [pc, #288]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ee:	4945      	ldr	r1, [pc, #276]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072fe:	d106      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007300:	4b40      	ldr	r3, [pc, #256]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a3f      	ldr	r2, [pc, #252]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730a:	60d3      	str	r3, [r2, #12]
 800730c:	e011      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007316:	d10c      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f000 f872 	bl	8007408 <RCCEx_PLLSAI1_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007328:	7cfb      	ldrb	r3, [r7, #19]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800732e:	7cfb      	ldrb	r3, [r7, #19]
 8007330:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d028      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800733e:	4b31      	ldr	r3, [pc, #196]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007344:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734c:	492d      	ldr	r1, [pc, #180]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800735c:	d106      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800735e:	4b29      	ldr	r3, [pc, #164]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4a28      	ldr	r2, [pc, #160]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007368:	60d3      	str	r3, [r2, #12]
 800736a:	e011      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007374:	d10c      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	2101      	movs	r1, #1
 800737c:	4618      	mov	r0, r3
 800737e:	f000 f843 	bl	8007408 <RCCEx_PLLSAI1_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007386:	7cfb      	ldrb	r3, [r7, #19]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01c      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800739c:	4b19      	ldr	r3, [pc, #100]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073aa:	4916      	ldr	r1, [pc, #88]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 f820 	bl	8007408 <RCCEx_PLLSAI1_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073cc:	7cfb      	ldrb	r3, [r7, #19]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80073d2:	7cfb      	ldrb	r3, [r7, #19]
 80073d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f0:	4904      	ldr	r1, [pc, #16]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80073f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40021000 	.word	0x40021000

08007408 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007416:	4b74      	ldr	r3, [pc, #464]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d018      	beq.n	8007454 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007422:	4b71      	ldr	r3, [pc, #452]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	f003 0203 	and.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d10d      	bne.n	800744e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
       ||
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800743a:	4b6b      	ldr	r3, [pc, #428]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	091b      	lsrs	r3, r3, #4
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
       ||
 800744a:	429a      	cmp	r2, r3
 800744c:	d047      	beq.n	80074de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e044      	b.n	80074de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b03      	cmp	r3, #3
 800745a:	d018      	beq.n	800748e <RCCEx_PLLSAI1_Config+0x86>
 800745c:	2b03      	cmp	r3, #3
 800745e:	d825      	bhi.n	80074ac <RCCEx_PLLSAI1_Config+0xa4>
 8007460:	2b01      	cmp	r3, #1
 8007462:	d002      	beq.n	800746a <RCCEx_PLLSAI1_Config+0x62>
 8007464:	2b02      	cmp	r3, #2
 8007466:	d009      	beq.n	800747c <RCCEx_PLLSAI1_Config+0x74>
 8007468:	e020      	b.n	80074ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800746a:	4b5f      	ldr	r3, [pc, #380]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d11d      	bne.n	80074b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800747a:	e01a      	b.n	80074b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800747c:	4b5a      	ldr	r3, [pc, #360]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007484:	2b00      	cmp	r3, #0
 8007486:	d116      	bne.n	80074b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800748c:	e013      	b.n	80074b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800748e:	4b56      	ldr	r3, [pc, #344]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10f      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800749a:	4b53      	ldr	r3, [pc, #332]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074aa:	e006      	b.n	80074ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	73fb      	strb	r3, [r7, #15]
      break;
 80074b0:	e004      	b.n	80074bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074b2:	bf00      	nop
 80074b4:	e002      	b.n	80074bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074b6:	bf00      	nop
 80074b8:	e000      	b.n	80074bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074c2:	4b49      	ldr	r3, [pc, #292]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6819      	ldr	r1, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	430b      	orrs	r3, r1
 80074d8:	4943      	ldr	r1, [pc, #268]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d17c      	bne.n	80075de <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074e4:	4b40      	ldr	r3, [pc, #256]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a3f      	ldr	r2, [pc, #252]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f0:	f7fc fb06 	bl	8003b00 <HAL_GetTick>
 80074f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074f6:	e009      	b.n	800750c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074f8:	f7fc fb02 	bl	8003b00 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	73fb      	strb	r3, [r7, #15]
        break;
 800750a:	e005      	b.n	8007518 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1ef      	bne.n	80074f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d15f      	bne.n	80075de <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d110      	bne.n	8007546 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007524:	4b30      	ldr	r3, [pc, #192]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800752c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6892      	ldr	r2, [r2, #8]
 8007534:	0211      	lsls	r1, r2, #8
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	68d2      	ldr	r2, [r2, #12]
 800753a:	06d2      	lsls	r2, r2, #27
 800753c:	430a      	orrs	r2, r1
 800753e:	492a      	ldr	r1, [pc, #168]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007540:	4313      	orrs	r3, r2
 8007542:	610b      	str	r3, [r1, #16]
 8007544:	e027      	b.n	8007596 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d112      	bne.n	8007572 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800754c:	4b26      	ldr	r3, [pc, #152]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	6892      	ldr	r2, [r2, #8]
 800755c:	0211      	lsls	r1, r2, #8
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6912      	ldr	r2, [r2, #16]
 8007562:	0852      	lsrs	r2, r2, #1
 8007564:	3a01      	subs	r2, #1
 8007566:	0552      	lsls	r2, r2, #21
 8007568:	430a      	orrs	r2, r1
 800756a:	491f      	ldr	r1, [pc, #124]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800756c:	4313      	orrs	r3, r2
 800756e:	610b      	str	r3, [r1, #16]
 8007570:	e011      	b.n	8007596 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007572:	4b1d      	ldr	r3, [pc, #116]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800757a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6892      	ldr	r2, [r2, #8]
 8007582:	0211      	lsls	r1, r2, #8
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6952      	ldr	r2, [r2, #20]
 8007588:	0852      	lsrs	r2, r2, #1
 800758a:	3a01      	subs	r2, #1
 800758c:	0652      	lsls	r2, r2, #25
 800758e:	430a      	orrs	r2, r1
 8007590:	4915      	ldr	r1, [pc, #84]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007596:	4b14      	ldr	r3, [pc, #80]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075a0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075a2:	f7fc faad 	bl	8003b00 <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075a8:	e009      	b.n	80075be <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075aa:	f7fc faa9 	bl	8003b00 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d902      	bls.n	80075be <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	73fb      	strb	r3, [r7, #15]
          break;
 80075bc:	e005      	b.n	80075ca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d0ef      	beq.n	80075aa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d106      	bne.n	80075de <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d2:	691a      	ldr	r2, [r3, #16]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4903      	ldr	r1, [pc, #12]	; (80075e8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075de:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40021000 	.word	0x40021000

080075ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e049      	b.n	8007692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fb fc24 	bl	8002e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f000 fa00 	bl	8007a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e03b      	b.n	800772c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a19      	ldr	r2, [pc, #100]	; (8007738 <HAL_TIM_Base_Start_IT+0x9c>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIM_Base_Start_IT+0x4e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076de:	d004      	beq.n	80076ea <HAL_TIM_Base_Start_IT+0x4e>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <HAL_TIM_Base_Start_IT+0xa0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d115      	bne.n	8007716 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	4b13      	ldr	r3, [pc, #76]	; (8007740 <HAL_TIM_Base_Start_IT+0xa4>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b06      	cmp	r3, #6
 80076fa:	d015      	beq.n	8007728 <HAL_TIM_Base_Start_IT+0x8c>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007702:	d011      	beq.n	8007728 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007714:	e008      	b.n	8007728 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0201 	orr.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e000      	b.n	800772a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007728:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	40012c00 	.word	0x40012c00
 800773c:	40014000 	.word	0x40014000
 8007740:	00010007 	.word	0x00010007

08007744 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	f241 1311 	movw	r3, #4369	; 0x1111
 8007766:	4013      	ands	r3, r2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10f      	bne.n	800778c <HAL_TIM_Base_Stop_IT+0x48>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a1a      	ldr	r2, [r3, #32]
 8007772:	f240 4344 	movw	r3, #1092	; 0x444
 8007776:	4013      	ands	r3, r2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d107      	bne.n	800778c <HAL_TIM_Base_Stop_IT+0x48>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0201 	bic.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d122      	bne.n	80077fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d11b      	bne.n	80077fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f06f 0202 	mvn.w	r2, #2
 80077ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f905 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80077ea:	e005      	b.n	80077f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8f7 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f908 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b04      	cmp	r3, #4
 800780a:	d122      	bne.n	8007852 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b04      	cmp	r3, #4
 8007818:	d11b      	bne.n	8007852 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f06f 0204 	mvn.w	r2, #4
 8007822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f8db 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 800783e:	e005      	b.n	800784c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8cd 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8de 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b08      	cmp	r3, #8
 800785e:	d122      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b08      	cmp	r3, #8
 800786c:	d11b      	bne.n	80078a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f06f 0208 	mvn.w	r2, #8
 8007876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2204      	movs	r2, #4
 800787c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	f003 0303 	and.w	r3, r3, #3
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8b1 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 8007892:	e005      	b.n	80078a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f8a3 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f8b4 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d122      	bne.n	80078fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d11b      	bne.n	80078fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0210 	mvn.w	r2, #16
 80078ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2208      	movs	r2, #8
 80078d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f887 	bl	80079f4 <HAL_TIM_IC_CaptureCallback>
 80078e6:	e005      	b.n	80078f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f879 	bl	80079e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f88a 	bl	8007a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0201 	mvn.w	r2, #1
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fb fafb 	bl	8002f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007930:	2b80      	cmp	r3, #128	; 0x80
 8007932:	d10e      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d107      	bne.n	8007952 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800794a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f943 	bl	8007bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007960:	d10e      	bne.n	8007980 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796c:	2b80      	cmp	r3, #128	; 0x80
 800796e:	d107      	bne.n	8007980 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f936 	bl	8007bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798a:	2b40      	cmp	r3, #64	; 0x40
 800798c:	d10e      	bne.n	80079ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d107      	bne.n	80079ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f838 	bl	8007a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d10e      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d107      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0220 	mvn.w	r2, #32
 80079d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f8f6 	bl	8007bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a2a      	ldr	r2, [pc, #168]	; (8007aec <TIM_Base_SetConfig+0xbc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_Base_SetConfig+0x20>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4e:	d108      	bne.n	8007a62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a21      	ldr	r2, [pc, #132]	; (8007aec <TIM_Base_SetConfig+0xbc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00b      	beq.n	8007a82 <TIM_Base_SetConfig+0x52>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d007      	beq.n	8007a82 <TIM_Base_SetConfig+0x52>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <TIM_Base_SetConfig+0xc0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_Base_SetConfig+0x52>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a1d      	ldr	r2, [pc, #116]	; (8007af4 <TIM_Base_SetConfig+0xc4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d108      	bne.n	8007a94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689a      	ldr	r2, [r3, #8]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a0c      	ldr	r2, [pc, #48]	; (8007aec <TIM_Base_SetConfig+0xbc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <TIM_Base_SetConfig+0xa0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <TIM_Base_SetConfig+0xc0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0xa0>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <TIM_Base_SetConfig+0xc4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d103      	bne.n	8007ad8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	615a      	str	r2, [r3, #20]
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400

08007af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e04f      	b.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a21      	ldr	r2, [pc, #132]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a14      	ldr	r2, [pc, #80]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b78:	d004      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a10      	ldr	r2, [pc, #64]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10c      	bne.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40012c00 	.word	0x40012c00
 8007bc0:	40014000 	.word	0x40014000

08007bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e040      	b.n	8007c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fb fa28 	bl	8003078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2224      	movs	r2, #36	; 0x24
 8007c2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fd6c 	bl	800871c <UART_SetConfig>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e022      	b.n	8007c94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 ffba 	bl	8008bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f001 f841 	bl	8008d14 <UART_CheckIdleState>
 8007c92:	4603      	mov	r3, r0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e02b      	b.n	8007d06 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2224      	movs	r2, #36	; 0x24
 8007cb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fb fae5 	bl	80032ac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b08a      	sub	sp, #40	; 0x28
 8007d12:	af02      	add	r7, sp, #8
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	f040 8082 	bne.w	8007e2c <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <HAL_UART_Transmit+0x26>
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e07a      	b.n	8007e2e <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_UART_Transmit+0x38>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e073      	b.n	8007e2e <HAL_UART_Transmit+0x120>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2221      	movs	r2, #33	; 0x21
 8007d5a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d5c:	f7fb fed0 	bl	8003b00 <HAL_GetTick>
 8007d60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	88fa      	ldrh	r2, [r7, #6]
 8007d66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d108      	bne.n	8007d8e <HAL_UART_Transmit+0x80>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d104      	bne.n	8007d8e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	61bb      	str	r3, [r7, #24]
 8007d8c:	e003      	b.n	8007d96 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007d9e:	e02d      	b.n	8007dfc <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2200      	movs	r2, #0
 8007da8:	2180      	movs	r1, #128	; 0x80
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 fffb 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e039      	b.n	8007e2e <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	881a      	ldrh	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	3302      	adds	r3, #2
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e008      	b.n	8007dea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	781a      	ldrb	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	b292      	uxth	r2, r2
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	3301      	adds	r3, #1
 8007de8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1cb      	bne.n	8007da0 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 ffc7 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e005      	b.n	8007e2e <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2220      	movs	r2, #32
 8007e26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	e000      	b.n	8007e2e <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007e2c:	2302      	movs	r3, #2
  }
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b08a      	sub	sp, #40	; 0x28
 8007e3a:	af02      	add	r7, sp, #8
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	603b      	str	r3, [r7, #0]
 8007e42:	4613      	mov	r3, r2
 8007e44:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	f040 80bf 	bne.w	8007fce <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <HAL_UART_Receive+0x26>
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e0b7      	b.n	8007fd0 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Receive+0x38>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e0b0      	b.n	8007fd0 <HAL_UART_Receive+0x19a>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2222      	movs	r2, #34	; 0x22
 8007e82:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e8a:	f7fb fe39 	bl	8003b00 <HAL_GetTick>
 8007e8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	88fa      	ldrh	r2, [r7, #6]
 8007e9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d10e      	bne.n	8007ec8 <HAL_UART_Receive+0x92>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <HAL_UART_Receive+0x88>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ebc:	e02d      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	22ff      	movs	r2, #255	; 0xff
 8007ec2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ec6:	e028      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10d      	bne.n	8007eec <HAL_UART_Receive+0xb6>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d104      	bne.n	8007ee2 <HAL_UART_Receive+0xac>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	22ff      	movs	r2, #255	; 0xff
 8007edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ee0:	e01b      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	227f      	movs	r2, #127	; 0x7f
 8007ee6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007eea:	e016      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef4:	d10d      	bne.n	8007f12 <HAL_UART_Receive+0xdc>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d104      	bne.n	8007f08 <HAL_UART_Receive+0xd2>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	227f      	movs	r2, #127	; 0x7f
 8007f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f06:	e008      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	223f      	movs	r2, #63	; 0x3f
 8007f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f10:	e003      	b.n	8007f1a <HAL_UART_Receive+0xe4>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f2a:	d108      	bne.n	8007f3e <HAL_UART_Receive+0x108>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d104      	bne.n	8007f3e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e003      	b.n	8007f46 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f42:	2300      	movs	r3, #0
 8007f44:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007f4e:	e033      	b.n	8007fb8 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2200      	movs	r2, #0
 8007f58:	2120      	movs	r1, #32
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 ff23 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e032      	b.n	8007fd0 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10c      	bne.n	8007f8a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	8a7b      	ldrh	r3, [r7, #18]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	3302      	adds	r3, #2
 8007f86:	61bb      	str	r3, [r7, #24]
 8007f88:	e00d      	b.n	8007fa6 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	8a7b      	ldrh	r3, [r7, #18]
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	4013      	ands	r3, r2
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1c5      	bne.n	8007f50 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e000      	b.n	8007fd0 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007fce:	2302      	movs	r3, #2
  }
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3720      	adds	r7, #32
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d142      	bne.n	8008074 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <HAL_UART_Receive_IT+0x22>
 8007ff4:	88fb      	ldrh	r3, [r7, #6]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e03b      	b.n	8008076 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_UART_Receive_IT+0x34>
 8008008:	2302      	movs	r3, #2
 800800a:	e034      	b.n	8008076 <HAL_UART_Receive_IT+0x9e>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a18      	ldr	r2, [pc, #96]	; (8008080 <HAL_UART_Receive_IT+0xa8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d01f      	beq.n	8008064 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d018      	beq.n	8008064 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	e853 3f00 	ldrex	r3, [r3]
 800803e:	613b      	str	r3, [r7, #16]
   return(result);
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008046:	627b      	str	r3, [r7, #36]	; 0x24
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	623b      	str	r3, [r7, #32]
 8008052:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	69f9      	ldr	r1, [r7, #28]
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	e841 2300 	strex	r3, r2, [r1]
 800805c:	61bb      	str	r3, [r7, #24]
   return(result);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e6      	bne.n	8008032 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008064:	88fb      	ldrh	r3, [r7, #6]
 8008066:	461a      	mov	r2, r3
 8008068:	68b9      	ldr	r1, [r7, #8]
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f000 ff60 	bl	8008f30 <UART_Start_Receive_IT>
 8008070:	4603      	mov	r3, r0
 8008072:	e000      	b.n	8008076 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008074:	2302      	movs	r3, #2
  }
}
 8008076:	4618      	mov	r0, r3
 8008078:	3728      	adds	r7, #40	; 0x28
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40008000 	.word	0x40008000

08008084 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008096:	2b20      	cmp	r3, #32
 8008098:	d142      	bne.n	8008120 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <HAL_UART_Receive_DMA+0x22>
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e03b      	b.n	8008122 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d101      	bne.n	80080b8 <HAL_UART_Receive_DMA+0x34>
 80080b4:	2302      	movs	r3, #2
 80080b6:	e034      	b.n	8008122 <HAL_UART_Receive_DMA+0x9e>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a18      	ldr	r2, [pc, #96]	; (800812c <HAL_UART_Receive_DMA+0xa8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d01f      	beq.n	8008110 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d018      	beq.n	8008110 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	613b      	str	r3, [r7, #16]
   return(result);
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	623b      	str	r3, [r7, #32]
 80080fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	69f9      	ldr	r1, [r7, #28]
 8008102:	6a3a      	ldr	r2, [r7, #32]
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	61bb      	str	r3, [r7, #24]
   return(result);
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e6      	bne.n	80080de <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	461a      	mov	r2, r3
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 ffd4 	bl	80090c4 <UART_Start_Receive_DMA>
 800811c:	4603      	mov	r3, r0
 800811e:	e000      	b.n	8008122 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3728      	adds	r7, #40	; 0x28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	40008000 	.word	0x40008000

08008130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b0ba      	sub	sp, #232	; 0xe8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800815a:	f640 030f 	movw	r3, #2063	; 0x80f
 800815e:	4013      	ands	r3, r2
 8008160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d115      	bne.n	8008198 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00f      	beq.n	8008198 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 82a6 	beq.w	80086da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	4798      	blx	r3
      }
      return;
 8008196:	e2a0      	b.n	80086da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 8117 	beq.w	80083d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80081ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80081b2:	4b85      	ldr	r3, [pc, #532]	; (80083c8 <HAL_UART_IRQHandler+0x298>)
 80081b4:	4013      	ands	r3, r2
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 810a 	beq.w	80083d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <HAL_UART_IRQHandler+0xbc>
 80081c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00b      	beq.n	80081ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2201      	movs	r2, #1
 80081da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e2:	f043 0201 	orr.w	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d011      	beq.n	800821c <HAL_UART_IRQHandler+0xec>
 80081f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fc:	f003 0301 	and.w	r3, r3, #1
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00b      	beq.n	800821c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2202      	movs	r2, #2
 800820a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008212:	f043 0204 	orr.w	r2, r3, #4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800821c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d011      	beq.n	800824c <HAL_UART_IRQHandler+0x11c>
 8008228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800822c:	f003 0301 	and.w	r3, r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2204      	movs	r2, #4
 800823a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008242:	f043 0202 	orr.w	r2, r3, #2
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800824c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b00      	cmp	r3, #0
 8008256:	d017      	beq.n	8008288 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800825c:	f003 0320 	and.w	r3, r3, #32
 8008260:	2b00      	cmp	r3, #0
 8008262:	d105      	bne.n	8008270 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008268:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2208      	movs	r2, #8
 8008276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800827e:	f043 0208 	orr.w	r2, r3, #8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008290:	2b00      	cmp	r3, #0
 8008292:	d012      	beq.n	80082ba <HAL_UART_IRQHandler+0x18a>
 8008294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b0:	f043 0220 	orr.w	r2, r3, #32
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 820c 	beq.w	80086de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80082c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d005      	beq.n	8008312 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800830a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800830e:	2b00      	cmp	r3, #0
 8008310:	d04f      	beq.n	80083b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 ffa2 	bl	800925c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d141      	bne.n	80083aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3308      	adds	r3, #8
 800832c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800833c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3308      	adds	r3, #8
 800834e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800835e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800836a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1d9      	bne.n	8008326 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	2b00      	cmp	r3, #0
 8008378:	d013      	beq.n	80083a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	4a13      	ldr	r2, [pc, #76]	; (80083cc <HAL_UART_IRQHandler+0x29c>)
 8008380:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	4618      	mov	r0, r3
 8008388:	f7fd fc00 	bl	8005b8c <HAL_DMA_Abort_IT>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d017      	beq.n	80083c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800839c:	4610      	mov	r0, r2
 800839e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a0:	e00f      	b.n	80083c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f9b0 	bl	8008708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a8:	e00b      	b.n	80083c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f9ac 	bl	8008708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b0:	e007      	b.n	80083c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9a8 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80083c0:	e18d      	b.n	80086de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083c2:	bf00      	nop
    return;
 80083c4:	e18b      	b.n	80086de <HAL_UART_IRQHandler+0x5ae>
 80083c6:	bf00      	nop
 80083c8:	04000120 	.word	0x04000120
 80083cc:	080094fb 	.word	0x080094fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	f040 8146 	bne.w	8008666 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80083da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 813f 	beq.w	8008666 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80083e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8138 	beq.w	8008666 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2210      	movs	r2, #16
 80083fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008408:	2b40      	cmp	r3, #64	; 0x40
 800840a:	f040 80b4 	bne.w	8008576 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800841a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 815f 	beq.w	80086e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800842a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800842e:	429a      	cmp	r2, r3
 8008430:	f080 8157 	bcs.w	80086e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800843a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	f040 8085 	bne.w	800855a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800845c:	e853 3f00 	ldrex	r3, [r3]
 8008460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800846c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800847a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800847e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1da      	bne.n	8008450 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084ac:	f023 0301 	bic.w	r3, r3, #1
 80084b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80084c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80084c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e1      	bne.n	800849a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3308      	adds	r3, #8
 80084dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008502:	e841 2300 	strex	r3, r2, [r1]
 8008506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e3      	bne.n	80084d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2220      	movs	r2, #32
 8008512:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008522:	e853 3f00 	ldrex	r3, [r3]
 8008526:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800852a:	f023 0310 	bic.w	r3, r3, #16
 800852e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800853c:	65bb      	str	r3, [r7, #88]	; 0x58
 800853e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008542:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800854a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e4      	bne.n	800851a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008554:	4618      	mov	r0, r3
 8008556:	f7fd fadb 	bl	8005b10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008566:	b29b      	uxth	r3, r3
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	b29b      	uxth	r3, r3
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fa fef6 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008574:	e0b5      	b.n	80086e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008582:	b29b      	uxth	r3, r3
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80a7 	beq.w	80086e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800859c:	2b00      	cmp	r3, #0
 800859e:	f000 80a2 	beq.w	80086e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085c4:	647b      	str	r3, [r7, #68]	; 0x44
 80085c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085cc:	e841 2300 	strex	r3, r2, [r1]
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e4      	bne.n	80085a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	e853 3f00 	ldrex	r3, [r3]
 80085e6:	623b      	str	r3, [r7, #32]
   return(result);
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	f023 0301 	bic.w	r3, r3, #1
 80085ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3308      	adds	r3, #8
 80085f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085fc:	633a      	str	r2, [r7, #48]	; 0x30
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e3      	bne.n	80085d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0310 	bic.w	r3, r3, #16
 8008636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008644:	61fb      	str	r3, [r7, #28]
 8008646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	69b9      	ldr	r1, [r7, #24]
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	617b      	str	r3, [r7, #20]
   return(result);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e4      	bne.n	8008622 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fa fe7e 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008664:	e03f      	b.n	80086e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00e      	beq.n	8008690 <HAL_UART_IRQHandler+0x560>
 8008672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d008      	beq.n	8008690 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 f8d6 	bl	800983a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800868e:	e02d      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00e      	beq.n	80086ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800869c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01c      	beq.n	80086ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
    }
    return;
 80086b8:	e017      	b.n	80086ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d012      	beq.n	80086ec <HAL_UART_IRQHandler+0x5bc>
 80086c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00c      	beq.n	80086ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 ff27 	bl	8009526 <UART_EndTransmit_IT>
    return;
 80086d8:	e008      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80086da:	bf00      	nop
 80086dc:	e006      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80086de:	bf00      	nop
 80086e0:	e004      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80086e2:	bf00      	nop
 80086e4:	e002      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80086e6:	bf00      	nop
 80086e8:	e000      	b.n	80086ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80086ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80086ec:	37e8      	adds	r7, #232	; 0xe8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop

080086f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800871c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008720:	b08a      	sub	sp, #40	; 0x28
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	431a      	orrs	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	431a      	orrs	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4313      	orrs	r3, r2
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b9e      	ldr	r3, [pc, #632]	; (80089c4 <UART_SetConfig+0x2a8>)
 800874c:	4013      	ands	r3, r2
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008754:	430b      	orrs	r3, r1
 8008756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a93      	ldr	r2, [pc, #588]	; (80089c8 <UART_SetConfig+0x2ac>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d004      	beq.n	8008788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	4313      	orrs	r3, r2
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008798:	430a      	orrs	r2, r1
 800879a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a8a      	ldr	r2, [pc, #552]	; (80089cc <UART_SetConfig+0x2b0>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d126      	bne.n	80087f4 <UART_SetConfig+0xd8>
 80087a6:	4b8a      	ldr	r3, [pc, #552]	; (80089d0 <UART_SetConfig+0x2b4>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d81b      	bhi.n	80087ec <UART_SetConfig+0xd0>
 80087b4:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <UART_SetConfig+0xa0>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	080087dd 	.word	0x080087dd
 80087c4:	080087d5 	.word	0x080087d5
 80087c8:	080087e5 	.word	0x080087e5
 80087cc:	2301      	movs	r3, #1
 80087ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d2:	e0ab      	b.n	800892c <UART_SetConfig+0x210>
 80087d4:	2302      	movs	r3, #2
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087da:	e0a7      	b.n	800892c <UART_SetConfig+0x210>
 80087dc:	2304      	movs	r3, #4
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e2:	e0a3      	b.n	800892c <UART_SetConfig+0x210>
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ea:	e09f      	b.n	800892c <UART_SetConfig+0x210>
 80087ec:	2310      	movs	r3, #16
 80087ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087f2:	e09b      	b.n	800892c <UART_SetConfig+0x210>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a76      	ldr	r2, [pc, #472]	; (80089d4 <UART_SetConfig+0x2b8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d138      	bne.n	8008870 <UART_SetConfig+0x154>
 80087fe:	4b74      	ldr	r3, [pc, #464]	; (80089d0 <UART_SetConfig+0x2b4>)
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008804:	f003 030c 	and.w	r3, r3, #12
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d82d      	bhi.n	8008868 <UART_SetConfig+0x14c>
 800880c:	a201      	add	r2, pc, #4	; (adr r2, 8008814 <UART_SetConfig+0xf8>)
 800880e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008812:	bf00      	nop
 8008814:	08008849 	.word	0x08008849
 8008818:	08008869 	.word	0x08008869
 800881c:	08008869 	.word	0x08008869
 8008820:	08008869 	.word	0x08008869
 8008824:	08008859 	.word	0x08008859
 8008828:	08008869 	.word	0x08008869
 800882c:	08008869 	.word	0x08008869
 8008830:	08008869 	.word	0x08008869
 8008834:	08008851 	.word	0x08008851
 8008838:	08008869 	.word	0x08008869
 800883c:	08008869 	.word	0x08008869
 8008840:	08008869 	.word	0x08008869
 8008844:	08008861 	.word	0x08008861
 8008848:	2300      	movs	r3, #0
 800884a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884e:	e06d      	b.n	800892c <UART_SetConfig+0x210>
 8008850:	2302      	movs	r3, #2
 8008852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008856:	e069      	b.n	800892c <UART_SetConfig+0x210>
 8008858:	2304      	movs	r3, #4
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885e:	e065      	b.n	800892c <UART_SetConfig+0x210>
 8008860:	2308      	movs	r3, #8
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008866:	e061      	b.n	800892c <UART_SetConfig+0x210>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e05d      	b.n	800892c <UART_SetConfig+0x210>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a58      	ldr	r2, [pc, #352]	; (80089d8 <UART_SetConfig+0x2bc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d125      	bne.n	80088c6 <UART_SetConfig+0x1aa>
 800887a:	4b55      	ldr	r3, [pc, #340]	; (80089d0 <UART_SetConfig+0x2b4>)
 800887c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008880:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008884:	2b30      	cmp	r3, #48	; 0x30
 8008886:	d016      	beq.n	80088b6 <UART_SetConfig+0x19a>
 8008888:	2b30      	cmp	r3, #48	; 0x30
 800888a:	d818      	bhi.n	80088be <UART_SetConfig+0x1a2>
 800888c:	2b20      	cmp	r3, #32
 800888e:	d00a      	beq.n	80088a6 <UART_SetConfig+0x18a>
 8008890:	2b20      	cmp	r3, #32
 8008892:	d814      	bhi.n	80088be <UART_SetConfig+0x1a2>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <UART_SetConfig+0x182>
 8008898:	2b10      	cmp	r3, #16
 800889a:	d008      	beq.n	80088ae <UART_SetConfig+0x192>
 800889c:	e00f      	b.n	80088be <UART_SetConfig+0x1a2>
 800889e:	2300      	movs	r3, #0
 80088a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a4:	e042      	b.n	800892c <UART_SetConfig+0x210>
 80088a6:	2302      	movs	r3, #2
 80088a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ac:	e03e      	b.n	800892c <UART_SetConfig+0x210>
 80088ae:	2304      	movs	r3, #4
 80088b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b4:	e03a      	b.n	800892c <UART_SetConfig+0x210>
 80088b6:	2308      	movs	r3, #8
 80088b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088bc:	e036      	b.n	800892c <UART_SetConfig+0x210>
 80088be:	2310      	movs	r3, #16
 80088c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c4:	e032      	b.n	800892c <UART_SetConfig+0x210>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <UART_SetConfig+0x2ac>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d12a      	bne.n	8008926 <UART_SetConfig+0x20a>
 80088d0:	4b3f      	ldr	r3, [pc, #252]	; (80089d0 <UART_SetConfig+0x2b4>)
 80088d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088de:	d01a      	beq.n	8008916 <UART_SetConfig+0x1fa>
 80088e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088e4:	d81b      	bhi.n	800891e <UART_SetConfig+0x202>
 80088e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ea:	d00c      	beq.n	8008906 <UART_SetConfig+0x1ea>
 80088ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088f0:	d815      	bhi.n	800891e <UART_SetConfig+0x202>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <UART_SetConfig+0x1e2>
 80088f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088fa:	d008      	beq.n	800890e <UART_SetConfig+0x1f2>
 80088fc:	e00f      	b.n	800891e <UART_SetConfig+0x202>
 80088fe:	2300      	movs	r3, #0
 8008900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008904:	e012      	b.n	800892c <UART_SetConfig+0x210>
 8008906:	2302      	movs	r3, #2
 8008908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890c:	e00e      	b.n	800892c <UART_SetConfig+0x210>
 800890e:	2304      	movs	r3, #4
 8008910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008914:	e00a      	b.n	800892c <UART_SetConfig+0x210>
 8008916:	2308      	movs	r3, #8
 8008918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891c:	e006      	b.n	800892c <UART_SetConfig+0x210>
 800891e:	2310      	movs	r3, #16
 8008920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008924:	e002      	b.n	800892c <UART_SetConfig+0x210>
 8008926:	2310      	movs	r3, #16
 8008928:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a25      	ldr	r2, [pc, #148]	; (80089c8 <UART_SetConfig+0x2ac>)
 8008932:	4293      	cmp	r3, r2
 8008934:	f040 808a 	bne.w	8008a4c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008938:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800893c:	2b08      	cmp	r3, #8
 800893e:	d824      	bhi.n	800898a <UART_SetConfig+0x26e>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <UART_SetConfig+0x22c>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	0800896d 	.word	0x0800896d
 800894c:	0800898b 	.word	0x0800898b
 8008950:	08008975 	.word	0x08008975
 8008954:	0800898b 	.word	0x0800898b
 8008958:	0800897b 	.word	0x0800897b
 800895c:	0800898b 	.word	0x0800898b
 8008960:	0800898b 	.word	0x0800898b
 8008964:	0800898b 	.word	0x0800898b
 8008968:	08008983 	.word	0x08008983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800896c:	f7fe faa8 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8008970:	61f8      	str	r0, [r7, #28]
        break;
 8008972:	e010      	b.n	8008996 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008974:	4b19      	ldr	r3, [pc, #100]	; (80089dc <UART_SetConfig+0x2c0>)
 8008976:	61fb      	str	r3, [r7, #28]
        break;
 8008978:	e00d      	b.n	8008996 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897a:	f7fe fa0b 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 800897e:	61f8      	str	r0, [r7, #28]
        break;
 8008980:	e009      	b.n	8008996 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008986:	61fb      	str	r3, [r7, #28]
        break;
 8008988:	e005      	b.n	8008996 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008994:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8109 	beq.w	8008bb0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	4413      	add	r3, r2
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d305      	bcc.n	80089ba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d912      	bls.n	80089e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089c0:	e0f6      	b.n	8008bb0 <UART_SetConfig+0x494>
 80089c2:	bf00      	nop
 80089c4:	efff69f3 	.word	0xefff69f3
 80089c8:	40008000 	.word	0x40008000
 80089cc:	40013800 	.word	0x40013800
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40004400 	.word	0x40004400
 80089d8:	40004800 	.word	0x40004800
 80089dc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2200      	movs	r2, #0
 80089e4:	461c      	mov	r4, r3
 80089e6:	4615      	mov	r5, r2
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	022b      	lsls	r3, r5, #8
 80089f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089f6:	0222      	lsls	r2, r4, #8
 80089f8:	68f9      	ldr	r1, [r7, #12]
 80089fa:	6849      	ldr	r1, [r1, #4]
 80089fc:	0849      	lsrs	r1, r1, #1
 80089fe:	2000      	movs	r0, #0
 8008a00:	4688      	mov	r8, r1
 8008a02:	4681      	mov	r9, r0
 8008a04:	eb12 0a08 	adds.w	sl, r2, r8
 8008a08:	eb43 0b09 	adc.w	fp, r3, r9
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	4659      	mov	r1, fp
 8008a1e:	f7f8 f933 	bl	8000c88 <__aeabi_uldivmod>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4613      	mov	r3, r2
 8008a28:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a30:	d308      	bcc.n	8008a44 <UART_SetConfig+0x328>
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a38:	d204      	bcs.n	8008a44 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	60da      	str	r2, [r3, #12]
 8008a42:	e0b5      	b.n	8008bb0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a4a:	e0b1      	b.n	8008bb0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a54:	d15d      	bne.n	8008b12 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8008a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d827      	bhi.n	8008aae <UART_SetConfig+0x392>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <UART_SetConfig+0x348>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a91 	.word	0x08008a91
 8008a6c:	08008a99 	.word	0x08008a99
 8008a70:	08008aaf 	.word	0x08008aaf
 8008a74:	08008a9f 	.word	0x08008a9f
 8008a78:	08008aaf 	.word	0x08008aaf
 8008a7c:	08008aaf 	.word	0x08008aaf
 8008a80:	08008aaf 	.word	0x08008aaf
 8008a84:	08008aa7 	.word	0x08008aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a88:	f7fe fa1a 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8008a8c:	61f8      	str	r0, [r7, #28]
        break;
 8008a8e:	e014      	b.n	8008aba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a90:	f7fe fa2c 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 8008a94:	61f8      	str	r0, [r7, #28]
        break;
 8008a96:	e010      	b.n	8008aba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a98:	4b4c      	ldr	r3, [pc, #304]	; (8008bcc <UART_SetConfig+0x4b0>)
 8008a9a:	61fb      	str	r3, [r7, #28]
        break;
 8008a9c:	e00d      	b.n	8008aba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a9e:	f7fe f979 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8008aa2:	61f8      	str	r0, [r7, #28]
        break;
 8008aa4:	e009      	b.n	8008aba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aaa:	61fb      	str	r3, [r7, #28]
        break;
 8008aac:	e005      	b.n	8008aba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ab8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d077      	beq.n	8008bb0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	005a      	lsls	r2, r3, #1
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	085b      	lsrs	r3, r3, #1
 8008aca:	441a      	add	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ad4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d916      	bls.n	8008b0a <UART_SetConfig+0x3ee>
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ae2:	d212      	bcs.n	8008b0a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	f023 030f 	bic.w	r3, r3, #15
 8008aec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	8afb      	ldrh	r3, [r7, #22]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	8afa      	ldrh	r2, [r7, #22]
 8008b06:	60da      	str	r2, [r3, #12]
 8008b08:	e052      	b.n	8008bb0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b10:	e04e      	b.n	8008bb0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b16:	2b08      	cmp	r3, #8
 8008b18:	d827      	bhi.n	8008b6a <UART_SetConfig+0x44e>
 8008b1a:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <UART_SetConfig+0x404>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b45 	.word	0x08008b45
 8008b24:	08008b4d 	.word	0x08008b4d
 8008b28:	08008b55 	.word	0x08008b55
 8008b2c:	08008b6b 	.word	0x08008b6b
 8008b30:	08008b5b 	.word	0x08008b5b
 8008b34:	08008b6b 	.word	0x08008b6b
 8008b38:	08008b6b 	.word	0x08008b6b
 8008b3c:	08008b6b 	.word	0x08008b6b
 8008b40:	08008b63 	.word	0x08008b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b44:	f7fe f9bc 	bl	8006ec0 <HAL_RCC_GetPCLK1Freq>
 8008b48:	61f8      	str	r0, [r7, #28]
        break;
 8008b4a:	e014      	b.n	8008b76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b4c:	f7fe f9ce 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 8008b50:	61f8      	str	r0, [r7, #28]
        break;
 8008b52:	e010      	b.n	8008b76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b54:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <UART_SetConfig+0x4b0>)
 8008b56:	61fb      	str	r3, [r7, #28]
        break;
 8008b58:	e00d      	b.n	8008b76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5a:	f7fe f91b 	bl	8006d94 <HAL_RCC_GetSysClockFreq>
 8008b5e:	61f8      	str	r0, [r7, #28]
        break;
 8008b60:	e009      	b.n	8008b76 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b66:	61fb      	str	r3, [r7, #28]
        break;
 8008b68:	e005      	b.n	8008b76 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b74:	bf00      	nop
    }

    if (pclk != 0U)
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d019      	beq.n	8008bb0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	085a      	lsrs	r2, r3, #1
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	441a      	add	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d909      	bls.n	8008baa <UART_SetConfig+0x48e>
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b9c:	d205      	bcs.n	8008baa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60da      	str	r2, [r3, #12]
 8008ba8:	e002      	b.n	8008bb0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008bbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3728      	adds	r7, #40	; 0x28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bca:	bf00      	nop
 8008bcc:	00f42400 	.word	0x00f42400

08008bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cce:	d10a      	bne.n	8008ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d24:	f7fa feec 	bl	8003b00 <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b08      	cmp	r3, #8
 8008d36:	d10e      	bne.n	8008d56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f82d 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e023      	b.n	8008d9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d10e      	bne.n	8008d82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f817 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e00d      	b.n	8008d9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2220      	movs	r2, #32
 8008d86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b09c      	sub	sp, #112	; 0x70
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db6:	e0a5      	b.n	8008f04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	f000 80a1 	beq.w	8008f04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc2:	f7fa fe9d 	bl	8003b00 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d302      	bcc.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d13e      	bne.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dec:	667b      	str	r3, [r7, #100]	; 0x64
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008df8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	663b      	str	r3, [r7, #96]	; 0x60
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2220      	movs	r2, #32
 8008e42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2220      	movs	r2, #32
 8008e48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e067      	b.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d04f      	beq.n	8008f04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e72:	d147      	bne.n	8008f04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e6      	bne.n	8008e7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	e853 3f00 	ldrex	r3, [r3]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f023 0301 	bic.w	r3, r3, #1
 8008ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3308      	adds	r3, #8
 8008ece:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ed0:	623a      	str	r2, [r7, #32]
 8008ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	69f9      	ldr	r1, [r7, #28]
 8008ed6:	6a3a      	ldr	r2, [r7, #32]
 8008ed8:	e841 2300 	strex	r3, r2, [r1]
 8008edc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1e5      	bne.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2220      	movs	r2, #32
 8008eee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e010      	b.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	bf0c      	ite	eq
 8008f14:	2301      	moveq	r3, #1
 8008f16:	2300      	movne	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	f43f af4a 	beq.w	8008db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3770      	adds	r7, #112	; 0x70
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b097      	sub	sp, #92	; 0x5c
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	88fa      	ldrh	r2, [r7, #6]
 8008f48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f62:	d10e      	bne.n	8008f82 <UART_Start_Receive_IT+0x52>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d105      	bne.n	8008f78 <UART_Start_Receive_IT+0x48>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f76:	e02d      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	22ff      	movs	r2, #255	; 0xff
 8008f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f80:	e028      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10d      	bne.n	8008fa6 <UART_Start_Receive_IT+0x76>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <UART_Start_Receive_IT+0x6c>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	22ff      	movs	r2, #255	; 0xff
 8008f96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f9a:	e01b      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	227f      	movs	r2, #127	; 0x7f
 8008fa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fa4:	e016      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fae:	d10d      	bne.n	8008fcc <UART_Start_Receive_IT+0x9c>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <UART_Start_Receive_IT+0x92>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	227f      	movs	r2, #127	; 0x7f
 8008fbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fc0:	e008      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	223f      	movs	r2, #63	; 0x3f
 8008fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008fca:	e003      	b.n	8008fd4 <UART_Start_Receive_IT+0xa4>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2222      	movs	r2, #34	; 0x22
 8008fe0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009002:	64ba      	str	r2, [r7, #72]	; 0x48
 8009004:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901e:	d107      	bne.n	8009030 <UART_Start_Receive_IT+0x100>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4a24      	ldr	r2, [pc, #144]	; (80090bc <UART_Start_Receive_IT+0x18c>)
 800902c:	665a      	str	r2, [r3, #100]	; 0x64
 800902e:	e002      	b.n	8009036 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a23      	ldr	r2, [pc, #140]	; (80090c0 <UART_Start_Receive_IT+0x190>)
 8009034:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d019      	beq.n	800907a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800905a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	461a      	mov	r2, r3
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
 8009066:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800906a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e6      	bne.n	8009046 <UART_Start_Receive_IT+0x116>
 8009078:	e018      	b.n	80090ac <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	613b      	str	r3, [r7, #16]
   return(result);
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f043 0320 	orr.w	r3, r3, #32
 800908e:	653b      	str	r3, [r7, #80]	; 0x50
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009098:	623b      	str	r3, [r7, #32]
 800909a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909c:	69f9      	ldr	r1, [r7, #28]
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	e841 2300 	strex	r3, r2, [r1]
 80090a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1e6      	bne.n	800907a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	375c      	adds	r7, #92	; 0x5c
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	080096db 	.word	0x080096db
 80090c0:	0800957b 	.word	0x0800957b

080090c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b096      	sub	sp, #88	; 0x58
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	88fa      	ldrh	r2, [r7, #6]
 80090dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2222      	movs	r2, #34	; 0x22
 80090ec:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02b      	beq.n	800914e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090fa:	4a42      	ldr	r2, [pc, #264]	; (8009204 <UART_Start_Receive_DMA+0x140>)
 80090fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009102:	4a41      	ldr	r2, [pc, #260]	; (8009208 <UART_Start_Receive_DMA+0x144>)
 8009104:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	4a40      	ldr	r2, [pc, #256]	; (800920c <UART_Start_Receive_DMA+0x148>)
 800910c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009112:	2200      	movs	r2, #0
 8009114:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3324      	adds	r3, #36	; 0x24
 8009120:	4619      	mov	r1, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009126:	461a      	mov	r2, r3
 8009128:	88fb      	ldrh	r3, [r7, #6]
 800912a:	f7fc fc91 	bl	8005a50 <HAL_DMA_Start_IT>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00c      	beq.n	800914e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2210      	movs	r2, #16
 8009138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2220      	movs	r2, #32
 8009148:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e055      	b.n	80091fa <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d018      	beq.n	8009190 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009172:	657b      	str	r3, [r7, #84]	; 0x54
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800917c:	64bb      	str	r3, [r7, #72]	; 0x48
 800917e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009182:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800918a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e6      	bne.n	800915e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	653b      	str	r3, [r7, #80]	; 0x50
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091b0:	637a      	str	r2, [r7, #52]	; 0x34
 80091b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e5      	bne.n	8009190 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	613b      	str	r3, [r7, #16]
   return(result);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091e4:	623a      	str	r2, [r7, #32]
 80091e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	69f9      	ldr	r1, [r7, #28]
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3758      	adds	r7, #88	; 0x58
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	08009323 	.word	0x08009323
 8009208:	08009447 	.word	0x08009447
 800920c:	0800947f 	.word	0x0800947f

08009210 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b089      	sub	sp, #36	; 0x24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	60bb      	str	r3, [r7, #8]
   return(result);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	61bb      	str	r3, [r7, #24]
 8009238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6979      	ldr	r1, [r7, #20]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	613b      	str	r3, [r7, #16]
   return(result);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e6      	bne.n	8009218 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009250:	bf00      	nop
 8009252:	3724      	adds	r7, #36	; 0x24
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b095      	sub	sp, #84	; 0x54
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009282:	643b      	str	r3, [r7, #64]	; 0x40
 8009284:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e6      	bne.n	8009264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3308      	adds	r3, #8
 80092b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d118      	bne.n	8009304 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	60bb      	str	r3, [r7, #8]
   return(result);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f023 0310 	bic.w	r3, r3, #16
 80092e6:	647b      	str	r3, [r7, #68]	; 0x44
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f0:	61bb      	str	r3, [r7, #24]
 80092f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6979      	ldr	r1, [r7, #20]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	613b      	str	r3, [r7, #16]
   return(result);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2220      	movs	r2, #32
 8009308:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009316:	bf00      	nop
 8009318:	3754      	adds	r7, #84	; 0x54
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b09c      	sub	sp, #112	; 0x70
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d170      	bne.n	8009420 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800933e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009356:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800935a:	66bb      	str	r3, [r7, #104]	; 0x68
 800935c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	461a      	mov	r2, r3
 8009362:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009364:	65bb      	str	r3, [r7, #88]	; 0x58
 8009366:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800936a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e6      	bne.n	8009346 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3308      	adds	r3, #8
 800937e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	667b      	str	r3, [r7, #100]	; 0x64
 8009390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3308      	adds	r3, #8
 8009396:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009398:	647a      	str	r2, [r7, #68]	; 0x44
 800939a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800939e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e5      	bne.n	8009378 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	623b      	str	r3, [r7, #32]
   return(result);
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093c2:	663b      	str	r3, [r7, #96]	; 0x60
 80093c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093cc:	633a      	str	r2, [r7, #48]	; 0x30
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e5      	bne.n	80093ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e2:	2220      	movs	r2, #32
 80093e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d118      	bne.n	8009420 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0310 	bic.w	r3, r3, #16
 8009402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	69b9      	ldr	r1, [r7, #24]
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	617b      	str	r3, [r7, #20]
   return(result);
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e6      	bne.n	80093ee <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009424:	2b01      	cmp	r3, #1
 8009426:	d107      	bne.n	8009438 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800942e:	4619      	mov	r1, r3
 8009430:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009432:	f7f9 ff95 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009436:	e002      	b.n	800943e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009438:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800943a:	f7f9 ff77 	bl	800332c <HAL_UART_RxCpltCallback>
}
 800943e:	bf00      	nop
 8009440:	3770      	adds	r7, #112	; 0x70
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b084      	sub	sp, #16
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009458:	2b01      	cmp	r3, #1
 800945a:	d109      	bne.n	8009470 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009462:	085b      	lsrs	r3, r3, #1
 8009464:	b29b      	uxth	r3, r3
 8009466:	4619      	mov	r1, r3
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7f9 ff79 	bl	8003360 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800946e:	e002      	b.n	8009476 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f7ff f93f 	bl	80086f4 <HAL_UART_RxHalfCpltCallback>
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b086      	sub	sp, #24
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009490:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009496:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d109      	bne.n	80094ba <UART_DMAError+0x3c>
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2b21      	cmp	r3, #33	; 0x21
 80094aa:	d106      	bne.n	80094ba <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80094b4:	6978      	ldr	r0, [r7, #20]
 80094b6:	f7ff feab 	bl	8009210 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d109      	bne.n	80094dc <UART_DMAError+0x5e>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b22      	cmp	r3, #34	; 0x22
 80094cc:	d106      	bne.n	80094dc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80094d6:	6978      	ldr	r0, [r7, #20]
 80094d8:	f7ff fec0 	bl	800925c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094e2:	f043 0210 	orr.w	r2, r3, #16
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ec:	6978      	ldr	r0, [r7, #20]
 80094ee:	f7ff f90b 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	bf00      	nop
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff f8f5 	bl	8008708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800951e:	bf00      	nop
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b088      	sub	sp, #32
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60bb      	str	r3, [r7, #8]
   return(result);
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009542:	61fb      	str	r3, [r7, #28]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	61bb      	str	r3, [r7, #24]
 800954e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6979      	ldr	r1, [r7, #20]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	613b      	str	r3, [r7, #16]
   return(result);
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2220      	movs	r2, #32
 8009564:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7f9 ff03 	bl	8003378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009572:	bf00      	nop
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b096      	sub	sp, #88	; 0x58
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009588:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009590:	2b22      	cmp	r3, #34	; 0x22
 8009592:	f040 8094 	bne.w	80096be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800959c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80095a4:	b2d9      	uxtb	r1, r3
 80095a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b0:	400a      	ands	r2, r1
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	3b01      	subs	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d179      	bne.n	80096d2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095f2:	653b      	str	r3, [r7, #80]	; 0x50
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44
 80095fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800960a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	e853 3f00 	ldrex	r3, [r3]
 800961e:	623b      	str	r3, [r7, #32]
   return(result);
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	f023 0301 	bic.w	r3, r3, #1
 8009626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3308      	adds	r3, #8
 800962e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009630:	633a      	str	r2, [r7, #48]	; 0x30
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e5      	bne.n	8009610 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009654:	2b01      	cmp	r3, #1
 8009656:	d12e      	bne.n	80096b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	60fb      	str	r3, [r7, #12]
   return(result);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0310 	bic.w	r3, r3, #16
 8009672:	64bb      	str	r3, [r7, #72]	; 0x48
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	617b      	str	r3, [r7, #20]
   return(result);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e6      	bne.n	800965e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f003 0310 	and.w	r3, r3, #16
 800969a:	2b10      	cmp	r3, #16
 800969c:	d103      	bne.n	80096a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2210      	movs	r2, #16
 80096a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f7f9 fe56 	bl	8003360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096b4:	e00d      	b.n	80096d2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7f9 fe38 	bl	800332c <HAL_UART_RxCpltCallback>
}
 80096bc:	e009      	b.n	80096d2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	8b1b      	ldrh	r3, [r3, #24]
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0208 	orr.w	r2, r2, #8
 80096ce:	b292      	uxth	r2, r2
 80096d0:	831a      	strh	r2, [r3, #24]
}
 80096d2:	bf00      	nop
 80096d4:	3758      	adds	r7, #88	; 0x58
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b096      	sub	sp, #88	; 0x58
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096e8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f0:	2b22      	cmp	r3, #34	; 0x22
 80096f2:	f040 8094 	bne.w	800981e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096fc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009704:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009706:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800970a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800970e:	4013      	ands	r3, r2
 8009710:	b29a      	uxth	r2, r3
 8009712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009714:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971a:	1c9a      	adds	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009726:	b29b      	uxth	r3, r3
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009738:	b29b      	uxth	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d179      	bne.n	8009832 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975c:	643b      	str	r3, [r7, #64]	; 0x40
 800975e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800976a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	64bb      	str	r3, [r7, #72]	; 0x48
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3308      	adds	r3, #8
 800978e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009790:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e5      	bne.n	8009770 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2220      	movs	r2, #32
 80097a8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d12e      	bne.n	8009816 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	e853 3f00 	ldrex	r3, [r3]
 80097ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	f023 0310 	bic.w	r3, r3, #16
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	6979      	ldr	r1, [r7, #20]
 80097e2:	69ba      	ldr	r2, [r7, #24]
 80097e4:	e841 2300 	strex	r3, r2, [r1]
 80097e8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1e6      	bne.n	80097be <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f003 0310 	and.w	r3, r3, #16
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	d103      	bne.n	8009806 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2210      	movs	r2, #16
 8009804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7f9 fda6 	bl	8003360 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009814:	e00d      	b.n	8009832 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7f9 fd88 	bl	800332c <HAL_UART_RxCpltCallback>
}
 800981c:	e009      	b.n	8009832 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	8b1b      	ldrh	r3, [r3, #24]
 8009824:	b29a      	uxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f042 0208 	orr.w	r2, r2, #8
 800982e:	b292      	uxth	r2, r2
 8009830:	831a      	strh	r2, [r3, #24]
}
 8009832:	bf00      	nop
 8009834:	3758      	adds	r7, #88	; 0x58
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009842:	bf00      	nop
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
	...

08009850 <__errno>:
 8009850:	4b01      	ldr	r3, [pc, #4]	; (8009858 <__errno+0x8>)
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	2000000c 	.word	0x2000000c

0800985c <__libc_init_array>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4d0d      	ldr	r5, [pc, #52]	; (8009894 <__libc_init_array+0x38>)
 8009860:	4c0d      	ldr	r4, [pc, #52]	; (8009898 <__libc_init_array+0x3c>)
 8009862:	1b64      	subs	r4, r4, r5
 8009864:	10a4      	asrs	r4, r4, #2
 8009866:	2600      	movs	r6, #0
 8009868:	42a6      	cmp	r6, r4
 800986a:	d109      	bne.n	8009880 <__libc_init_array+0x24>
 800986c:	4d0b      	ldr	r5, [pc, #44]	; (800989c <__libc_init_array+0x40>)
 800986e:	4c0c      	ldr	r4, [pc, #48]	; (80098a0 <__libc_init_array+0x44>)
 8009870:	f004 fb0a 	bl	800de88 <_init>
 8009874:	1b64      	subs	r4, r4, r5
 8009876:	10a4      	asrs	r4, r4, #2
 8009878:	2600      	movs	r6, #0
 800987a:	42a6      	cmp	r6, r4
 800987c:	d105      	bne.n	800988a <__libc_init_array+0x2e>
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	f855 3b04 	ldr.w	r3, [r5], #4
 8009884:	4798      	blx	r3
 8009886:	3601      	adds	r6, #1
 8009888:	e7ee      	b.n	8009868 <__libc_init_array+0xc>
 800988a:	f855 3b04 	ldr.w	r3, [r5], #4
 800988e:	4798      	blx	r3
 8009890:	3601      	adds	r6, #1
 8009892:	e7f2      	b.n	800987a <__libc_init_array+0x1e>
 8009894:	0800e6c0 	.word	0x0800e6c0
 8009898:	0800e6c0 	.word	0x0800e6c0
 800989c:	0800e6c0 	.word	0x0800e6c0
 80098a0:	0800e6c4 	.word	0x0800e6c4

080098a4 <memcpy>:
 80098a4:	440a      	add	r2, r1
 80098a6:	4291      	cmp	r1, r2
 80098a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ac:	d100      	bne.n	80098b0 <memcpy+0xc>
 80098ae:	4770      	bx	lr
 80098b0:	b510      	push	{r4, lr}
 80098b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ba:	4291      	cmp	r1, r2
 80098bc:	d1f9      	bne.n	80098b2 <memcpy+0xe>
 80098be:	bd10      	pop	{r4, pc}

080098c0 <memset>:
 80098c0:	4402      	add	r2, r0
 80098c2:	4603      	mov	r3, r0
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d100      	bne.n	80098ca <memset+0xa>
 80098c8:	4770      	bx	lr
 80098ca:	f803 1b01 	strb.w	r1, [r3], #1
 80098ce:	e7f9      	b.n	80098c4 <memset+0x4>

080098d0 <__cvt>:
 80098d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	ec55 4b10 	vmov	r4, r5, d0
 80098d8:	2d00      	cmp	r5, #0
 80098da:	460e      	mov	r6, r1
 80098dc:	4619      	mov	r1, r3
 80098de:	462b      	mov	r3, r5
 80098e0:	bfbb      	ittet	lt
 80098e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098e6:	461d      	movlt	r5, r3
 80098e8:	2300      	movge	r3, #0
 80098ea:	232d      	movlt	r3, #45	; 0x2d
 80098ec:	700b      	strb	r3, [r1, #0]
 80098ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098f4:	4691      	mov	r9, r2
 80098f6:	f023 0820 	bic.w	r8, r3, #32
 80098fa:	bfbc      	itt	lt
 80098fc:	4622      	movlt	r2, r4
 80098fe:	4614      	movlt	r4, r2
 8009900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009904:	d005      	beq.n	8009912 <__cvt+0x42>
 8009906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800990a:	d100      	bne.n	800990e <__cvt+0x3e>
 800990c:	3601      	adds	r6, #1
 800990e:	2102      	movs	r1, #2
 8009910:	e000      	b.n	8009914 <__cvt+0x44>
 8009912:	2103      	movs	r1, #3
 8009914:	ab03      	add	r3, sp, #12
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	ab02      	add	r3, sp, #8
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	ec45 4b10 	vmov	d0, r4, r5
 8009920:	4653      	mov	r3, sl
 8009922:	4632      	mov	r2, r6
 8009924:	f001 fc44 	bl	800b1b0 <_dtoa_r>
 8009928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800992c:	4607      	mov	r7, r0
 800992e:	d102      	bne.n	8009936 <__cvt+0x66>
 8009930:	f019 0f01 	tst.w	r9, #1
 8009934:	d022      	beq.n	800997c <__cvt+0xac>
 8009936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800993a:	eb07 0906 	add.w	r9, r7, r6
 800993e:	d110      	bne.n	8009962 <__cvt+0x92>
 8009940:	783b      	ldrb	r3, [r7, #0]
 8009942:	2b30      	cmp	r3, #48	; 0x30
 8009944:	d10a      	bne.n	800995c <__cvt+0x8c>
 8009946:	2200      	movs	r2, #0
 8009948:	2300      	movs	r3, #0
 800994a:	4620      	mov	r0, r4
 800994c:	4629      	mov	r1, r5
 800994e:	f7f7 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009952:	b918      	cbnz	r0, 800995c <__cvt+0x8c>
 8009954:	f1c6 0601 	rsb	r6, r6, #1
 8009958:	f8ca 6000 	str.w	r6, [sl]
 800995c:	f8da 3000 	ldr.w	r3, [sl]
 8009960:	4499      	add	r9, r3
 8009962:	2200      	movs	r2, #0
 8009964:	2300      	movs	r3, #0
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800996e:	b108      	cbz	r0, 8009974 <__cvt+0xa4>
 8009970:	f8cd 900c 	str.w	r9, [sp, #12]
 8009974:	2230      	movs	r2, #48	; 0x30
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	454b      	cmp	r3, r9
 800997a:	d307      	bcc.n	800998c <__cvt+0xbc>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009980:	1bdb      	subs	r3, r3, r7
 8009982:	4638      	mov	r0, r7
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	b004      	add	sp, #16
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	1c59      	adds	r1, r3, #1
 800998e:	9103      	str	r1, [sp, #12]
 8009990:	701a      	strb	r2, [r3, #0]
 8009992:	e7f0      	b.n	8009976 <__cvt+0xa6>

08009994 <__exponent>:
 8009994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009996:	4603      	mov	r3, r0
 8009998:	2900      	cmp	r1, #0
 800999a:	bfb8      	it	lt
 800999c:	4249      	neglt	r1, r1
 800999e:	f803 2b02 	strb.w	r2, [r3], #2
 80099a2:	bfb4      	ite	lt
 80099a4:	222d      	movlt	r2, #45	; 0x2d
 80099a6:	222b      	movge	r2, #43	; 0x2b
 80099a8:	2909      	cmp	r1, #9
 80099aa:	7042      	strb	r2, [r0, #1]
 80099ac:	dd2a      	ble.n	8009a04 <__exponent+0x70>
 80099ae:	f10d 0407 	add.w	r4, sp, #7
 80099b2:	46a4      	mov	ip, r4
 80099b4:	270a      	movs	r7, #10
 80099b6:	46a6      	mov	lr, r4
 80099b8:	460a      	mov	r2, r1
 80099ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80099be:	fb07 1516 	mls	r5, r7, r6, r1
 80099c2:	3530      	adds	r5, #48	; 0x30
 80099c4:	2a63      	cmp	r2, #99	; 0x63
 80099c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80099ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099ce:	4631      	mov	r1, r6
 80099d0:	dcf1      	bgt.n	80099b6 <__exponent+0x22>
 80099d2:	3130      	adds	r1, #48	; 0x30
 80099d4:	f1ae 0502 	sub.w	r5, lr, #2
 80099d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099dc:	1c44      	adds	r4, r0, #1
 80099de:	4629      	mov	r1, r5
 80099e0:	4561      	cmp	r1, ip
 80099e2:	d30a      	bcc.n	80099fa <__exponent+0x66>
 80099e4:	f10d 0209 	add.w	r2, sp, #9
 80099e8:	eba2 020e 	sub.w	r2, r2, lr
 80099ec:	4565      	cmp	r5, ip
 80099ee:	bf88      	it	hi
 80099f0:	2200      	movhi	r2, #0
 80099f2:	4413      	add	r3, r2
 80099f4:	1a18      	subs	r0, r3, r0
 80099f6:	b003      	add	sp, #12
 80099f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a02:	e7ed      	b.n	80099e0 <__exponent+0x4c>
 8009a04:	2330      	movs	r3, #48	; 0x30
 8009a06:	3130      	adds	r1, #48	; 0x30
 8009a08:	7083      	strb	r3, [r0, #2]
 8009a0a:	70c1      	strb	r1, [r0, #3]
 8009a0c:	1d03      	adds	r3, r0, #4
 8009a0e:	e7f1      	b.n	80099f4 <__exponent+0x60>

08009a10 <_printf_float>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b02 	vpush	{d8}
 8009a18:	b08d      	sub	sp, #52	; 0x34
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a20:	4616      	mov	r6, r2
 8009a22:	461f      	mov	r7, r3
 8009a24:	4605      	mov	r5, r0
 8009a26:	f002 fd33 	bl	800c490 <_localeconv_r>
 8009a2a:	f8d0 a000 	ldr.w	sl, [r0]
 8009a2e:	4650      	mov	r0, sl
 8009a30:	f7f6 fbce 	bl	80001d0 <strlen>
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	9305      	str	r3, [sp, #20]
 8009a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a44:	3307      	adds	r3, #7
 8009a46:	f023 0307 	bic.w	r3, r3, #7
 8009a4a:	f103 0208 	add.w	r2, r3, #8
 8009a4e:	f8c8 2000 	str.w	r2, [r8]
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a68:	ee08 0a10 	vmov	s16, r0
 8009a6c:	4b9f      	ldr	r3, [pc, #636]	; (8009cec <_printf_float+0x2dc>)
 8009a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a72:	f04f 32ff 	mov.w	r2, #4294967295
 8009a76:	f7f7 f859 	bl	8000b2c <__aeabi_dcmpun>
 8009a7a:	bb88      	cbnz	r0, 8009ae0 <_printf_float+0xd0>
 8009a7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a80:	4b9a      	ldr	r3, [pc, #616]	; (8009cec <_printf_float+0x2dc>)
 8009a82:	f04f 32ff 	mov.w	r2, #4294967295
 8009a86:	f7f7 f833 	bl	8000af0 <__aeabi_dcmple>
 8009a8a:	bb48      	cbnz	r0, 8009ae0 <_printf_float+0xd0>
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	4640      	mov	r0, r8
 8009a92:	4649      	mov	r1, r9
 8009a94:	f7f7 f822 	bl	8000adc <__aeabi_dcmplt>
 8009a98:	b110      	cbz	r0, 8009aa0 <_printf_float+0x90>
 8009a9a:	232d      	movs	r3, #45	; 0x2d
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa0:	4b93      	ldr	r3, [pc, #588]	; (8009cf0 <_printf_float+0x2e0>)
 8009aa2:	4894      	ldr	r0, [pc, #592]	; (8009cf4 <_printf_float+0x2e4>)
 8009aa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009aa8:	bf94      	ite	ls
 8009aaa:	4698      	movls	r8, r3
 8009aac:	4680      	movhi	r8, r0
 8009aae:	2303      	movs	r3, #3
 8009ab0:	6123      	str	r3, [r4, #16]
 8009ab2:	9b05      	ldr	r3, [sp, #20]
 8009ab4:	f023 0204 	bic.w	r2, r3, #4
 8009ab8:	6022      	str	r2, [r4, #0]
 8009aba:	f04f 0900 	mov.w	r9, #0
 8009abe:	9700      	str	r7, [sp, #0]
 8009ac0:	4633      	mov	r3, r6
 8009ac2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	f000 f9d8 	bl	8009e7c <_printf_common>
 8009acc:	3001      	adds	r0, #1
 8009ace:	f040 8090 	bne.w	8009bf2 <_printf_float+0x1e2>
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	b00d      	add	sp, #52	; 0x34
 8009ad8:	ecbd 8b02 	vpop	{d8}
 8009adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	464b      	mov	r3, r9
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	f7f7 f820 	bl	8000b2c <__aeabi_dcmpun>
 8009aec:	b140      	cbz	r0, 8009b00 <_printf_float+0xf0>
 8009aee:	464b      	mov	r3, r9
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	bfbc      	itt	lt
 8009af4:	232d      	movlt	r3, #45	; 0x2d
 8009af6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009afa:	487f      	ldr	r0, [pc, #508]	; (8009cf8 <_printf_float+0x2e8>)
 8009afc:	4b7f      	ldr	r3, [pc, #508]	; (8009cfc <_printf_float+0x2ec>)
 8009afe:	e7d1      	b.n	8009aa4 <_printf_float+0x94>
 8009b00:	6863      	ldr	r3, [r4, #4]
 8009b02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b06:	9206      	str	r2, [sp, #24]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	d13f      	bne.n	8009b8c <_printf_float+0x17c>
 8009b0c:	2306      	movs	r3, #6
 8009b0e:	6063      	str	r3, [r4, #4]
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	6861      	ldr	r1, [r4, #4]
 8009b14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9303      	str	r3, [sp, #12]
 8009b1c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b22:	ab09      	add	r3, sp, #36	; 0x24
 8009b24:	ec49 8b10 	vmov	d0, r8, r9
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff fecd 	bl	80098d0 <__cvt>
 8009b36:	9b06      	ldr	r3, [sp, #24]
 8009b38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b3a:	2b47      	cmp	r3, #71	; 0x47
 8009b3c:	4680      	mov	r8, r0
 8009b3e:	d108      	bne.n	8009b52 <_printf_float+0x142>
 8009b40:	1cc8      	adds	r0, r1, #3
 8009b42:	db02      	blt.n	8009b4a <_printf_float+0x13a>
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	4299      	cmp	r1, r3
 8009b48:	dd41      	ble.n	8009bce <_printf_float+0x1be>
 8009b4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b4e:	fa5f fb8b 	uxtb.w	fp, fp
 8009b52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b56:	d820      	bhi.n	8009b9a <_printf_float+0x18a>
 8009b58:	3901      	subs	r1, #1
 8009b5a:	465a      	mov	r2, fp
 8009b5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b60:	9109      	str	r1, [sp, #36]	; 0x24
 8009b62:	f7ff ff17 	bl	8009994 <__exponent>
 8009b66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b68:	1813      	adds	r3, r2, r0
 8009b6a:	2a01      	cmp	r2, #1
 8009b6c:	4681      	mov	r9, r0
 8009b6e:	6123      	str	r3, [r4, #16]
 8009b70:	dc02      	bgt.n	8009b78 <_printf_float+0x168>
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	07d2      	lsls	r2, r2, #31
 8009b76:	d501      	bpl.n	8009b7c <_printf_float+0x16c>
 8009b78:	3301      	adds	r3, #1
 8009b7a:	6123      	str	r3, [r4, #16]
 8009b7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d09c      	beq.n	8009abe <_printf_float+0xae>
 8009b84:	232d      	movs	r3, #45	; 0x2d
 8009b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8a:	e798      	b.n	8009abe <_printf_float+0xae>
 8009b8c:	9a06      	ldr	r2, [sp, #24]
 8009b8e:	2a47      	cmp	r2, #71	; 0x47
 8009b90:	d1be      	bne.n	8009b10 <_printf_float+0x100>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1bc      	bne.n	8009b10 <_printf_float+0x100>
 8009b96:	2301      	movs	r3, #1
 8009b98:	e7b9      	b.n	8009b0e <_printf_float+0xfe>
 8009b9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b9e:	d118      	bne.n	8009bd2 <_printf_float+0x1c2>
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	dd0b      	ble.n	8009bbe <_printf_float+0x1ae>
 8009ba6:	6121      	str	r1, [r4, #16]
 8009ba8:	b913      	cbnz	r3, 8009bb0 <_printf_float+0x1a0>
 8009baa:	6822      	ldr	r2, [r4, #0]
 8009bac:	07d0      	lsls	r0, r2, #31
 8009bae:	d502      	bpl.n	8009bb6 <_printf_float+0x1a6>
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	440b      	add	r3, r1
 8009bb4:	6123      	str	r3, [r4, #16]
 8009bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009bb8:	f04f 0900 	mov.w	r9, #0
 8009bbc:	e7de      	b.n	8009b7c <_printf_float+0x16c>
 8009bbe:	b913      	cbnz	r3, 8009bc6 <_printf_float+0x1b6>
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	07d2      	lsls	r2, r2, #31
 8009bc4:	d501      	bpl.n	8009bca <_printf_float+0x1ba>
 8009bc6:	3302      	adds	r3, #2
 8009bc8:	e7f4      	b.n	8009bb4 <_printf_float+0x1a4>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7f2      	b.n	8009bb4 <_printf_float+0x1a4>
 8009bce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd4:	4299      	cmp	r1, r3
 8009bd6:	db05      	blt.n	8009be4 <_printf_float+0x1d4>
 8009bd8:	6823      	ldr	r3, [r4, #0]
 8009bda:	6121      	str	r1, [r4, #16]
 8009bdc:	07d8      	lsls	r0, r3, #31
 8009bde:	d5ea      	bpl.n	8009bb6 <_printf_float+0x1a6>
 8009be0:	1c4b      	adds	r3, r1, #1
 8009be2:	e7e7      	b.n	8009bb4 <_printf_float+0x1a4>
 8009be4:	2900      	cmp	r1, #0
 8009be6:	bfd4      	ite	le
 8009be8:	f1c1 0202 	rsble	r2, r1, #2
 8009bec:	2201      	movgt	r2, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	e7e0      	b.n	8009bb4 <_printf_float+0x1a4>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	055a      	lsls	r2, r3, #21
 8009bf6:	d407      	bmi.n	8009c08 <_printf_float+0x1f8>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	4642      	mov	r2, r8
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	d12c      	bne.n	8009c60 <_printf_float+0x250>
 8009c06:	e764      	b.n	8009ad2 <_printf_float+0xc2>
 8009c08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c0c:	f240 80e0 	bls.w	8009dd0 <_printf_float+0x3c0>
 8009c10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c14:	2200      	movs	r2, #0
 8009c16:	2300      	movs	r3, #0
 8009c18:	f7f6 ff56 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d034      	beq.n	8009c8a <_printf_float+0x27a>
 8009c20:	4a37      	ldr	r2, [pc, #220]	; (8009d00 <_printf_float+0x2f0>)
 8009c22:	2301      	movs	r3, #1
 8009c24:	4631      	mov	r1, r6
 8009c26:	4628      	mov	r0, r5
 8009c28:	47b8      	blx	r7
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	f43f af51 	beq.w	8009ad2 <_printf_float+0xc2>
 8009c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c34:	429a      	cmp	r2, r3
 8009c36:	db02      	blt.n	8009c3e <_printf_float+0x22e>
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	07d8      	lsls	r0, r3, #31
 8009c3c:	d510      	bpl.n	8009c60 <_printf_float+0x250>
 8009c3e:	ee18 3a10 	vmov	r3, s16
 8009c42:	4652      	mov	r2, sl
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f43f af41 	beq.w	8009ad2 <_printf_float+0xc2>
 8009c50:	f04f 0800 	mov.w	r8, #0
 8009c54:	f104 091a 	add.w	r9, r4, #26
 8009c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	4543      	cmp	r3, r8
 8009c5e:	dc09      	bgt.n	8009c74 <_printf_float+0x264>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	079b      	lsls	r3, r3, #30
 8009c64:	f100 8105 	bmi.w	8009e72 <_printf_float+0x462>
 8009c68:	68e0      	ldr	r0, [r4, #12]
 8009c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6c:	4298      	cmp	r0, r3
 8009c6e:	bfb8      	it	lt
 8009c70:	4618      	movlt	r0, r3
 8009c72:	e730      	b.n	8009ad6 <_printf_float+0xc6>
 8009c74:	2301      	movs	r3, #1
 8009c76:	464a      	mov	r2, r9
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	f43f af27 	beq.w	8009ad2 <_printf_float+0xc2>
 8009c84:	f108 0801 	add.w	r8, r8, #1
 8009c88:	e7e6      	b.n	8009c58 <_printf_float+0x248>
 8009c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	dc39      	bgt.n	8009d04 <_printf_float+0x2f4>
 8009c90:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <_printf_float+0x2f0>)
 8009c92:	2301      	movs	r3, #1
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f af19 	beq.w	8009ad2 <_printf_float+0xc2>
 8009ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	d102      	bne.n	8009cae <_printf_float+0x29e>
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	07d9      	lsls	r1, r3, #31
 8009cac:	d5d8      	bpl.n	8009c60 <_printf_float+0x250>
 8009cae:	ee18 3a10 	vmov	r3, s16
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f af09 	beq.w	8009ad2 <_printf_float+0xc2>
 8009cc0:	f04f 0900 	mov.w	r9, #0
 8009cc4:	f104 0a1a 	add.w	sl, r4, #26
 8009cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cca:	425b      	negs	r3, r3
 8009ccc:	454b      	cmp	r3, r9
 8009cce:	dc01      	bgt.n	8009cd4 <_printf_float+0x2c4>
 8009cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd2:	e792      	b.n	8009bfa <_printf_float+0x1ea>
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4652      	mov	r2, sl
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	47b8      	blx	r7
 8009cde:	3001      	adds	r0, #1
 8009ce0:	f43f aef7 	beq.w	8009ad2 <_printf_float+0xc2>
 8009ce4:	f109 0901 	add.w	r9, r9, #1
 8009ce8:	e7ee      	b.n	8009cc8 <_printf_float+0x2b8>
 8009cea:	bf00      	nop
 8009cec:	7fefffff 	.word	0x7fefffff
 8009cf0:	0800e1c4 	.word	0x0800e1c4
 8009cf4:	0800e1c8 	.word	0x0800e1c8
 8009cf8:	0800e1d0 	.word	0x0800e1d0
 8009cfc:	0800e1cc 	.word	0x0800e1cc
 8009d00:	0800e1d4 	.word	0x0800e1d4
 8009d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	bfa8      	it	ge
 8009d0c:	461a      	movge	r2, r3
 8009d0e:	2a00      	cmp	r2, #0
 8009d10:	4691      	mov	r9, r2
 8009d12:	dc37      	bgt.n	8009d84 <_printf_float+0x374>
 8009d14:	f04f 0b00 	mov.w	fp, #0
 8009d18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d1c:	f104 021a 	add.w	r2, r4, #26
 8009d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	eba3 0309 	sub.w	r3, r3, r9
 8009d28:	455b      	cmp	r3, fp
 8009d2a:	dc33      	bgt.n	8009d94 <_printf_float+0x384>
 8009d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d30:	429a      	cmp	r2, r3
 8009d32:	db3b      	blt.n	8009dac <_printf_float+0x39c>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	07da      	lsls	r2, r3, #31
 8009d38:	d438      	bmi.n	8009dac <_printf_float+0x39c>
 8009d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d3c:	9a05      	ldr	r2, [sp, #20]
 8009d3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d40:	1a9a      	subs	r2, r3, r2
 8009d42:	eba3 0901 	sub.w	r9, r3, r1
 8009d46:	4591      	cmp	r9, r2
 8009d48:	bfa8      	it	ge
 8009d4a:	4691      	movge	r9, r2
 8009d4c:	f1b9 0f00 	cmp.w	r9, #0
 8009d50:	dc35      	bgt.n	8009dbe <_printf_float+0x3ae>
 8009d52:	f04f 0800 	mov.w	r8, #0
 8009d56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d5a:	f104 0a1a 	add.w	sl, r4, #26
 8009d5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	eba3 0309 	sub.w	r3, r3, r9
 8009d68:	4543      	cmp	r3, r8
 8009d6a:	f77f af79 	ble.w	8009c60 <_printf_float+0x250>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	4652      	mov	r2, sl
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f aeaa 	beq.w	8009ad2 <_printf_float+0xc2>
 8009d7e:	f108 0801 	add.w	r8, r8, #1
 8009d82:	e7ec      	b.n	8009d5e <_printf_float+0x34e>
 8009d84:	4613      	mov	r3, r2
 8009d86:	4631      	mov	r1, r6
 8009d88:	4642      	mov	r2, r8
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d1c0      	bne.n	8009d14 <_printf_float+0x304>
 8009d92:	e69e      	b.n	8009ad2 <_printf_float+0xc2>
 8009d94:	2301      	movs	r3, #1
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	9205      	str	r2, [sp, #20]
 8009d9c:	47b8      	blx	r7
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f43f ae97 	beq.w	8009ad2 <_printf_float+0xc2>
 8009da4:	9a05      	ldr	r2, [sp, #20]
 8009da6:	f10b 0b01 	add.w	fp, fp, #1
 8009daa:	e7b9      	b.n	8009d20 <_printf_float+0x310>
 8009dac:	ee18 3a10 	vmov	r3, s16
 8009db0:	4652      	mov	r2, sl
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d1be      	bne.n	8009d3a <_printf_float+0x32a>
 8009dbc:	e689      	b.n	8009ad2 <_printf_float+0xc2>
 8009dbe:	9a05      	ldr	r2, [sp, #20]
 8009dc0:	464b      	mov	r3, r9
 8009dc2:	4442      	add	r2, r8
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	47b8      	blx	r7
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d1c1      	bne.n	8009d52 <_printf_float+0x342>
 8009dce:	e680      	b.n	8009ad2 <_printf_float+0xc2>
 8009dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dd2:	2a01      	cmp	r2, #1
 8009dd4:	dc01      	bgt.n	8009dda <_printf_float+0x3ca>
 8009dd6:	07db      	lsls	r3, r3, #31
 8009dd8:	d538      	bpl.n	8009e4c <_printf_float+0x43c>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	4642      	mov	r2, r8
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	f43f ae74 	beq.w	8009ad2 <_printf_float+0xc2>
 8009dea:	ee18 3a10 	vmov	r3, s16
 8009dee:	4652      	mov	r2, sl
 8009df0:	4631      	mov	r1, r6
 8009df2:	4628      	mov	r0, r5
 8009df4:	47b8      	blx	r7
 8009df6:	3001      	adds	r0, #1
 8009df8:	f43f ae6b 	beq.w	8009ad2 <_printf_float+0xc2>
 8009dfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e00:	2200      	movs	r2, #0
 8009e02:	2300      	movs	r3, #0
 8009e04:	f7f6 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e08:	b9d8      	cbnz	r0, 8009e42 <_printf_float+0x432>
 8009e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0c:	f108 0201 	add.w	r2, r8, #1
 8009e10:	3b01      	subs	r3, #1
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	47b8      	blx	r7
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d10e      	bne.n	8009e3a <_printf_float+0x42a>
 8009e1c:	e659      	b.n	8009ad2 <_printf_float+0xc2>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	4652      	mov	r2, sl
 8009e22:	4631      	mov	r1, r6
 8009e24:	4628      	mov	r0, r5
 8009e26:	47b8      	blx	r7
 8009e28:	3001      	adds	r0, #1
 8009e2a:	f43f ae52 	beq.w	8009ad2 <_printf_float+0xc2>
 8009e2e:	f108 0801 	add.w	r8, r8, #1
 8009e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e34:	3b01      	subs	r3, #1
 8009e36:	4543      	cmp	r3, r8
 8009e38:	dcf1      	bgt.n	8009e1e <_printf_float+0x40e>
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e40:	e6dc      	b.n	8009bfc <_printf_float+0x1ec>
 8009e42:	f04f 0800 	mov.w	r8, #0
 8009e46:	f104 0a1a 	add.w	sl, r4, #26
 8009e4a:	e7f2      	b.n	8009e32 <_printf_float+0x422>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4642      	mov	r2, r8
 8009e50:	e7df      	b.n	8009e12 <_printf_float+0x402>
 8009e52:	2301      	movs	r3, #1
 8009e54:	464a      	mov	r2, r9
 8009e56:	4631      	mov	r1, r6
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b8      	blx	r7
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	f43f ae38 	beq.w	8009ad2 <_printf_float+0xc2>
 8009e62:	f108 0801 	add.w	r8, r8, #1
 8009e66:	68e3      	ldr	r3, [r4, #12]
 8009e68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e6a:	1a5b      	subs	r3, r3, r1
 8009e6c:	4543      	cmp	r3, r8
 8009e6e:	dcf0      	bgt.n	8009e52 <_printf_float+0x442>
 8009e70:	e6fa      	b.n	8009c68 <_printf_float+0x258>
 8009e72:	f04f 0800 	mov.w	r8, #0
 8009e76:	f104 0919 	add.w	r9, r4, #25
 8009e7a:	e7f4      	b.n	8009e66 <_printf_float+0x456>

08009e7c <_printf_common>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	4616      	mov	r6, r2
 8009e82:	4699      	mov	r9, r3
 8009e84:	688a      	ldr	r2, [r1, #8]
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	bfb8      	it	lt
 8009e90:	4613      	movlt	r3, r2
 8009e92:	6033      	str	r3, [r6, #0]
 8009e94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e98:	4607      	mov	r7, r0
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	b10a      	cbz	r2, 8009ea2 <_printf_common+0x26>
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	6033      	str	r3, [r6, #0]
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	0699      	lsls	r1, r3, #26
 8009ea6:	bf42      	ittt	mi
 8009ea8:	6833      	ldrmi	r3, [r6, #0]
 8009eaa:	3302      	addmi	r3, #2
 8009eac:	6033      	strmi	r3, [r6, #0]
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	f015 0506 	ands.w	r5, r5, #6
 8009eb4:	d106      	bne.n	8009ec4 <_printf_common+0x48>
 8009eb6:	f104 0a19 	add.w	sl, r4, #25
 8009eba:	68e3      	ldr	r3, [r4, #12]
 8009ebc:	6832      	ldr	r2, [r6, #0]
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc26      	bgt.n	8009f12 <_printf_common+0x96>
 8009ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ec8:	1e13      	subs	r3, r2, #0
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	bf18      	it	ne
 8009ece:	2301      	movne	r3, #1
 8009ed0:	0692      	lsls	r2, r2, #26
 8009ed2:	d42b      	bmi.n	8009f2c <_printf_common+0xb0>
 8009ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4638      	mov	r0, r7
 8009edc:	47c0      	blx	r8
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d01e      	beq.n	8009f20 <_printf_common+0xa4>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	68e5      	ldr	r5, [r4, #12]
 8009ee6:	6832      	ldr	r2, [r6, #0]
 8009ee8:	f003 0306 	and.w	r3, r3, #6
 8009eec:	2b04      	cmp	r3, #4
 8009eee:	bf08      	it	eq
 8009ef0:	1aad      	subeq	r5, r5, r2
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	6922      	ldr	r2, [r4, #16]
 8009ef6:	bf0c      	ite	eq
 8009ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009efc:	2500      	movne	r5, #0
 8009efe:	4293      	cmp	r3, r2
 8009f00:	bfc4      	itt	gt
 8009f02:	1a9b      	subgt	r3, r3, r2
 8009f04:	18ed      	addgt	r5, r5, r3
 8009f06:	2600      	movs	r6, #0
 8009f08:	341a      	adds	r4, #26
 8009f0a:	42b5      	cmp	r5, r6
 8009f0c:	d11a      	bne.n	8009f44 <_printf_common+0xc8>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	e008      	b.n	8009f24 <_printf_common+0xa8>
 8009f12:	2301      	movs	r3, #1
 8009f14:	4652      	mov	r2, sl
 8009f16:	4649      	mov	r1, r9
 8009f18:	4638      	mov	r0, r7
 8009f1a:	47c0      	blx	r8
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d103      	bne.n	8009f28 <_printf_common+0xac>
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f28:	3501      	adds	r5, #1
 8009f2a:	e7c6      	b.n	8009eba <_printf_common+0x3e>
 8009f2c:	18e1      	adds	r1, r4, r3
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	2030      	movs	r0, #48	; 0x30
 8009f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f36:	4422      	add	r2, r4
 8009f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f40:	3302      	adds	r3, #2
 8009f42:	e7c7      	b.n	8009ed4 <_printf_common+0x58>
 8009f44:	2301      	movs	r3, #1
 8009f46:	4622      	mov	r2, r4
 8009f48:	4649      	mov	r1, r9
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	47c0      	blx	r8
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d0e6      	beq.n	8009f20 <_printf_common+0xa4>
 8009f52:	3601      	adds	r6, #1
 8009f54:	e7d9      	b.n	8009f0a <_printf_common+0x8e>
	...

08009f58 <_printf_i>:
 8009f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5c:	7e0f      	ldrb	r7, [r1, #24]
 8009f5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f60:	2f78      	cmp	r7, #120	; 0x78
 8009f62:	4691      	mov	r9, r2
 8009f64:	4680      	mov	r8, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	469a      	mov	sl, r3
 8009f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f6e:	d807      	bhi.n	8009f80 <_printf_i+0x28>
 8009f70:	2f62      	cmp	r7, #98	; 0x62
 8009f72:	d80a      	bhi.n	8009f8a <_printf_i+0x32>
 8009f74:	2f00      	cmp	r7, #0
 8009f76:	f000 80d8 	beq.w	800a12a <_printf_i+0x1d2>
 8009f7a:	2f58      	cmp	r7, #88	; 0x58
 8009f7c:	f000 80a3 	beq.w	800a0c6 <_printf_i+0x16e>
 8009f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f88:	e03a      	b.n	800a000 <_printf_i+0xa8>
 8009f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f8e:	2b15      	cmp	r3, #21
 8009f90:	d8f6      	bhi.n	8009f80 <_printf_i+0x28>
 8009f92:	a101      	add	r1, pc, #4	; (adr r1, 8009f98 <_printf_i+0x40>)
 8009f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f98:	08009ff1 	.word	0x08009ff1
 8009f9c:	0800a005 	.word	0x0800a005
 8009fa0:	08009f81 	.word	0x08009f81
 8009fa4:	08009f81 	.word	0x08009f81
 8009fa8:	08009f81 	.word	0x08009f81
 8009fac:	08009f81 	.word	0x08009f81
 8009fb0:	0800a005 	.word	0x0800a005
 8009fb4:	08009f81 	.word	0x08009f81
 8009fb8:	08009f81 	.word	0x08009f81
 8009fbc:	08009f81 	.word	0x08009f81
 8009fc0:	08009f81 	.word	0x08009f81
 8009fc4:	0800a111 	.word	0x0800a111
 8009fc8:	0800a035 	.word	0x0800a035
 8009fcc:	0800a0f3 	.word	0x0800a0f3
 8009fd0:	08009f81 	.word	0x08009f81
 8009fd4:	08009f81 	.word	0x08009f81
 8009fd8:	0800a133 	.word	0x0800a133
 8009fdc:	08009f81 	.word	0x08009f81
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	08009f81 	.word	0x08009f81
 8009fe8:	08009f81 	.word	0x08009f81
 8009fec:	0800a0fb 	.word	0x0800a0fb
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	1d1a      	adds	r2, r3, #4
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	602a      	str	r2, [r5, #0]
 8009ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a000:	2301      	movs	r3, #1
 800a002:	e0a3      	b.n	800a14c <_printf_i+0x1f4>
 800a004:	6820      	ldr	r0, [r4, #0]
 800a006:	6829      	ldr	r1, [r5, #0]
 800a008:	0606      	lsls	r6, r0, #24
 800a00a:	f101 0304 	add.w	r3, r1, #4
 800a00e:	d50a      	bpl.n	800a026 <_printf_i+0xce>
 800a010:	680e      	ldr	r6, [r1, #0]
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	2e00      	cmp	r6, #0
 800a016:	da03      	bge.n	800a020 <_printf_i+0xc8>
 800a018:	232d      	movs	r3, #45	; 0x2d
 800a01a:	4276      	negs	r6, r6
 800a01c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a020:	485e      	ldr	r0, [pc, #376]	; (800a19c <_printf_i+0x244>)
 800a022:	230a      	movs	r3, #10
 800a024:	e019      	b.n	800a05a <_printf_i+0x102>
 800a026:	680e      	ldr	r6, [r1, #0]
 800a028:	602b      	str	r3, [r5, #0]
 800a02a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a02e:	bf18      	it	ne
 800a030:	b236      	sxthne	r6, r6
 800a032:	e7ef      	b.n	800a014 <_printf_i+0xbc>
 800a034:	682b      	ldr	r3, [r5, #0]
 800a036:	6820      	ldr	r0, [r4, #0]
 800a038:	1d19      	adds	r1, r3, #4
 800a03a:	6029      	str	r1, [r5, #0]
 800a03c:	0601      	lsls	r1, r0, #24
 800a03e:	d501      	bpl.n	800a044 <_printf_i+0xec>
 800a040:	681e      	ldr	r6, [r3, #0]
 800a042:	e002      	b.n	800a04a <_printf_i+0xf2>
 800a044:	0646      	lsls	r6, r0, #25
 800a046:	d5fb      	bpl.n	800a040 <_printf_i+0xe8>
 800a048:	881e      	ldrh	r6, [r3, #0]
 800a04a:	4854      	ldr	r0, [pc, #336]	; (800a19c <_printf_i+0x244>)
 800a04c:	2f6f      	cmp	r7, #111	; 0x6f
 800a04e:	bf0c      	ite	eq
 800a050:	2308      	moveq	r3, #8
 800a052:	230a      	movne	r3, #10
 800a054:	2100      	movs	r1, #0
 800a056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a05a:	6865      	ldr	r5, [r4, #4]
 800a05c:	60a5      	str	r5, [r4, #8]
 800a05e:	2d00      	cmp	r5, #0
 800a060:	bfa2      	ittt	ge
 800a062:	6821      	ldrge	r1, [r4, #0]
 800a064:	f021 0104 	bicge.w	r1, r1, #4
 800a068:	6021      	strge	r1, [r4, #0]
 800a06a:	b90e      	cbnz	r6, 800a070 <_printf_i+0x118>
 800a06c:	2d00      	cmp	r5, #0
 800a06e:	d04d      	beq.n	800a10c <_printf_i+0x1b4>
 800a070:	4615      	mov	r5, r2
 800a072:	fbb6 f1f3 	udiv	r1, r6, r3
 800a076:	fb03 6711 	mls	r7, r3, r1, r6
 800a07a:	5dc7      	ldrb	r7, [r0, r7]
 800a07c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a080:	4637      	mov	r7, r6
 800a082:	42bb      	cmp	r3, r7
 800a084:	460e      	mov	r6, r1
 800a086:	d9f4      	bls.n	800a072 <_printf_i+0x11a>
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d10b      	bne.n	800a0a4 <_printf_i+0x14c>
 800a08c:	6823      	ldr	r3, [r4, #0]
 800a08e:	07de      	lsls	r6, r3, #31
 800a090:	d508      	bpl.n	800a0a4 <_printf_i+0x14c>
 800a092:	6923      	ldr	r3, [r4, #16]
 800a094:	6861      	ldr	r1, [r4, #4]
 800a096:	4299      	cmp	r1, r3
 800a098:	bfde      	ittt	le
 800a09a:	2330      	movle	r3, #48	; 0x30
 800a09c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0a4:	1b52      	subs	r2, r2, r5
 800a0a6:	6122      	str	r2, [r4, #16]
 800a0a8:	f8cd a000 	str.w	sl, [sp]
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	aa03      	add	r2, sp, #12
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	f7ff fee2 	bl	8009e7c <_printf_common>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d14c      	bne.n	800a156 <_printf_i+0x1fe>
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c0:	b004      	add	sp, #16
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	4835      	ldr	r0, [pc, #212]	; (800a19c <_printf_i+0x244>)
 800a0c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0cc:	6829      	ldr	r1, [r5, #0]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0d4:	6029      	str	r1, [r5, #0]
 800a0d6:	061d      	lsls	r5, r3, #24
 800a0d8:	d514      	bpl.n	800a104 <_printf_i+0x1ac>
 800a0da:	07df      	lsls	r7, r3, #31
 800a0dc:	bf44      	itt	mi
 800a0de:	f043 0320 	orrmi.w	r3, r3, #32
 800a0e2:	6023      	strmi	r3, [r4, #0]
 800a0e4:	b91e      	cbnz	r6, 800a0ee <_printf_i+0x196>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	f023 0320 	bic.w	r3, r3, #32
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	2310      	movs	r3, #16
 800a0f0:	e7b0      	b.n	800a054 <_printf_i+0xfc>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	f043 0320 	orr.w	r3, r3, #32
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	2378      	movs	r3, #120	; 0x78
 800a0fc:	4828      	ldr	r0, [pc, #160]	; (800a1a0 <_printf_i+0x248>)
 800a0fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a102:	e7e3      	b.n	800a0cc <_printf_i+0x174>
 800a104:	0659      	lsls	r1, r3, #25
 800a106:	bf48      	it	mi
 800a108:	b2b6      	uxthmi	r6, r6
 800a10a:	e7e6      	b.n	800a0da <_printf_i+0x182>
 800a10c:	4615      	mov	r5, r2
 800a10e:	e7bb      	b.n	800a088 <_printf_i+0x130>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	6826      	ldr	r6, [r4, #0]
 800a114:	6961      	ldr	r1, [r4, #20]
 800a116:	1d18      	adds	r0, r3, #4
 800a118:	6028      	str	r0, [r5, #0]
 800a11a:	0635      	lsls	r5, r6, #24
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	d501      	bpl.n	800a124 <_printf_i+0x1cc>
 800a120:	6019      	str	r1, [r3, #0]
 800a122:	e002      	b.n	800a12a <_printf_i+0x1d2>
 800a124:	0670      	lsls	r0, r6, #25
 800a126:	d5fb      	bpl.n	800a120 <_printf_i+0x1c8>
 800a128:	8019      	strh	r1, [r3, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	6123      	str	r3, [r4, #16]
 800a12e:	4615      	mov	r5, r2
 800a130:	e7ba      	b.n	800a0a8 <_printf_i+0x150>
 800a132:	682b      	ldr	r3, [r5, #0]
 800a134:	1d1a      	adds	r2, r3, #4
 800a136:	602a      	str	r2, [r5, #0]
 800a138:	681d      	ldr	r5, [r3, #0]
 800a13a:	6862      	ldr	r2, [r4, #4]
 800a13c:	2100      	movs	r1, #0
 800a13e:	4628      	mov	r0, r5
 800a140:	f7f6 f84e 	bl	80001e0 <memchr>
 800a144:	b108      	cbz	r0, 800a14a <_printf_i+0x1f2>
 800a146:	1b40      	subs	r0, r0, r5
 800a148:	6060      	str	r0, [r4, #4]
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	2300      	movs	r3, #0
 800a150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a154:	e7a8      	b.n	800a0a8 <_printf_i+0x150>
 800a156:	6923      	ldr	r3, [r4, #16]
 800a158:	462a      	mov	r2, r5
 800a15a:	4649      	mov	r1, r9
 800a15c:	4640      	mov	r0, r8
 800a15e:	47d0      	blx	sl
 800a160:	3001      	adds	r0, #1
 800a162:	d0ab      	beq.n	800a0bc <_printf_i+0x164>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	079b      	lsls	r3, r3, #30
 800a168:	d413      	bmi.n	800a192 <_printf_i+0x23a>
 800a16a:	68e0      	ldr	r0, [r4, #12]
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	4298      	cmp	r0, r3
 800a170:	bfb8      	it	lt
 800a172:	4618      	movlt	r0, r3
 800a174:	e7a4      	b.n	800a0c0 <_printf_i+0x168>
 800a176:	2301      	movs	r3, #1
 800a178:	4632      	mov	r2, r6
 800a17a:	4649      	mov	r1, r9
 800a17c:	4640      	mov	r0, r8
 800a17e:	47d0      	blx	sl
 800a180:	3001      	adds	r0, #1
 800a182:	d09b      	beq.n	800a0bc <_printf_i+0x164>
 800a184:	3501      	adds	r5, #1
 800a186:	68e3      	ldr	r3, [r4, #12]
 800a188:	9903      	ldr	r1, [sp, #12]
 800a18a:	1a5b      	subs	r3, r3, r1
 800a18c:	42ab      	cmp	r3, r5
 800a18e:	dcf2      	bgt.n	800a176 <_printf_i+0x21e>
 800a190:	e7eb      	b.n	800a16a <_printf_i+0x212>
 800a192:	2500      	movs	r5, #0
 800a194:	f104 0619 	add.w	r6, r4, #25
 800a198:	e7f5      	b.n	800a186 <_printf_i+0x22e>
 800a19a:	bf00      	nop
 800a19c:	0800e1d6 	.word	0x0800e1d6
 800a1a0:	0800e1e7 	.word	0x0800e1e7

0800a1a4 <siprintf>:
 800a1a4:	b40e      	push	{r1, r2, r3}
 800a1a6:	b500      	push	{lr}
 800a1a8:	b09c      	sub	sp, #112	; 0x70
 800a1aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a1ac:	9002      	str	r0, [sp, #8]
 800a1ae:	9006      	str	r0, [sp, #24]
 800a1b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1b4:	4809      	ldr	r0, [pc, #36]	; (800a1dc <siprintf+0x38>)
 800a1b6:	9107      	str	r1, [sp, #28]
 800a1b8:	9104      	str	r1, [sp, #16]
 800a1ba:	4909      	ldr	r1, [pc, #36]	; (800a1e0 <siprintf+0x3c>)
 800a1bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c0:	9105      	str	r1, [sp, #20]
 800a1c2:	6800      	ldr	r0, [r0, #0]
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	a902      	add	r1, sp, #8
 800a1c8:	f002 ff94 	bl	800d0f4 <_svfiprintf_r>
 800a1cc:	9b02      	ldr	r3, [sp, #8]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	701a      	strb	r2, [r3, #0]
 800a1d2:	b01c      	add	sp, #112	; 0x70
 800a1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d8:	b003      	add	sp, #12
 800a1da:	4770      	bx	lr
 800a1dc:	2000000c 	.word	0x2000000c
 800a1e0:	ffff0208 	.word	0xffff0208

0800a1e4 <strcat>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	7814      	ldrb	r4, [r2, #0]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	3201      	adds	r2, #1
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	d1fa      	bne.n	800a1e8 <strcat+0x4>
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	d1f9      	bne.n	800a1f4 <strcat+0x10>
 800a200:	bd10      	pop	{r4, pc}

0800a202 <strstr>:
 800a202:	780a      	ldrb	r2, [r1, #0]
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	b96a      	cbnz	r2, 800a224 <strstr+0x22>
 800a208:	bd70      	pop	{r4, r5, r6, pc}
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d109      	bne.n	800a222 <strstr+0x20>
 800a20e:	460c      	mov	r4, r1
 800a210:	4605      	mov	r5, r0
 800a212:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0f6      	beq.n	800a208 <strstr+0x6>
 800a21a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a21e:	429e      	cmp	r6, r3
 800a220:	d0f7      	beq.n	800a212 <strstr+0x10>
 800a222:	3001      	adds	r0, #1
 800a224:	7803      	ldrb	r3, [r0, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1ef      	bne.n	800a20a <strstr+0x8>
 800a22a:	4618      	mov	r0, r3
 800a22c:	e7ec      	b.n	800a208 <strstr+0x6>

0800a22e <sulp>:
 800a22e:	b570      	push	{r4, r5, r6, lr}
 800a230:	4604      	mov	r4, r0
 800a232:	460d      	mov	r5, r1
 800a234:	ec45 4b10 	vmov	d0, r4, r5
 800a238:	4616      	mov	r6, r2
 800a23a:	f002 fcb9 	bl	800cbb0 <__ulp>
 800a23e:	ec51 0b10 	vmov	r0, r1, d0
 800a242:	b17e      	cbz	r6, 800a264 <sulp+0x36>
 800a244:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a248:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dd09      	ble.n	800a264 <sulp+0x36>
 800a250:	051b      	lsls	r3, r3, #20
 800a252:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a256:	2400      	movs	r4, #0
 800a258:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a25c:	4622      	mov	r2, r4
 800a25e:	462b      	mov	r3, r5
 800a260:	f7f6 f9ca 	bl	80005f8 <__aeabi_dmul>
 800a264:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a268 <_strtod_l>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	ed2d 8b02 	vpush	{d8}
 800a270:	b09d      	sub	sp, #116	; 0x74
 800a272:	461f      	mov	r7, r3
 800a274:	2300      	movs	r3, #0
 800a276:	9318      	str	r3, [sp, #96]	; 0x60
 800a278:	4ba2      	ldr	r3, [pc, #648]	; (800a504 <_strtod_l+0x29c>)
 800a27a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	9305      	str	r3, [sp, #20]
 800a280:	4604      	mov	r4, r0
 800a282:	4618      	mov	r0, r3
 800a284:	4688      	mov	r8, r1
 800a286:	f7f5 ffa3 	bl	80001d0 <strlen>
 800a28a:	f04f 0a00 	mov.w	sl, #0
 800a28e:	4605      	mov	r5, r0
 800a290:	f04f 0b00 	mov.w	fp, #0
 800a294:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a298:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a29a:	781a      	ldrb	r2, [r3, #0]
 800a29c:	2a2b      	cmp	r2, #43	; 0x2b
 800a29e:	d04e      	beq.n	800a33e <_strtod_l+0xd6>
 800a2a0:	d83b      	bhi.n	800a31a <_strtod_l+0xb2>
 800a2a2:	2a0d      	cmp	r2, #13
 800a2a4:	d834      	bhi.n	800a310 <_strtod_l+0xa8>
 800a2a6:	2a08      	cmp	r2, #8
 800a2a8:	d834      	bhi.n	800a314 <_strtod_l+0xac>
 800a2aa:	2a00      	cmp	r2, #0
 800a2ac:	d03e      	beq.n	800a32c <_strtod_l+0xc4>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a2b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a2b4:	7833      	ldrb	r3, [r6, #0]
 800a2b6:	2b30      	cmp	r3, #48	; 0x30
 800a2b8:	f040 80b0 	bne.w	800a41c <_strtod_l+0x1b4>
 800a2bc:	7873      	ldrb	r3, [r6, #1]
 800a2be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2c2:	2b58      	cmp	r3, #88	; 0x58
 800a2c4:	d168      	bne.n	800a398 <_strtod_l+0x130>
 800a2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	ab18      	add	r3, sp, #96	; 0x60
 800a2cc:	9702      	str	r7, [sp, #8]
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	4a8d      	ldr	r2, [pc, #564]	; (800a508 <_strtod_l+0x2a0>)
 800a2d2:	ab19      	add	r3, sp, #100	; 0x64
 800a2d4:	a917      	add	r1, sp, #92	; 0x5c
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f001 fdd2 	bl	800be80 <__gethex>
 800a2dc:	f010 0707 	ands.w	r7, r0, #7
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	d005      	beq.n	800a2f0 <_strtod_l+0x88>
 800a2e4:	2f06      	cmp	r7, #6
 800a2e6:	d12c      	bne.n	800a342 <_strtod_l+0xda>
 800a2e8:	3601      	adds	r6, #1
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800a2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f040 8590 	bne.w	800ae18 <_strtod_l+0xbb0>
 800a2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fa:	b1eb      	cbz	r3, 800a338 <_strtod_l+0xd0>
 800a2fc:	4652      	mov	r2, sl
 800a2fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a302:	ec43 2b10 	vmov	d0, r2, r3
 800a306:	b01d      	add	sp, #116	; 0x74
 800a308:	ecbd 8b02 	vpop	{d8}
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	2a20      	cmp	r2, #32
 800a312:	d1cc      	bne.n	800a2ae <_strtod_l+0x46>
 800a314:	3301      	adds	r3, #1
 800a316:	9317      	str	r3, [sp, #92]	; 0x5c
 800a318:	e7be      	b.n	800a298 <_strtod_l+0x30>
 800a31a:	2a2d      	cmp	r2, #45	; 0x2d
 800a31c:	d1c7      	bne.n	800a2ae <_strtod_l+0x46>
 800a31e:	2201      	movs	r2, #1
 800a320:	920a      	str	r2, [sp, #40]	; 0x28
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	9217      	str	r2, [sp, #92]	; 0x5c
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1c2      	bne.n	800a2b2 <_strtod_l+0x4a>
 800a32c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a32e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a332:	2b00      	cmp	r3, #0
 800a334:	f040 856e 	bne.w	800ae14 <_strtod_l+0xbac>
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	e7e1      	b.n	800a302 <_strtod_l+0x9a>
 800a33e:	2200      	movs	r2, #0
 800a340:	e7ee      	b.n	800a320 <_strtod_l+0xb8>
 800a342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a344:	b13a      	cbz	r2, 800a356 <_strtod_l+0xee>
 800a346:	2135      	movs	r1, #53	; 0x35
 800a348:	a81a      	add	r0, sp, #104	; 0x68
 800a34a:	f002 fd3c 	bl	800cdc6 <__copybits>
 800a34e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a350:	4620      	mov	r0, r4
 800a352:	f002 f8fb 	bl	800c54c <_Bfree>
 800a356:	3f01      	subs	r7, #1
 800a358:	2f04      	cmp	r7, #4
 800a35a:	d806      	bhi.n	800a36a <_strtod_l+0x102>
 800a35c:	e8df f007 	tbb	[pc, r7]
 800a360:	1714030a 	.word	0x1714030a
 800a364:	0a          	.byte	0x0a
 800a365:	00          	.byte	0x00
 800a366:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a36a:	0728      	lsls	r0, r5, #28
 800a36c:	d5c0      	bpl.n	800a2f0 <_strtod_l+0x88>
 800a36e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a372:	e7bd      	b.n	800a2f0 <_strtod_l+0x88>
 800a374:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a378:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a37a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a37e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a382:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a386:	e7f0      	b.n	800a36a <_strtod_l+0x102>
 800a388:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a50c <_strtod_l+0x2a4>
 800a38c:	e7ed      	b.n	800a36a <_strtod_l+0x102>
 800a38e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a392:	f04f 3aff 	mov.w	sl, #4294967295
 800a396:	e7e8      	b.n	800a36a <_strtod_l+0x102>
 800a398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b30      	cmp	r3, #48	; 0x30
 800a3a2:	d0f9      	beq.n	800a398 <_strtod_l+0x130>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0a3      	beq.n	800a2f0 <_strtod_l+0x88>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	f04f 0900 	mov.w	r9, #0
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3b2:	9308      	str	r3, [sp, #32]
 800a3b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3b8:	464f      	mov	r7, r9
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a3be:	7806      	ldrb	r6, [r0, #0]
 800a3c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a3c4:	b2d9      	uxtb	r1, r3
 800a3c6:	2909      	cmp	r1, #9
 800a3c8:	d92a      	bls.n	800a420 <_strtod_l+0x1b8>
 800a3ca:	9905      	ldr	r1, [sp, #20]
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	f003 f903 	bl	800d5d8 <strncmp>
 800a3d2:	b398      	cbz	r0, 800a43c <_strtod_l+0x1d4>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	463d      	mov	r5, r7
 800a3da:	9005      	str	r0, [sp, #20]
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2a65      	cmp	r2, #101	; 0x65
 800a3e0:	d001      	beq.n	800a3e6 <_strtod_l+0x17e>
 800a3e2:	2a45      	cmp	r2, #69	; 0x45
 800a3e4:	d118      	bne.n	800a418 <_strtod_l+0x1b0>
 800a3e6:	b91d      	cbnz	r5, 800a3f0 <_strtod_l+0x188>
 800a3e8:	9a04      	ldr	r2, [sp, #16]
 800a3ea:	4302      	orrs	r2, r0
 800a3ec:	d09e      	beq.n	800a32c <_strtod_l+0xc4>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a3f4:	f108 0201 	add.w	r2, r8, #1
 800a3f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a3fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a3fe:	2a2b      	cmp	r2, #43	; 0x2b
 800a400:	d075      	beq.n	800a4ee <_strtod_l+0x286>
 800a402:	2a2d      	cmp	r2, #45	; 0x2d
 800a404:	d07b      	beq.n	800a4fe <_strtod_l+0x296>
 800a406:	f04f 0c00 	mov.w	ip, #0
 800a40a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a40e:	2909      	cmp	r1, #9
 800a410:	f240 8082 	bls.w	800a518 <_strtod_l+0x2b0>
 800a414:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a418:	2600      	movs	r6, #0
 800a41a:	e09d      	b.n	800a558 <_strtod_l+0x2f0>
 800a41c:	2300      	movs	r3, #0
 800a41e:	e7c4      	b.n	800a3aa <_strtod_l+0x142>
 800a420:	2f08      	cmp	r7, #8
 800a422:	bfd8      	it	le
 800a424:	9907      	ldrle	r1, [sp, #28]
 800a426:	f100 0001 	add.w	r0, r0, #1
 800a42a:	bfda      	itte	le
 800a42c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a430:	9307      	strle	r3, [sp, #28]
 800a432:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a436:	3701      	adds	r7, #1
 800a438:	9017      	str	r0, [sp, #92]	; 0x5c
 800a43a:	e7bf      	b.n	800a3bc <_strtod_l+0x154>
 800a43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a43e:	195a      	adds	r2, r3, r5
 800a440:	9217      	str	r2, [sp, #92]	; 0x5c
 800a442:	5d5a      	ldrb	r2, [r3, r5]
 800a444:	2f00      	cmp	r7, #0
 800a446:	d037      	beq.n	800a4b8 <_strtod_l+0x250>
 800a448:	9005      	str	r0, [sp, #20]
 800a44a:	463d      	mov	r5, r7
 800a44c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a450:	2b09      	cmp	r3, #9
 800a452:	d912      	bls.n	800a47a <_strtod_l+0x212>
 800a454:	2301      	movs	r3, #1
 800a456:	e7c2      	b.n	800a3de <_strtod_l+0x176>
 800a458:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a45e:	785a      	ldrb	r2, [r3, #1]
 800a460:	3001      	adds	r0, #1
 800a462:	2a30      	cmp	r2, #48	; 0x30
 800a464:	d0f8      	beq.n	800a458 <_strtod_l+0x1f0>
 800a466:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a46a:	2b08      	cmp	r3, #8
 800a46c:	f200 84d9 	bhi.w	800ae22 <_strtod_l+0xbba>
 800a470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a472:	9005      	str	r0, [sp, #20]
 800a474:	2000      	movs	r0, #0
 800a476:	9308      	str	r3, [sp, #32]
 800a478:	4605      	mov	r5, r0
 800a47a:	3a30      	subs	r2, #48	; 0x30
 800a47c:	f100 0301 	add.w	r3, r0, #1
 800a480:	d014      	beq.n	800a4ac <_strtod_l+0x244>
 800a482:	9905      	ldr	r1, [sp, #20]
 800a484:	4419      	add	r1, r3
 800a486:	9105      	str	r1, [sp, #20]
 800a488:	462b      	mov	r3, r5
 800a48a:	eb00 0e05 	add.w	lr, r0, r5
 800a48e:	210a      	movs	r1, #10
 800a490:	4573      	cmp	r3, lr
 800a492:	d113      	bne.n	800a4bc <_strtod_l+0x254>
 800a494:	182b      	adds	r3, r5, r0
 800a496:	2b08      	cmp	r3, #8
 800a498:	f105 0501 	add.w	r5, r5, #1
 800a49c:	4405      	add	r5, r0
 800a49e:	dc1c      	bgt.n	800a4da <_strtod_l+0x272>
 800a4a0:	9907      	ldr	r1, [sp, #28]
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	fb03 2301 	mla	r3, r3, r1, r2
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4ae:	1c51      	adds	r1, r2, #1
 800a4b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a4b2:	7852      	ldrb	r2, [r2, #1]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	e7c9      	b.n	800a44c <_strtod_l+0x1e4>
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	e7d2      	b.n	800a462 <_strtod_l+0x1fa>
 800a4bc:	2b08      	cmp	r3, #8
 800a4be:	dc04      	bgt.n	800a4ca <_strtod_l+0x262>
 800a4c0:	9e07      	ldr	r6, [sp, #28]
 800a4c2:	434e      	muls	r6, r1
 800a4c4:	9607      	str	r6, [sp, #28]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	e7e2      	b.n	800a490 <_strtod_l+0x228>
 800a4ca:	f103 0c01 	add.w	ip, r3, #1
 800a4ce:	f1bc 0f10 	cmp.w	ip, #16
 800a4d2:	bfd8      	it	le
 800a4d4:	fb01 f909 	mulle.w	r9, r1, r9
 800a4d8:	e7f5      	b.n	800a4c6 <_strtod_l+0x25e>
 800a4da:	2d10      	cmp	r5, #16
 800a4dc:	bfdc      	itt	le
 800a4de:	230a      	movle	r3, #10
 800a4e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a4e4:	e7e1      	b.n	800a4aa <_strtod_l+0x242>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	e77c      	b.n	800a3e8 <_strtod_l+0x180>
 800a4ee:	f04f 0c00 	mov.w	ip, #0
 800a4f2:	f108 0202 	add.w	r2, r8, #2
 800a4f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a4fc:	e785      	b.n	800a40a <_strtod_l+0x1a2>
 800a4fe:	f04f 0c01 	mov.w	ip, #1
 800a502:	e7f6      	b.n	800a4f2 <_strtod_l+0x28a>
 800a504:	0800e4d8 	.word	0x0800e4d8
 800a508:	0800e1f8 	.word	0x0800e1f8
 800a50c:	7ff00000 	.word	0x7ff00000
 800a510:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a512:	1c51      	adds	r1, r2, #1
 800a514:	9117      	str	r1, [sp, #92]	; 0x5c
 800a516:	7852      	ldrb	r2, [r2, #1]
 800a518:	2a30      	cmp	r2, #48	; 0x30
 800a51a:	d0f9      	beq.n	800a510 <_strtod_l+0x2a8>
 800a51c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a520:	2908      	cmp	r1, #8
 800a522:	f63f af79 	bhi.w	800a418 <_strtod_l+0x1b0>
 800a526:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a52a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a52c:	9206      	str	r2, [sp, #24]
 800a52e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a530:	1c51      	adds	r1, r2, #1
 800a532:	9117      	str	r1, [sp, #92]	; 0x5c
 800a534:	7852      	ldrb	r2, [r2, #1]
 800a536:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a53a:	2e09      	cmp	r6, #9
 800a53c:	d937      	bls.n	800a5ae <_strtod_l+0x346>
 800a53e:	9e06      	ldr	r6, [sp, #24]
 800a540:	1b89      	subs	r1, r1, r6
 800a542:	2908      	cmp	r1, #8
 800a544:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a548:	dc02      	bgt.n	800a550 <_strtod_l+0x2e8>
 800a54a:	4576      	cmp	r6, lr
 800a54c:	bfa8      	it	ge
 800a54e:	4676      	movge	r6, lr
 800a550:	f1bc 0f00 	cmp.w	ip, #0
 800a554:	d000      	beq.n	800a558 <_strtod_l+0x2f0>
 800a556:	4276      	negs	r6, r6
 800a558:	2d00      	cmp	r5, #0
 800a55a:	d14d      	bne.n	800a5f8 <_strtod_l+0x390>
 800a55c:	9904      	ldr	r1, [sp, #16]
 800a55e:	4301      	orrs	r1, r0
 800a560:	f47f aec6 	bne.w	800a2f0 <_strtod_l+0x88>
 800a564:	2b00      	cmp	r3, #0
 800a566:	f47f aee1 	bne.w	800a32c <_strtod_l+0xc4>
 800a56a:	2a69      	cmp	r2, #105	; 0x69
 800a56c:	d027      	beq.n	800a5be <_strtod_l+0x356>
 800a56e:	dc24      	bgt.n	800a5ba <_strtod_l+0x352>
 800a570:	2a49      	cmp	r2, #73	; 0x49
 800a572:	d024      	beq.n	800a5be <_strtod_l+0x356>
 800a574:	2a4e      	cmp	r2, #78	; 0x4e
 800a576:	f47f aed9 	bne.w	800a32c <_strtod_l+0xc4>
 800a57a:	499f      	ldr	r1, [pc, #636]	; (800a7f8 <_strtod_l+0x590>)
 800a57c:	a817      	add	r0, sp, #92	; 0x5c
 800a57e:	f001 fed7 	bl	800c330 <__match>
 800a582:	2800      	cmp	r0, #0
 800a584:	f43f aed2 	beq.w	800a32c <_strtod_l+0xc4>
 800a588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b28      	cmp	r3, #40	; 0x28
 800a58e:	d12d      	bne.n	800a5ec <_strtod_l+0x384>
 800a590:	499a      	ldr	r1, [pc, #616]	; (800a7fc <_strtod_l+0x594>)
 800a592:	aa1a      	add	r2, sp, #104	; 0x68
 800a594:	a817      	add	r0, sp, #92	; 0x5c
 800a596:	f001 fedf 	bl	800c358 <__hexnan>
 800a59a:	2805      	cmp	r0, #5
 800a59c:	d126      	bne.n	800a5ec <_strtod_l+0x384>
 800a59e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a5a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a5a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a5ac:	e6a0      	b.n	800a2f0 <_strtod_l+0x88>
 800a5ae:	210a      	movs	r1, #10
 800a5b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a5b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a5b8:	e7b9      	b.n	800a52e <_strtod_l+0x2c6>
 800a5ba:	2a6e      	cmp	r2, #110	; 0x6e
 800a5bc:	e7db      	b.n	800a576 <_strtod_l+0x30e>
 800a5be:	4990      	ldr	r1, [pc, #576]	; (800a800 <_strtod_l+0x598>)
 800a5c0:	a817      	add	r0, sp, #92	; 0x5c
 800a5c2:	f001 feb5 	bl	800c330 <__match>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f43f aeb0 	beq.w	800a32c <_strtod_l+0xc4>
 800a5cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5ce:	498d      	ldr	r1, [pc, #564]	; (800a804 <_strtod_l+0x59c>)
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	a817      	add	r0, sp, #92	; 0x5c
 800a5d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5d6:	f001 feab 	bl	800c330 <__match>
 800a5da:	b910      	cbnz	r0, 800a5e2 <_strtod_l+0x37a>
 800a5dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5de:	3301      	adds	r3, #1
 800a5e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a814 <_strtod_l+0x5ac>
 800a5e6:	f04f 0a00 	mov.w	sl, #0
 800a5ea:	e681      	b.n	800a2f0 <_strtod_l+0x88>
 800a5ec:	4886      	ldr	r0, [pc, #536]	; (800a808 <_strtod_l+0x5a0>)
 800a5ee:	f002 ffdb 	bl	800d5a8 <nan>
 800a5f2:	ec5b ab10 	vmov	sl, fp, d0
 800a5f6:	e67b      	b.n	800a2f0 <_strtod_l+0x88>
 800a5f8:	9b05      	ldr	r3, [sp, #20]
 800a5fa:	9807      	ldr	r0, [sp, #28]
 800a5fc:	1af3      	subs	r3, r6, r3
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	bf08      	it	eq
 800a602:	462f      	moveq	r7, r5
 800a604:	2d10      	cmp	r5, #16
 800a606:	9306      	str	r3, [sp, #24]
 800a608:	46a8      	mov	r8, r5
 800a60a:	bfa8      	it	ge
 800a60c:	f04f 0810 	movge.w	r8, #16
 800a610:	f7f5 ff78 	bl	8000504 <__aeabi_ui2d>
 800a614:	2d09      	cmp	r5, #9
 800a616:	4682      	mov	sl, r0
 800a618:	468b      	mov	fp, r1
 800a61a:	dd13      	ble.n	800a644 <_strtod_l+0x3dc>
 800a61c:	4b7b      	ldr	r3, [pc, #492]	; (800a80c <_strtod_l+0x5a4>)
 800a61e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	4682      	mov	sl, r0
 800a62c:	4648      	mov	r0, r9
 800a62e:	468b      	mov	fp, r1
 800a630:	f7f5 ff68 	bl	8000504 <__aeabi_ui2d>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	f7f5 fe26 	bl	800028c <__adddf3>
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	2d0f      	cmp	r5, #15
 800a646:	dc38      	bgt.n	800a6ba <_strtod_l+0x452>
 800a648:	9b06      	ldr	r3, [sp, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f43f ae50 	beq.w	800a2f0 <_strtod_l+0x88>
 800a650:	dd24      	ble.n	800a69c <_strtod_l+0x434>
 800a652:	2b16      	cmp	r3, #22
 800a654:	dc0b      	bgt.n	800a66e <_strtod_l+0x406>
 800a656:	496d      	ldr	r1, [pc, #436]	; (800a80c <_strtod_l+0x5a4>)
 800a658:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a660:	4652      	mov	r2, sl
 800a662:	465b      	mov	r3, fp
 800a664:	f7f5 ffc8 	bl	80005f8 <__aeabi_dmul>
 800a668:	4682      	mov	sl, r0
 800a66a:	468b      	mov	fp, r1
 800a66c:	e640      	b.n	800a2f0 <_strtod_l+0x88>
 800a66e:	9a06      	ldr	r2, [sp, #24]
 800a670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a674:	4293      	cmp	r3, r2
 800a676:	db20      	blt.n	800a6ba <_strtod_l+0x452>
 800a678:	4c64      	ldr	r4, [pc, #400]	; (800a80c <_strtod_l+0x5a4>)
 800a67a:	f1c5 050f 	rsb	r5, r5, #15
 800a67e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a682:	4652      	mov	r2, sl
 800a684:	465b      	mov	r3, fp
 800a686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a68a:	f7f5 ffb5 	bl	80005f8 <__aeabi_dmul>
 800a68e:	9b06      	ldr	r3, [sp, #24]
 800a690:	1b5d      	subs	r5, r3, r5
 800a692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a69a:	e7e3      	b.n	800a664 <_strtod_l+0x3fc>
 800a69c:	9b06      	ldr	r3, [sp, #24]
 800a69e:	3316      	adds	r3, #22
 800a6a0:	db0b      	blt.n	800a6ba <_strtod_l+0x452>
 800a6a2:	9b05      	ldr	r3, [sp, #20]
 800a6a4:	1b9e      	subs	r6, r3, r6
 800a6a6:	4b59      	ldr	r3, [pc, #356]	; (800a80c <_strtod_l+0x5a4>)
 800a6a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a6ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	f7f6 f8ca 	bl	800084c <__aeabi_ddiv>
 800a6b8:	e7d6      	b.n	800a668 <_strtod_l+0x400>
 800a6ba:	9b06      	ldr	r3, [sp, #24]
 800a6bc:	eba5 0808 	sub.w	r8, r5, r8
 800a6c0:	4498      	add	r8, r3
 800a6c2:	f1b8 0f00 	cmp.w	r8, #0
 800a6c6:	dd74      	ble.n	800a7b2 <_strtod_l+0x54a>
 800a6c8:	f018 030f 	ands.w	r3, r8, #15
 800a6cc:	d00a      	beq.n	800a6e4 <_strtod_l+0x47c>
 800a6ce:	494f      	ldr	r1, [pc, #316]	; (800a80c <_strtod_l+0x5a4>)
 800a6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6d4:	4652      	mov	r2, sl
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6dc:	f7f5 ff8c 	bl	80005f8 <__aeabi_dmul>
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	468b      	mov	fp, r1
 800a6e4:	f038 080f 	bics.w	r8, r8, #15
 800a6e8:	d04f      	beq.n	800a78a <_strtod_l+0x522>
 800a6ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a6ee:	dd22      	ble.n	800a736 <_strtod_l+0x4ce>
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	462e      	mov	r6, r5
 800a6f4:	9507      	str	r5, [sp, #28]
 800a6f6:	9505      	str	r5, [sp, #20]
 800a6f8:	2322      	movs	r3, #34	; 0x22
 800a6fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a814 <_strtod_l+0x5ac>
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	f04f 0a00 	mov.w	sl, #0
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f43f adf2 	beq.w	800a2f0 <_strtod_l+0x88>
 800a70c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a70e:	4620      	mov	r0, r4
 800a710:	f001 ff1c 	bl	800c54c <_Bfree>
 800a714:	9905      	ldr	r1, [sp, #20]
 800a716:	4620      	mov	r0, r4
 800a718:	f001 ff18 	bl	800c54c <_Bfree>
 800a71c:	4631      	mov	r1, r6
 800a71e:	4620      	mov	r0, r4
 800a720:	f001 ff14 	bl	800c54c <_Bfree>
 800a724:	9907      	ldr	r1, [sp, #28]
 800a726:	4620      	mov	r0, r4
 800a728:	f001 ff10 	bl	800c54c <_Bfree>
 800a72c:	4629      	mov	r1, r5
 800a72e:	4620      	mov	r0, r4
 800a730:	f001 ff0c 	bl	800c54c <_Bfree>
 800a734:	e5dc      	b.n	800a2f0 <_strtod_l+0x88>
 800a736:	4b36      	ldr	r3, [pc, #216]	; (800a810 <_strtod_l+0x5a8>)
 800a738:	9304      	str	r3, [sp, #16]
 800a73a:	2300      	movs	r3, #0
 800a73c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a740:	4650      	mov	r0, sl
 800a742:	4659      	mov	r1, fp
 800a744:	4699      	mov	r9, r3
 800a746:	f1b8 0f01 	cmp.w	r8, #1
 800a74a:	dc21      	bgt.n	800a790 <_strtod_l+0x528>
 800a74c:	b10b      	cbz	r3, 800a752 <_strtod_l+0x4ea>
 800a74e:	4682      	mov	sl, r0
 800a750:	468b      	mov	fp, r1
 800a752:	4b2f      	ldr	r3, [pc, #188]	; (800a810 <_strtod_l+0x5a8>)
 800a754:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a758:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a75c:	4652      	mov	r2, sl
 800a75e:	465b      	mov	r3, fp
 800a760:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a764:	f7f5 ff48 	bl	80005f8 <__aeabi_dmul>
 800a768:	4b2a      	ldr	r3, [pc, #168]	; (800a814 <_strtod_l+0x5ac>)
 800a76a:	460a      	mov	r2, r1
 800a76c:	400b      	ands	r3, r1
 800a76e:	492a      	ldr	r1, [pc, #168]	; (800a818 <_strtod_l+0x5b0>)
 800a770:	428b      	cmp	r3, r1
 800a772:	4682      	mov	sl, r0
 800a774:	d8bc      	bhi.n	800a6f0 <_strtod_l+0x488>
 800a776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a77a:	428b      	cmp	r3, r1
 800a77c:	bf86      	itte	hi
 800a77e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a81c <_strtod_l+0x5b4>
 800a782:	f04f 3aff 	movhi.w	sl, #4294967295
 800a786:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a78a:	2300      	movs	r3, #0
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	e084      	b.n	800a89a <_strtod_l+0x632>
 800a790:	f018 0f01 	tst.w	r8, #1
 800a794:	d005      	beq.n	800a7a2 <_strtod_l+0x53a>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 ff2c 	bl	80005f8 <__aeabi_dmul>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	9a04      	ldr	r2, [sp, #16]
 800a7a4:	3208      	adds	r2, #8
 800a7a6:	f109 0901 	add.w	r9, r9, #1
 800a7aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a7ae:	9204      	str	r2, [sp, #16]
 800a7b0:	e7c9      	b.n	800a746 <_strtod_l+0x4de>
 800a7b2:	d0ea      	beq.n	800a78a <_strtod_l+0x522>
 800a7b4:	f1c8 0800 	rsb	r8, r8, #0
 800a7b8:	f018 020f 	ands.w	r2, r8, #15
 800a7bc:	d00a      	beq.n	800a7d4 <_strtod_l+0x56c>
 800a7be:	4b13      	ldr	r3, [pc, #76]	; (800a80c <_strtod_l+0x5a4>)
 800a7c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	f7f6 f83e 	bl	800084c <__aeabi_ddiv>
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	468b      	mov	fp, r1
 800a7d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a7d8:	d0d7      	beq.n	800a78a <_strtod_l+0x522>
 800a7da:	f1b8 0f1f 	cmp.w	r8, #31
 800a7de:	dd1f      	ble.n	800a820 <_strtod_l+0x5b8>
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	462e      	mov	r6, r5
 800a7e4:	9507      	str	r5, [sp, #28]
 800a7e6:	9505      	str	r5, [sp, #20]
 800a7e8:	2322      	movs	r3, #34	; 0x22
 800a7ea:	f04f 0a00 	mov.w	sl, #0
 800a7ee:	f04f 0b00 	mov.w	fp, #0
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	e786      	b.n	800a704 <_strtod_l+0x49c>
 800a7f6:	bf00      	nop
 800a7f8:	0800e1d1 	.word	0x0800e1d1
 800a7fc:	0800e20c 	.word	0x0800e20c
 800a800:	0800e1c9 	.word	0x0800e1c9
 800a804:	0800e3fc 	.word	0x0800e3fc
 800a808:	0800e2f7 	.word	0x0800e2f7
 800a80c:	0800e570 	.word	0x0800e570
 800a810:	0800e548 	.word	0x0800e548
 800a814:	7ff00000 	.word	0x7ff00000
 800a818:	7ca00000 	.word	0x7ca00000
 800a81c:	7fefffff 	.word	0x7fefffff
 800a820:	f018 0310 	ands.w	r3, r8, #16
 800a824:	bf18      	it	ne
 800a826:	236a      	movne	r3, #106	; 0x6a
 800a828:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800abd8 <_strtod_l+0x970>
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	4650      	mov	r0, sl
 800a830:	4659      	mov	r1, fp
 800a832:	2300      	movs	r3, #0
 800a834:	f018 0f01 	tst.w	r8, #1
 800a838:	d004      	beq.n	800a844 <_strtod_l+0x5dc>
 800a83a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a83e:	f7f5 fedb 	bl	80005f8 <__aeabi_dmul>
 800a842:	2301      	movs	r3, #1
 800a844:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a848:	f109 0908 	add.w	r9, r9, #8
 800a84c:	d1f2      	bne.n	800a834 <_strtod_l+0x5cc>
 800a84e:	b10b      	cbz	r3, 800a854 <_strtod_l+0x5ec>
 800a850:	4682      	mov	sl, r0
 800a852:	468b      	mov	fp, r1
 800a854:	9b04      	ldr	r3, [sp, #16]
 800a856:	b1c3      	cbz	r3, 800a88a <_strtod_l+0x622>
 800a858:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a85c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a860:	2b00      	cmp	r3, #0
 800a862:	4659      	mov	r1, fp
 800a864:	dd11      	ble.n	800a88a <_strtod_l+0x622>
 800a866:	2b1f      	cmp	r3, #31
 800a868:	f340 8124 	ble.w	800aab4 <_strtod_l+0x84c>
 800a86c:	2b34      	cmp	r3, #52	; 0x34
 800a86e:	bfde      	ittt	le
 800a870:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a874:	f04f 33ff 	movle.w	r3, #4294967295
 800a878:	fa03 f202 	lslle.w	r2, r3, r2
 800a87c:	f04f 0a00 	mov.w	sl, #0
 800a880:	bfcc      	ite	gt
 800a882:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a886:	ea02 0b01 	andle.w	fp, r2, r1
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	4650      	mov	r0, sl
 800a890:	4659      	mov	r1, fp
 800a892:	f7f6 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 800a896:	2800      	cmp	r0, #0
 800a898:	d1a2      	bne.n	800a7e0 <_strtod_l+0x578>
 800a89a:	9b07      	ldr	r3, [sp, #28]
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	9908      	ldr	r1, [sp, #32]
 800a8a0:	462b      	mov	r3, r5
 800a8a2:	463a      	mov	r2, r7
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	f001 feb9 	bl	800c61c <__s2b>
 800a8aa:	9007      	str	r0, [sp, #28]
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f43f af1f 	beq.w	800a6f0 <_strtod_l+0x488>
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	1b9e      	subs	r6, r3, r6
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfb4      	ite	lt
 800a8bc:	4633      	movlt	r3, r6
 800a8be:	2300      	movge	r3, #0
 800a8c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a8c2:	9b06      	ldr	r3, [sp, #24]
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a8ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a8cc:	462e      	mov	r6, r5
 800a8ce:	9b07      	ldr	r3, [sp, #28]
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	6859      	ldr	r1, [r3, #4]
 800a8d4:	f001 fdfa 	bl	800c4cc <_Balloc>
 800a8d8:	9005      	str	r0, [sp, #20]
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	f43f af0c 	beq.w	800a6f8 <_strtod_l+0x490>
 800a8e0:	9b07      	ldr	r3, [sp, #28]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	3202      	adds	r2, #2
 800a8e6:	f103 010c 	add.w	r1, r3, #12
 800a8ea:	0092      	lsls	r2, r2, #2
 800a8ec:	300c      	adds	r0, #12
 800a8ee:	f7fe ffd9 	bl	80098a4 <memcpy>
 800a8f2:	ec4b ab10 	vmov	d0, sl, fp
 800a8f6:	aa1a      	add	r2, sp, #104	; 0x68
 800a8f8:	a919      	add	r1, sp, #100	; 0x64
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f002 f9d4 	bl	800cca8 <__d2b>
 800a900:	ec4b ab18 	vmov	d8, sl, fp
 800a904:	9018      	str	r0, [sp, #96]	; 0x60
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f aef6 	beq.w	800a6f8 <_strtod_l+0x490>
 800a90c:	2101      	movs	r1, #1
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 ff1e 	bl	800c750 <__i2b>
 800a914:	4606      	mov	r6, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aeee 	beq.w	800a6f8 <_strtod_l+0x490>
 800a91c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a91e:	9904      	ldr	r1, [sp, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	bfab      	itete	ge
 800a924:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a926:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a928:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a92a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a92e:	bfac      	ite	ge
 800a930:	eb03 0902 	addge.w	r9, r3, r2
 800a934:	1ad7      	sublt	r7, r2, r3
 800a936:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a938:	eba3 0801 	sub.w	r8, r3, r1
 800a93c:	4490      	add	r8, r2
 800a93e:	4ba1      	ldr	r3, [pc, #644]	; (800abc4 <_strtod_l+0x95c>)
 800a940:	f108 38ff 	add.w	r8, r8, #4294967295
 800a944:	4598      	cmp	r8, r3
 800a946:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a94a:	f280 80c7 	bge.w	800aadc <_strtod_l+0x874>
 800a94e:	eba3 0308 	sub.w	r3, r3, r8
 800a952:	2b1f      	cmp	r3, #31
 800a954:	eba2 0203 	sub.w	r2, r2, r3
 800a958:	f04f 0101 	mov.w	r1, #1
 800a95c:	f300 80b1 	bgt.w	800aac2 <_strtod_l+0x85a>
 800a960:	fa01 f303 	lsl.w	r3, r1, r3
 800a964:	930d      	str	r3, [sp, #52]	; 0x34
 800a966:	2300      	movs	r3, #0
 800a968:	9308      	str	r3, [sp, #32]
 800a96a:	eb09 0802 	add.w	r8, r9, r2
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	45c1      	cmp	r9, r8
 800a972:	4417      	add	r7, r2
 800a974:	441f      	add	r7, r3
 800a976:	464b      	mov	r3, r9
 800a978:	bfa8      	it	ge
 800a97a:	4643      	movge	r3, r8
 800a97c:	42bb      	cmp	r3, r7
 800a97e:	bfa8      	it	ge
 800a980:	463b      	movge	r3, r7
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfc2      	ittt	gt
 800a986:	eba8 0803 	subgt.w	r8, r8, r3
 800a98a:	1aff      	subgt	r7, r7, r3
 800a98c:	eba9 0903 	subgt.w	r9, r9, r3
 800a990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a992:	2b00      	cmp	r3, #0
 800a994:	dd17      	ble.n	800a9c6 <_strtod_l+0x75e>
 800a996:	4631      	mov	r1, r6
 800a998:	461a      	mov	r2, r3
 800a99a:	4620      	mov	r0, r4
 800a99c:	f001 ff98 	bl	800c8d0 <__pow5mult>
 800a9a0:	4606      	mov	r6, r0
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f43f aea8 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9a8:	4601      	mov	r1, r0
 800a9aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f001 fee5 	bl	800c77c <__multiply>
 800a9b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	f43f ae9f 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f001 fdc5 	bl	800c54c <_Bfree>
 800a9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c4:	9318      	str	r3, [sp, #96]	; 0x60
 800a9c6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ca:	f300 808c 	bgt.w	800aae6 <_strtod_l+0x87e>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd08      	ble.n	800a9e6 <_strtod_l+0x77e>
 800a9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f001 ff79 	bl	800c8d0 <__pow5mult>
 800a9de:	9005      	str	r0, [sp, #20]
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	f43f ae89 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9e6:	2f00      	cmp	r7, #0
 800a9e8:	dd08      	ble.n	800a9fc <_strtod_l+0x794>
 800a9ea:	9905      	ldr	r1, [sp, #20]
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f001 ffc8 	bl	800c984 <__lshift>
 800a9f4:	9005      	str	r0, [sp, #20]
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f43f ae7e 	beq.w	800a6f8 <_strtod_l+0x490>
 800a9fc:	f1b9 0f00 	cmp.w	r9, #0
 800aa00:	dd08      	ble.n	800aa14 <_strtod_l+0x7ac>
 800aa02:	4631      	mov	r1, r6
 800aa04:	464a      	mov	r2, r9
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 ffbc 	bl	800c984 <__lshift>
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f43f ae72 	beq.w	800a6f8 <_strtod_l+0x490>
 800aa14:	9a05      	ldr	r2, [sp, #20]
 800aa16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f002 f83f 	bl	800ca9c <__mdiff>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f43f ae69 	beq.w	800a6f8 <_strtod_l+0x490>
 800aa26:	68c3      	ldr	r3, [r0, #12]
 800aa28:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60c3      	str	r3, [r0, #12]
 800aa2e:	4631      	mov	r1, r6
 800aa30:	f002 f818 	bl	800ca64 <__mcmp>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	da60      	bge.n	800aafa <_strtod_l+0x892>
 800aa38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa3a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa3e:	f040 8082 	bne.w	800ab46 <_strtod_l+0x8de>
 800aa42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d17d      	bne.n	800ab46 <_strtod_l+0x8de>
 800aa4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aa4e:	0d1b      	lsrs	r3, r3, #20
 800aa50:	051b      	lsls	r3, r3, #20
 800aa52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa56:	d976      	bls.n	800ab46 <_strtod_l+0x8de>
 800aa58:	696b      	ldr	r3, [r5, #20]
 800aa5a:	b913      	cbnz	r3, 800aa62 <_strtod_l+0x7fa>
 800aa5c:	692b      	ldr	r3, [r5, #16]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	dd71      	ble.n	800ab46 <_strtod_l+0x8de>
 800aa62:	4629      	mov	r1, r5
 800aa64:	2201      	movs	r2, #1
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 ff8c 	bl	800c984 <__lshift>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4605      	mov	r5, r0
 800aa70:	f001 fff8 	bl	800ca64 <__mcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	dd66      	ble.n	800ab46 <_strtod_l+0x8de>
 800aa78:	9904      	ldr	r1, [sp, #16]
 800aa7a:	4a53      	ldr	r2, [pc, #332]	; (800abc8 <_strtod_l+0x960>)
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	f000 8081 	beq.w	800ab86 <_strtod_l+0x91e>
 800aa84:	ea02 010b 	and.w	r1, r2, fp
 800aa88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa8c:	dc7b      	bgt.n	800ab86 <_strtod_l+0x91e>
 800aa8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa92:	f77f aea9 	ble.w	800a7e8 <_strtod_l+0x580>
 800aa96:	4b4d      	ldr	r3, [pc, #308]	; (800abcc <_strtod_l+0x964>)
 800aa98:	4650      	mov	r0, sl
 800aa9a:	4659      	mov	r1, fp
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f7f5 fdab 	bl	80005f8 <__aeabi_dmul>
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4303      	orrs	r3, r0
 800aaa6:	bf08      	it	eq
 800aaa8:	2322      	moveq	r3, #34	; 0x22
 800aaaa:	4682      	mov	sl, r0
 800aaac:	468b      	mov	fp, r1
 800aaae:	bf08      	it	eq
 800aab0:	6023      	streq	r3, [r4, #0]
 800aab2:	e62b      	b.n	800a70c <_strtod_l+0x4a4>
 800aab4:	f04f 32ff 	mov.w	r2, #4294967295
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	ea03 0a0a 	and.w	sl, r3, sl
 800aac0:	e6e3      	b.n	800a88a <_strtod_l+0x622>
 800aac2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aac6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aaca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aace:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aad2:	fa01 f308 	lsl.w	r3, r1, r8
 800aad6:	9308      	str	r3, [sp, #32]
 800aad8:	910d      	str	r1, [sp, #52]	; 0x34
 800aada:	e746      	b.n	800a96a <_strtod_l+0x702>
 800aadc:	2300      	movs	r3, #0
 800aade:	9308      	str	r3, [sp, #32]
 800aae0:	2301      	movs	r3, #1
 800aae2:	930d      	str	r3, [sp, #52]	; 0x34
 800aae4:	e741      	b.n	800a96a <_strtod_l+0x702>
 800aae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aae8:	4642      	mov	r2, r8
 800aaea:	4620      	mov	r0, r4
 800aaec:	f001 ff4a 	bl	800c984 <__lshift>
 800aaf0:	9018      	str	r0, [sp, #96]	; 0x60
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f47f af6b 	bne.w	800a9ce <_strtod_l+0x766>
 800aaf8:	e5fe      	b.n	800a6f8 <_strtod_l+0x490>
 800aafa:	465f      	mov	r7, fp
 800aafc:	d16e      	bne.n	800abdc <_strtod_l+0x974>
 800aafe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab04:	b342      	cbz	r2, 800ab58 <_strtod_l+0x8f0>
 800ab06:	4a32      	ldr	r2, [pc, #200]	; (800abd0 <_strtod_l+0x968>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d128      	bne.n	800ab5e <_strtod_l+0x8f6>
 800ab0c:	9b04      	ldr	r3, [sp, #16]
 800ab0e:	4651      	mov	r1, sl
 800ab10:	b1eb      	cbz	r3, 800ab4e <_strtod_l+0x8e6>
 800ab12:	4b2d      	ldr	r3, [pc, #180]	; (800abc8 <_strtod_l+0x960>)
 800ab14:	403b      	ands	r3, r7
 800ab16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1e:	d819      	bhi.n	800ab54 <_strtod_l+0x8ec>
 800ab20:	0d1b      	lsrs	r3, r3, #20
 800ab22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d117      	bne.n	800ab5e <_strtod_l+0x8f6>
 800ab2e:	4b29      	ldr	r3, [pc, #164]	; (800abd4 <_strtod_l+0x96c>)
 800ab30:	429f      	cmp	r7, r3
 800ab32:	d102      	bne.n	800ab3a <_strtod_l+0x8d2>
 800ab34:	3101      	adds	r1, #1
 800ab36:	f43f addf 	beq.w	800a6f8 <_strtod_l+0x490>
 800ab3a:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <_strtod_l+0x960>)
 800ab3c:	403b      	ands	r3, r7
 800ab3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ab42:	f04f 0a00 	mov.w	sl, #0
 800ab46:	9b04      	ldr	r3, [sp, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1a4      	bne.n	800aa96 <_strtod_l+0x82e>
 800ab4c:	e5de      	b.n	800a70c <_strtod_l+0x4a4>
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	e7ea      	b.n	800ab2a <_strtod_l+0x8c2>
 800ab54:	4613      	mov	r3, r2
 800ab56:	e7e8      	b.n	800ab2a <_strtod_l+0x8c2>
 800ab58:	ea53 030a 	orrs.w	r3, r3, sl
 800ab5c:	d08c      	beq.n	800aa78 <_strtod_l+0x810>
 800ab5e:	9b08      	ldr	r3, [sp, #32]
 800ab60:	b1db      	cbz	r3, 800ab9a <_strtod_l+0x932>
 800ab62:	423b      	tst	r3, r7
 800ab64:	d0ef      	beq.n	800ab46 <_strtod_l+0x8de>
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	9a04      	ldr	r2, [sp, #16]
 800ab6a:	4650      	mov	r0, sl
 800ab6c:	4659      	mov	r1, fp
 800ab6e:	b1c3      	cbz	r3, 800aba2 <_strtod_l+0x93a>
 800ab70:	f7ff fb5d 	bl	800a22e <sulp>
 800ab74:	4602      	mov	r2, r0
 800ab76:	460b      	mov	r3, r1
 800ab78:	ec51 0b18 	vmov	r0, r1, d8
 800ab7c:	f7f5 fb86 	bl	800028c <__adddf3>
 800ab80:	4682      	mov	sl, r0
 800ab82:	468b      	mov	fp, r1
 800ab84:	e7df      	b.n	800ab46 <_strtod_l+0x8de>
 800ab86:	4013      	ands	r3, r2
 800ab88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab94:	f04f 3aff 	mov.w	sl, #4294967295
 800ab98:	e7d5      	b.n	800ab46 <_strtod_l+0x8de>
 800ab9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab9c:	ea13 0f0a 	tst.w	r3, sl
 800aba0:	e7e0      	b.n	800ab64 <_strtod_l+0x8fc>
 800aba2:	f7ff fb44 	bl	800a22e <sulp>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	ec51 0b18 	vmov	r0, r1, d8
 800abae:	f7f5 fb6b 	bl	8000288 <__aeabi_dsub>
 800abb2:	2200      	movs	r2, #0
 800abb4:	2300      	movs	r3, #0
 800abb6:	4682      	mov	sl, r0
 800abb8:	468b      	mov	fp, r1
 800abba:	f7f5 ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0c1      	beq.n	800ab46 <_strtod_l+0x8de>
 800abc2:	e611      	b.n	800a7e8 <_strtod_l+0x580>
 800abc4:	fffffc02 	.word	0xfffffc02
 800abc8:	7ff00000 	.word	0x7ff00000
 800abcc:	39500000 	.word	0x39500000
 800abd0:	000fffff 	.word	0x000fffff
 800abd4:	7fefffff 	.word	0x7fefffff
 800abd8:	0800e220 	.word	0x0800e220
 800abdc:	4631      	mov	r1, r6
 800abde:	4628      	mov	r0, r5
 800abe0:	f002 f8be 	bl	800cd60 <__ratio>
 800abe4:	ec59 8b10 	vmov	r8, r9, d0
 800abe8:	ee10 0a10 	vmov	r0, s0
 800abec:	2200      	movs	r2, #0
 800abee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 ff7c 	bl	8000af0 <__aeabi_dcmple>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d07a      	beq.n	800acf2 <_strtod_l+0xa8a>
 800abfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d04a      	beq.n	800ac98 <_strtod_l+0xa30>
 800ac02:	4b95      	ldr	r3, [pc, #596]	; (800ae58 <_strtod_l+0xbf0>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae58 <_strtod_l+0xbf0>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	4b92      	ldr	r3, [pc, #584]	; (800ae5c <_strtod_l+0xbf4>)
 800ac14:	403b      	ands	r3, r7
 800ac16:	930d      	str	r3, [sp, #52]	; 0x34
 800ac18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac1a:	4b91      	ldr	r3, [pc, #580]	; (800ae60 <_strtod_l+0xbf8>)
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	f040 80b0 	bne.w	800ad82 <_strtod_l+0xb1a>
 800ac22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac26:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ac2a:	ec4b ab10 	vmov	d0, sl, fp
 800ac2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac32:	f001 ffbd 	bl	800cbb0 <__ulp>
 800ac36:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac3a:	ec53 2b10 	vmov	r2, r3, d0
 800ac3e:	f7f5 fcdb 	bl	80005f8 <__aeabi_dmul>
 800ac42:	4652      	mov	r2, sl
 800ac44:	465b      	mov	r3, fp
 800ac46:	f7f5 fb21 	bl	800028c <__adddf3>
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4983      	ldr	r1, [pc, #524]	; (800ae5c <_strtod_l+0xbf4>)
 800ac4e:	4a85      	ldr	r2, [pc, #532]	; (800ae64 <_strtod_l+0xbfc>)
 800ac50:	4019      	ands	r1, r3
 800ac52:	4291      	cmp	r1, r2
 800ac54:	4682      	mov	sl, r0
 800ac56:	d960      	bls.n	800ad1a <_strtod_l+0xab2>
 800ac58:	ee18 3a90 	vmov	r3, s17
 800ac5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d104      	bne.n	800ac6e <_strtod_l+0xa06>
 800ac64:	ee18 3a10 	vmov	r3, s16
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f43f ad45 	beq.w	800a6f8 <_strtod_l+0x490>
 800ac6e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ae70 <_strtod_l+0xc08>
 800ac72:	f04f 3aff 	mov.w	sl, #4294967295
 800ac76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f001 fc67 	bl	800c54c <_Bfree>
 800ac7e:	9905      	ldr	r1, [sp, #20]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 fc63 	bl	800c54c <_Bfree>
 800ac86:	4631      	mov	r1, r6
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f001 fc5f 	bl	800c54c <_Bfree>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4620      	mov	r0, r4
 800ac92:	f001 fc5b 	bl	800c54c <_Bfree>
 800ac96:	e61a      	b.n	800a8ce <_strtod_l+0x666>
 800ac98:	f1ba 0f00 	cmp.w	sl, #0
 800ac9c:	d11b      	bne.n	800acd6 <_strtod_l+0xa6e>
 800ac9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aca2:	b9f3      	cbnz	r3, 800ace2 <_strtod_l+0xa7a>
 800aca4:	4b6c      	ldr	r3, [pc, #432]	; (800ae58 <_strtod_l+0xbf0>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	4640      	mov	r0, r8
 800acaa:	4649      	mov	r1, r9
 800acac:	f7f5 ff16 	bl	8000adc <__aeabi_dcmplt>
 800acb0:	b9d0      	cbnz	r0, 800ace8 <_strtod_l+0xa80>
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	4b6c      	ldr	r3, [pc, #432]	; (800ae68 <_strtod_l+0xc00>)
 800acb8:	2200      	movs	r2, #0
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4680      	mov	r8, r0
 800acc0:	4689      	mov	r9, r1
 800acc2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800acc6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800acca:	9315      	str	r3, [sp, #84]	; 0x54
 800accc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800acd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acd4:	e79d      	b.n	800ac12 <_strtod_l+0x9aa>
 800acd6:	f1ba 0f01 	cmp.w	sl, #1
 800acda:	d102      	bne.n	800ace2 <_strtod_l+0xa7a>
 800acdc:	2f00      	cmp	r7, #0
 800acde:	f43f ad83 	beq.w	800a7e8 <_strtod_l+0x580>
 800ace2:	4b62      	ldr	r3, [pc, #392]	; (800ae6c <_strtod_l+0xc04>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	e78e      	b.n	800ac06 <_strtod_l+0x99e>
 800ace8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ae68 <_strtod_l+0xc00>
 800acec:	f04f 0800 	mov.w	r8, #0
 800acf0:	e7e7      	b.n	800acc2 <_strtod_l+0xa5a>
 800acf2:	4b5d      	ldr	r3, [pc, #372]	; (800ae68 <_strtod_l+0xc00>)
 800acf4:	4640      	mov	r0, r8
 800acf6:	4649      	mov	r1, r9
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7f5 fc7d 	bl	80005f8 <__aeabi_dmul>
 800acfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad00:	4680      	mov	r8, r0
 800ad02:	4689      	mov	r9, r1
 800ad04:	b933      	cbnz	r3, 800ad14 <_strtod_l+0xaac>
 800ad06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad0a:	900e      	str	r0, [sp, #56]	; 0x38
 800ad0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ad12:	e7dd      	b.n	800acd0 <_strtod_l+0xa68>
 800ad14:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ad18:	e7f9      	b.n	800ad0e <_strtod_l+0xaa6>
 800ad1a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ad1e:	9b04      	ldr	r3, [sp, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1a8      	bne.n	800ac76 <_strtod_l+0xa0e>
 800ad24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad2a:	0d1b      	lsrs	r3, r3, #20
 800ad2c:	051b      	lsls	r3, r3, #20
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d1a1      	bne.n	800ac76 <_strtod_l+0xa0e>
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 ffbf 	bl	8000cb8 <__aeabi_d2lz>
 800ad3a:	f7f5 fc2f 	bl	800059c <__aeabi_l2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4640      	mov	r0, r8
 800ad44:	4649      	mov	r1, r9
 800ad46:	f7f5 fa9f 	bl	8000288 <__aeabi_dsub>
 800ad4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad50:	ea43 030a 	orr.w	r3, r3, sl
 800ad54:	4313      	orrs	r3, r2
 800ad56:	4680      	mov	r8, r0
 800ad58:	4689      	mov	r9, r1
 800ad5a:	d055      	beq.n	800ae08 <_strtod_l+0xba0>
 800ad5c:	a336      	add	r3, pc, #216	; (adr r3, 800ae38 <_strtod_l+0xbd0>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f7f5 febb 	bl	8000adc <__aeabi_dcmplt>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f47f acd0 	bne.w	800a70c <_strtod_l+0x4a4>
 800ad6c:	a334      	add	r3, pc, #208	; (adr r3, 800ae40 <_strtod_l+0xbd8>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fecf 	bl	8000b18 <__aeabi_dcmpgt>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	f43f af7b 	beq.w	800ac76 <_strtod_l+0xa0e>
 800ad80:	e4c4      	b.n	800a70c <_strtod_l+0x4a4>
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	b333      	cbz	r3, 800add4 <_strtod_l+0xb6c>
 800ad86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad88:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad8c:	d822      	bhi.n	800add4 <_strtod_l+0xb6c>
 800ad8e:	a32e      	add	r3, pc, #184	; (adr r3, 800ae48 <_strtod_l+0xbe0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	4640      	mov	r0, r8
 800ad96:	4649      	mov	r1, r9
 800ad98:	f7f5 feaa 	bl	8000af0 <__aeabi_dcmple>
 800ad9c:	b1a0      	cbz	r0, 800adc8 <_strtod_l+0xb60>
 800ad9e:	4649      	mov	r1, r9
 800ada0:	4640      	mov	r0, r8
 800ada2:	f7f5 ff01 	bl	8000ba8 <__aeabi_d2uiz>
 800ada6:	2801      	cmp	r0, #1
 800ada8:	bf38      	it	cc
 800adaa:	2001      	movcc	r0, #1
 800adac:	f7f5 fbaa 	bl	8000504 <__aeabi_ui2d>
 800adb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb2:	4680      	mov	r8, r0
 800adb4:	4689      	mov	r9, r1
 800adb6:	bb23      	cbnz	r3, 800ae02 <_strtod_l+0xb9a>
 800adb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adbc:	9010      	str	r0, [sp, #64]	; 0x40
 800adbe:	9311      	str	r3, [sp, #68]	; 0x44
 800adc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800adc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adcc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	9309      	str	r3, [sp, #36]	; 0x24
 800add4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800add8:	eeb0 0a48 	vmov.f32	s0, s16
 800addc:	eef0 0a68 	vmov.f32	s1, s17
 800ade0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ade4:	f001 fee4 	bl	800cbb0 <__ulp>
 800ade8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800adec:	ec53 2b10 	vmov	r2, r3, d0
 800adf0:	f7f5 fc02 	bl	80005f8 <__aeabi_dmul>
 800adf4:	ec53 2b18 	vmov	r2, r3, d8
 800adf8:	f7f5 fa48 	bl	800028c <__adddf3>
 800adfc:	4682      	mov	sl, r0
 800adfe:	468b      	mov	fp, r1
 800ae00:	e78d      	b.n	800ad1e <_strtod_l+0xab6>
 800ae02:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ae06:	e7db      	b.n	800adc0 <_strtod_l+0xb58>
 800ae08:	a311      	add	r3, pc, #68	; (adr r3, 800ae50 <_strtod_l+0xbe8>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	f7f5 fe65 	bl	8000adc <__aeabi_dcmplt>
 800ae12:	e7b2      	b.n	800ad7a <_strtod_l+0xb12>
 800ae14:	2300      	movs	r3, #0
 800ae16:	930a      	str	r3, [sp, #40]	; 0x28
 800ae18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	f7ff ba6b 	b.w	800a2f8 <_strtod_l+0x90>
 800ae22:	2a65      	cmp	r2, #101	; 0x65
 800ae24:	f43f ab5f 	beq.w	800a4e6 <_strtod_l+0x27e>
 800ae28:	2a45      	cmp	r2, #69	; 0x45
 800ae2a:	f43f ab5c 	beq.w	800a4e6 <_strtod_l+0x27e>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f7ff bb94 	b.w	800a55c <_strtod_l+0x2f4>
 800ae34:	f3af 8000 	nop.w
 800ae38:	94a03595 	.word	0x94a03595
 800ae3c:	3fdfffff 	.word	0x3fdfffff
 800ae40:	35afe535 	.word	0x35afe535
 800ae44:	3fe00000 	.word	0x3fe00000
 800ae48:	ffc00000 	.word	0xffc00000
 800ae4c:	41dfffff 	.word	0x41dfffff
 800ae50:	94a03595 	.word	0x94a03595
 800ae54:	3fcfffff 	.word	0x3fcfffff
 800ae58:	3ff00000 	.word	0x3ff00000
 800ae5c:	7ff00000 	.word	0x7ff00000
 800ae60:	7fe00000 	.word	0x7fe00000
 800ae64:	7c9fffff 	.word	0x7c9fffff
 800ae68:	3fe00000 	.word	0x3fe00000
 800ae6c:	bff00000 	.word	0xbff00000
 800ae70:	7fefffff 	.word	0x7fefffff

0800ae74 <strtod>:
 800ae74:	460a      	mov	r2, r1
 800ae76:	4601      	mov	r1, r0
 800ae78:	4802      	ldr	r0, [pc, #8]	; (800ae84 <strtod+0x10>)
 800ae7a:	4b03      	ldr	r3, [pc, #12]	; (800ae88 <strtod+0x14>)
 800ae7c:	6800      	ldr	r0, [r0, #0]
 800ae7e:	f7ff b9f3 	b.w	800a268 <_strtod_l>
 800ae82:	bf00      	nop
 800ae84:	2000000c 	.word	0x2000000c
 800ae88:	20000074 	.word	0x20000074

0800ae8c <strtok>:
 800ae8c:	4b16      	ldr	r3, [pc, #88]	; (800aee8 <strtok+0x5c>)
 800ae8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae90:	681e      	ldr	r6, [r3, #0]
 800ae92:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ae94:	4605      	mov	r5, r0
 800ae96:	b9fc      	cbnz	r4, 800aed8 <strtok+0x4c>
 800ae98:	2050      	movs	r0, #80	; 0x50
 800ae9a:	9101      	str	r1, [sp, #4]
 800ae9c:	f001 fafc 	bl	800c498 <malloc>
 800aea0:	9901      	ldr	r1, [sp, #4]
 800aea2:	65b0      	str	r0, [r6, #88]	; 0x58
 800aea4:	4602      	mov	r2, r0
 800aea6:	b920      	cbnz	r0, 800aeb2 <strtok+0x26>
 800aea8:	4b10      	ldr	r3, [pc, #64]	; (800aeec <strtok+0x60>)
 800aeaa:	4811      	ldr	r0, [pc, #68]	; (800aef0 <strtok+0x64>)
 800aeac:	2157      	movs	r1, #87	; 0x57
 800aeae:	f000 f8d5 	bl	800b05c <__assert_func>
 800aeb2:	e9c0 4400 	strd	r4, r4, [r0]
 800aeb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aeba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aebe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aec2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aec6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aeca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aece:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aed2:	6184      	str	r4, [r0, #24]
 800aed4:	7704      	strb	r4, [r0, #28]
 800aed6:	6244      	str	r4, [r0, #36]	; 0x24
 800aed8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800aeda:	2301      	movs	r3, #1
 800aedc:	4628      	mov	r0, r5
 800aede:	b002      	add	sp, #8
 800aee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aee4:	f000 b806 	b.w	800aef4 <__strtok_r>
 800aee8:	2000000c 	.word	0x2000000c
 800aeec:	0800e248 	.word	0x0800e248
 800aef0:	0800e25f 	.word	0x0800e25f

0800aef4 <__strtok_r>:
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	b908      	cbnz	r0, 800aefc <__strtok_r+0x8>
 800aef8:	6810      	ldr	r0, [r2, #0]
 800aefa:	b188      	cbz	r0, 800af20 <__strtok_r+0x2c>
 800aefc:	4604      	mov	r4, r0
 800aefe:	4620      	mov	r0, r4
 800af00:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af04:	460f      	mov	r7, r1
 800af06:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af0a:	b91e      	cbnz	r6, 800af14 <__strtok_r+0x20>
 800af0c:	b965      	cbnz	r5, 800af28 <__strtok_r+0x34>
 800af0e:	6015      	str	r5, [r2, #0]
 800af10:	4628      	mov	r0, r5
 800af12:	e005      	b.n	800af20 <__strtok_r+0x2c>
 800af14:	42b5      	cmp	r5, r6
 800af16:	d1f6      	bne.n	800af06 <__strtok_r+0x12>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1f0      	bne.n	800aefe <__strtok_r+0xa>
 800af1c:	6014      	str	r4, [r2, #0]
 800af1e:	7003      	strb	r3, [r0, #0]
 800af20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af22:	461c      	mov	r4, r3
 800af24:	e00c      	b.n	800af40 <__strtok_r+0x4c>
 800af26:	b915      	cbnz	r5, 800af2e <__strtok_r+0x3a>
 800af28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af2c:	460e      	mov	r6, r1
 800af2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af32:	42ab      	cmp	r3, r5
 800af34:	d1f7      	bne.n	800af26 <__strtok_r+0x32>
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0f3      	beq.n	800af22 <__strtok_r+0x2e>
 800af3a:	2300      	movs	r3, #0
 800af3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af40:	6014      	str	r4, [r2, #0]
 800af42:	e7ed      	b.n	800af20 <__strtok_r+0x2c>

0800af44 <_strtol_l.constprop.0>:
 800af44:	2b01      	cmp	r3, #1
 800af46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af4a:	d001      	beq.n	800af50 <_strtol_l.constprop.0+0xc>
 800af4c:	2b24      	cmp	r3, #36	; 0x24
 800af4e:	d906      	bls.n	800af5e <_strtol_l.constprop.0+0x1a>
 800af50:	f7fe fc7e 	bl	8009850 <__errno>
 800af54:	2316      	movs	r3, #22
 800af56:	6003      	str	r3, [r0, #0]
 800af58:	2000      	movs	r0, #0
 800af5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b044 <_strtol_l.constprop.0+0x100>
 800af62:	460d      	mov	r5, r1
 800af64:	462e      	mov	r6, r5
 800af66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af6e:	f017 0708 	ands.w	r7, r7, #8
 800af72:	d1f7      	bne.n	800af64 <_strtol_l.constprop.0+0x20>
 800af74:	2c2d      	cmp	r4, #45	; 0x2d
 800af76:	d132      	bne.n	800afde <_strtol_l.constprop.0+0x9a>
 800af78:	782c      	ldrb	r4, [r5, #0]
 800af7a:	2701      	movs	r7, #1
 800af7c:	1cb5      	adds	r5, r6, #2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d05b      	beq.n	800b03a <_strtol_l.constprop.0+0xf6>
 800af82:	2b10      	cmp	r3, #16
 800af84:	d109      	bne.n	800af9a <_strtol_l.constprop.0+0x56>
 800af86:	2c30      	cmp	r4, #48	; 0x30
 800af88:	d107      	bne.n	800af9a <_strtol_l.constprop.0+0x56>
 800af8a:	782c      	ldrb	r4, [r5, #0]
 800af8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af90:	2c58      	cmp	r4, #88	; 0x58
 800af92:	d14d      	bne.n	800b030 <_strtol_l.constprop.0+0xec>
 800af94:	786c      	ldrb	r4, [r5, #1]
 800af96:	2310      	movs	r3, #16
 800af98:	3502      	adds	r5, #2
 800af9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af9e:	f108 38ff 	add.w	r8, r8, #4294967295
 800afa2:	f04f 0c00 	mov.w	ip, #0
 800afa6:	fbb8 f9f3 	udiv	r9, r8, r3
 800afaa:	4666      	mov	r6, ip
 800afac:	fb03 8a19 	mls	sl, r3, r9, r8
 800afb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800afb4:	f1be 0f09 	cmp.w	lr, #9
 800afb8:	d816      	bhi.n	800afe8 <_strtol_l.constprop.0+0xa4>
 800afba:	4674      	mov	r4, lr
 800afbc:	42a3      	cmp	r3, r4
 800afbe:	dd24      	ble.n	800b00a <_strtol_l.constprop.0+0xc6>
 800afc0:	f1bc 0f00 	cmp.w	ip, #0
 800afc4:	db1e      	blt.n	800b004 <_strtol_l.constprop.0+0xc0>
 800afc6:	45b1      	cmp	r9, r6
 800afc8:	d31c      	bcc.n	800b004 <_strtol_l.constprop.0+0xc0>
 800afca:	d101      	bne.n	800afd0 <_strtol_l.constprop.0+0x8c>
 800afcc:	45a2      	cmp	sl, r4
 800afce:	db19      	blt.n	800b004 <_strtol_l.constprop.0+0xc0>
 800afd0:	fb06 4603 	mla	r6, r6, r3, r4
 800afd4:	f04f 0c01 	mov.w	ip, #1
 800afd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afdc:	e7e8      	b.n	800afb0 <_strtol_l.constprop.0+0x6c>
 800afde:	2c2b      	cmp	r4, #43	; 0x2b
 800afe0:	bf04      	itt	eq
 800afe2:	782c      	ldrbeq	r4, [r5, #0]
 800afe4:	1cb5      	addeq	r5, r6, #2
 800afe6:	e7ca      	b.n	800af7e <_strtol_l.constprop.0+0x3a>
 800afe8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800afec:	f1be 0f19 	cmp.w	lr, #25
 800aff0:	d801      	bhi.n	800aff6 <_strtol_l.constprop.0+0xb2>
 800aff2:	3c37      	subs	r4, #55	; 0x37
 800aff4:	e7e2      	b.n	800afbc <_strtol_l.constprop.0+0x78>
 800aff6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800affa:	f1be 0f19 	cmp.w	lr, #25
 800affe:	d804      	bhi.n	800b00a <_strtol_l.constprop.0+0xc6>
 800b000:	3c57      	subs	r4, #87	; 0x57
 800b002:	e7db      	b.n	800afbc <_strtol_l.constprop.0+0x78>
 800b004:	f04f 3cff 	mov.w	ip, #4294967295
 800b008:	e7e6      	b.n	800afd8 <_strtol_l.constprop.0+0x94>
 800b00a:	f1bc 0f00 	cmp.w	ip, #0
 800b00e:	da05      	bge.n	800b01c <_strtol_l.constprop.0+0xd8>
 800b010:	2322      	movs	r3, #34	; 0x22
 800b012:	6003      	str	r3, [r0, #0]
 800b014:	4646      	mov	r6, r8
 800b016:	b942      	cbnz	r2, 800b02a <_strtol_l.constprop.0+0xe6>
 800b018:	4630      	mov	r0, r6
 800b01a:	e79e      	b.n	800af5a <_strtol_l.constprop.0+0x16>
 800b01c:	b107      	cbz	r7, 800b020 <_strtol_l.constprop.0+0xdc>
 800b01e:	4276      	negs	r6, r6
 800b020:	2a00      	cmp	r2, #0
 800b022:	d0f9      	beq.n	800b018 <_strtol_l.constprop.0+0xd4>
 800b024:	f1bc 0f00 	cmp.w	ip, #0
 800b028:	d000      	beq.n	800b02c <_strtol_l.constprop.0+0xe8>
 800b02a:	1e69      	subs	r1, r5, #1
 800b02c:	6011      	str	r1, [r2, #0]
 800b02e:	e7f3      	b.n	800b018 <_strtol_l.constprop.0+0xd4>
 800b030:	2430      	movs	r4, #48	; 0x30
 800b032:	2b00      	cmp	r3, #0
 800b034:	d1b1      	bne.n	800af9a <_strtol_l.constprop.0+0x56>
 800b036:	2308      	movs	r3, #8
 800b038:	e7af      	b.n	800af9a <_strtol_l.constprop.0+0x56>
 800b03a:	2c30      	cmp	r4, #48	; 0x30
 800b03c:	d0a5      	beq.n	800af8a <_strtol_l.constprop.0+0x46>
 800b03e:	230a      	movs	r3, #10
 800b040:	e7ab      	b.n	800af9a <_strtol_l.constprop.0+0x56>
 800b042:	bf00      	nop
 800b044:	0800e2f9 	.word	0x0800e2f9

0800b048 <strtol>:
 800b048:	4613      	mov	r3, r2
 800b04a:	460a      	mov	r2, r1
 800b04c:	4601      	mov	r1, r0
 800b04e:	4802      	ldr	r0, [pc, #8]	; (800b058 <strtol+0x10>)
 800b050:	6800      	ldr	r0, [r0, #0]
 800b052:	f7ff bf77 	b.w	800af44 <_strtol_l.constprop.0>
 800b056:	bf00      	nop
 800b058:	2000000c 	.word	0x2000000c

0800b05c <__assert_func>:
 800b05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b05e:	4614      	mov	r4, r2
 800b060:	461a      	mov	r2, r3
 800b062:	4b09      	ldr	r3, [pc, #36]	; (800b088 <__assert_func+0x2c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4605      	mov	r5, r0
 800b068:	68d8      	ldr	r0, [r3, #12]
 800b06a:	b14c      	cbz	r4, 800b080 <__assert_func+0x24>
 800b06c:	4b07      	ldr	r3, [pc, #28]	; (800b08c <__assert_func+0x30>)
 800b06e:	9100      	str	r1, [sp, #0]
 800b070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b074:	4906      	ldr	r1, [pc, #24]	; (800b090 <__assert_func+0x34>)
 800b076:	462b      	mov	r3, r5
 800b078:	f000 fe88 	bl	800bd8c <fiprintf>
 800b07c:	f002 fb8e 	bl	800d79c <abort>
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <__assert_func+0x38>)
 800b082:	461c      	mov	r4, r3
 800b084:	e7f3      	b.n	800b06e <__assert_func+0x12>
 800b086:	bf00      	nop
 800b088:	2000000c 	.word	0x2000000c
 800b08c:	0800e2bc 	.word	0x0800e2bc
 800b090:	0800e2c9 	.word	0x0800e2c9
 800b094:	0800e2f7 	.word	0x0800e2f7

0800b098 <quorem>:
 800b098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09c:	6903      	ldr	r3, [r0, #16]
 800b09e:	690c      	ldr	r4, [r1, #16]
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	4607      	mov	r7, r0
 800b0a4:	f2c0 8081 	blt.w	800b1aa <quorem+0x112>
 800b0a8:	3c01      	subs	r4, #1
 800b0aa:	f101 0814 	add.w	r8, r1, #20
 800b0ae:	f100 0514 	add.w	r5, r0, #20
 800b0b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0b6:	9301      	str	r3, [sp, #4]
 800b0b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0d0:	d331      	bcc.n	800b136 <quorem+0x9e>
 800b0d2:	f04f 0e00 	mov.w	lr, #0
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	46ac      	mov	ip, r5
 800b0da:	46f2      	mov	sl, lr
 800b0dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b0e0:	b293      	uxth	r3, r2
 800b0e2:	fb06 e303 	mla	r3, r6, r3, lr
 800b0e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ebaa 0303 	sub.w	r3, sl, r3
 800b0f0:	f8dc a000 	ldr.w	sl, [ip]
 800b0f4:	0c12      	lsrs	r2, r2, #16
 800b0f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b0fa:	fb06 e202 	mla	r2, r6, r2, lr
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b106:	b292      	uxth	r2, r2
 800b108:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b10c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b110:	f8bd 3000 	ldrh.w	r3, [sp]
 800b114:	4581      	cmp	r9, r0
 800b116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b11a:	f84c 3b04 	str.w	r3, [ip], #4
 800b11e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b122:	d2db      	bcs.n	800b0dc <quorem+0x44>
 800b124:	f855 300b 	ldr.w	r3, [r5, fp]
 800b128:	b92b      	cbnz	r3, 800b136 <quorem+0x9e>
 800b12a:	9b01      	ldr	r3, [sp, #4]
 800b12c:	3b04      	subs	r3, #4
 800b12e:	429d      	cmp	r5, r3
 800b130:	461a      	mov	r2, r3
 800b132:	d32e      	bcc.n	800b192 <quorem+0xfa>
 800b134:	613c      	str	r4, [r7, #16]
 800b136:	4638      	mov	r0, r7
 800b138:	f001 fc94 	bl	800ca64 <__mcmp>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	db24      	blt.n	800b18a <quorem+0xf2>
 800b140:	3601      	adds	r6, #1
 800b142:	4628      	mov	r0, r5
 800b144:	f04f 0c00 	mov.w	ip, #0
 800b148:	f858 2b04 	ldr.w	r2, [r8], #4
 800b14c:	f8d0 e000 	ldr.w	lr, [r0]
 800b150:	b293      	uxth	r3, r2
 800b152:	ebac 0303 	sub.w	r3, ip, r3
 800b156:	0c12      	lsrs	r2, r2, #16
 800b158:	fa13 f38e 	uxtah	r3, r3, lr
 800b15c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b164:	b29b      	uxth	r3, r3
 800b166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b16a:	45c1      	cmp	r9, r8
 800b16c:	f840 3b04 	str.w	r3, [r0], #4
 800b170:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b174:	d2e8      	bcs.n	800b148 <quorem+0xb0>
 800b176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b17e:	b922      	cbnz	r2, 800b18a <quorem+0xf2>
 800b180:	3b04      	subs	r3, #4
 800b182:	429d      	cmp	r5, r3
 800b184:	461a      	mov	r2, r3
 800b186:	d30a      	bcc.n	800b19e <quorem+0x106>
 800b188:	613c      	str	r4, [r7, #16]
 800b18a:	4630      	mov	r0, r6
 800b18c:	b003      	add	sp, #12
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	6812      	ldr	r2, [r2, #0]
 800b194:	3b04      	subs	r3, #4
 800b196:	2a00      	cmp	r2, #0
 800b198:	d1cc      	bne.n	800b134 <quorem+0x9c>
 800b19a:	3c01      	subs	r4, #1
 800b19c:	e7c7      	b.n	800b12e <quorem+0x96>
 800b19e:	6812      	ldr	r2, [r2, #0]
 800b1a0:	3b04      	subs	r3, #4
 800b1a2:	2a00      	cmp	r2, #0
 800b1a4:	d1f0      	bne.n	800b188 <quorem+0xf0>
 800b1a6:	3c01      	subs	r4, #1
 800b1a8:	e7eb      	b.n	800b182 <quorem+0xea>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	e7ee      	b.n	800b18c <quorem+0xf4>
	...

0800b1b0 <_dtoa_r>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	ed2d 8b04 	vpush	{d8-d9}
 800b1b8:	ec57 6b10 	vmov	r6, r7, d0
 800b1bc:	b093      	sub	sp, #76	; 0x4c
 800b1be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1c4:	9106      	str	r1, [sp, #24]
 800b1c6:	ee10 aa10 	vmov	sl, s0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b1d0:	46bb      	mov	fp, r7
 800b1d2:	b975      	cbnz	r5, 800b1f2 <_dtoa_r+0x42>
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f001 f95f 	bl	800c498 <malloc>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6260      	str	r0, [r4, #36]	; 0x24
 800b1de:	b920      	cbnz	r0, 800b1ea <_dtoa_r+0x3a>
 800b1e0:	4ba7      	ldr	r3, [pc, #668]	; (800b480 <_dtoa_r+0x2d0>)
 800b1e2:	21ea      	movs	r1, #234	; 0xea
 800b1e4:	48a7      	ldr	r0, [pc, #668]	; (800b484 <_dtoa_r+0x2d4>)
 800b1e6:	f7ff ff39 	bl	800b05c <__assert_func>
 800b1ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1ee:	6005      	str	r5, [r0, #0]
 800b1f0:	60c5      	str	r5, [r0, #12]
 800b1f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1f4:	6819      	ldr	r1, [r3, #0]
 800b1f6:	b151      	cbz	r1, 800b20e <_dtoa_r+0x5e>
 800b1f8:	685a      	ldr	r2, [r3, #4]
 800b1fa:	604a      	str	r2, [r1, #4]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4093      	lsls	r3, r2
 800b200:	608b      	str	r3, [r1, #8]
 800b202:	4620      	mov	r0, r4
 800b204:	f001 f9a2 	bl	800c54c <_Bfree>
 800b208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	1e3b      	subs	r3, r7, #0
 800b210:	bfaa      	itet	ge
 800b212:	2300      	movge	r3, #0
 800b214:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b218:	f8c8 3000 	strge.w	r3, [r8]
 800b21c:	4b9a      	ldr	r3, [pc, #616]	; (800b488 <_dtoa_r+0x2d8>)
 800b21e:	bfbc      	itt	lt
 800b220:	2201      	movlt	r2, #1
 800b222:	f8c8 2000 	strlt.w	r2, [r8]
 800b226:	ea33 030b 	bics.w	r3, r3, fp
 800b22a:	d11b      	bne.n	800b264 <_dtoa_r+0xb4>
 800b22c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b22e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b232:	6013      	str	r3, [r2, #0]
 800b234:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b238:	4333      	orrs	r3, r6
 800b23a:	f000 8592 	beq.w	800bd62 <_dtoa_r+0xbb2>
 800b23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b240:	b963      	cbnz	r3, 800b25c <_dtoa_r+0xac>
 800b242:	4b92      	ldr	r3, [pc, #584]	; (800b48c <_dtoa_r+0x2dc>)
 800b244:	e022      	b.n	800b28c <_dtoa_r+0xdc>
 800b246:	4b92      	ldr	r3, [pc, #584]	; (800b490 <_dtoa_r+0x2e0>)
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	3308      	adds	r3, #8
 800b24c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	9801      	ldr	r0, [sp, #4]
 800b252:	b013      	add	sp, #76	; 0x4c
 800b254:	ecbd 8b04 	vpop	{d8-d9}
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	4b8b      	ldr	r3, [pc, #556]	; (800b48c <_dtoa_r+0x2dc>)
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	3303      	adds	r3, #3
 800b262:	e7f3      	b.n	800b24c <_dtoa_r+0x9c>
 800b264:	2200      	movs	r2, #0
 800b266:	2300      	movs	r3, #0
 800b268:	4650      	mov	r0, sl
 800b26a:	4659      	mov	r1, fp
 800b26c:	f7f5 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b270:	ec4b ab19 	vmov	d9, sl, fp
 800b274:	4680      	mov	r8, r0
 800b276:	b158      	cbz	r0, 800b290 <_dtoa_r+0xe0>
 800b278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b27a:	2301      	movs	r3, #1
 800b27c:	6013      	str	r3, [r2, #0]
 800b27e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 856b 	beq.w	800bd5c <_dtoa_r+0xbac>
 800b286:	4883      	ldr	r0, [pc, #524]	; (800b494 <_dtoa_r+0x2e4>)
 800b288:	6018      	str	r0, [r3, #0]
 800b28a:	1e43      	subs	r3, r0, #1
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	e7df      	b.n	800b250 <_dtoa_r+0xa0>
 800b290:	ec4b ab10 	vmov	d0, sl, fp
 800b294:	aa10      	add	r2, sp, #64	; 0x40
 800b296:	a911      	add	r1, sp, #68	; 0x44
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 fd05 	bl	800cca8 <__d2b>
 800b29e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b2a2:	ee08 0a10 	vmov	s16, r0
 800b2a6:	2d00      	cmp	r5, #0
 800b2a8:	f000 8084 	beq.w	800b3b4 <_dtoa_r+0x204>
 800b2ac:	ee19 3a90 	vmov	r3, s19
 800b2b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2b8:	4656      	mov	r6, sl
 800b2ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b2c6:	4b74      	ldr	r3, [pc, #464]	; (800b498 <_dtoa_r+0x2e8>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	f7f4 ffdb 	bl	8000288 <__aeabi_dsub>
 800b2d2:	a365      	add	r3, pc, #404	; (adr r3, 800b468 <_dtoa_r+0x2b8>)
 800b2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d8:	f7f5 f98e 	bl	80005f8 <__aeabi_dmul>
 800b2dc:	a364      	add	r3, pc, #400	; (adr r3, 800b470 <_dtoa_r+0x2c0>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	f7f4 ffd3 	bl	800028c <__adddf3>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	460f      	mov	r7, r1
 800b2ec:	f7f5 f91a 	bl	8000524 <__aeabi_i2d>
 800b2f0:	a361      	add	r3, pc, #388	; (adr r3, 800b478 <_dtoa_r+0x2c8>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f5 f97f 	bl	80005f8 <__aeabi_dmul>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4630      	mov	r0, r6
 800b300:	4639      	mov	r1, r7
 800b302:	f7f4 ffc3 	bl	800028c <__adddf3>
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	f7f5 fc25 	bl	8000b58 <__aeabi_d2iz>
 800b30e:	2200      	movs	r2, #0
 800b310:	9000      	str	r0, [sp, #0]
 800b312:	2300      	movs	r3, #0
 800b314:	4630      	mov	r0, r6
 800b316:	4639      	mov	r1, r7
 800b318:	f7f5 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800b31c:	b150      	cbz	r0, 800b334 <_dtoa_r+0x184>
 800b31e:	9800      	ldr	r0, [sp, #0]
 800b320:	f7f5 f900 	bl	8000524 <__aeabi_i2d>
 800b324:	4632      	mov	r2, r6
 800b326:	463b      	mov	r3, r7
 800b328:	f7f5 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800b32c:	b910      	cbnz	r0, 800b334 <_dtoa_r+0x184>
 800b32e:	9b00      	ldr	r3, [sp, #0]
 800b330:	3b01      	subs	r3, #1
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	9b00      	ldr	r3, [sp, #0]
 800b336:	2b16      	cmp	r3, #22
 800b338:	d85a      	bhi.n	800b3f0 <_dtoa_r+0x240>
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	4b57      	ldr	r3, [pc, #348]	; (800b49c <_dtoa_r+0x2ec>)
 800b33e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	ec51 0b19 	vmov	r0, r1, d9
 800b34a:	f7f5 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d050      	beq.n	800b3f4 <_dtoa_r+0x244>
 800b352:	9b00      	ldr	r3, [sp, #0]
 800b354:	3b01      	subs	r3, #1
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	2300      	movs	r3, #0
 800b35a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b35c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b35e:	1b5d      	subs	r5, r3, r5
 800b360:	1e6b      	subs	r3, r5, #1
 800b362:	9305      	str	r3, [sp, #20]
 800b364:	bf45      	ittet	mi
 800b366:	f1c5 0301 	rsbmi	r3, r5, #1
 800b36a:	9304      	strmi	r3, [sp, #16]
 800b36c:	2300      	movpl	r3, #0
 800b36e:	2300      	movmi	r3, #0
 800b370:	bf4c      	ite	mi
 800b372:	9305      	strmi	r3, [sp, #20]
 800b374:	9304      	strpl	r3, [sp, #16]
 800b376:	9b00      	ldr	r3, [sp, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	db3d      	blt.n	800b3f8 <_dtoa_r+0x248>
 800b37c:	9b05      	ldr	r3, [sp, #20]
 800b37e:	9a00      	ldr	r2, [sp, #0]
 800b380:	920a      	str	r2, [sp, #40]	; 0x28
 800b382:	4413      	add	r3, r2
 800b384:	9305      	str	r3, [sp, #20]
 800b386:	2300      	movs	r3, #0
 800b388:	9307      	str	r3, [sp, #28]
 800b38a:	9b06      	ldr	r3, [sp, #24]
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	f200 8089 	bhi.w	800b4a4 <_dtoa_r+0x2f4>
 800b392:	2b05      	cmp	r3, #5
 800b394:	bfc4      	itt	gt
 800b396:	3b04      	subgt	r3, #4
 800b398:	9306      	strgt	r3, [sp, #24]
 800b39a:	9b06      	ldr	r3, [sp, #24]
 800b39c:	f1a3 0302 	sub.w	r3, r3, #2
 800b3a0:	bfcc      	ite	gt
 800b3a2:	2500      	movgt	r5, #0
 800b3a4:	2501      	movle	r5, #1
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	f200 8087 	bhi.w	800b4ba <_dtoa_r+0x30a>
 800b3ac:	e8df f003 	tbb	[pc, r3]
 800b3b0:	59383a2d 	.word	0x59383a2d
 800b3b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b3b8:	441d      	add	r5, r3
 800b3ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	bfc1      	itttt	gt
 800b3c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3ca:	fa0b f303 	lslgt.w	r3, fp, r3
 800b3ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3d2:	bfda      	itte	le
 800b3d4:	f1c3 0320 	rsble	r3, r3, #32
 800b3d8:	fa06 f003 	lslle.w	r0, r6, r3
 800b3dc:	4318      	orrgt	r0, r3
 800b3de:	f7f5 f891 	bl	8000504 <__aeabi_ui2d>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	4606      	mov	r6, r0
 800b3e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b3ea:	3d01      	subs	r5, #1
 800b3ec:	930e      	str	r3, [sp, #56]	; 0x38
 800b3ee:	e76a      	b.n	800b2c6 <_dtoa_r+0x116>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e7b2      	b.n	800b35a <_dtoa_r+0x1aa>
 800b3f4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3f6:	e7b1      	b.n	800b35c <_dtoa_r+0x1ac>
 800b3f8:	9b04      	ldr	r3, [sp, #16]
 800b3fa:	9a00      	ldr	r2, [sp, #0]
 800b3fc:	1a9b      	subs	r3, r3, r2
 800b3fe:	9304      	str	r3, [sp, #16]
 800b400:	4253      	negs	r3, r2
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	2300      	movs	r3, #0
 800b406:	930a      	str	r3, [sp, #40]	; 0x28
 800b408:	e7bf      	b.n	800b38a <_dtoa_r+0x1da>
 800b40a:	2300      	movs	r3, #0
 800b40c:	9308      	str	r3, [sp, #32]
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc55      	bgt.n	800b4c0 <_dtoa_r+0x310>
 800b414:	2301      	movs	r3, #1
 800b416:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b41a:	461a      	mov	r2, r3
 800b41c:	9209      	str	r2, [sp, #36]	; 0x24
 800b41e:	e00c      	b.n	800b43a <_dtoa_r+0x28a>
 800b420:	2301      	movs	r3, #1
 800b422:	e7f3      	b.n	800b40c <_dtoa_r+0x25c>
 800b424:	2300      	movs	r3, #0
 800b426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b428:	9308      	str	r3, [sp, #32]
 800b42a:	9b00      	ldr	r3, [sp, #0]
 800b42c:	4413      	add	r3, r2
 800b42e:	9302      	str	r3, [sp, #8]
 800b430:	3301      	adds	r3, #1
 800b432:	2b01      	cmp	r3, #1
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	bfb8      	it	lt
 800b438:	2301      	movlt	r3, #1
 800b43a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b43c:	2200      	movs	r2, #0
 800b43e:	6042      	str	r2, [r0, #4]
 800b440:	2204      	movs	r2, #4
 800b442:	f102 0614 	add.w	r6, r2, #20
 800b446:	429e      	cmp	r6, r3
 800b448:	6841      	ldr	r1, [r0, #4]
 800b44a:	d93d      	bls.n	800b4c8 <_dtoa_r+0x318>
 800b44c:	4620      	mov	r0, r4
 800b44e:	f001 f83d 	bl	800c4cc <_Balloc>
 800b452:	9001      	str	r0, [sp, #4]
 800b454:	2800      	cmp	r0, #0
 800b456:	d13b      	bne.n	800b4d0 <_dtoa_r+0x320>
 800b458:	4b11      	ldr	r3, [pc, #68]	; (800b4a0 <_dtoa_r+0x2f0>)
 800b45a:	4602      	mov	r2, r0
 800b45c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b460:	e6c0      	b.n	800b1e4 <_dtoa_r+0x34>
 800b462:	2301      	movs	r3, #1
 800b464:	e7df      	b.n	800b426 <_dtoa_r+0x276>
 800b466:	bf00      	nop
 800b468:	636f4361 	.word	0x636f4361
 800b46c:	3fd287a7 	.word	0x3fd287a7
 800b470:	8b60c8b3 	.word	0x8b60c8b3
 800b474:	3fc68a28 	.word	0x3fc68a28
 800b478:	509f79fb 	.word	0x509f79fb
 800b47c:	3fd34413 	.word	0x3fd34413
 800b480:	0800e248 	.word	0x0800e248
 800b484:	0800e406 	.word	0x0800e406
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	0800e402 	.word	0x0800e402
 800b490:	0800e3f9 	.word	0x0800e3f9
 800b494:	0800e1d5 	.word	0x0800e1d5
 800b498:	3ff80000 	.word	0x3ff80000
 800b49c:	0800e570 	.word	0x0800e570
 800b4a0:	0800e461 	.word	0x0800e461
 800b4a4:	2501      	movs	r5, #1
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	9306      	str	r3, [sp, #24]
 800b4aa:	9508      	str	r5, [sp, #32]
 800b4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b4b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2312      	movs	r3, #18
 800b4b8:	e7b0      	b.n	800b41c <_dtoa_r+0x26c>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	9308      	str	r3, [sp, #32]
 800b4be:	e7f5      	b.n	800b4ac <_dtoa_r+0x2fc>
 800b4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4c6:	e7b8      	b.n	800b43a <_dtoa_r+0x28a>
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	6041      	str	r1, [r0, #4]
 800b4cc:	0052      	lsls	r2, r2, #1
 800b4ce:	e7b8      	b.n	800b442 <_dtoa_r+0x292>
 800b4d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4d2:	9a01      	ldr	r2, [sp, #4]
 800b4d4:	601a      	str	r2, [r3, #0]
 800b4d6:	9b03      	ldr	r3, [sp, #12]
 800b4d8:	2b0e      	cmp	r3, #14
 800b4da:	f200 809d 	bhi.w	800b618 <_dtoa_r+0x468>
 800b4de:	2d00      	cmp	r5, #0
 800b4e0:	f000 809a 	beq.w	800b618 <_dtoa_r+0x468>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	dd32      	ble.n	800b550 <_dtoa_r+0x3a0>
 800b4ea:	4ab7      	ldr	r2, [pc, #732]	; (800b7c8 <_dtoa_r+0x618>)
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4f8:	9b00      	ldr	r3, [sp, #0]
 800b4fa:	05d8      	lsls	r0, r3, #23
 800b4fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b500:	d516      	bpl.n	800b530 <_dtoa_r+0x380>
 800b502:	4bb2      	ldr	r3, [pc, #712]	; (800b7cc <_dtoa_r+0x61c>)
 800b504:	ec51 0b19 	vmov	r0, r1, d9
 800b508:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b50c:	f7f5 f99e 	bl	800084c <__aeabi_ddiv>
 800b510:	f007 070f 	and.w	r7, r7, #15
 800b514:	4682      	mov	sl, r0
 800b516:	468b      	mov	fp, r1
 800b518:	2503      	movs	r5, #3
 800b51a:	4eac      	ldr	r6, [pc, #688]	; (800b7cc <_dtoa_r+0x61c>)
 800b51c:	b957      	cbnz	r7, 800b534 <_dtoa_r+0x384>
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	4650      	mov	r0, sl
 800b524:	4659      	mov	r1, fp
 800b526:	f7f5 f991 	bl	800084c <__aeabi_ddiv>
 800b52a:	4682      	mov	sl, r0
 800b52c:	468b      	mov	fp, r1
 800b52e:	e028      	b.n	800b582 <_dtoa_r+0x3d2>
 800b530:	2502      	movs	r5, #2
 800b532:	e7f2      	b.n	800b51a <_dtoa_r+0x36a>
 800b534:	07f9      	lsls	r1, r7, #31
 800b536:	d508      	bpl.n	800b54a <_dtoa_r+0x39a>
 800b538:	4640      	mov	r0, r8
 800b53a:	4649      	mov	r1, r9
 800b53c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	3501      	adds	r5, #1
 800b546:	4680      	mov	r8, r0
 800b548:	4689      	mov	r9, r1
 800b54a:	107f      	asrs	r7, r7, #1
 800b54c:	3608      	adds	r6, #8
 800b54e:	e7e5      	b.n	800b51c <_dtoa_r+0x36c>
 800b550:	f000 809b 	beq.w	800b68a <_dtoa_r+0x4da>
 800b554:	9b00      	ldr	r3, [sp, #0]
 800b556:	4f9d      	ldr	r7, [pc, #628]	; (800b7cc <_dtoa_r+0x61c>)
 800b558:	425e      	negs	r6, r3
 800b55a:	4b9b      	ldr	r3, [pc, #620]	; (800b7c8 <_dtoa_r+0x618>)
 800b55c:	f006 020f 	and.w	r2, r6, #15
 800b560:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	ec51 0b19 	vmov	r0, r1, d9
 800b56c:	f7f5 f844 	bl	80005f8 <__aeabi_dmul>
 800b570:	1136      	asrs	r6, r6, #4
 800b572:	4682      	mov	sl, r0
 800b574:	468b      	mov	fp, r1
 800b576:	2300      	movs	r3, #0
 800b578:	2502      	movs	r5, #2
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	d17a      	bne.n	800b674 <_dtoa_r+0x4c4>
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1d3      	bne.n	800b52a <_dtoa_r+0x37a>
 800b582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 8082 	beq.w	800b68e <_dtoa_r+0x4de>
 800b58a:	4b91      	ldr	r3, [pc, #580]	; (800b7d0 <_dtoa_r+0x620>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	4650      	mov	r0, sl
 800b590:	4659      	mov	r1, fp
 800b592:	f7f5 faa3 	bl	8000adc <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	d079      	beq.n	800b68e <_dtoa_r+0x4de>
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d076      	beq.n	800b68e <_dtoa_r+0x4de>
 800b5a0:	9b02      	ldr	r3, [sp, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	dd36      	ble.n	800b614 <_dtoa_r+0x464>
 800b5a6:	9b00      	ldr	r3, [sp, #0]
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	1e5f      	subs	r7, r3, #1
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4b88      	ldr	r3, [pc, #544]	; (800b7d4 <_dtoa_r+0x624>)
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	9e02      	ldr	r6, [sp, #8]
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	468b      	mov	fp, r1
 800b5bc:	3501      	adds	r5, #1
 800b5be:	4628      	mov	r0, r5
 800b5c0:	f7f4 ffb0 	bl	8000524 <__aeabi_i2d>
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	465b      	mov	r3, fp
 800b5c8:	f7f5 f816 	bl	80005f8 <__aeabi_dmul>
 800b5cc:	4b82      	ldr	r3, [pc, #520]	; (800b7d8 <_dtoa_r+0x628>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f7f4 fe5c 	bl	800028c <__adddf3>
 800b5d4:	46d0      	mov	r8, sl
 800b5d6:	46d9      	mov	r9, fp
 800b5d8:	4682      	mov	sl, r0
 800b5da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	d158      	bne.n	800b694 <_dtoa_r+0x4e4>
 800b5e2:	4b7e      	ldr	r3, [pc, #504]	; (800b7dc <_dtoa_r+0x62c>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7f4 fe4d 	bl	8000288 <__aeabi_dsub>
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	465b      	mov	r3, fp
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	f7f5 fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	f040 8295 	bne.w	800bb2a <_dtoa_r+0x97a>
 800b600:	4652      	mov	r2, sl
 800b602:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f5 fa67 	bl	8000adc <__aeabi_dcmplt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f040 8289 	bne.w	800bb26 <_dtoa_r+0x976>
 800b614:	ec5b ab19 	vmov	sl, fp, d9
 800b618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f2c0 8148 	blt.w	800b8b0 <_dtoa_r+0x700>
 800b620:	9a00      	ldr	r2, [sp, #0]
 800b622:	2a0e      	cmp	r2, #14
 800b624:	f300 8144 	bgt.w	800b8b0 <_dtoa_r+0x700>
 800b628:	4b67      	ldr	r3, [pc, #412]	; (800b7c8 <_dtoa_r+0x618>)
 800b62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b62e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b634:	2b00      	cmp	r3, #0
 800b636:	f280 80d5 	bge.w	800b7e4 <_dtoa_r+0x634>
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	f300 80d1 	bgt.w	800b7e4 <_dtoa_r+0x634>
 800b642:	f040 826f 	bne.w	800bb24 <_dtoa_r+0x974>
 800b646:	4b65      	ldr	r3, [pc, #404]	; (800b7dc <_dtoa_r+0x62c>)
 800b648:	2200      	movs	r2, #0
 800b64a:	4640      	mov	r0, r8
 800b64c:	4649      	mov	r1, r9
 800b64e:	f7f4 ffd3 	bl	80005f8 <__aeabi_dmul>
 800b652:	4652      	mov	r2, sl
 800b654:	465b      	mov	r3, fp
 800b656:	f7f5 fa55 	bl	8000b04 <__aeabi_dcmpge>
 800b65a:	9e03      	ldr	r6, [sp, #12]
 800b65c:	4637      	mov	r7, r6
 800b65e:	2800      	cmp	r0, #0
 800b660:	f040 8245 	bne.w	800baee <_dtoa_r+0x93e>
 800b664:	9d01      	ldr	r5, [sp, #4]
 800b666:	2331      	movs	r3, #49	; 0x31
 800b668:	f805 3b01 	strb.w	r3, [r5], #1
 800b66c:	9b00      	ldr	r3, [sp, #0]
 800b66e:	3301      	adds	r3, #1
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	e240      	b.n	800baf6 <_dtoa_r+0x946>
 800b674:	07f2      	lsls	r2, r6, #31
 800b676:	d505      	bpl.n	800b684 <_dtoa_r+0x4d4>
 800b678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b67c:	f7f4 ffbc 	bl	80005f8 <__aeabi_dmul>
 800b680:	3501      	adds	r5, #1
 800b682:	2301      	movs	r3, #1
 800b684:	1076      	asrs	r6, r6, #1
 800b686:	3708      	adds	r7, #8
 800b688:	e777      	b.n	800b57a <_dtoa_r+0x3ca>
 800b68a:	2502      	movs	r5, #2
 800b68c:	e779      	b.n	800b582 <_dtoa_r+0x3d2>
 800b68e:	9f00      	ldr	r7, [sp, #0]
 800b690:	9e03      	ldr	r6, [sp, #12]
 800b692:	e794      	b.n	800b5be <_dtoa_r+0x40e>
 800b694:	9901      	ldr	r1, [sp, #4]
 800b696:	4b4c      	ldr	r3, [pc, #304]	; (800b7c8 <_dtoa_r+0x618>)
 800b698:	4431      	add	r1, r6
 800b69a:	910d      	str	r1, [sp, #52]	; 0x34
 800b69c:	9908      	ldr	r1, [sp, #32]
 800b69e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b6a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6a6:	2900      	cmp	r1, #0
 800b6a8:	d043      	beq.n	800b732 <_dtoa_r+0x582>
 800b6aa:	494d      	ldr	r1, [pc, #308]	; (800b7e0 <_dtoa_r+0x630>)
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	f7f5 f8cd 	bl	800084c <__aeabi_ddiv>
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	465b      	mov	r3, fp
 800b6b6:	f7f4 fde7 	bl	8000288 <__aeabi_dsub>
 800b6ba:	9d01      	ldr	r5, [sp, #4]
 800b6bc:	4682      	mov	sl, r0
 800b6be:	468b      	mov	fp, r1
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	f7f5 fa48 	bl	8000b58 <__aeabi_d2iz>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	f7f4 ff2b 	bl	8000524 <__aeabi_i2d>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	4649      	mov	r1, r9
 800b6d6:	f7f4 fdd7 	bl	8000288 <__aeabi_dsub>
 800b6da:	3630      	adds	r6, #48	; 0x30
 800b6dc:	f805 6b01 	strb.w	r6, [r5], #1
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	465b      	mov	r3, fp
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4689      	mov	r9, r1
 800b6e8:	f7f5 f9f8 	bl	8000adc <__aeabi_dcmplt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d163      	bne.n	800b7b8 <_dtoa_r+0x608>
 800b6f0:	4642      	mov	r2, r8
 800b6f2:	464b      	mov	r3, r9
 800b6f4:	4936      	ldr	r1, [pc, #216]	; (800b7d0 <_dtoa_r+0x620>)
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f7f4 fdc6 	bl	8000288 <__aeabi_dsub>
 800b6fc:	4652      	mov	r2, sl
 800b6fe:	465b      	mov	r3, fp
 800b700:	f7f5 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800b704:	2800      	cmp	r0, #0
 800b706:	f040 80b5 	bne.w	800b874 <_dtoa_r+0x6c4>
 800b70a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b70c:	429d      	cmp	r5, r3
 800b70e:	d081      	beq.n	800b614 <_dtoa_r+0x464>
 800b710:	4b30      	ldr	r3, [pc, #192]	; (800b7d4 <_dtoa_r+0x624>)
 800b712:	2200      	movs	r2, #0
 800b714:	4650      	mov	r0, sl
 800b716:	4659      	mov	r1, fp
 800b718:	f7f4 ff6e 	bl	80005f8 <__aeabi_dmul>
 800b71c:	4b2d      	ldr	r3, [pc, #180]	; (800b7d4 <_dtoa_r+0x624>)
 800b71e:	4682      	mov	sl, r0
 800b720:	468b      	mov	fp, r1
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	2200      	movs	r2, #0
 800b728:	f7f4 ff66 	bl	80005f8 <__aeabi_dmul>
 800b72c:	4680      	mov	r8, r0
 800b72e:	4689      	mov	r9, r1
 800b730:	e7c6      	b.n	800b6c0 <_dtoa_r+0x510>
 800b732:	4650      	mov	r0, sl
 800b734:	4659      	mov	r1, fp
 800b736:	f7f4 ff5f 	bl	80005f8 <__aeabi_dmul>
 800b73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b73c:	9d01      	ldr	r5, [sp, #4]
 800b73e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b740:	4682      	mov	sl, r0
 800b742:	468b      	mov	fp, r1
 800b744:	4649      	mov	r1, r9
 800b746:	4640      	mov	r0, r8
 800b748:	f7f5 fa06 	bl	8000b58 <__aeabi_d2iz>
 800b74c:	4606      	mov	r6, r0
 800b74e:	f7f4 fee9 	bl	8000524 <__aeabi_i2d>
 800b752:	3630      	adds	r6, #48	; 0x30
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4640      	mov	r0, r8
 800b75a:	4649      	mov	r1, r9
 800b75c:	f7f4 fd94 	bl	8000288 <__aeabi_dsub>
 800b760:	f805 6b01 	strb.w	r6, [r5], #1
 800b764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b766:	429d      	cmp	r5, r3
 800b768:	4680      	mov	r8, r0
 800b76a:	4689      	mov	r9, r1
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	d124      	bne.n	800b7bc <_dtoa_r+0x60c>
 800b772:	4b1b      	ldr	r3, [pc, #108]	; (800b7e0 <_dtoa_r+0x630>)
 800b774:	4650      	mov	r0, sl
 800b776:	4659      	mov	r1, fp
 800b778:	f7f4 fd88 	bl	800028c <__adddf3>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	f7f5 f9c8 	bl	8000b18 <__aeabi_dcmpgt>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d173      	bne.n	800b874 <_dtoa_r+0x6c4>
 800b78c:	4652      	mov	r2, sl
 800b78e:	465b      	mov	r3, fp
 800b790:	4913      	ldr	r1, [pc, #76]	; (800b7e0 <_dtoa_r+0x630>)
 800b792:	2000      	movs	r0, #0
 800b794:	f7f4 fd78 	bl	8000288 <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f5 f99c 	bl	8000adc <__aeabi_dcmplt>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f43f af35 	beq.w	800b614 <_dtoa_r+0x464>
 800b7aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b7ac:	1e6b      	subs	r3, r5, #1
 800b7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b7b4:	2b30      	cmp	r3, #48	; 0x30
 800b7b6:	d0f8      	beq.n	800b7aa <_dtoa_r+0x5fa>
 800b7b8:	9700      	str	r7, [sp, #0]
 800b7ba:	e049      	b.n	800b850 <_dtoa_r+0x6a0>
 800b7bc:	4b05      	ldr	r3, [pc, #20]	; (800b7d4 <_dtoa_r+0x624>)
 800b7be:	f7f4 ff1b 	bl	80005f8 <__aeabi_dmul>
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4689      	mov	r9, r1
 800b7c6:	e7bd      	b.n	800b744 <_dtoa_r+0x594>
 800b7c8:	0800e570 	.word	0x0800e570
 800b7cc:	0800e548 	.word	0x0800e548
 800b7d0:	3ff00000 	.word	0x3ff00000
 800b7d4:	40240000 	.word	0x40240000
 800b7d8:	401c0000 	.word	0x401c0000
 800b7dc:	40140000 	.word	0x40140000
 800b7e0:	3fe00000 	.word	0x3fe00000
 800b7e4:	9d01      	ldr	r5, [sp, #4]
 800b7e6:	4656      	mov	r6, sl
 800b7e8:	465f      	mov	r7, fp
 800b7ea:	4642      	mov	r2, r8
 800b7ec:	464b      	mov	r3, r9
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	f7f5 f82b 	bl	800084c <__aeabi_ddiv>
 800b7f6:	f7f5 f9af 	bl	8000b58 <__aeabi_d2iz>
 800b7fa:	4682      	mov	sl, r0
 800b7fc:	f7f4 fe92 	bl	8000524 <__aeabi_i2d>
 800b800:	4642      	mov	r2, r8
 800b802:	464b      	mov	r3, r9
 800b804:	f7f4 fef8 	bl	80005f8 <__aeabi_dmul>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4630      	mov	r0, r6
 800b80e:	4639      	mov	r1, r7
 800b810:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b814:	f7f4 fd38 	bl	8000288 <__aeabi_dsub>
 800b818:	f805 6b01 	strb.w	r6, [r5], #1
 800b81c:	9e01      	ldr	r6, [sp, #4]
 800b81e:	9f03      	ldr	r7, [sp, #12]
 800b820:	1bae      	subs	r6, r5, r6
 800b822:	42b7      	cmp	r7, r6
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	d135      	bne.n	800b896 <_dtoa_r+0x6e6>
 800b82a:	f7f4 fd2f 	bl	800028c <__adddf3>
 800b82e:	4642      	mov	r2, r8
 800b830:	464b      	mov	r3, r9
 800b832:	4606      	mov	r6, r0
 800b834:	460f      	mov	r7, r1
 800b836:	f7f5 f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800b83a:	b9d0      	cbnz	r0, 800b872 <_dtoa_r+0x6c2>
 800b83c:	4642      	mov	r2, r8
 800b83e:	464b      	mov	r3, r9
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f5 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 800b848:	b110      	cbz	r0, 800b850 <_dtoa_r+0x6a0>
 800b84a:	f01a 0f01 	tst.w	sl, #1
 800b84e:	d110      	bne.n	800b872 <_dtoa_r+0x6c2>
 800b850:	4620      	mov	r0, r4
 800b852:	ee18 1a10 	vmov	r1, s16
 800b856:	f000 fe79 	bl	800c54c <_Bfree>
 800b85a:	2300      	movs	r3, #0
 800b85c:	9800      	ldr	r0, [sp, #0]
 800b85e:	702b      	strb	r3, [r5, #0]
 800b860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b862:	3001      	adds	r0, #1
 800b864:	6018      	str	r0, [r3, #0]
 800b866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f43f acf1 	beq.w	800b250 <_dtoa_r+0xa0>
 800b86e:	601d      	str	r5, [r3, #0]
 800b870:	e4ee      	b.n	800b250 <_dtoa_r+0xa0>
 800b872:	9f00      	ldr	r7, [sp, #0]
 800b874:	462b      	mov	r3, r5
 800b876:	461d      	mov	r5, r3
 800b878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b87c:	2a39      	cmp	r2, #57	; 0x39
 800b87e:	d106      	bne.n	800b88e <_dtoa_r+0x6de>
 800b880:	9a01      	ldr	r2, [sp, #4]
 800b882:	429a      	cmp	r2, r3
 800b884:	d1f7      	bne.n	800b876 <_dtoa_r+0x6c6>
 800b886:	9901      	ldr	r1, [sp, #4]
 800b888:	2230      	movs	r2, #48	; 0x30
 800b88a:	3701      	adds	r7, #1
 800b88c:	700a      	strb	r2, [r1, #0]
 800b88e:	781a      	ldrb	r2, [r3, #0]
 800b890:	3201      	adds	r2, #1
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	e790      	b.n	800b7b8 <_dtoa_r+0x608>
 800b896:	4ba6      	ldr	r3, [pc, #664]	; (800bb30 <_dtoa_r+0x980>)
 800b898:	2200      	movs	r2, #0
 800b89a:	f7f4 fead 	bl	80005f8 <__aeabi_dmul>
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	f7f5 f90f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d09d      	beq.n	800b7ea <_dtoa_r+0x63a>
 800b8ae:	e7cf      	b.n	800b850 <_dtoa_r+0x6a0>
 800b8b0:	9a08      	ldr	r2, [sp, #32]
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	f000 80d7 	beq.w	800ba66 <_dtoa_r+0x8b6>
 800b8b8:	9a06      	ldr	r2, [sp, #24]
 800b8ba:	2a01      	cmp	r2, #1
 800b8bc:	f300 80ba 	bgt.w	800ba34 <_dtoa_r+0x884>
 800b8c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	f000 80b2 	beq.w	800ba2c <_dtoa_r+0x87c>
 800b8c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b8cc:	9e07      	ldr	r6, [sp, #28]
 800b8ce:	9d04      	ldr	r5, [sp, #16]
 800b8d0:	9a04      	ldr	r2, [sp, #16]
 800b8d2:	441a      	add	r2, r3
 800b8d4:	9204      	str	r2, [sp, #16]
 800b8d6:	9a05      	ldr	r2, [sp, #20]
 800b8d8:	2101      	movs	r1, #1
 800b8da:	441a      	add	r2, r3
 800b8dc:	4620      	mov	r0, r4
 800b8de:	9205      	str	r2, [sp, #20]
 800b8e0:	f000 ff36 	bl	800c750 <__i2b>
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	dd0c      	ble.n	800b904 <_dtoa_r+0x754>
 800b8ea:	9b05      	ldr	r3, [sp, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	dd09      	ble.n	800b904 <_dtoa_r+0x754>
 800b8f0:	42ab      	cmp	r3, r5
 800b8f2:	9a04      	ldr	r2, [sp, #16]
 800b8f4:	bfa8      	it	ge
 800b8f6:	462b      	movge	r3, r5
 800b8f8:	1ad2      	subs	r2, r2, r3
 800b8fa:	9204      	str	r2, [sp, #16]
 800b8fc:	9a05      	ldr	r2, [sp, #20]
 800b8fe:	1aed      	subs	r5, r5, r3
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	9305      	str	r3, [sp, #20]
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	b31b      	cbz	r3, 800b950 <_dtoa_r+0x7a0>
 800b908:	9b08      	ldr	r3, [sp, #32]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 80af 	beq.w	800ba6e <_dtoa_r+0x8be>
 800b910:	2e00      	cmp	r6, #0
 800b912:	dd13      	ble.n	800b93c <_dtoa_r+0x78c>
 800b914:	4639      	mov	r1, r7
 800b916:	4632      	mov	r2, r6
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 ffd9 	bl	800c8d0 <__pow5mult>
 800b91e:	ee18 2a10 	vmov	r2, s16
 800b922:	4601      	mov	r1, r0
 800b924:	4607      	mov	r7, r0
 800b926:	4620      	mov	r0, r4
 800b928:	f000 ff28 	bl	800c77c <__multiply>
 800b92c:	ee18 1a10 	vmov	r1, s16
 800b930:	4680      	mov	r8, r0
 800b932:	4620      	mov	r0, r4
 800b934:	f000 fe0a 	bl	800c54c <_Bfree>
 800b938:	ee08 8a10 	vmov	s16, r8
 800b93c:	9b07      	ldr	r3, [sp, #28]
 800b93e:	1b9a      	subs	r2, r3, r6
 800b940:	d006      	beq.n	800b950 <_dtoa_r+0x7a0>
 800b942:	ee18 1a10 	vmov	r1, s16
 800b946:	4620      	mov	r0, r4
 800b948:	f000 ffc2 	bl	800c8d0 <__pow5mult>
 800b94c:	ee08 0a10 	vmov	s16, r0
 800b950:	2101      	movs	r1, #1
 800b952:	4620      	mov	r0, r4
 800b954:	f000 fefc 	bl	800c750 <__i2b>
 800b958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	4606      	mov	r6, r0
 800b95e:	f340 8088 	ble.w	800ba72 <_dtoa_r+0x8c2>
 800b962:	461a      	mov	r2, r3
 800b964:	4601      	mov	r1, r0
 800b966:	4620      	mov	r0, r4
 800b968:	f000 ffb2 	bl	800c8d0 <__pow5mult>
 800b96c:	9b06      	ldr	r3, [sp, #24]
 800b96e:	2b01      	cmp	r3, #1
 800b970:	4606      	mov	r6, r0
 800b972:	f340 8081 	ble.w	800ba78 <_dtoa_r+0x8c8>
 800b976:	f04f 0800 	mov.w	r8, #0
 800b97a:	6933      	ldr	r3, [r6, #16]
 800b97c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b980:	6918      	ldr	r0, [r3, #16]
 800b982:	f000 fe95 	bl	800c6b0 <__hi0bits>
 800b986:	f1c0 0020 	rsb	r0, r0, #32
 800b98a:	9b05      	ldr	r3, [sp, #20]
 800b98c:	4418      	add	r0, r3
 800b98e:	f010 001f 	ands.w	r0, r0, #31
 800b992:	f000 8092 	beq.w	800baba <_dtoa_r+0x90a>
 800b996:	f1c0 0320 	rsb	r3, r0, #32
 800b99a:	2b04      	cmp	r3, #4
 800b99c:	f340 808a 	ble.w	800bab4 <_dtoa_r+0x904>
 800b9a0:	f1c0 001c 	rsb	r0, r0, #28
 800b9a4:	9b04      	ldr	r3, [sp, #16]
 800b9a6:	4403      	add	r3, r0
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	9b05      	ldr	r3, [sp, #20]
 800b9ac:	4403      	add	r3, r0
 800b9ae:	4405      	add	r5, r0
 800b9b0:	9305      	str	r3, [sp, #20]
 800b9b2:	9b04      	ldr	r3, [sp, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	dd07      	ble.n	800b9c8 <_dtoa_r+0x818>
 800b9b8:	ee18 1a10 	vmov	r1, s16
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 ffe0 	bl	800c984 <__lshift>
 800b9c4:	ee08 0a10 	vmov	s16, r0
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dd05      	ble.n	800b9da <_dtoa_r+0x82a>
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 ffd6 	bl	800c984 <__lshift>
 800b9d8:	4606      	mov	r6, r0
 800b9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d06e      	beq.n	800babe <_dtoa_r+0x90e>
 800b9e0:	ee18 0a10 	vmov	r0, s16
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	f001 f83d 	bl	800ca64 <__mcmp>
 800b9ea:	2800      	cmp	r0, #0
 800b9ec:	da67      	bge.n	800babe <_dtoa_r+0x90e>
 800b9ee:	9b00      	ldr	r3, [sp, #0]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	ee18 1a10 	vmov	r1, s16
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	220a      	movs	r2, #10
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f000 fdc7 	bl	800c590 <__multadd>
 800ba02:	9b08      	ldr	r3, [sp, #32]
 800ba04:	ee08 0a10 	vmov	s16, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 81b1 	beq.w	800bd70 <_dtoa_r+0xbc0>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4639      	mov	r1, r7
 800ba12:	220a      	movs	r2, #10
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 fdbb 	bl	800c590 <__multadd>
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	4607      	mov	r7, r0
 800ba20:	f300 808e 	bgt.w	800bb40 <_dtoa_r+0x990>
 800ba24:	9b06      	ldr	r3, [sp, #24]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	dc51      	bgt.n	800bace <_dtoa_r+0x91e>
 800ba2a:	e089      	b.n	800bb40 <_dtoa_r+0x990>
 800ba2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba32:	e74b      	b.n	800b8cc <_dtoa_r+0x71c>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	1e5e      	subs	r6, r3, #1
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	42b3      	cmp	r3, r6
 800ba3c:	bfbf      	itttt	lt
 800ba3e:	9b07      	ldrlt	r3, [sp, #28]
 800ba40:	9607      	strlt	r6, [sp, #28]
 800ba42:	1af2      	sublt	r2, r6, r3
 800ba44:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ba46:	bfb6      	itet	lt
 800ba48:	189b      	addlt	r3, r3, r2
 800ba4a:	1b9e      	subge	r6, r3, r6
 800ba4c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	bfb8      	it	lt
 800ba52:	2600      	movlt	r6, #0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfb7      	itett	lt
 800ba58:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba5c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba60:	1a9d      	sublt	r5, r3, r2
 800ba62:	2300      	movlt	r3, #0
 800ba64:	e734      	b.n	800b8d0 <_dtoa_r+0x720>
 800ba66:	9e07      	ldr	r6, [sp, #28]
 800ba68:	9d04      	ldr	r5, [sp, #16]
 800ba6a:	9f08      	ldr	r7, [sp, #32]
 800ba6c:	e73b      	b.n	800b8e6 <_dtoa_r+0x736>
 800ba6e:	9a07      	ldr	r2, [sp, #28]
 800ba70:	e767      	b.n	800b942 <_dtoa_r+0x792>
 800ba72:	9b06      	ldr	r3, [sp, #24]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	dc18      	bgt.n	800baaa <_dtoa_r+0x8fa>
 800ba78:	f1ba 0f00 	cmp.w	sl, #0
 800ba7c:	d115      	bne.n	800baaa <_dtoa_r+0x8fa>
 800ba7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba82:	b993      	cbnz	r3, 800baaa <_dtoa_r+0x8fa>
 800ba84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba88:	0d1b      	lsrs	r3, r3, #20
 800ba8a:	051b      	lsls	r3, r3, #20
 800ba8c:	b183      	cbz	r3, 800bab0 <_dtoa_r+0x900>
 800ba8e:	9b04      	ldr	r3, [sp, #16]
 800ba90:	3301      	adds	r3, #1
 800ba92:	9304      	str	r3, [sp, #16]
 800ba94:	9b05      	ldr	r3, [sp, #20]
 800ba96:	3301      	adds	r3, #1
 800ba98:	9305      	str	r3, [sp, #20]
 800ba9a:	f04f 0801 	mov.w	r8, #1
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f47f af6a 	bne.w	800b97a <_dtoa_r+0x7ca>
 800baa6:	2001      	movs	r0, #1
 800baa8:	e76f      	b.n	800b98a <_dtoa_r+0x7da>
 800baaa:	f04f 0800 	mov.w	r8, #0
 800baae:	e7f6      	b.n	800ba9e <_dtoa_r+0x8ee>
 800bab0:	4698      	mov	r8, r3
 800bab2:	e7f4      	b.n	800ba9e <_dtoa_r+0x8ee>
 800bab4:	f43f af7d 	beq.w	800b9b2 <_dtoa_r+0x802>
 800bab8:	4618      	mov	r0, r3
 800baba:	301c      	adds	r0, #28
 800babc:	e772      	b.n	800b9a4 <_dtoa_r+0x7f4>
 800babe:	9b03      	ldr	r3, [sp, #12]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dc37      	bgt.n	800bb34 <_dtoa_r+0x984>
 800bac4:	9b06      	ldr	r3, [sp, #24]
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	dd34      	ble.n	800bb34 <_dtoa_r+0x984>
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	9302      	str	r3, [sp, #8]
 800bace:	9b02      	ldr	r3, [sp, #8]
 800bad0:	b96b      	cbnz	r3, 800baee <_dtoa_r+0x93e>
 800bad2:	4631      	mov	r1, r6
 800bad4:	2205      	movs	r2, #5
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 fd5a 	bl	800c590 <__multadd>
 800badc:	4601      	mov	r1, r0
 800bade:	4606      	mov	r6, r0
 800bae0:	ee18 0a10 	vmov	r0, s16
 800bae4:	f000 ffbe 	bl	800ca64 <__mcmp>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f73f adbb 	bgt.w	800b664 <_dtoa_r+0x4b4>
 800baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf0:	9d01      	ldr	r5, [sp, #4]
 800baf2:	43db      	mvns	r3, r3
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	f04f 0800 	mov.w	r8, #0
 800bafa:	4631      	mov	r1, r6
 800bafc:	4620      	mov	r0, r4
 800bafe:	f000 fd25 	bl	800c54c <_Bfree>
 800bb02:	2f00      	cmp	r7, #0
 800bb04:	f43f aea4 	beq.w	800b850 <_dtoa_r+0x6a0>
 800bb08:	f1b8 0f00 	cmp.w	r8, #0
 800bb0c:	d005      	beq.n	800bb1a <_dtoa_r+0x96a>
 800bb0e:	45b8      	cmp	r8, r7
 800bb10:	d003      	beq.n	800bb1a <_dtoa_r+0x96a>
 800bb12:	4641      	mov	r1, r8
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fd19 	bl	800c54c <_Bfree>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 fd15 	bl	800c54c <_Bfree>
 800bb22:	e695      	b.n	800b850 <_dtoa_r+0x6a0>
 800bb24:	2600      	movs	r6, #0
 800bb26:	4637      	mov	r7, r6
 800bb28:	e7e1      	b.n	800baee <_dtoa_r+0x93e>
 800bb2a:	9700      	str	r7, [sp, #0]
 800bb2c:	4637      	mov	r7, r6
 800bb2e:	e599      	b.n	800b664 <_dtoa_r+0x4b4>
 800bb30:	40240000 	.word	0x40240000
 800bb34:	9b08      	ldr	r3, [sp, #32]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 80ca 	beq.w	800bcd0 <_dtoa_r+0xb20>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	9302      	str	r3, [sp, #8]
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	dd05      	ble.n	800bb50 <_dtoa_r+0x9a0>
 800bb44:	4639      	mov	r1, r7
 800bb46:	462a      	mov	r2, r5
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 ff1b 	bl	800c984 <__lshift>
 800bb4e:	4607      	mov	r7, r0
 800bb50:	f1b8 0f00 	cmp.w	r8, #0
 800bb54:	d05b      	beq.n	800bc0e <_dtoa_r+0xa5e>
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f000 fcb7 	bl	800c4cc <_Balloc>
 800bb5e:	4605      	mov	r5, r0
 800bb60:	b928      	cbnz	r0, 800bb6e <_dtoa_r+0x9be>
 800bb62:	4b87      	ldr	r3, [pc, #540]	; (800bd80 <_dtoa_r+0xbd0>)
 800bb64:	4602      	mov	r2, r0
 800bb66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb6a:	f7ff bb3b 	b.w	800b1e4 <_dtoa_r+0x34>
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	3202      	adds	r2, #2
 800bb72:	0092      	lsls	r2, r2, #2
 800bb74:	f107 010c 	add.w	r1, r7, #12
 800bb78:	300c      	adds	r0, #12
 800bb7a:	f7fd fe93 	bl	80098a4 <memcpy>
 800bb7e:	2201      	movs	r2, #1
 800bb80:	4629      	mov	r1, r5
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 fefe 	bl	800c984 <__lshift>
 800bb88:	9b01      	ldr	r3, [sp, #4]
 800bb8a:	f103 0901 	add.w	r9, r3, #1
 800bb8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb92:	4413      	add	r3, r2
 800bb94:	9305      	str	r3, [sp, #20]
 800bb96:	f00a 0301 	and.w	r3, sl, #1
 800bb9a:	46b8      	mov	r8, r7
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	4607      	mov	r7, r0
 800bba0:	4631      	mov	r1, r6
 800bba2:	ee18 0a10 	vmov	r0, s16
 800bba6:	f7ff fa77 	bl	800b098 <quorem>
 800bbaa:	4641      	mov	r1, r8
 800bbac:	9002      	str	r0, [sp, #8]
 800bbae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bbb2:	ee18 0a10 	vmov	r0, s16
 800bbb6:	f000 ff55 	bl	800ca64 <__mcmp>
 800bbba:	463a      	mov	r2, r7
 800bbbc:	9003      	str	r0, [sp, #12]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 ff6b 	bl	800ca9c <__mdiff>
 800bbc6:	68c2      	ldr	r2, [r0, #12]
 800bbc8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bbcc:	4605      	mov	r5, r0
 800bbce:	bb02      	cbnz	r2, 800bc12 <_dtoa_r+0xa62>
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	ee18 0a10 	vmov	r0, s16
 800bbd6:	f000 ff45 	bl	800ca64 <__mcmp>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4620      	mov	r0, r4
 800bbe0:	9207      	str	r2, [sp, #28]
 800bbe2:	f000 fcb3 	bl	800c54c <_Bfree>
 800bbe6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bbea:	ea43 0102 	orr.w	r1, r3, r2
 800bbee:	9b04      	ldr	r3, [sp, #16]
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	464d      	mov	r5, r9
 800bbf4:	d10f      	bne.n	800bc16 <_dtoa_r+0xa66>
 800bbf6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbfa:	d02a      	beq.n	800bc52 <_dtoa_r+0xaa2>
 800bbfc:	9b03      	ldr	r3, [sp, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	dd02      	ble.n	800bc08 <_dtoa_r+0xa58>
 800bc02:	9b02      	ldr	r3, [sp, #8]
 800bc04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bc08:	f88b a000 	strb.w	sl, [fp]
 800bc0c:	e775      	b.n	800bafa <_dtoa_r+0x94a>
 800bc0e:	4638      	mov	r0, r7
 800bc10:	e7ba      	b.n	800bb88 <_dtoa_r+0x9d8>
 800bc12:	2201      	movs	r2, #1
 800bc14:	e7e2      	b.n	800bbdc <_dtoa_r+0xa2c>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	db04      	blt.n	800bc26 <_dtoa_r+0xa76>
 800bc1c:	9906      	ldr	r1, [sp, #24]
 800bc1e:	430b      	orrs	r3, r1
 800bc20:	9904      	ldr	r1, [sp, #16]
 800bc22:	430b      	orrs	r3, r1
 800bc24:	d122      	bne.n	800bc6c <_dtoa_r+0xabc>
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	ddee      	ble.n	800bc08 <_dtoa_r+0xa58>
 800bc2a:	ee18 1a10 	vmov	r1, s16
 800bc2e:	2201      	movs	r2, #1
 800bc30:	4620      	mov	r0, r4
 800bc32:	f000 fea7 	bl	800c984 <__lshift>
 800bc36:	4631      	mov	r1, r6
 800bc38:	ee08 0a10 	vmov	s16, r0
 800bc3c:	f000 ff12 	bl	800ca64 <__mcmp>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	dc03      	bgt.n	800bc4c <_dtoa_r+0xa9c>
 800bc44:	d1e0      	bne.n	800bc08 <_dtoa_r+0xa58>
 800bc46:	f01a 0f01 	tst.w	sl, #1
 800bc4a:	d0dd      	beq.n	800bc08 <_dtoa_r+0xa58>
 800bc4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc50:	d1d7      	bne.n	800bc02 <_dtoa_r+0xa52>
 800bc52:	2339      	movs	r3, #57	; 0x39
 800bc54:	f88b 3000 	strb.w	r3, [fp]
 800bc58:	462b      	mov	r3, r5
 800bc5a:	461d      	mov	r5, r3
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc62:	2a39      	cmp	r2, #57	; 0x39
 800bc64:	d071      	beq.n	800bd4a <_dtoa_r+0xb9a>
 800bc66:	3201      	adds	r2, #1
 800bc68:	701a      	strb	r2, [r3, #0]
 800bc6a:	e746      	b.n	800bafa <_dtoa_r+0x94a>
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	dd07      	ble.n	800bc80 <_dtoa_r+0xad0>
 800bc70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc74:	d0ed      	beq.n	800bc52 <_dtoa_r+0xaa2>
 800bc76:	f10a 0301 	add.w	r3, sl, #1
 800bc7a:	f88b 3000 	strb.w	r3, [fp]
 800bc7e:	e73c      	b.n	800bafa <_dtoa_r+0x94a>
 800bc80:	9b05      	ldr	r3, [sp, #20]
 800bc82:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc86:	4599      	cmp	r9, r3
 800bc88:	d047      	beq.n	800bd1a <_dtoa_r+0xb6a>
 800bc8a:	ee18 1a10 	vmov	r1, s16
 800bc8e:	2300      	movs	r3, #0
 800bc90:	220a      	movs	r2, #10
 800bc92:	4620      	mov	r0, r4
 800bc94:	f000 fc7c 	bl	800c590 <__multadd>
 800bc98:	45b8      	cmp	r8, r7
 800bc9a:	ee08 0a10 	vmov	s16, r0
 800bc9e:	f04f 0300 	mov.w	r3, #0
 800bca2:	f04f 020a 	mov.w	r2, #10
 800bca6:	4641      	mov	r1, r8
 800bca8:	4620      	mov	r0, r4
 800bcaa:	d106      	bne.n	800bcba <_dtoa_r+0xb0a>
 800bcac:	f000 fc70 	bl	800c590 <__multadd>
 800bcb0:	4680      	mov	r8, r0
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	f109 0901 	add.w	r9, r9, #1
 800bcb8:	e772      	b.n	800bba0 <_dtoa_r+0x9f0>
 800bcba:	f000 fc69 	bl	800c590 <__multadd>
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	4680      	mov	r8, r0
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	220a      	movs	r2, #10
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f000 fc62 	bl	800c590 <__multadd>
 800bccc:	4607      	mov	r7, r0
 800bcce:	e7f1      	b.n	800bcb4 <_dtoa_r+0xb04>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	9302      	str	r3, [sp, #8]
 800bcd4:	9d01      	ldr	r5, [sp, #4]
 800bcd6:	ee18 0a10 	vmov	r0, s16
 800bcda:	4631      	mov	r1, r6
 800bcdc:	f7ff f9dc 	bl	800b098 <quorem>
 800bce0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	f805 ab01 	strb.w	sl, [r5], #1
 800bcea:	1aea      	subs	r2, r5, r3
 800bcec:	9b02      	ldr	r3, [sp, #8]
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	dd09      	ble.n	800bd06 <_dtoa_r+0xb56>
 800bcf2:	ee18 1a10 	vmov	r1, s16
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	220a      	movs	r2, #10
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 fc48 	bl	800c590 <__multadd>
 800bd00:	ee08 0a10 	vmov	s16, r0
 800bd04:	e7e7      	b.n	800bcd6 <_dtoa_r+0xb26>
 800bd06:	9b02      	ldr	r3, [sp, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bfc8      	it	gt
 800bd0c:	461d      	movgt	r5, r3
 800bd0e:	9b01      	ldr	r3, [sp, #4]
 800bd10:	bfd8      	it	le
 800bd12:	2501      	movle	r5, #1
 800bd14:	441d      	add	r5, r3
 800bd16:	f04f 0800 	mov.w	r8, #0
 800bd1a:	ee18 1a10 	vmov	r1, s16
 800bd1e:	2201      	movs	r2, #1
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 fe2f 	bl	800c984 <__lshift>
 800bd26:	4631      	mov	r1, r6
 800bd28:	ee08 0a10 	vmov	s16, r0
 800bd2c:	f000 fe9a 	bl	800ca64 <__mcmp>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	dc91      	bgt.n	800bc58 <_dtoa_r+0xaa8>
 800bd34:	d102      	bne.n	800bd3c <_dtoa_r+0xb8c>
 800bd36:	f01a 0f01 	tst.w	sl, #1
 800bd3a:	d18d      	bne.n	800bc58 <_dtoa_r+0xaa8>
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	461d      	mov	r5, r3
 800bd40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd44:	2a30      	cmp	r2, #48	; 0x30
 800bd46:	d0fa      	beq.n	800bd3e <_dtoa_r+0xb8e>
 800bd48:	e6d7      	b.n	800bafa <_dtoa_r+0x94a>
 800bd4a:	9a01      	ldr	r2, [sp, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d184      	bne.n	800bc5a <_dtoa_r+0xaaa>
 800bd50:	9b00      	ldr	r3, [sp, #0]
 800bd52:	3301      	adds	r3, #1
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	2331      	movs	r3, #49	; 0x31
 800bd58:	7013      	strb	r3, [r2, #0]
 800bd5a:	e6ce      	b.n	800bafa <_dtoa_r+0x94a>
 800bd5c:	4b09      	ldr	r3, [pc, #36]	; (800bd84 <_dtoa_r+0xbd4>)
 800bd5e:	f7ff ba95 	b.w	800b28c <_dtoa_r+0xdc>
 800bd62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f47f aa6e 	bne.w	800b246 <_dtoa_r+0x96>
 800bd6a:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <_dtoa_r+0xbd8>)
 800bd6c:	f7ff ba8e 	b.w	800b28c <_dtoa_r+0xdc>
 800bd70:	9b02      	ldr	r3, [sp, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	dcae      	bgt.n	800bcd4 <_dtoa_r+0xb24>
 800bd76:	9b06      	ldr	r3, [sp, #24]
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	f73f aea8 	bgt.w	800bace <_dtoa_r+0x91e>
 800bd7e:	e7a9      	b.n	800bcd4 <_dtoa_r+0xb24>
 800bd80:	0800e461 	.word	0x0800e461
 800bd84:	0800e1d4 	.word	0x0800e1d4
 800bd88:	0800e3f9 	.word	0x0800e3f9

0800bd8c <fiprintf>:
 800bd8c:	b40e      	push	{r1, r2, r3}
 800bd8e:	b503      	push	{r0, r1, lr}
 800bd90:	4601      	mov	r1, r0
 800bd92:	ab03      	add	r3, sp, #12
 800bd94:	4805      	ldr	r0, [pc, #20]	; (800bdac <fiprintf+0x20>)
 800bd96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9a:	6800      	ldr	r0, [r0, #0]
 800bd9c:	9301      	str	r3, [sp, #4]
 800bd9e:	f001 fad3 	bl	800d348 <_vfiprintf_r>
 800bda2:	b002      	add	sp, #8
 800bda4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bda8:	b003      	add	sp, #12
 800bdaa:	4770      	bx	lr
 800bdac:	2000000c 	.word	0x2000000c

0800bdb0 <rshift>:
 800bdb0:	6903      	ldr	r3, [r0, #16]
 800bdb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bdb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdbe:	f100 0414 	add.w	r4, r0, #20
 800bdc2:	dd45      	ble.n	800be50 <rshift+0xa0>
 800bdc4:	f011 011f 	ands.w	r1, r1, #31
 800bdc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdd0:	d10c      	bne.n	800bdec <rshift+0x3c>
 800bdd2:	f100 0710 	add.w	r7, r0, #16
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	42b1      	cmp	r1, r6
 800bdda:	d334      	bcc.n	800be46 <rshift+0x96>
 800bddc:	1a9b      	subs	r3, r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	1eea      	subs	r2, r5, #3
 800bde2:	4296      	cmp	r6, r2
 800bde4:	bf38      	it	cc
 800bde6:	2300      	movcc	r3, #0
 800bde8:	4423      	add	r3, r4
 800bdea:	e015      	b.n	800be18 <rshift+0x68>
 800bdec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bdf0:	f1c1 0820 	rsb	r8, r1, #32
 800bdf4:	40cf      	lsrs	r7, r1
 800bdf6:	f105 0e04 	add.w	lr, r5, #4
 800bdfa:	46a1      	mov	r9, r4
 800bdfc:	4576      	cmp	r6, lr
 800bdfe:	46f4      	mov	ip, lr
 800be00:	d815      	bhi.n	800be2e <rshift+0x7e>
 800be02:	1a9a      	subs	r2, r3, r2
 800be04:	0092      	lsls	r2, r2, #2
 800be06:	3a04      	subs	r2, #4
 800be08:	3501      	adds	r5, #1
 800be0a:	42ae      	cmp	r6, r5
 800be0c:	bf38      	it	cc
 800be0e:	2200      	movcc	r2, #0
 800be10:	18a3      	adds	r3, r4, r2
 800be12:	50a7      	str	r7, [r4, r2]
 800be14:	b107      	cbz	r7, 800be18 <rshift+0x68>
 800be16:	3304      	adds	r3, #4
 800be18:	1b1a      	subs	r2, r3, r4
 800be1a:	42a3      	cmp	r3, r4
 800be1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be20:	bf08      	it	eq
 800be22:	2300      	moveq	r3, #0
 800be24:	6102      	str	r2, [r0, #16]
 800be26:	bf08      	it	eq
 800be28:	6143      	streq	r3, [r0, #20]
 800be2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be2e:	f8dc c000 	ldr.w	ip, [ip]
 800be32:	fa0c fc08 	lsl.w	ip, ip, r8
 800be36:	ea4c 0707 	orr.w	r7, ip, r7
 800be3a:	f849 7b04 	str.w	r7, [r9], #4
 800be3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be42:	40cf      	lsrs	r7, r1
 800be44:	e7da      	b.n	800bdfc <rshift+0x4c>
 800be46:	f851 cb04 	ldr.w	ip, [r1], #4
 800be4a:	f847 cf04 	str.w	ip, [r7, #4]!
 800be4e:	e7c3      	b.n	800bdd8 <rshift+0x28>
 800be50:	4623      	mov	r3, r4
 800be52:	e7e1      	b.n	800be18 <rshift+0x68>

0800be54 <__hexdig_fun>:
 800be54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be58:	2b09      	cmp	r3, #9
 800be5a:	d802      	bhi.n	800be62 <__hexdig_fun+0xe>
 800be5c:	3820      	subs	r0, #32
 800be5e:	b2c0      	uxtb	r0, r0
 800be60:	4770      	bx	lr
 800be62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be66:	2b05      	cmp	r3, #5
 800be68:	d801      	bhi.n	800be6e <__hexdig_fun+0x1a>
 800be6a:	3847      	subs	r0, #71	; 0x47
 800be6c:	e7f7      	b.n	800be5e <__hexdig_fun+0xa>
 800be6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be72:	2b05      	cmp	r3, #5
 800be74:	d801      	bhi.n	800be7a <__hexdig_fun+0x26>
 800be76:	3827      	subs	r0, #39	; 0x27
 800be78:	e7f1      	b.n	800be5e <__hexdig_fun+0xa>
 800be7a:	2000      	movs	r0, #0
 800be7c:	4770      	bx	lr
	...

0800be80 <__gethex>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	ed2d 8b02 	vpush	{d8}
 800be88:	b089      	sub	sp, #36	; 0x24
 800be8a:	ee08 0a10 	vmov	s16, r0
 800be8e:	9304      	str	r3, [sp, #16]
 800be90:	4bb4      	ldr	r3, [pc, #720]	; (800c164 <__gethex+0x2e4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	468b      	mov	fp, r1
 800be9a:	4690      	mov	r8, r2
 800be9c:	f7f4 f998 	bl	80001d0 <strlen>
 800bea0:	9b01      	ldr	r3, [sp, #4]
 800bea2:	f8db 2000 	ldr.w	r2, [fp]
 800bea6:	4403      	add	r3, r0
 800bea8:	4682      	mov	sl, r0
 800beaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800beae:	9305      	str	r3, [sp, #20]
 800beb0:	1c93      	adds	r3, r2, #2
 800beb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800beb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800beba:	32fe      	adds	r2, #254	; 0xfe
 800bebc:	18d1      	adds	r1, r2, r3
 800bebe:	461f      	mov	r7, r3
 800bec0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bec4:	9100      	str	r1, [sp, #0]
 800bec6:	2830      	cmp	r0, #48	; 0x30
 800bec8:	d0f8      	beq.n	800bebc <__gethex+0x3c>
 800beca:	f7ff ffc3 	bl	800be54 <__hexdig_fun>
 800bece:	4604      	mov	r4, r0
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d13a      	bne.n	800bf4a <__gethex+0xca>
 800bed4:	9901      	ldr	r1, [sp, #4]
 800bed6:	4652      	mov	r2, sl
 800bed8:	4638      	mov	r0, r7
 800beda:	f001 fb7d 	bl	800d5d8 <strncmp>
 800bede:	4605      	mov	r5, r0
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d168      	bne.n	800bfb6 <__gethex+0x136>
 800bee4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bee8:	eb07 060a 	add.w	r6, r7, sl
 800beec:	f7ff ffb2 	bl	800be54 <__hexdig_fun>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d062      	beq.n	800bfba <__gethex+0x13a>
 800bef4:	4633      	mov	r3, r6
 800bef6:	7818      	ldrb	r0, [r3, #0]
 800bef8:	2830      	cmp	r0, #48	; 0x30
 800befa:	461f      	mov	r7, r3
 800befc:	f103 0301 	add.w	r3, r3, #1
 800bf00:	d0f9      	beq.n	800bef6 <__gethex+0x76>
 800bf02:	f7ff ffa7 	bl	800be54 <__hexdig_fun>
 800bf06:	2301      	movs	r3, #1
 800bf08:	fab0 f480 	clz	r4, r0
 800bf0c:	0964      	lsrs	r4, r4, #5
 800bf0e:	4635      	mov	r5, r6
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	463a      	mov	r2, r7
 800bf14:	4616      	mov	r6, r2
 800bf16:	3201      	adds	r2, #1
 800bf18:	7830      	ldrb	r0, [r6, #0]
 800bf1a:	f7ff ff9b 	bl	800be54 <__hexdig_fun>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d1f8      	bne.n	800bf14 <__gethex+0x94>
 800bf22:	9901      	ldr	r1, [sp, #4]
 800bf24:	4652      	mov	r2, sl
 800bf26:	4630      	mov	r0, r6
 800bf28:	f001 fb56 	bl	800d5d8 <strncmp>
 800bf2c:	b980      	cbnz	r0, 800bf50 <__gethex+0xd0>
 800bf2e:	b94d      	cbnz	r5, 800bf44 <__gethex+0xc4>
 800bf30:	eb06 050a 	add.w	r5, r6, sl
 800bf34:	462a      	mov	r2, r5
 800bf36:	4616      	mov	r6, r2
 800bf38:	3201      	adds	r2, #1
 800bf3a:	7830      	ldrb	r0, [r6, #0]
 800bf3c:	f7ff ff8a 	bl	800be54 <__hexdig_fun>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d1f8      	bne.n	800bf36 <__gethex+0xb6>
 800bf44:	1bad      	subs	r5, r5, r6
 800bf46:	00ad      	lsls	r5, r5, #2
 800bf48:	e004      	b.n	800bf54 <__gethex+0xd4>
 800bf4a:	2400      	movs	r4, #0
 800bf4c:	4625      	mov	r5, r4
 800bf4e:	e7e0      	b.n	800bf12 <__gethex+0x92>
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	d1f7      	bne.n	800bf44 <__gethex+0xc4>
 800bf54:	7833      	ldrb	r3, [r6, #0]
 800bf56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf5a:	2b50      	cmp	r3, #80	; 0x50
 800bf5c:	d13b      	bne.n	800bfd6 <__gethex+0x156>
 800bf5e:	7873      	ldrb	r3, [r6, #1]
 800bf60:	2b2b      	cmp	r3, #43	; 0x2b
 800bf62:	d02c      	beq.n	800bfbe <__gethex+0x13e>
 800bf64:	2b2d      	cmp	r3, #45	; 0x2d
 800bf66:	d02e      	beq.n	800bfc6 <__gethex+0x146>
 800bf68:	1c71      	adds	r1, r6, #1
 800bf6a:	f04f 0900 	mov.w	r9, #0
 800bf6e:	7808      	ldrb	r0, [r1, #0]
 800bf70:	f7ff ff70 	bl	800be54 <__hexdig_fun>
 800bf74:	1e43      	subs	r3, r0, #1
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b18      	cmp	r3, #24
 800bf7a:	d82c      	bhi.n	800bfd6 <__gethex+0x156>
 800bf7c:	f1a0 0210 	sub.w	r2, r0, #16
 800bf80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf84:	f7ff ff66 	bl	800be54 <__hexdig_fun>
 800bf88:	1e43      	subs	r3, r0, #1
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b18      	cmp	r3, #24
 800bf8e:	d91d      	bls.n	800bfcc <__gethex+0x14c>
 800bf90:	f1b9 0f00 	cmp.w	r9, #0
 800bf94:	d000      	beq.n	800bf98 <__gethex+0x118>
 800bf96:	4252      	negs	r2, r2
 800bf98:	4415      	add	r5, r2
 800bf9a:	f8cb 1000 	str.w	r1, [fp]
 800bf9e:	b1e4      	cbz	r4, 800bfda <__gethex+0x15a>
 800bfa0:	9b00      	ldr	r3, [sp, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	bf14      	ite	ne
 800bfa6:	2700      	movne	r7, #0
 800bfa8:	2706      	moveq	r7, #6
 800bfaa:	4638      	mov	r0, r7
 800bfac:	b009      	add	sp, #36	; 0x24
 800bfae:	ecbd 8b02 	vpop	{d8}
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	463e      	mov	r6, r7
 800bfb8:	4625      	mov	r5, r4
 800bfba:	2401      	movs	r4, #1
 800bfbc:	e7ca      	b.n	800bf54 <__gethex+0xd4>
 800bfbe:	f04f 0900 	mov.w	r9, #0
 800bfc2:	1cb1      	adds	r1, r6, #2
 800bfc4:	e7d3      	b.n	800bf6e <__gethex+0xee>
 800bfc6:	f04f 0901 	mov.w	r9, #1
 800bfca:	e7fa      	b.n	800bfc2 <__gethex+0x142>
 800bfcc:	230a      	movs	r3, #10
 800bfce:	fb03 0202 	mla	r2, r3, r2, r0
 800bfd2:	3a10      	subs	r2, #16
 800bfd4:	e7d4      	b.n	800bf80 <__gethex+0x100>
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	e7df      	b.n	800bf9a <__gethex+0x11a>
 800bfda:	1bf3      	subs	r3, r6, r7
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	4621      	mov	r1, r4
 800bfe0:	2b07      	cmp	r3, #7
 800bfe2:	dc0b      	bgt.n	800bffc <__gethex+0x17c>
 800bfe4:	ee18 0a10 	vmov	r0, s16
 800bfe8:	f000 fa70 	bl	800c4cc <_Balloc>
 800bfec:	4604      	mov	r4, r0
 800bfee:	b940      	cbnz	r0, 800c002 <__gethex+0x182>
 800bff0:	4b5d      	ldr	r3, [pc, #372]	; (800c168 <__gethex+0x2e8>)
 800bff2:	4602      	mov	r2, r0
 800bff4:	21de      	movs	r1, #222	; 0xde
 800bff6:	485d      	ldr	r0, [pc, #372]	; (800c16c <__gethex+0x2ec>)
 800bff8:	f7ff f830 	bl	800b05c <__assert_func>
 800bffc:	3101      	adds	r1, #1
 800bffe:	105b      	asrs	r3, r3, #1
 800c000:	e7ee      	b.n	800bfe0 <__gethex+0x160>
 800c002:	f100 0914 	add.w	r9, r0, #20
 800c006:	f04f 0b00 	mov.w	fp, #0
 800c00a:	f1ca 0301 	rsb	r3, sl, #1
 800c00e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c012:	f8cd b000 	str.w	fp, [sp]
 800c016:	9306      	str	r3, [sp, #24]
 800c018:	42b7      	cmp	r7, r6
 800c01a:	d340      	bcc.n	800c09e <__gethex+0x21e>
 800c01c:	9802      	ldr	r0, [sp, #8]
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	f840 3b04 	str.w	r3, [r0], #4
 800c024:	eba0 0009 	sub.w	r0, r0, r9
 800c028:	1080      	asrs	r0, r0, #2
 800c02a:	0146      	lsls	r6, r0, #5
 800c02c:	6120      	str	r0, [r4, #16]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 fb3e 	bl	800c6b0 <__hi0bits>
 800c034:	1a30      	subs	r0, r6, r0
 800c036:	f8d8 6000 	ldr.w	r6, [r8]
 800c03a:	42b0      	cmp	r0, r6
 800c03c:	dd63      	ble.n	800c106 <__gethex+0x286>
 800c03e:	1b87      	subs	r7, r0, r6
 800c040:	4639      	mov	r1, r7
 800c042:	4620      	mov	r0, r4
 800c044:	f000 fee2 	bl	800ce0c <__any_on>
 800c048:	4682      	mov	sl, r0
 800c04a:	b1a8      	cbz	r0, 800c078 <__gethex+0x1f8>
 800c04c:	1e7b      	subs	r3, r7, #1
 800c04e:	1159      	asrs	r1, r3, #5
 800c050:	f003 021f 	and.w	r2, r3, #31
 800c054:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c058:	f04f 0a01 	mov.w	sl, #1
 800c05c:	fa0a f202 	lsl.w	r2, sl, r2
 800c060:	420a      	tst	r2, r1
 800c062:	d009      	beq.n	800c078 <__gethex+0x1f8>
 800c064:	4553      	cmp	r3, sl
 800c066:	dd05      	ble.n	800c074 <__gethex+0x1f4>
 800c068:	1eb9      	subs	r1, r7, #2
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 fece 	bl	800ce0c <__any_on>
 800c070:	2800      	cmp	r0, #0
 800c072:	d145      	bne.n	800c100 <__gethex+0x280>
 800c074:	f04f 0a02 	mov.w	sl, #2
 800c078:	4639      	mov	r1, r7
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff fe98 	bl	800bdb0 <rshift>
 800c080:	443d      	add	r5, r7
 800c082:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c086:	42ab      	cmp	r3, r5
 800c088:	da4c      	bge.n	800c124 <__gethex+0x2a4>
 800c08a:	ee18 0a10 	vmov	r0, s16
 800c08e:	4621      	mov	r1, r4
 800c090:	f000 fa5c 	bl	800c54c <_Bfree>
 800c094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c096:	2300      	movs	r3, #0
 800c098:	6013      	str	r3, [r2, #0]
 800c09a:	27a3      	movs	r7, #163	; 0xa3
 800c09c:	e785      	b.n	800bfaa <__gethex+0x12a>
 800c09e:	1e73      	subs	r3, r6, #1
 800c0a0:	9a05      	ldr	r2, [sp, #20]
 800c0a2:	9303      	str	r3, [sp, #12]
 800c0a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d019      	beq.n	800c0e0 <__gethex+0x260>
 800c0ac:	f1bb 0f20 	cmp.w	fp, #32
 800c0b0:	d107      	bne.n	800c0c2 <__gethex+0x242>
 800c0b2:	9b02      	ldr	r3, [sp, #8]
 800c0b4:	9a00      	ldr	r2, [sp, #0]
 800c0b6:	f843 2b04 	str.w	r2, [r3], #4
 800c0ba:	9302      	str	r3, [sp, #8]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9300      	str	r3, [sp, #0]
 800c0c0:	469b      	mov	fp, r3
 800c0c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c0c6:	f7ff fec5 	bl	800be54 <__hexdig_fun>
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	f000 000f 	and.w	r0, r0, #15
 800c0d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800c0d4:	4303      	orrs	r3, r0
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	f10b 0b04 	add.w	fp, fp, #4
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	e00d      	b.n	800c0fc <__gethex+0x27c>
 800c0e0:	9b03      	ldr	r3, [sp, #12]
 800c0e2:	9a06      	ldr	r2, [sp, #24]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	42bb      	cmp	r3, r7
 800c0e8:	d3e0      	bcc.n	800c0ac <__gethex+0x22c>
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	9901      	ldr	r1, [sp, #4]
 800c0ee:	9307      	str	r3, [sp, #28]
 800c0f0:	4652      	mov	r2, sl
 800c0f2:	f001 fa71 	bl	800d5d8 <strncmp>
 800c0f6:	9b07      	ldr	r3, [sp, #28]
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d1d7      	bne.n	800c0ac <__gethex+0x22c>
 800c0fc:	461e      	mov	r6, r3
 800c0fe:	e78b      	b.n	800c018 <__gethex+0x198>
 800c100:	f04f 0a03 	mov.w	sl, #3
 800c104:	e7b8      	b.n	800c078 <__gethex+0x1f8>
 800c106:	da0a      	bge.n	800c11e <__gethex+0x29e>
 800c108:	1a37      	subs	r7, r6, r0
 800c10a:	4621      	mov	r1, r4
 800c10c:	ee18 0a10 	vmov	r0, s16
 800c110:	463a      	mov	r2, r7
 800c112:	f000 fc37 	bl	800c984 <__lshift>
 800c116:	1bed      	subs	r5, r5, r7
 800c118:	4604      	mov	r4, r0
 800c11a:	f100 0914 	add.w	r9, r0, #20
 800c11e:	f04f 0a00 	mov.w	sl, #0
 800c122:	e7ae      	b.n	800c082 <__gethex+0x202>
 800c124:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c128:	42a8      	cmp	r0, r5
 800c12a:	dd72      	ble.n	800c212 <__gethex+0x392>
 800c12c:	1b45      	subs	r5, r0, r5
 800c12e:	42ae      	cmp	r6, r5
 800c130:	dc36      	bgt.n	800c1a0 <__gethex+0x320>
 800c132:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d02a      	beq.n	800c190 <__gethex+0x310>
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d02c      	beq.n	800c198 <__gethex+0x318>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d11c      	bne.n	800c17c <__gethex+0x2fc>
 800c142:	42ae      	cmp	r6, r5
 800c144:	d11a      	bne.n	800c17c <__gethex+0x2fc>
 800c146:	2e01      	cmp	r6, #1
 800c148:	d112      	bne.n	800c170 <__gethex+0x2f0>
 800c14a:	9a04      	ldr	r2, [sp, #16]
 800c14c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c150:	6013      	str	r3, [r2, #0]
 800c152:	2301      	movs	r3, #1
 800c154:	6123      	str	r3, [r4, #16]
 800c156:	f8c9 3000 	str.w	r3, [r9]
 800c15a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c15c:	2762      	movs	r7, #98	; 0x62
 800c15e:	601c      	str	r4, [r3, #0]
 800c160:	e723      	b.n	800bfaa <__gethex+0x12a>
 800c162:	bf00      	nop
 800c164:	0800e4d8 	.word	0x0800e4d8
 800c168:	0800e461 	.word	0x0800e461
 800c16c:	0800e472 	.word	0x0800e472
 800c170:	1e71      	subs	r1, r6, #1
 800c172:	4620      	mov	r0, r4
 800c174:	f000 fe4a 	bl	800ce0c <__any_on>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d1e6      	bne.n	800c14a <__gethex+0x2ca>
 800c17c:	ee18 0a10 	vmov	r0, s16
 800c180:	4621      	mov	r1, r4
 800c182:	f000 f9e3 	bl	800c54c <_Bfree>
 800c186:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c188:	2300      	movs	r3, #0
 800c18a:	6013      	str	r3, [r2, #0]
 800c18c:	2750      	movs	r7, #80	; 0x50
 800c18e:	e70c      	b.n	800bfaa <__gethex+0x12a>
 800c190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1f2      	bne.n	800c17c <__gethex+0x2fc>
 800c196:	e7d8      	b.n	800c14a <__gethex+0x2ca>
 800c198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1d5      	bne.n	800c14a <__gethex+0x2ca>
 800c19e:	e7ed      	b.n	800c17c <__gethex+0x2fc>
 800c1a0:	1e6f      	subs	r7, r5, #1
 800c1a2:	f1ba 0f00 	cmp.w	sl, #0
 800c1a6:	d131      	bne.n	800c20c <__gethex+0x38c>
 800c1a8:	b127      	cbz	r7, 800c1b4 <__gethex+0x334>
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 fe2d 	bl	800ce0c <__any_on>
 800c1b2:	4682      	mov	sl, r0
 800c1b4:	117b      	asrs	r3, r7, #5
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c1bc:	f007 071f 	and.w	r7, r7, #31
 800c1c0:	fa01 f707 	lsl.w	r7, r1, r7
 800c1c4:	421f      	tst	r7, r3
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	bf18      	it	ne
 800c1cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800c1d0:	1b76      	subs	r6, r6, r5
 800c1d2:	f7ff fded 	bl	800bdb0 <rshift>
 800c1d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c1da:	2702      	movs	r7, #2
 800c1dc:	f1ba 0f00 	cmp.w	sl, #0
 800c1e0:	d048      	beq.n	800c274 <__gethex+0x3f4>
 800c1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d015      	beq.n	800c216 <__gethex+0x396>
 800c1ea:	2b03      	cmp	r3, #3
 800c1ec:	d017      	beq.n	800c21e <__gethex+0x39e>
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d109      	bne.n	800c206 <__gethex+0x386>
 800c1f2:	f01a 0f02 	tst.w	sl, #2
 800c1f6:	d006      	beq.n	800c206 <__gethex+0x386>
 800c1f8:	f8d9 0000 	ldr.w	r0, [r9]
 800c1fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800c200:	f01a 0f01 	tst.w	sl, #1
 800c204:	d10e      	bne.n	800c224 <__gethex+0x3a4>
 800c206:	f047 0710 	orr.w	r7, r7, #16
 800c20a:	e033      	b.n	800c274 <__gethex+0x3f4>
 800c20c:	f04f 0a01 	mov.w	sl, #1
 800c210:	e7d0      	b.n	800c1b4 <__gethex+0x334>
 800c212:	2701      	movs	r7, #1
 800c214:	e7e2      	b.n	800c1dc <__gethex+0x35c>
 800c216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c218:	f1c3 0301 	rsb	r3, r3, #1
 800c21c:	9315      	str	r3, [sp, #84]	; 0x54
 800c21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c220:	2b00      	cmp	r3, #0
 800c222:	d0f0      	beq.n	800c206 <__gethex+0x386>
 800c224:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c228:	f104 0314 	add.w	r3, r4, #20
 800c22c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c230:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c234:	f04f 0c00 	mov.w	ip, #0
 800c238:	4618      	mov	r0, r3
 800c23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c23e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c242:	d01c      	beq.n	800c27e <__gethex+0x3fe>
 800c244:	3201      	adds	r2, #1
 800c246:	6002      	str	r2, [r0, #0]
 800c248:	2f02      	cmp	r7, #2
 800c24a:	f104 0314 	add.w	r3, r4, #20
 800c24e:	d13f      	bne.n	800c2d0 <__gethex+0x450>
 800c250:	f8d8 2000 	ldr.w	r2, [r8]
 800c254:	3a01      	subs	r2, #1
 800c256:	42b2      	cmp	r2, r6
 800c258:	d10a      	bne.n	800c270 <__gethex+0x3f0>
 800c25a:	1171      	asrs	r1, r6, #5
 800c25c:	2201      	movs	r2, #1
 800c25e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c262:	f006 061f 	and.w	r6, r6, #31
 800c266:	fa02 f606 	lsl.w	r6, r2, r6
 800c26a:	421e      	tst	r6, r3
 800c26c:	bf18      	it	ne
 800c26e:	4617      	movne	r7, r2
 800c270:	f047 0720 	orr.w	r7, r7, #32
 800c274:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c276:	601c      	str	r4, [r3, #0]
 800c278:	9b04      	ldr	r3, [sp, #16]
 800c27a:	601d      	str	r5, [r3, #0]
 800c27c:	e695      	b.n	800bfaa <__gethex+0x12a>
 800c27e:	4299      	cmp	r1, r3
 800c280:	f843 cc04 	str.w	ip, [r3, #-4]
 800c284:	d8d8      	bhi.n	800c238 <__gethex+0x3b8>
 800c286:	68a3      	ldr	r3, [r4, #8]
 800c288:	459b      	cmp	fp, r3
 800c28a:	db19      	blt.n	800c2c0 <__gethex+0x440>
 800c28c:	6861      	ldr	r1, [r4, #4]
 800c28e:	ee18 0a10 	vmov	r0, s16
 800c292:	3101      	adds	r1, #1
 800c294:	f000 f91a 	bl	800c4cc <_Balloc>
 800c298:	4681      	mov	r9, r0
 800c29a:	b918      	cbnz	r0, 800c2a4 <__gethex+0x424>
 800c29c:	4b1a      	ldr	r3, [pc, #104]	; (800c308 <__gethex+0x488>)
 800c29e:	4602      	mov	r2, r0
 800c2a0:	2184      	movs	r1, #132	; 0x84
 800c2a2:	e6a8      	b.n	800bff6 <__gethex+0x176>
 800c2a4:	6922      	ldr	r2, [r4, #16]
 800c2a6:	3202      	adds	r2, #2
 800c2a8:	f104 010c 	add.w	r1, r4, #12
 800c2ac:	0092      	lsls	r2, r2, #2
 800c2ae:	300c      	adds	r0, #12
 800c2b0:	f7fd faf8 	bl	80098a4 <memcpy>
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	ee18 0a10 	vmov	r0, s16
 800c2ba:	f000 f947 	bl	800c54c <_Bfree>
 800c2be:	464c      	mov	r4, r9
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2c8:	6122      	str	r2, [r4, #16]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	615a      	str	r2, [r3, #20]
 800c2ce:	e7bb      	b.n	800c248 <__gethex+0x3c8>
 800c2d0:	6922      	ldr	r2, [r4, #16]
 800c2d2:	455a      	cmp	r2, fp
 800c2d4:	dd0b      	ble.n	800c2ee <__gethex+0x46e>
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f7ff fd69 	bl	800bdb0 <rshift>
 800c2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2e2:	3501      	adds	r5, #1
 800c2e4:	42ab      	cmp	r3, r5
 800c2e6:	f6ff aed0 	blt.w	800c08a <__gethex+0x20a>
 800c2ea:	2701      	movs	r7, #1
 800c2ec:	e7c0      	b.n	800c270 <__gethex+0x3f0>
 800c2ee:	f016 061f 	ands.w	r6, r6, #31
 800c2f2:	d0fa      	beq.n	800c2ea <__gethex+0x46a>
 800c2f4:	4453      	add	r3, sl
 800c2f6:	f1c6 0620 	rsb	r6, r6, #32
 800c2fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c2fe:	f000 f9d7 	bl	800c6b0 <__hi0bits>
 800c302:	42b0      	cmp	r0, r6
 800c304:	dbe7      	blt.n	800c2d6 <__gethex+0x456>
 800c306:	e7f0      	b.n	800c2ea <__gethex+0x46a>
 800c308:	0800e461 	.word	0x0800e461

0800c30c <L_shift>:
 800c30c:	f1c2 0208 	rsb	r2, r2, #8
 800c310:	0092      	lsls	r2, r2, #2
 800c312:	b570      	push	{r4, r5, r6, lr}
 800c314:	f1c2 0620 	rsb	r6, r2, #32
 800c318:	6843      	ldr	r3, [r0, #4]
 800c31a:	6804      	ldr	r4, [r0, #0]
 800c31c:	fa03 f506 	lsl.w	r5, r3, r6
 800c320:	432c      	orrs	r4, r5
 800c322:	40d3      	lsrs	r3, r2
 800c324:	6004      	str	r4, [r0, #0]
 800c326:	f840 3f04 	str.w	r3, [r0, #4]!
 800c32a:	4288      	cmp	r0, r1
 800c32c:	d3f4      	bcc.n	800c318 <L_shift+0xc>
 800c32e:	bd70      	pop	{r4, r5, r6, pc}

0800c330 <__match>:
 800c330:	b530      	push	{r4, r5, lr}
 800c332:	6803      	ldr	r3, [r0, #0]
 800c334:	3301      	adds	r3, #1
 800c336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c33a:	b914      	cbnz	r4, 800c342 <__match+0x12>
 800c33c:	6003      	str	r3, [r0, #0]
 800c33e:	2001      	movs	r0, #1
 800c340:	bd30      	pop	{r4, r5, pc}
 800c342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c346:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c34a:	2d19      	cmp	r5, #25
 800c34c:	bf98      	it	ls
 800c34e:	3220      	addls	r2, #32
 800c350:	42a2      	cmp	r2, r4
 800c352:	d0f0      	beq.n	800c336 <__match+0x6>
 800c354:	2000      	movs	r0, #0
 800c356:	e7f3      	b.n	800c340 <__match+0x10>

0800c358 <__hexnan>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	680b      	ldr	r3, [r1, #0]
 800c35e:	115e      	asrs	r6, r3, #5
 800c360:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c364:	f013 031f 	ands.w	r3, r3, #31
 800c368:	b087      	sub	sp, #28
 800c36a:	bf18      	it	ne
 800c36c:	3604      	addne	r6, #4
 800c36e:	2500      	movs	r5, #0
 800c370:	1f37      	subs	r7, r6, #4
 800c372:	4690      	mov	r8, r2
 800c374:	6802      	ldr	r2, [r0, #0]
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	4682      	mov	sl, r0
 800c37a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c37e:	46b9      	mov	r9, r7
 800c380:	463c      	mov	r4, r7
 800c382:	9502      	str	r5, [sp, #8]
 800c384:	46ab      	mov	fp, r5
 800c386:	7851      	ldrb	r1, [r2, #1]
 800c388:	1c53      	adds	r3, r2, #1
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	b341      	cbz	r1, 800c3e0 <__hexnan+0x88>
 800c38e:	4608      	mov	r0, r1
 800c390:	9205      	str	r2, [sp, #20]
 800c392:	9104      	str	r1, [sp, #16]
 800c394:	f7ff fd5e 	bl	800be54 <__hexdig_fun>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d14f      	bne.n	800c43c <__hexnan+0xe4>
 800c39c:	9904      	ldr	r1, [sp, #16]
 800c39e:	9a05      	ldr	r2, [sp, #20]
 800c3a0:	2920      	cmp	r1, #32
 800c3a2:	d818      	bhi.n	800c3d6 <__hexnan+0x7e>
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	459b      	cmp	fp, r3
 800c3a8:	dd13      	ble.n	800c3d2 <__hexnan+0x7a>
 800c3aa:	454c      	cmp	r4, r9
 800c3ac:	d206      	bcs.n	800c3bc <__hexnan+0x64>
 800c3ae:	2d07      	cmp	r5, #7
 800c3b0:	dc04      	bgt.n	800c3bc <__hexnan+0x64>
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff ffa8 	bl	800c30c <L_shift>
 800c3bc:	4544      	cmp	r4, r8
 800c3be:	d950      	bls.n	800c462 <__hexnan+0x10a>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f1a4 0904 	sub.w	r9, r4, #4
 800c3c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3ca:	f8cd b008 	str.w	fp, [sp, #8]
 800c3ce:	464c      	mov	r4, r9
 800c3d0:	461d      	mov	r5, r3
 800c3d2:	9a03      	ldr	r2, [sp, #12]
 800c3d4:	e7d7      	b.n	800c386 <__hexnan+0x2e>
 800c3d6:	2929      	cmp	r1, #41	; 0x29
 800c3d8:	d156      	bne.n	800c488 <__hexnan+0x130>
 800c3da:	3202      	adds	r2, #2
 800c3dc:	f8ca 2000 	str.w	r2, [sl]
 800c3e0:	f1bb 0f00 	cmp.w	fp, #0
 800c3e4:	d050      	beq.n	800c488 <__hexnan+0x130>
 800c3e6:	454c      	cmp	r4, r9
 800c3e8:	d206      	bcs.n	800c3f8 <__hexnan+0xa0>
 800c3ea:	2d07      	cmp	r5, #7
 800c3ec:	dc04      	bgt.n	800c3f8 <__hexnan+0xa0>
 800c3ee:	462a      	mov	r2, r5
 800c3f0:	4649      	mov	r1, r9
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f7ff ff8a 	bl	800c30c <L_shift>
 800c3f8:	4544      	cmp	r4, r8
 800c3fa:	d934      	bls.n	800c466 <__hexnan+0x10e>
 800c3fc:	f1a8 0204 	sub.w	r2, r8, #4
 800c400:	4623      	mov	r3, r4
 800c402:	f853 1b04 	ldr.w	r1, [r3], #4
 800c406:	f842 1f04 	str.w	r1, [r2, #4]!
 800c40a:	429f      	cmp	r7, r3
 800c40c:	d2f9      	bcs.n	800c402 <__hexnan+0xaa>
 800c40e:	1b3b      	subs	r3, r7, r4
 800c410:	f023 0303 	bic.w	r3, r3, #3
 800c414:	3304      	adds	r3, #4
 800c416:	3401      	adds	r4, #1
 800c418:	3e03      	subs	r6, #3
 800c41a:	42b4      	cmp	r4, r6
 800c41c:	bf88      	it	hi
 800c41e:	2304      	movhi	r3, #4
 800c420:	4443      	add	r3, r8
 800c422:	2200      	movs	r2, #0
 800c424:	f843 2b04 	str.w	r2, [r3], #4
 800c428:	429f      	cmp	r7, r3
 800c42a:	d2fb      	bcs.n	800c424 <__hexnan+0xcc>
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	b91b      	cbnz	r3, 800c438 <__hexnan+0xe0>
 800c430:	4547      	cmp	r7, r8
 800c432:	d127      	bne.n	800c484 <__hexnan+0x12c>
 800c434:	2301      	movs	r3, #1
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	2005      	movs	r0, #5
 800c43a:	e026      	b.n	800c48a <__hexnan+0x132>
 800c43c:	3501      	adds	r5, #1
 800c43e:	2d08      	cmp	r5, #8
 800c440:	f10b 0b01 	add.w	fp, fp, #1
 800c444:	dd06      	ble.n	800c454 <__hexnan+0xfc>
 800c446:	4544      	cmp	r4, r8
 800c448:	d9c3      	bls.n	800c3d2 <__hexnan+0x7a>
 800c44a:	2300      	movs	r3, #0
 800c44c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c450:	2501      	movs	r5, #1
 800c452:	3c04      	subs	r4, #4
 800c454:	6822      	ldr	r2, [r4, #0]
 800c456:	f000 000f 	and.w	r0, r0, #15
 800c45a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c45e:	6022      	str	r2, [r4, #0]
 800c460:	e7b7      	b.n	800c3d2 <__hexnan+0x7a>
 800c462:	2508      	movs	r5, #8
 800c464:	e7b5      	b.n	800c3d2 <__hexnan+0x7a>
 800c466:	9b01      	ldr	r3, [sp, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d0df      	beq.n	800c42c <__hexnan+0xd4>
 800c46c:	f04f 32ff 	mov.w	r2, #4294967295
 800c470:	f1c3 0320 	rsb	r3, r3, #32
 800c474:	fa22 f303 	lsr.w	r3, r2, r3
 800c478:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c47c:	401a      	ands	r2, r3
 800c47e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c482:	e7d3      	b.n	800c42c <__hexnan+0xd4>
 800c484:	3f04      	subs	r7, #4
 800c486:	e7d1      	b.n	800c42c <__hexnan+0xd4>
 800c488:	2004      	movs	r0, #4
 800c48a:	b007      	add	sp, #28
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c490 <_localeconv_r>:
 800c490:	4800      	ldr	r0, [pc, #0]	; (800c494 <_localeconv_r+0x4>)
 800c492:	4770      	bx	lr
 800c494:	20000164 	.word	0x20000164

0800c498 <malloc>:
 800c498:	4b02      	ldr	r3, [pc, #8]	; (800c4a4 <malloc+0xc>)
 800c49a:	4601      	mov	r1, r0
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	f000 bd59 	b.w	800cf54 <_malloc_r>
 800c4a2:	bf00      	nop
 800c4a4:	2000000c 	.word	0x2000000c

0800c4a8 <__ascii_mbtowc>:
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	b901      	cbnz	r1, 800c4ae <__ascii_mbtowc+0x6>
 800c4ac:	a901      	add	r1, sp, #4
 800c4ae:	b142      	cbz	r2, 800c4c2 <__ascii_mbtowc+0x1a>
 800c4b0:	b14b      	cbz	r3, 800c4c6 <__ascii_mbtowc+0x1e>
 800c4b2:	7813      	ldrb	r3, [r2, #0]
 800c4b4:	600b      	str	r3, [r1, #0]
 800c4b6:	7812      	ldrb	r2, [r2, #0]
 800c4b8:	1e10      	subs	r0, r2, #0
 800c4ba:	bf18      	it	ne
 800c4bc:	2001      	movne	r0, #1
 800c4be:	b002      	add	sp, #8
 800c4c0:	4770      	bx	lr
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	e7fb      	b.n	800c4be <__ascii_mbtowc+0x16>
 800c4c6:	f06f 0001 	mvn.w	r0, #1
 800c4ca:	e7f8      	b.n	800c4be <__ascii_mbtowc+0x16>

0800c4cc <_Balloc>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	b976      	cbnz	r6, 800c4f4 <_Balloc+0x28>
 800c4d6:	2010      	movs	r0, #16
 800c4d8:	f7ff ffde 	bl	800c498 <malloc>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	6260      	str	r0, [r4, #36]	; 0x24
 800c4e0:	b920      	cbnz	r0, 800c4ec <_Balloc+0x20>
 800c4e2:	4b18      	ldr	r3, [pc, #96]	; (800c544 <_Balloc+0x78>)
 800c4e4:	4818      	ldr	r0, [pc, #96]	; (800c548 <_Balloc+0x7c>)
 800c4e6:	2166      	movs	r1, #102	; 0x66
 800c4e8:	f7fe fdb8 	bl	800b05c <__assert_func>
 800c4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f0:	6006      	str	r6, [r0, #0]
 800c4f2:	60c6      	str	r6, [r0, #12]
 800c4f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4f6:	68f3      	ldr	r3, [r6, #12]
 800c4f8:	b183      	cbz	r3, 800c51c <_Balloc+0x50>
 800c4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c502:	b9b8      	cbnz	r0, 800c534 <_Balloc+0x68>
 800c504:	2101      	movs	r1, #1
 800c506:	fa01 f605 	lsl.w	r6, r1, r5
 800c50a:	1d72      	adds	r2, r6, #5
 800c50c:	0092      	lsls	r2, r2, #2
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 fc9d 	bl	800ce4e <_calloc_r>
 800c514:	b160      	cbz	r0, 800c530 <_Balloc+0x64>
 800c516:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c51a:	e00e      	b.n	800c53a <_Balloc+0x6e>
 800c51c:	2221      	movs	r2, #33	; 0x21
 800c51e:	2104      	movs	r1, #4
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fc94 	bl	800ce4e <_calloc_r>
 800c526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c528:	60f0      	str	r0, [r6, #12]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1e4      	bne.n	800c4fa <_Balloc+0x2e>
 800c530:	2000      	movs	r0, #0
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	6802      	ldr	r2, [r0, #0]
 800c536:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c53a:	2300      	movs	r3, #0
 800c53c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c540:	e7f7      	b.n	800c532 <_Balloc+0x66>
 800c542:	bf00      	nop
 800c544:	0800e248 	.word	0x0800e248
 800c548:	0800e4ec 	.word	0x0800e4ec

0800c54c <_Bfree>:
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c550:	4605      	mov	r5, r0
 800c552:	460c      	mov	r4, r1
 800c554:	b976      	cbnz	r6, 800c574 <_Bfree+0x28>
 800c556:	2010      	movs	r0, #16
 800c558:	f7ff ff9e 	bl	800c498 <malloc>
 800c55c:	4602      	mov	r2, r0
 800c55e:	6268      	str	r0, [r5, #36]	; 0x24
 800c560:	b920      	cbnz	r0, 800c56c <_Bfree+0x20>
 800c562:	4b09      	ldr	r3, [pc, #36]	; (800c588 <_Bfree+0x3c>)
 800c564:	4809      	ldr	r0, [pc, #36]	; (800c58c <_Bfree+0x40>)
 800c566:	218a      	movs	r1, #138	; 0x8a
 800c568:	f7fe fd78 	bl	800b05c <__assert_func>
 800c56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c570:	6006      	str	r6, [r0, #0]
 800c572:	60c6      	str	r6, [r0, #12]
 800c574:	b13c      	cbz	r4, 800c586 <_Bfree+0x3a>
 800c576:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c578:	6862      	ldr	r2, [r4, #4]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c580:	6021      	str	r1, [r4, #0]
 800c582:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c586:	bd70      	pop	{r4, r5, r6, pc}
 800c588:	0800e248 	.word	0x0800e248
 800c58c:	0800e4ec 	.word	0x0800e4ec

0800c590 <__multadd>:
 800c590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c594:	690d      	ldr	r5, [r1, #16]
 800c596:	4607      	mov	r7, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	461e      	mov	r6, r3
 800c59c:	f101 0c14 	add.w	ip, r1, #20
 800c5a0:	2000      	movs	r0, #0
 800c5a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c5a6:	b299      	uxth	r1, r3
 800c5a8:	fb02 6101 	mla	r1, r2, r1, r6
 800c5ac:	0c1e      	lsrs	r6, r3, #16
 800c5ae:	0c0b      	lsrs	r3, r1, #16
 800c5b0:	fb02 3306 	mla	r3, r2, r6, r3
 800c5b4:	b289      	uxth	r1, r1
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5bc:	4285      	cmp	r5, r0
 800c5be:	f84c 1b04 	str.w	r1, [ip], #4
 800c5c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5c6:	dcec      	bgt.n	800c5a2 <__multadd+0x12>
 800c5c8:	b30e      	cbz	r6, 800c60e <__multadd+0x7e>
 800c5ca:	68a3      	ldr	r3, [r4, #8]
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	dc19      	bgt.n	800c604 <__multadd+0x74>
 800c5d0:	6861      	ldr	r1, [r4, #4]
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	3101      	adds	r1, #1
 800c5d6:	f7ff ff79 	bl	800c4cc <_Balloc>
 800c5da:	4680      	mov	r8, r0
 800c5dc:	b928      	cbnz	r0, 800c5ea <__multadd+0x5a>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	4b0c      	ldr	r3, [pc, #48]	; (800c614 <__multadd+0x84>)
 800c5e2:	480d      	ldr	r0, [pc, #52]	; (800c618 <__multadd+0x88>)
 800c5e4:	21b5      	movs	r1, #181	; 0xb5
 800c5e6:	f7fe fd39 	bl	800b05c <__assert_func>
 800c5ea:	6922      	ldr	r2, [r4, #16]
 800c5ec:	3202      	adds	r2, #2
 800c5ee:	f104 010c 	add.w	r1, r4, #12
 800c5f2:	0092      	lsls	r2, r2, #2
 800c5f4:	300c      	adds	r0, #12
 800c5f6:	f7fd f955 	bl	80098a4 <memcpy>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4638      	mov	r0, r7
 800c5fe:	f7ff ffa5 	bl	800c54c <_Bfree>
 800c602:	4644      	mov	r4, r8
 800c604:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c608:	3501      	adds	r5, #1
 800c60a:	615e      	str	r6, [r3, #20]
 800c60c:	6125      	str	r5, [r4, #16]
 800c60e:	4620      	mov	r0, r4
 800c610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c614:	0800e461 	.word	0x0800e461
 800c618:	0800e4ec 	.word	0x0800e4ec

0800c61c <__s2b>:
 800c61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c620:	460c      	mov	r4, r1
 800c622:	4615      	mov	r5, r2
 800c624:	461f      	mov	r7, r3
 800c626:	2209      	movs	r2, #9
 800c628:	3308      	adds	r3, #8
 800c62a:	4606      	mov	r6, r0
 800c62c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c630:	2100      	movs	r1, #0
 800c632:	2201      	movs	r2, #1
 800c634:	429a      	cmp	r2, r3
 800c636:	db09      	blt.n	800c64c <__s2b+0x30>
 800c638:	4630      	mov	r0, r6
 800c63a:	f7ff ff47 	bl	800c4cc <_Balloc>
 800c63e:	b940      	cbnz	r0, 800c652 <__s2b+0x36>
 800c640:	4602      	mov	r2, r0
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <__s2b+0x8c>)
 800c644:	4819      	ldr	r0, [pc, #100]	; (800c6ac <__s2b+0x90>)
 800c646:	21ce      	movs	r1, #206	; 0xce
 800c648:	f7fe fd08 	bl	800b05c <__assert_func>
 800c64c:	0052      	lsls	r2, r2, #1
 800c64e:	3101      	adds	r1, #1
 800c650:	e7f0      	b.n	800c634 <__s2b+0x18>
 800c652:	9b08      	ldr	r3, [sp, #32]
 800c654:	6143      	str	r3, [r0, #20]
 800c656:	2d09      	cmp	r5, #9
 800c658:	f04f 0301 	mov.w	r3, #1
 800c65c:	6103      	str	r3, [r0, #16]
 800c65e:	dd16      	ble.n	800c68e <__s2b+0x72>
 800c660:	f104 0909 	add.w	r9, r4, #9
 800c664:	46c8      	mov	r8, r9
 800c666:	442c      	add	r4, r5
 800c668:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c66c:	4601      	mov	r1, r0
 800c66e:	3b30      	subs	r3, #48	; 0x30
 800c670:	220a      	movs	r2, #10
 800c672:	4630      	mov	r0, r6
 800c674:	f7ff ff8c 	bl	800c590 <__multadd>
 800c678:	45a0      	cmp	r8, r4
 800c67a:	d1f5      	bne.n	800c668 <__s2b+0x4c>
 800c67c:	f1a5 0408 	sub.w	r4, r5, #8
 800c680:	444c      	add	r4, r9
 800c682:	1b2d      	subs	r5, r5, r4
 800c684:	1963      	adds	r3, r4, r5
 800c686:	42bb      	cmp	r3, r7
 800c688:	db04      	blt.n	800c694 <__s2b+0x78>
 800c68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68e:	340a      	adds	r4, #10
 800c690:	2509      	movs	r5, #9
 800c692:	e7f6      	b.n	800c682 <__s2b+0x66>
 800c694:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c698:	4601      	mov	r1, r0
 800c69a:	3b30      	subs	r3, #48	; 0x30
 800c69c:	220a      	movs	r2, #10
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f7ff ff76 	bl	800c590 <__multadd>
 800c6a4:	e7ee      	b.n	800c684 <__s2b+0x68>
 800c6a6:	bf00      	nop
 800c6a8:	0800e461 	.word	0x0800e461
 800c6ac:	0800e4ec 	.word	0x0800e4ec

0800c6b0 <__hi0bits>:
 800c6b0:	0c03      	lsrs	r3, r0, #16
 800c6b2:	041b      	lsls	r3, r3, #16
 800c6b4:	b9d3      	cbnz	r3, 800c6ec <__hi0bits+0x3c>
 800c6b6:	0400      	lsls	r0, r0, #16
 800c6b8:	2310      	movs	r3, #16
 800c6ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6be:	bf04      	itt	eq
 800c6c0:	0200      	lsleq	r0, r0, #8
 800c6c2:	3308      	addeq	r3, #8
 800c6c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6c8:	bf04      	itt	eq
 800c6ca:	0100      	lsleq	r0, r0, #4
 800c6cc:	3304      	addeq	r3, #4
 800c6ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6d2:	bf04      	itt	eq
 800c6d4:	0080      	lsleq	r0, r0, #2
 800c6d6:	3302      	addeq	r3, #2
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	db05      	blt.n	800c6e8 <__hi0bits+0x38>
 800c6dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6e0:	f103 0301 	add.w	r3, r3, #1
 800c6e4:	bf08      	it	eq
 800c6e6:	2320      	moveq	r3, #32
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	4770      	bx	lr
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e7e4      	b.n	800c6ba <__hi0bits+0xa>

0800c6f0 <__lo0bits>:
 800c6f0:	6803      	ldr	r3, [r0, #0]
 800c6f2:	f013 0207 	ands.w	r2, r3, #7
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	d00b      	beq.n	800c712 <__lo0bits+0x22>
 800c6fa:	07da      	lsls	r2, r3, #31
 800c6fc:	d423      	bmi.n	800c746 <__lo0bits+0x56>
 800c6fe:	0798      	lsls	r0, r3, #30
 800c700:	bf49      	itett	mi
 800c702:	085b      	lsrmi	r3, r3, #1
 800c704:	089b      	lsrpl	r3, r3, #2
 800c706:	2001      	movmi	r0, #1
 800c708:	600b      	strmi	r3, [r1, #0]
 800c70a:	bf5c      	itt	pl
 800c70c:	600b      	strpl	r3, [r1, #0]
 800c70e:	2002      	movpl	r0, #2
 800c710:	4770      	bx	lr
 800c712:	b298      	uxth	r0, r3
 800c714:	b9a8      	cbnz	r0, 800c742 <__lo0bits+0x52>
 800c716:	0c1b      	lsrs	r3, r3, #16
 800c718:	2010      	movs	r0, #16
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	b90a      	cbnz	r2, 800c722 <__lo0bits+0x32>
 800c71e:	3008      	adds	r0, #8
 800c720:	0a1b      	lsrs	r3, r3, #8
 800c722:	071a      	lsls	r2, r3, #28
 800c724:	bf04      	itt	eq
 800c726:	091b      	lsreq	r3, r3, #4
 800c728:	3004      	addeq	r0, #4
 800c72a:	079a      	lsls	r2, r3, #30
 800c72c:	bf04      	itt	eq
 800c72e:	089b      	lsreq	r3, r3, #2
 800c730:	3002      	addeq	r0, #2
 800c732:	07da      	lsls	r2, r3, #31
 800c734:	d403      	bmi.n	800c73e <__lo0bits+0x4e>
 800c736:	085b      	lsrs	r3, r3, #1
 800c738:	f100 0001 	add.w	r0, r0, #1
 800c73c:	d005      	beq.n	800c74a <__lo0bits+0x5a>
 800c73e:	600b      	str	r3, [r1, #0]
 800c740:	4770      	bx	lr
 800c742:	4610      	mov	r0, r2
 800c744:	e7e9      	b.n	800c71a <__lo0bits+0x2a>
 800c746:	2000      	movs	r0, #0
 800c748:	4770      	bx	lr
 800c74a:	2020      	movs	r0, #32
 800c74c:	4770      	bx	lr
	...

0800c750 <__i2b>:
 800c750:	b510      	push	{r4, lr}
 800c752:	460c      	mov	r4, r1
 800c754:	2101      	movs	r1, #1
 800c756:	f7ff feb9 	bl	800c4cc <_Balloc>
 800c75a:	4602      	mov	r2, r0
 800c75c:	b928      	cbnz	r0, 800c76a <__i2b+0x1a>
 800c75e:	4b05      	ldr	r3, [pc, #20]	; (800c774 <__i2b+0x24>)
 800c760:	4805      	ldr	r0, [pc, #20]	; (800c778 <__i2b+0x28>)
 800c762:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c766:	f7fe fc79 	bl	800b05c <__assert_func>
 800c76a:	2301      	movs	r3, #1
 800c76c:	6144      	str	r4, [r0, #20]
 800c76e:	6103      	str	r3, [r0, #16]
 800c770:	bd10      	pop	{r4, pc}
 800c772:	bf00      	nop
 800c774:	0800e461 	.word	0x0800e461
 800c778:	0800e4ec 	.word	0x0800e4ec

0800c77c <__multiply>:
 800c77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c780:	4691      	mov	r9, r2
 800c782:	690a      	ldr	r2, [r1, #16]
 800c784:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c788:	429a      	cmp	r2, r3
 800c78a:	bfb8      	it	lt
 800c78c:	460b      	movlt	r3, r1
 800c78e:	460c      	mov	r4, r1
 800c790:	bfbc      	itt	lt
 800c792:	464c      	movlt	r4, r9
 800c794:	4699      	movlt	r9, r3
 800c796:	6927      	ldr	r7, [r4, #16]
 800c798:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c79c:	68a3      	ldr	r3, [r4, #8]
 800c79e:	6861      	ldr	r1, [r4, #4]
 800c7a0:	eb07 060a 	add.w	r6, r7, sl
 800c7a4:	42b3      	cmp	r3, r6
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	bfb8      	it	lt
 800c7aa:	3101      	addlt	r1, #1
 800c7ac:	f7ff fe8e 	bl	800c4cc <_Balloc>
 800c7b0:	b930      	cbnz	r0, 800c7c0 <__multiply+0x44>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	4b44      	ldr	r3, [pc, #272]	; (800c8c8 <__multiply+0x14c>)
 800c7b6:	4845      	ldr	r0, [pc, #276]	; (800c8cc <__multiply+0x150>)
 800c7b8:	f240 115d 	movw	r1, #349	; 0x15d
 800c7bc:	f7fe fc4e 	bl	800b05c <__assert_func>
 800c7c0:	f100 0514 	add.w	r5, r0, #20
 800c7c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7c8:	462b      	mov	r3, r5
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	4543      	cmp	r3, r8
 800c7ce:	d321      	bcc.n	800c814 <__multiply+0x98>
 800c7d0:	f104 0314 	add.w	r3, r4, #20
 800c7d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7d8:	f109 0314 	add.w	r3, r9, #20
 800c7dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7e0:	9202      	str	r2, [sp, #8]
 800c7e2:	1b3a      	subs	r2, r7, r4
 800c7e4:	3a15      	subs	r2, #21
 800c7e6:	f022 0203 	bic.w	r2, r2, #3
 800c7ea:	3204      	adds	r2, #4
 800c7ec:	f104 0115 	add.w	r1, r4, #21
 800c7f0:	428f      	cmp	r7, r1
 800c7f2:	bf38      	it	cc
 800c7f4:	2204      	movcc	r2, #4
 800c7f6:	9201      	str	r2, [sp, #4]
 800c7f8:	9a02      	ldr	r2, [sp, #8]
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d80c      	bhi.n	800c81a <__multiply+0x9e>
 800c800:	2e00      	cmp	r6, #0
 800c802:	dd03      	ble.n	800c80c <__multiply+0x90>
 800c804:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d05a      	beq.n	800c8c2 <__multiply+0x146>
 800c80c:	6106      	str	r6, [r0, #16]
 800c80e:	b005      	add	sp, #20
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	f843 2b04 	str.w	r2, [r3], #4
 800c818:	e7d8      	b.n	800c7cc <__multiply+0x50>
 800c81a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c81e:	f1ba 0f00 	cmp.w	sl, #0
 800c822:	d024      	beq.n	800c86e <__multiply+0xf2>
 800c824:	f104 0e14 	add.w	lr, r4, #20
 800c828:	46a9      	mov	r9, r5
 800c82a:	f04f 0c00 	mov.w	ip, #0
 800c82e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c832:	f8d9 1000 	ldr.w	r1, [r9]
 800c836:	fa1f fb82 	uxth.w	fp, r2
 800c83a:	b289      	uxth	r1, r1
 800c83c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c840:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c844:	f8d9 2000 	ldr.w	r2, [r9]
 800c848:	4461      	add	r1, ip
 800c84a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c84e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c852:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c856:	b289      	uxth	r1, r1
 800c858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c85c:	4577      	cmp	r7, lr
 800c85e:	f849 1b04 	str.w	r1, [r9], #4
 800c862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c866:	d8e2      	bhi.n	800c82e <__multiply+0xb2>
 800c868:	9a01      	ldr	r2, [sp, #4]
 800c86a:	f845 c002 	str.w	ip, [r5, r2]
 800c86e:	9a03      	ldr	r2, [sp, #12]
 800c870:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c874:	3304      	adds	r3, #4
 800c876:	f1b9 0f00 	cmp.w	r9, #0
 800c87a:	d020      	beq.n	800c8be <__multiply+0x142>
 800c87c:	6829      	ldr	r1, [r5, #0]
 800c87e:	f104 0c14 	add.w	ip, r4, #20
 800c882:	46ae      	mov	lr, r5
 800c884:	f04f 0a00 	mov.w	sl, #0
 800c888:	f8bc b000 	ldrh.w	fp, [ip]
 800c88c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c890:	fb09 220b 	mla	r2, r9, fp, r2
 800c894:	4492      	add	sl, r2
 800c896:	b289      	uxth	r1, r1
 800c898:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c89c:	f84e 1b04 	str.w	r1, [lr], #4
 800c8a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c8a4:	f8be 1000 	ldrh.w	r1, [lr]
 800c8a8:	0c12      	lsrs	r2, r2, #16
 800c8aa:	fb09 1102 	mla	r1, r9, r2, r1
 800c8ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c8b2:	4567      	cmp	r7, ip
 800c8b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8b8:	d8e6      	bhi.n	800c888 <__multiply+0x10c>
 800c8ba:	9a01      	ldr	r2, [sp, #4]
 800c8bc:	50a9      	str	r1, [r5, r2]
 800c8be:	3504      	adds	r5, #4
 800c8c0:	e79a      	b.n	800c7f8 <__multiply+0x7c>
 800c8c2:	3e01      	subs	r6, #1
 800c8c4:	e79c      	b.n	800c800 <__multiply+0x84>
 800c8c6:	bf00      	nop
 800c8c8:	0800e461 	.word	0x0800e461
 800c8cc:	0800e4ec 	.word	0x0800e4ec

0800c8d0 <__pow5mult>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	4615      	mov	r5, r2
 800c8d6:	f012 0203 	ands.w	r2, r2, #3
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	d007      	beq.n	800c8f0 <__pow5mult+0x20>
 800c8e0:	4c25      	ldr	r4, [pc, #148]	; (800c978 <__pow5mult+0xa8>)
 800c8e2:	3a01      	subs	r2, #1
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ea:	f7ff fe51 	bl	800c590 <__multadd>
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	10ad      	asrs	r5, r5, #2
 800c8f2:	d03d      	beq.n	800c970 <__pow5mult+0xa0>
 800c8f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8f6:	b97c      	cbnz	r4, 800c918 <__pow5mult+0x48>
 800c8f8:	2010      	movs	r0, #16
 800c8fa:	f7ff fdcd 	bl	800c498 <malloc>
 800c8fe:	4602      	mov	r2, r0
 800c900:	6270      	str	r0, [r6, #36]	; 0x24
 800c902:	b928      	cbnz	r0, 800c910 <__pow5mult+0x40>
 800c904:	4b1d      	ldr	r3, [pc, #116]	; (800c97c <__pow5mult+0xac>)
 800c906:	481e      	ldr	r0, [pc, #120]	; (800c980 <__pow5mult+0xb0>)
 800c908:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c90c:	f7fe fba6 	bl	800b05c <__assert_func>
 800c910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c914:	6004      	str	r4, [r0, #0]
 800c916:	60c4      	str	r4, [r0, #12]
 800c918:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c91c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c920:	b94c      	cbnz	r4, 800c936 <__pow5mult+0x66>
 800c922:	f240 2171 	movw	r1, #625	; 0x271
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ff12 	bl	800c750 <__i2b>
 800c92c:	2300      	movs	r3, #0
 800c92e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c932:	4604      	mov	r4, r0
 800c934:	6003      	str	r3, [r0, #0]
 800c936:	f04f 0900 	mov.w	r9, #0
 800c93a:	07eb      	lsls	r3, r5, #31
 800c93c:	d50a      	bpl.n	800c954 <__pow5mult+0x84>
 800c93e:	4639      	mov	r1, r7
 800c940:	4622      	mov	r2, r4
 800c942:	4630      	mov	r0, r6
 800c944:	f7ff ff1a 	bl	800c77c <__multiply>
 800c948:	4639      	mov	r1, r7
 800c94a:	4680      	mov	r8, r0
 800c94c:	4630      	mov	r0, r6
 800c94e:	f7ff fdfd 	bl	800c54c <_Bfree>
 800c952:	4647      	mov	r7, r8
 800c954:	106d      	asrs	r5, r5, #1
 800c956:	d00b      	beq.n	800c970 <__pow5mult+0xa0>
 800c958:	6820      	ldr	r0, [r4, #0]
 800c95a:	b938      	cbnz	r0, 800c96c <__pow5mult+0x9c>
 800c95c:	4622      	mov	r2, r4
 800c95e:	4621      	mov	r1, r4
 800c960:	4630      	mov	r0, r6
 800c962:	f7ff ff0b 	bl	800c77c <__multiply>
 800c966:	6020      	str	r0, [r4, #0]
 800c968:	f8c0 9000 	str.w	r9, [r0]
 800c96c:	4604      	mov	r4, r0
 800c96e:	e7e4      	b.n	800c93a <__pow5mult+0x6a>
 800c970:	4638      	mov	r0, r7
 800c972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c976:	bf00      	nop
 800c978:	0800e638 	.word	0x0800e638
 800c97c:	0800e248 	.word	0x0800e248
 800c980:	0800e4ec 	.word	0x0800e4ec

0800c984 <__lshift>:
 800c984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	460c      	mov	r4, r1
 800c98a:	6849      	ldr	r1, [r1, #4]
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	4607      	mov	r7, r0
 800c996:	4691      	mov	r9, r2
 800c998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c99c:	f108 0601 	add.w	r6, r8, #1
 800c9a0:	42b3      	cmp	r3, r6
 800c9a2:	db0b      	blt.n	800c9bc <__lshift+0x38>
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f7ff fd91 	bl	800c4cc <_Balloc>
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	b948      	cbnz	r0, 800c9c2 <__lshift+0x3e>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	4b2a      	ldr	r3, [pc, #168]	; (800ca5c <__lshift+0xd8>)
 800c9b2:	482b      	ldr	r0, [pc, #172]	; (800ca60 <__lshift+0xdc>)
 800c9b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c9b8:	f7fe fb50 	bl	800b05c <__assert_func>
 800c9bc:	3101      	adds	r1, #1
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	e7ee      	b.n	800c9a0 <__lshift+0x1c>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f100 0114 	add.w	r1, r0, #20
 800c9c8:	f100 0210 	add.w	r2, r0, #16
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	4553      	cmp	r3, sl
 800c9d0:	db37      	blt.n	800ca42 <__lshift+0xbe>
 800c9d2:	6920      	ldr	r0, [r4, #16]
 800c9d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9d8:	f104 0314 	add.w	r3, r4, #20
 800c9dc:	f019 091f 	ands.w	r9, r9, #31
 800c9e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c9e8:	d02f      	beq.n	800ca4a <__lshift+0xc6>
 800c9ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c9ee:	468a      	mov	sl, r1
 800c9f0:	f04f 0c00 	mov.w	ip, #0
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	fa02 f209 	lsl.w	r2, r2, r9
 800c9fa:	ea42 020c 	orr.w	r2, r2, ip
 800c9fe:	f84a 2b04 	str.w	r2, [sl], #4
 800ca02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca06:	4298      	cmp	r0, r3
 800ca08:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ca0c:	d8f2      	bhi.n	800c9f4 <__lshift+0x70>
 800ca0e:	1b03      	subs	r3, r0, r4
 800ca10:	3b15      	subs	r3, #21
 800ca12:	f023 0303 	bic.w	r3, r3, #3
 800ca16:	3304      	adds	r3, #4
 800ca18:	f104 0215 	add.w	r2, r4, #21
 800ca1c:	4290      	cmp	r0, r2
 800ca1e:	bf38      	it	cc
 800ca20:	2304      	movcc	r3, #4
 800ca22:	f841 c003 	str.w	ip, [r1, r3]
 800ca26:	f1bc 0f00 	cmp.w	ip, #0
 800ca2a:	d001      	beq.n	800ca30 <__lshift+0xac>
 800ca2c:	f108 0602 	add.w	r6, r8, #2
 800ca30:	3e01      	subs	r6, #1
 800ca32:	4638      	mov	r0, r7
 800ca34:	612e      	str	r6, [r5, #16]
 800ca36:	4621      	mov	r1, r4
 800ca38:	f7ff fd88 	bl	800c54c <_Bfree>
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca46:	3301      	adds	r3, #1
 800ca48:	e7c1      	b.n	800c9ce <__lshift+0x4a>
 800ca4a:	3904      	subs	r1, #4
 800ca4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca54:	4298      	cmp	r0, r3
 800ca56:	d8f9      	bhi.n	800ca4c <__lshift+0xc8>
 800ca58:	e7ea      	b.n	800ca30 <__lshift+0xac>
 800ca5a:	bf00      	nop
 800ca5c:	0800e461 	.word	0x0800e461
 800ca60:	0800e4ec 	.word	0x0800e4ec

0800ca64 <__mcmp>:
 800ca64:	b530      	push	{r4, r5, lr}
 800ca66:	6902      	ldr	r2, [r0, #16]
 800ca68:	690c      	ldr	r4, [r1, #16]
 800ca6a:	1b12      	subs	r2, r2, r4
 800ca6c:	d10e      	bne.n	800ca8c <__mcmp+0x28>
 800ca6e:	f100 0314 	add.w	r3, r0, #20
 800ca72:	3114      	adds	r1, #20
 800ca74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca84:	42a5      	cmp	r5, r4
 800ca86:	d003      	beq.n	800ca90 <__mcmp+0x2c>
 800ca88:	d305      	bcc.n	800ca96 <__mcmp+0x32>
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	bd30      	pop	{r4, r5, pc}
 800ca90:	4283      	cmp	r3, r0
 800ca92:	d3f3      	bcc.n	800ca7c <__mcmp+0x18>
 800ca94:	e7fa      	b.n	800ca8c <__mcmp+0x28>
 800ca96:	f04f 32ff 	mov.w	r2, #4294967295
 800ca9a:	e7f7      	b.n	800ca8c <__mcmp+0x28>

0800ca9c <__mdiff>:
 800ca9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	460c      	mov	r4, r1
 800caa2:	4606      	mov	r6, r0
 800caa4:	4611      	mov	r1, r2
 800caa6:	4620      	mov	r0, r4
 800caa8:	4690      	mov	r8, r2
 800caaa:	f7ff ffdb 	bl	800ca64 <__mcmp>
 800caae:	1e05      	subs	r5, r0, #0
 800cab0:	d110      	bne.n	800cad4 <__mdiff+0x38>
 800cab2:	4629      	mov	r1, r5
 800cab4:	4630      	mov	r0, r6
 800cab6:	f7ff fd09 	bl	800c4cc <_Balloc>
 800caba:	b930      	cbnz	r0, 800caca <__mdiff+0x2e>
 800cabc:	4b3a      	ldr	r3, [pc, #232]	; (800cba8 <__mdiff+0x10c>)
 800cabe:	4602      	mov	r2, r0
 800cac0:	f240 2132 	movw	r1, #562	; 0x232
 800cac4:	4839      	ldr	r0, [pc, #228]	; (800cbac <__mdiff+0x110>)
 800cac6:	f7fe fac9 	bl	800b05c <__assert_func>
 800caca:	2301      	movs	r3, #1
 800cacc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cad0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad4:	bfa4      	itt	ge
 800cad6:	4643      	movge	r3, r8
 800cad8:	46a0      	movge	r8, r4
 800cada:	4630      	mov	r0, r6
 800cadc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cae0:	bfa6      	itte	ge
 800cae2:	461c      	movge	r4, r3
 800cae4:	2500      	movge	r5, #0
 800cae6:	2501      	movlt	r5, #1
 800cae8:	f7ff fcf0 	bl	800c4cc <_Balloc>
 800caec:	b920      	cbnz	r0, 800caf8 <__mdiff+0x5c>
 800caee:	4b2e      	ldr	r3, [pc, #184]	; (800cba8 <__mdiff+0x10c>)
 800caf0:	4602      	mov	r2, r0
 800caf2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800caf6:	e7e5      	b.n	800cac4 <__mdiff+0x28>
 800caf8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cafc:	6926      	ldr	r6, [r4, #16]
 800cafe:	60c5      	str	r5, [r0, #12]
 800cb00:	f104 0914 	add.w	r9, r4, #20
 800cb04:	f108 0514 	add.w	r5, r8, #20
 800cb08:	f100 0e14 	add.w	lr, r0, #20
 800cb0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb14:	f108 0210 	add.w	r2, r8, #16
 800cb18:	46f2      	mov	sl, lr
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb24:	fa1f f883 	uxth.w	r8, r3
 800cb28:	fa11 f18b 	uxtah	r1, r1, fp
 800cb2c:	0c1b      	lsrs	r3, r3, #16
 800cb2e:	eba1 0808 	sub.w	r8, r1, r8
 800cb32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb3a:	fa1f f888 	uxth.w	r8, r8
 800cb3e:	1419      	asrs	r1, r3, #16
 800cb40:	454e      	cmp	r6, r9
 800cb42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb46:	f84a 3b04 	str.w	r3, [sl], #4
 800cb4a:	d8e7      	bhi.n	800cb1c <__mdiff+0x80>
 800cb4c:	1b33      	subs	r3, r6, r4
 800cb4e:	3b15      	subs	r3, #21
 800cb50:	f023 0303 	bic.w	r3, r3, #3
 800cb54:	3304      	adds	r3, #4
 800cb56:	3415      	adds	r4, #21
 800cb58:	42a6      	cmp	r6, r4
 800cb5a:	bf38      	it	cc
 800cb5c:	2304      	movcc	r3, #4
 800cb5e:	441d      	add	r5, r3
 800cb60:	4473      	add	r3, lr
 800cb62:	469e      	mov	lr, r3
 800cb64:	462e      	mov	r6, r5
 800cb66:	4566      	cmp	r6, ip
 800cb68:	d30e      	bcc.n	800cb88 <__mdiff+0xec>
 800cb6a:	f10c 0203 	add.w	r2, ip, #3
 800cb6e:	1b52      	subs	r2, r2, r5
 800cb70:	f022 0203 	bic.w	r2, r2, #3
 800cb74:	3d03      	subs	r5, #3
 800cb76:	45ac      	cmp	ip, r5
 800cb78:	bf38      	it	cc
 800cb7a:	2200      	movcc	r2, #0
 800cb7c:	441a      	add	r2, r3
 800cb7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb82:	b17b      	cbz	r3, 800cba4 <__mdiff+0x108>
 800cb84:	6107      	str	r7, [r0, #16]
 800cb86:	e7a3      	b.n	800cad0 <__mdiff+0x34>
 800cb88:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb8c:	fa11 f288 	uxtah	r2, r1, r8
 800cb90:	1414      	asrs	r4, r2, #16
 800cb92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb96:	b292      	uxth	r2, r2
 800cb98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb9c:	f84e 2b04 	str.w	r2, [lr], #4
 800cba0:	1421      	asrs	r1, r4, #16
 800cba2:	e7e0      	b.n	800cb66 <__mdiff+0xca>
 800cba4:	3f01      	subs	r7, #1
 800cba6:	e7ea      	b.n	800cb7e <__mdiff+0xe2>
 800cba8:	0800e461 	.word	0x0800e461
 800cbac:	0800e4ec 	.word	0x0800e4ec

0800cbb0 <__ulp>:
 800cbb0:	b082      	sub	sp, #8
 800cbb2:	ed8d 0b00 	vstr	d0, [sp]
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	4912      	ldr	r1, [pc, #72]	; (800cc04 <__ulp+0x54>)
 800cbba:	4019      	ands	r1, r3
 800cbbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	dd05      	ble.n	800cbd0 <__ulp+0x20>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	ec43 2b10 	vmov	d0, r2, r3
 800cbcc:	b002      	add	sp, #8
 800cbce:	4770      	bx	lr
 800cbd0:	4249      	negs	r1, r1
 800cbd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cbd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cbda:	f04f 0200 	mov.w	r2, #0
 800cbde:	f04f 0300 	mov.w	r3, #0
 800cbe2:	da04      	bge.n	800cbee <__ulp+0x3e>
 800cbe4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cbe8:	fa41 f300 	asr.w	r3, r1, r0
 800cbec:	e7ec      	b.n	800cbc8 <__ulp+0x18>
 800cbee:	f1a0 0114 	sub.w	r1, r0, #20
 800cbf2:	291e      	cmp	r1, #30
 800cbf4:	bfda      	itte	le
 800cbf6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cbfa:	fa20 f101 	lsrle.w	r1, r0, r1
 800cbfe:	2101      	movgt	r1, #1
 800cc00:	460a      	mov	r2, r1
 800cc02:	e7e1      	b.n	800cbc8 <__ulp+0x18>
 800cc04:	7ff00000 	.word	0x7ff00000

0800cc08 <__b2d>:
 800cc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0a:	6905      	ldr	r5, [r0, #16]
 800cc0c:	f100 0714 	add.w	r7, r0, #20
 800cc10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cc14:	1f2e      	subs	r6, r5, #4
 800cc16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7ff fd48 	bl	800c6b0 <__hi0bits>
 800cc20:	f1c0 0320 	rsb	r3, r0, #32
 800cc24:	280a      	cmp	r0, #10
 800cc26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cca4 <__b2d+0x9c>
 800cc2a:	600b      	str	r3, [r1, #0]
 800cc2c:	dc14      	bgt.n	800cc58 <__b2d+0x50>
 800cc2e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cc32:	fa24 f10e 	lsr.w	r1, r4, lr
 800cc36:	42b7      	cmp	r7, r6
 800cc38:	ea41 030c 	orr.w	r3, r1, ip
 800cc3c:	bf34      	ite	cc
 800cc3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc42:	2100      	movcs	r1, #0
 800cc44:	3015      	adds	r0, #21
 800cc46:	fa04 f000 	lsl.w	r0, r4, r0
 800cc4a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cc4e:	ea40 0201 	orr.w	r2, r0, r1
 800cc52:	ec43 2b10 	vmov	d0, r2, r3
 800cc56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc58:	42b7      	cmp	r7, r6
 800cc5a:	bf3a      	itte	cc
 800cc5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cc60:	f1a5 0608 	subcc.w	r6, r5, #8
 800cc64:	2100      	movcs	r1, #0
 800cc66:	380b      	subs	r0, #11
 800cc68:	d017      	beq.n	800cc9a <__b2d+0x92>
 800cc6a:	f1c0 0c20 	rsb	ip, r0, #32
 800cc6e:	fa04 f500 	lsl.w	r5, r4, r0
 800cc72:	42be      	cmp	r6, r7
 800cc74:	fa21 f40c 	lsr.w	r4, r1, ip
 800cc78:	ea45 0504 	orr.w	r5, r5, r4
 800cc7c:	bf8c      	ite	hi
 800cc7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cc82:	2400      	movls	r4, #0
 800cc84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cc88:	fa01 f000 	lsl.w	r0, r1, r0
 800cc8c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cc90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc94:	ea40 0204 	orr.w	r2, r0, r4
 800cc98:	e7db      	b.n	800cc52 <__b2d+0x4a>
 800cc9a:	ea44 030c 	orr.w	r3, r4, ip
 800cc9e:	460a      	mov	r2, r1
 800cca0:	e7d7      	b.n	800cc52 <__b2d+0x4a>
 800cca2:	bf00      	nop
 800cca4:	3ff00000 	.word	0x3ff00000

0800cca8 <__d2b>:
 800cca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccac:	4689      	mov	r9, r1
 800ccae:	2101      	movs	r1, #1
 800ccb0:	ec57 6b10 	vmov	r6, r7, d0
 800ccb4:	4690      	mov	r8, r2
 800ccb6:	f7ff fc09 	bl	800c4cc <_Balloc>
 800ccba:	4604      	mov	r4, r0
 800ccbc:	b930      	cbnz	r0, 800cccc <__d2b+0x24>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	4b25      	ldr	r3, [pc, #148]	; (800cd58 <__d2b+0xb0>)
 800ccc2:	4826      	ldr	r0, [pc, #152]	; (800cd5c <__d2b+0xb4>)
 800ccc4:	f240 310a 	movw	r1, #778	; 0x30a
 800ccc8:	f7fe f9c8 	bl	800b05c <__assert_func>
 800cccc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ccd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccd4:	bb35      	cbnz	r5, 800cd24 <__d2b+0x7c>
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	d028      	beq.n	800cd2e <__d2b+0x86>
 800ccdc:	4668      	mov	r0, sp
 800ccde:	9600      	str	r6, [sp, #0]
 800cce0:	f7ff fd06 	bl	800c6f0 <__lo0bits>
 800cce4:	9900      	ldr	r1, [sp, #0]
 800cce6:	b300      	cbz	r0, 800cd2a <__d2b+0x82>
 800cce8:	9a01      	ldr	r2, [sp, #4]
 800ccea:	f1c0 0320 	rsb	r3, r0, #32
 800ccee:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf2:	430b      	orrs	r3, r1
 800ccf4:	40c2      	lsrs	r2, r0
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	9201      	str	r2, [sp, #4]
 800ccfa:	9b01      	ldr	r3, [sp, #4]
 800ccfc:	61a3      	str	r3, [r4, #24]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bf14      	ite	ne
 800cd02:	2202      	movne	r2, #2
 800cd04:	2201      	moveq	r2, #1
 800cd06:	6122      	str	r2, [r4, #16]
 800cd08:	b1d5      	cbz	r5, 800cd40 <__d2b+0x98>
 800cd0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd0e:	4405      	add	r5, r0
 800cd10:	f8c9 5000 	str.w	r5, [r9]
 800cd14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd18:	f8c8 0000 	str.w	r0, [r8]
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	b003      	add	sp, #12
 800cd20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd28:	e7d5      	b.n	800ccd6 <__d2b+0x2e>
 800cd2a:	6161      	str	r1, [r4, #20]
 800cd2c:	e7e5      	b.n	800ccfa <__d2b+0x52>
 800cd2e:	a801      	add	r0, sp, #4
 800cd30:	f7ff fcde 	bl	800c6f0 <__lo0bits>
 800cd34:	9b01      	ldr	r3, [sp, #4]
 800cd36:	6163      	str	r3, [r4, #20]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	6122      	str	r2, [r4, #16]
 800cd3c:	3020      	adds	r0, #32
 800cd3e:	e7e3      	b.n	800cd08 <__d2b+0x60>
 800cd40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd48:	f8c9 0000 	str.w	r0, [r9]
 800cd4c:	6918      	ldr	r0, [r3, #16]
 800cd4e:	f7ff fcaf 	bl	800c6b0 <__hi0bits>
 800cd52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd56:	e7df      	b.n	800cd18 <__d2b+0x70>
 800cd58:	0800e461 	.word	0x0800e461
 800cd5c:	0800e4ec 	.word	0x0800e4ec

0800cd60 <__ratio>:
 800cd60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	4688      	mov	r8, r1
 800cd66:	4669      	mov	r1, sp
 800cd68:	4681      	mov	r9, r0
 800cd6a:	f7ff ff4d 	bl	800cc08 <__b2d>
 800cd6e:	a901      	add	r1, sp, #4
 800cd70:	4640      	mov	r0, r8
 800cd72:	ec55 4b10 	vmov	r4, r5, d0
 800cd76:	f7ff ff47 	bl	800cc08 <__b2d>
 800cd7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd82:	eba3 0c02 	sub.w	ip, r3, r2
 800cd86:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd8a:	1a9b      	subs	r3, r3, r2
 800cd8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd90:	ec51 0b10 	vmov	r0, r1, d0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	bfd6      	itet	le
 800cd98:	460a      	movle	r2, r1
 800cd9a:	462a      	movgt	r2, r5
 800cd9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cda0:	468b      	mov	fp, r1
 800cda2:	462f      	mov	r7, r5
 800cda4:	bfd4      	ite	le
 800cda6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cdaa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cdae:	4620      	mov	r0, r4
 800cdb0:	ee10 2a10 	vmov	r2, s0
 800cdb4:	465b      	mov	r3, fp
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f7f3 fd48 	bl	800084c <__aeabi_ddiv>
 800cdbc:	ec41 0b10 	vmov	d0, r0, r1
 800cdc0:	b003      	add	sp, #12
 800cdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cdc6 <__copybits>:
 800cdc6:	3901      	subs	r1, #1
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	1149      	asrs	r1, r1, #5
 800cdcc:	6914      	ldr	r4, [r2, #16]
 800cdce:	3101      	adds	r1, #1
 800cdd0:	f102 0314 	add.w	r3, r2, #20
 800cdd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cdd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cddc:	1f05      	subs	r5, r0, #4
 800cdde:	42a3      	cmp	r3, r4
 800cde0:	d30c      	bcc.n	800cdfc <__copybits+0x36>
 800cde2:	1aa3      	subs	r3, r4, r2
 800cde4:	3b11      	subs	r3, #17
 800cde6:	f023 0303 	bic.w	r3, r3, #3
 800cdea:	3211      	adds	r2, #17
 800cdec:	42a2      	cmp	r2, r4
 800cdee:	bf88      	it	hi
 800cdf0:	2300      	movhi	r3, #0
 800cdf2:	4418      	add	r0, r3
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4288      	cmp	r0, r1
 800cdf8:	d305      	bcc.n	800ce06 <__copybits+0x40>
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ce00:	f845 6f04 	str.w	r6, [r5, #4]!
 800ce04:	e7eb      	b.n	800cdde <__copybits+0x18>
 800ce06:	f840 3b04 	str.w	r3, [r0], #4
 800ce0a:	e7f4      	b.n	800cdf6 <__copybits+0x30>

0800ce0c <__any_on>:
 800ce0c:	f100 0214 	add.w	r2, r0, #20
 800ce10:	6900      	ldr	r0, [r0, #16]
 800ce12:	114b      	asrs	r3, r1, #5
 800ce14:	4298      	cmp	r0, r3
 800ce16:	b510      	push	{r4, lr}
 800ce18:	db11      	blt.n	800ce3e <__any_on+0x32>
 800ce1a:	dd0a      	ble.n	800ce32 <__any_on+0x26>
 800ce1c:	f011 011f 	ands.w	r1, r1, #31
 800ce20:	d007      	beq.n	800ce32 <__any_on+0x26>
 800ce22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ce26:	fa24 f001 	lsr.w	r0, r4, r1
 800ce2a:	fa00 f101 	lsl.w	r1, r0, r1
 800ce2e:	428c      	cmp	r4, r1
 800ce30:	d10b      	bne.n	800ce4a <__any_on+0x3e>
 800ce32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d803      	bhi.n	800ce42 <__any_on+0x36>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	4603      	mov	r3, r0
 800ce40:	e7f7      	b.n	800ce32 <__any_on+0x26>
 800ce42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce46:	2900      	cmp	r1, #0
 800ce48:	d0f5      	beq.n	800ce36 <__any_on+0x2a>
 800ce4a:	2001      	movs	r0, #1
 800ce4c:	e7f6      	b.n	800ce3c <__any_on+0x30>

0800ce4e <_calloc_r>:
 800ce4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce50:	fba1 2402 	umull	r2, r4, r1, r2
 800ce54:	b94c      	cbnz	r4, 800ce6a <_calloc_r+0x1c>
 800ce56:	4611      	mov	r1, r2
 800ce58:	9201      	str	r2, [sp, #4]
 800ce5a:	f000 f87b 	bl	800cf54 <_malloc_r>
 800ce5e:	9a01      	ldr	r2, [sp, #4]
 800ce60:	4605      	mov	r5, r0
 800ce62:	b930      	cbnz	r0, 800ce72 <_calloc_r+0x24>
 800ce64:	4628      	mov	r0, r5
 800ce66:	b003      	add	sp, #12
 800ce68:	bd30      	pop	{r4, r5, pc}
 800ce6a:	220c      	movs	r2, #12
 800ce6c:	6002      	str	r2, [r0, #0]
 800ce6e:	2500      	movs	r5, #0
 800ce70:	e7f8      	b.n	800ce64 <_calloc_r+0x16>
 800ce72:	4621      	mov	r1, r4
 800ce74:	f7fc fd24 	bl	80098c0 <memset>
 800ce78:	e7f4      	b.n	800ce64 <_calloc_r+0x16>
	...

0800ce7c <_free_r>:
 800ce7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d044      	beq.n	800cf0c <_free_r+0x90>
 800ce82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce86:	9001      	str	r0, [sp, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce8e:	bfb8      	it	lt
 800ce90:	18e4      	addlt	r4, r4, r3
 800ce92:	f000 fec5 	bl	800dc20 <__malloc_lock>
 800ce96:	4a1e      	ldr	r2, [pc, #120]	; (800cf10 <_free_r+0x94>)
 800ce98:	9801      	ldr	r0, [sp, #4]
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	b933      	cbnz	r3, 800ceac <_free_r+0x30>
 800ce9e:	6063      	str	r3, [r4, #4]
 800cea0:	6014      	str	r4, [r2, #0]
 800cea2:	b003      	add	sp, #12
 800cea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cea8:	f000 bec0 	b.w	800dc2c <__malloc_unlock>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d908      	bls.n	800cec2 <_free_r+0x46>
 800ceb0:	6825      	ldr	r5, [r4, #0]
 800ceb2:	1961      	adds	r1, r4, r5
 800ceb4:	428b      	cmp	r3, r1
 800ceb6:	bf01      	itttt	eq
 800ceb8:	6819      	ldreq	r1, [r3, #0]
 800ceba:	685b      	ldreq	r3, [r3, #4]
 800cebc:	1949      	addeq	r1, r1, r5
 800cebe:	6021      	streq	r1, [r4, #0]
 800cec0:	e7ed      	b.n	800ce9e <_free_r+0x22>
 800cec2:	461a      	mov	r2, r3
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	b10b      	cbz	r3, 800cecc <_free_r+0x50>
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d9fa      	bls.n	800cec2 <_free_r+0x46>
 800cecc:	6811      	ldr	r1, [r2, #0]
 800cece:	1855      	adds	r5, r2, r1
 800ced0:	42a5      	cmp	r5, r4
 800ced2:	d10b      	bne.n	800ceec <_free_r+0x70>
 800ced4:	6824      	ldr	r4, [r4, #0]
 800ced6:	4421      	add	r1, r4
 800ced8:	1854      	adds	r4, r2, r1
 800ceda:	42a3      	cmp	r3, r4
 800cedc:	6011      	str	r1, [r2, #0]
 800cede:	d1e0      	bne.n	800cea2 <_free_r+0x26>
 800cee0:	681c      	ldr	r4, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	6053      	str	r3, [r2, #4]
 800cee6:	4421      	add	r1, r4
 800cee8:	6011      	str	r1, [r2, #0]
 800ceea:	e7da      	b.n	800cea2 <_free_r+0x26>
 800ceec:	d902      	bls.n	800cef4 <_free_r+0x78>
 800ceee:	230c      	movs	r3, #12
 800cef0:	6003      	str	r3, [r0, #0]
 800cef2:	e7d6      	b.n	800cea2 <_free_r+0x26>
 800cef4:	6825      	ldr	r5, [r4, #0]
 800cef6:	1961      	adds	r1, r4, r5
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf04      	itt	eq
 800cefc:	6819      	ldreq	r1, [r3, #0]
 800cefe:	685b      	ldreq	r3, [r3, #4]
 800cf00:	6063      	str	r3, [r4, #4]
 800cf02:	bf04      	itt	eq
 800cf04:	1949      	addeq	r1, r1, r5
 800cf06:	6021      	streq	r1, [r4, #0]
 800cf08:	6054      	str	r4, [r2, #4]
 800cf0a:	e7ca      	b.n	800cea2 <_free_r+0x26>
 800cf0c:	b003      	add	sp, #12
 800cf0e:	bd30      	pop	{r4, r5, pc}
 800cf10:	20000704 	.word	0x20000704

0800cf14 <sbrk_aligned>:
 800cf14:	b570      	push	{r4, r5, r6, lr}
 800cf16:	4e0e      	ldr	r6, [pc, #56]	; (800cf50 <sbrk_aligned+0x3c>)
 800cf18:	460c      	mov	r4, r1
 800cf1a:	6831      	ldr	r1, [r6, #0]
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	b911      	cbnz	r1, 800cf26 <sbrk_aligned+0x12>
 800cf20:	f000 fb4a 	bl	800d5b8 <_sbrk_r>
 800cf24:	6030      	str	r0, [r6, #0]
 800cf26:	4621      	mov	r1, r4
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f000 fb45 	bl	800d5b8 <_sbrk_r>
 800cf2e:	1c43      	adds	r3, r0, #1
 800cf30:	d00a      	beq.n	800cf48 <sbrk_aligned+0x34>
 800cf32:	1cc4      	adds	r4, r0, #3
 800cf34:	f024 0403 	bic.w	r4, r4, #3
 800cf38:	42a0      	cmp	r0, r4
 800cf3a:	d007      	beq.n	800cf4c <sbrk_aligned+0x38>
 800cf3c:	1a21      	subs	r1, r4, r0
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 fb3a 	bl	800d5b8 <_sbrk_r>
 800cf44:	3001      	adds	r0, #1
 800cf46:	d101      	bne.n	800cf4c <sbrk_aligned+0x38>
 800cf48:	f04f 34ff 	mov.w	r4, #4294967295
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
 800cf50:	20000708 	.word	0x20000708

0800cf54 <_malloc_r>:
 800cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf58:	1ccd      	adds	r5, r1, #3
 800cf5a:	f025 0503 	bic.w	r5, r5, #3
 800cf5e:	3508      	adds	r5, #8
 800cf60:	2d0c      	cmp	r5, #12
 800cf62:	bf38      	it	cc
 800cf64:	250c      	movcc	r5, #12
 800cf66:	2d00      	cmp	r5, #0
 800cf68:	4607      	mov	r7, r0
 800cf6a:	db01      	blt.n	800cf70 <_malloc_r+0x1c>
 800cf6c:	42a9      	cmp	r1, r5
 800cf6e:	d905      	bls.n	800cf7c <_malloc_r+0x28>
 800cf70:	230c      	movs	r3, #12
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	2600      	movs	r6, #0
 800cf76:	4630      	mov	r0, r6
 800cf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf7c:	4e2e      	ldr	r6, [pc, #184]	; (800d038 <_malloc_r+0xe4>)
 800cf7e:	f000 fe4f 	bl	800dc20 <__malloc_lock>
 800cf82:	6833      	ldr	r3, [r6, #0]
 800cf84:	461c      	mov	r4, r3
 800cf86:	bb34      	cbnz	r4, 800cfd6 <_malloc_r+0x82>
 800cf88:	4629      	mov	r1, r5
 800cf8a:	4638      	mov	r0, r7
 800cf8c:	f7ff ffc2 	bl	800cf14 <sbrk_aligned>
 800cf90:	1c43      	adds	r3, r0, #1
 800cf92:	4604      	mov	r4, r0
 800cf94:	d14d      	bne.n	800d032 <_malloc_r+0xde>
 800cf96:	6834      	ldr	r4, [r6, #0]
 800cf98:	4626      	mov	r6, r4
 800cf9a:	2e00      	cmp	r6, #0
 800cf9c:	d140      	bne.n	800d020 <_malloc_r+0xcc>
 800cf9e:	6823      	ldr	r3, [r4, #0]
 800cfa0:	4631      	mov	r1, r6
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	eb04 0803 	add.w	r8, r4, r3
 800cfa8:	f000 fb06 	bl	800d5b8 <_sbrk_r>
 800cfac:	4580      	cmp	r8, r0
 800cfae:	d13a      	bne.n	800d026 <_malloc_r+0xd2>
 800cfb0:	6821      	ldr	r1, [r4, #0]
 800cfb2:	3503      	adds	r5, #3
 800cfb4:	1a6d      	subs	r5, r5, r1
 800cfb6:	f025 0503 	bic.w	r5, r5, #3
 800cfba:	3508      	adds	r5, #8
 800cfbc:	2d0c      	cmp	r5, #12
 800cfbe:	bf38      	it	cc
 800cfc0:	250c      	movcc	r5, #12
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	f7ff ffa5 	bl	800cf14 <sbrk_aligned>
 800cfca:	3001      	adds	r0, #1
 800cfcc:	d02b      	beq.n	800d026 <_malloc_r+0xd2>
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	442b      	add	r3, r5
 800cfd2:	6023      	str	r3, [r4, #0]
 800cfd4:	e00e      	b.n	800cff4 <_malloc_r+0xa0>
 800cfd6:	6822      	ldr	r2, [r4, #0]
 800cfd8:	1b52      	subs	r2, r2, r5
 800cfda:	d41e      	bmi.n	800d01a <_malloc_r+0xc6>
 800cfdc:	2a0b      	cmp	r2, #11
 800cfde:	d916      	bls.n	800d00e <_malloc_r+0xba>
 800cfe0:	1961      	adds	r1, r4, r5
 800cfe2:	42a3      	cmp	r3, r4
 800cfe4:	6025      	str	r5, [r4, #0]
 800cfe6:	bf18      	it	ne
 800cfe8:	6059      	strne	r1, [r3, #4]
 800cfea:	6863      	ldr	r3, [r4, #4]
 800cfec:	bf08      	it	eq
 800cfee:	6031      	streq	r1, [r6, #0]
 800cff0:	5162      	str	r2, [r4, r5]
 800cff2:	604b      	str	r3, [r1, #4]
 800cff4:	4638      	mov	r0, r7
 800cff6:	f104 060b 	add.w	r6, r4, #11
 800cffa:	f000 fe17 	bl	800dc2c <__malloc_unlock>
 800cffe:	f026 0607 	bic.w	r6, r6, #7
 800d002:	1d23      	adds	r3, r4, #4
 800d004:	1af2      	subs	r2, r6, r3
 800d006:	d0b6      	beq.n	800cf76 <_malloc_r+0x22>
 800d008:	1b9b      	subs	r3, r3, r6
 800d00a:	50a3      	str	r3, [r4, r2]
 800d00c:	e7b3      	b.n	800cf76 <_malloc_r+0x22>
 800d00e:	6862      	ldr	r2, [r4, #4]
 800d010:	42a3      	cmp	r3, r4
 800d012:	bf0c      	ite	eq
 800d014:	6032      	streq	r2, [r6, #0]
 800d016:	605a      	strne	r2, [r3, #4]
 800d018:	e7ec      	b.n	800cff4 <_malloc_r+0xa0>
 800d01a:	4623      	mov	r3, r4
 800d01c:	6864      	ldr	r4, [r4, #4]
 800d01e:	e7b2      	b.n	800cf86 <_malloc_r+0x32>
 800d020:	4634      	mov	r4, r6
 800d022:	6876      	ldr	r6, [r6, #4]
 800d024:	e7b9      	b.n	800cf9a <_malloc_r+0x46>
 800d026:	230c      	movs	r3, #12
 800d028:	603b      	str	r3, [r7, #0]
 800d02a:	4638      	mov	r0, r7
 800d02c:	f000 fdfe 	bl	800dc2c <__malloc_unlock>
 800d030:	e7a1      	b.n	800cf76 <_malloc_r+0x22>
 800d032:	6025      	str	r5, [r4, #0]
 800d034:	e7de      	b.n	800cff4 <_malloc_r+0xa0>
 800d036:	bf00      	nop
 800d038:	20000704 	.word	0x20000704

0800d03c <__ssputs_r>:
 800d03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d040:	688e      	ldr	r6, [r1, #8]
 800d042:	429e      	cmp	r6, r3
 800d044:	4682      	mov	sl, r0
 800d046:	460c      	mov	r4, r1
 800d048:	4690      	mov	r8, r2
 800d04a:	461f      	mov	r7, r3
 800d04c:	d838      	bhi.n	800d0c0 <__ssputs_r+0x84>
 800d04e:	898a      	ldrh	r2, [r1, #12]
 800d050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d054:	d032      	beq.n	800d0bc <__ssputs_r+0x80>
 800d056:	6825      	ldr	r5, [r4, #0]
 800d058:	6909      	ldr	r1, [r1, #16]
 800d05a:	eba5 0901 	sub.w	r9, r5, r1
 800d05e:	6965      	ldr	r5, [r4, #20]
 800d060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d068:	3301      	adds	r3, #1
 800d06a:	444b      	add	r3, r9
 800d06c:	106d      	asrs	r5, r5, #1
 800d06e:	429d      	cmp	r5, r3
 800d070:	bf38      	it	cc
 800d072:	461d      	movcc	r5, r3
 800d074:	0553      	lsls	r3, r2, #21
 800d076:	d531      	bpl.n	800d0dc <__ssputs_r+0xa0>
 800d078:	4629      	mov	r1, r5
 800d07a:	f7ff ff6b 	bl	800cf54 <_malloc_r>
 800d07e:	4606      	mov	r6, r0
 800d080:	b950      	cbnz	r0, 800d098 <__ssputs_r+0x5c>
 800d082:	230c      	movs	r3, #12
 800d084:	f8ca 3000 	str.w	r3, [sl]
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d08e:	81a3      	strh	r3, [r4, #12]
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d098:	6921      	ldr	r1, [r4, #16]
 800d09a:	464a      	mov	r2, r9
 800d09c:	f7fc fc02 	bl	80098a4 <memcpy>
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0aa:	81a3      	strh	r3, [r4, #12]
 800d0ac:	6126      	str	r6, [r4, #16]
 800d0ae:	6165      	str	r5, [r4, #20]
 800d0b0:	444e      	add	r6, r9
 800d0b2:	eba5 0509 	sub.w	r5, r5, r9
 800d0b6:	6026      	str	r6, [r4, #0]
 800d0b8:	60a5      	str	r5, [r4, #8]
 800d0ba:	463e      	mov	r6, r7
 800d0bc:	42be      	cmp	r6, r7
 800d0be:	d900      	bls.n	800d0c2 <__ssputs_r+0x86>
 800d0c0:	463e      	mov	r6, r7
 800d0c2:	6820      	ldr	r0, [r4, #0]
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	4641      	mov	r1, r8
 800d0c8:	f000 fd90 	bl	800dbec <memmove>
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	1b9b      	subs	r3, r3, r6
 800d0d0:	60a3      	str	r3, [r4, #8]
 800d0d2:	6823      	ldr	r3, [r4, #0]
 800d0d4:	4433      	add	r3, r6
 800d0d6:	6023      	str	r3, [r4, #0]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e7db      	b.n	800d094 <__ssputs_r+0x58>
 800d0dc:	462a      	mov	r2, r5
 800d0de:	f000 fdab 	bl	800dc38 <_realloc_r>
 800d0e2:	4606      	mov	r6, r0
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d1e1      	bne.n	800d0ac <__ssputs_r+0x70>
 800d0e8:	6921      	ldr	r1, [r4, #16]
 800d0ea:	4650      	mov	r0, sl
 800d0ec:	f7ff fec6 	bl	800ce7c <_free_r>
 800d0f0:	e7c7      	b.n	800d082 <__ssputs_r+0x46>
	...

0800d0f4 <_svfiprintf_r>:
 800d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	4698      	mov	r8, r3
 800d0fa:	898b      	ldrh	r3, [r1, #12]
 800d0fc:	061b      	lsls	r3, r3, #24
 800d0fe:	b09d      	sub	sp, #116	; 0x74
 800d100:	4607      	mov	r7, r0
 800d102:	460d      	mov	r5, r1
 800d104:	4614      	mov	r4, r2
 800d106:	d50e      	bpl.n	800d126 <_svfiprintf_r+0x32>
 800d108:	690b      	ldr	r3, [r1, #16]
 800d10a:	b963      	cbnz	r3, 800d126 <_svfiprintf_r+0x32>
 800d10c:	2140      	movs	r1, #64	; 0x40
 800d10e:	f7ff ff21 	bl	800cf54 <_malloc_r>
 800d112:	6028      	str	r0, [r5, #0]
 800d114:	6128      	str	r0, [r5, #16]
 800d116:	b920      	cbnz	r0, 800d122 <_svfiprintf_r+0x2e>
 800d118:	230c      	movs	r3, #12
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e0d1      	b.n	800d2c6 <_svfiprintf_r+0x1d2>
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	616b      	str	r3, [r5, #20]
 800d126:	2300      	movs	r3, #0
 800d128:	9309      	str	r3, [sp, #36]	; 0x24
 800d12a:	2320      	movs	r3, #32
 800d12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d130:	f8cd 800c 	str.w	r8, [sp, #12]
 800d134:	2330      	movs	r3, #48	; 0x30
 800d136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2e0 <_svfiprintf_r+0x1ec>
 800d13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d13e:	f04f 0901 	mov.w	r9, #1
 800d142:	4623      	mov	r3, r4
 800d144:	469a      	mov	sl, r3
 800d146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d14a:	b10a      	cbz	r2, 800d150 <_svfiprintf_r+0x5c>
 800d14c:	2a25      	cmp	r2, #37	; 0x25
 800d14e:	d1f9      	bne.n	800d144 <_svfiprintf_r+0x50>
 800d150:	ebba 0b04 	subs.w	fp, sl, r4
 800d154:	d00b      	beq.n	800d16e <_svfiprintf_r+0x7a>
 800d156:	465b      	mov	r3, fp
 800d158:	4622      	mov	r2, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	4638      	mov	r0, r7
 800d15e:	f7ff ff6d 	bl	800d03c <__ssputs_r>
 800d162:	3001      	adds	r0, #1
 800d164:	f000 80aa 	beq.w	800d2bc <_svfiprintf_r+0x1c8>
 800d168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d16a:	445a      	add	r2, fp
 800d16c:	9209      	str	r2, [sp, #36]	; 0x24
 800d16e:	f89a 3000 	ldrb.w	r3, [sl]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 80a2 	beq.w	800d2bc <_svfiprintf_r+0x1c8>
 800d178:	2300      	movs	r3, #0
 800d17a:	f04f 32ff 	mov.w	r2, #4294967295
 800d17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d182:	f10a 0a01 	add.w	sl, sl, #1
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	9307      	str	r3, [sp, #28]
 800d18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d18e:	931a      	str	r3, [sp, #104]	; 0x68
 800d190:	4654      	mov	r4, sl
 800d192:	2205      	movs	r2, #5
 800d194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d198:	4851      	ldr	r0, [pc, #324]	; (800d2e0 <_svfiprintf_r+0x1ec>)
 800d19a:	f7f3 f821 	bl	80001e0 <memchr>
 800d19e:	9a04      	ldr	r2, [sp, #16]
 800d1a0:	b9d8      	cbnz	r0, 800d1da <_svfiprintf_r+0xe6>
 800d1a2:	06d0      	lsls	r0, r2, #27
 800d1a4:	bf44      	itt	mi
 800d1a6:	2320      	movmi	r3, #32
 800d1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ac:	0711      	lsls	r1, r2, #28
 800d1ae:	bf44      	itt	mi
 800d1b0:	232b      	movmi	r3, #43	; 0x2b
 800d1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d1bc:	d015      	beq.n	800d1ea <_svfiprintf_r+0xf6>
 800d1be:	9a07      	ldr	r2, [sp, #28]
 800d1c0:	4654      	mov	r4, sl
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f04f 0c0a 	mov.w	ip, #10
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ce:	3b30      	subs	r3, #48	; 0x30
 800d1d0:	2b09      	cmp	r3, #9
 800d1d2:	d94e      	bls.n	800d272 <_svfiprintf_r+0x17e>
 800d1d4:	b1b0      	cbz	r0, 800d204 <_svfiprintf_r+0x110>
 800d1d6:	9207      	str	r2, [sp, #28]
 800d1d8:	e014      	b.n	800d204 <_svfiprintf_r+0x110>
 800d1da:	eba0 0308 	sub.w	r3, r0, r8
 800d1de:	fa09 f303 	lsl.w	r3, r9, r3
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	46a2      	mov	sl, r4
 800d1e8:	e7d2      	b.n	800d190 <_svfiprintf_r+0x9c>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	1d19      	adds	r1, r3, #4
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	9103      	str	r1, [sp, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfbb      	ittet	lt
 800d1f6:	425b      	neglt	r3, r3
 800d1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1fc:	9307      	strge	r3, [sp, #28]
 800d1fe:	9307      	strlt	r3, [sp, #28]
 800d200:	bfb8      	it	lt
 800d202:	9204      	strlt	r2, [sp, #16]
 800d204:	7823      	ldrb	r3, [r4, #0]
 800d206:	2b2e      	cmp	r3, #46	; 0x2e
 800d208:	d10c      	bne.n	800d224 <_svfiprintf_r+0x130>
 800d20a:	7863      	ldrb	r3, [r4, #1]
 800d20c:	2b2a      	cmp	r3, #42	; 0x2a
 800d20e:	d135      	bne.n	800d27c <_svfiprintf_r+0x188>
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	9203      	str	r2, [sp, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfb8      	it	lt
 800d21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d220:	3402      	adds	r4, #2
 800d222:	9305      	str	r3, [sp, #20]
 800d224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2f0 <_svfiprintf_r+0x1fc>
 800d228:	7821      	ldrb	r1, [r4, #0]
 800d22a:	2203      	movs	r2, #3
 800d22c:	4650      	mov	r0, sl
 800d22e:	f7f2 ffd7 	bl	80001e0 <memchr>
 800d232:	b140      	cbz	r0, 800d246 <_svfiprintf_r+0x152>
 800d234:	2340      	movs	r3, #64	; 0x40
 800d236:	eba0 000a 	sub.w	r0, r0, sl
 800d23a:	fa03 f000 	lsl.w	r0, r3, r0
 800d23e:	9b04      	ldr	r3, [sp, #16]
 800d240:	4303      	orrs	r3, r0
 800d242:	3401      	adds	r4, #1
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24a:	4826      	ldr	r0, [pc, #152]	; (800d2e4 <_svfiprintf_r+0x1f0>)
 800d24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d250:	2206      	movs	r2, #6
 800d252:	f7f2 ffc5 	bl	80001e0 <memchr>
 800d256:	2800      	cmp	r0, #0
 800d258:	d038      	beq.n	800d2cc <_svfiprintf_r+0x1d8>
 800d25a:	4b23      	ldr	r3, [pc, #140]	; (800d2e8 <_svfiprintf_r+0x1f4>)
 800d25c:	bb1b      	cbnz	r3, 800d2a6 <_svfiprintf_r+0x1b2>
 800d25e:	9b03      	ldr	r3, [sp, #12]
 800d260:	3307      	adds	r3, #7
 800d262:	f023 0307 	bic.w	r3, r3, #7
 800d266:	3308      	adds	r3, #8
 800d268:	9303      	str	r3, [sp, #12]
 800d26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26c:	4433      	add	r3, r6
 800d26e:	9309      	str	r3, [sp, #36]	; 0x24
 800d270:	e767      	b.n	800d142 <_svfiprintf_r+0x4e>
 800d272:	fb0c 3202 	mla	r2, ip, r2, r3
 800d276:	460c      	mov	r4, r1
 800d278:	2001      	movs	r0, #1
 800d27a:	e7a5      	b.n	800d1c8 <_svfiprintf_r+0xd4>
 800d27c:	2300      	movs	r3, #0
 800d27e:	3401      	adds	r4, #1
 800d280:	9305      	str	r3, [sp, #20]
 800d282:	4619      	mov	r1, r3
 800d284:	f04f 0c0a 	mov.w	ip, #10
 800d288:	4620      	mov	r0, r4
 800d28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d28e:	3a30      	subs	r2, #48	; 0x30
 800d290:	2a09      	cmp	r2, #9
 800d292:	d903      	bls.n	800d29c <_svfiprintf_r+0x1a8>
 800d294:	2b00      	cmp	r3, #0
 800d296:	d0c5      	beq.n	800d224 <_svfiprintf_r+0x130>
 800d298:	9105      	str	r1, [sp, #20]
 800d29a:	e7c3      	b.n	800d224 <_svfiprintf_r+0x130>
 800d29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e7f0      	b.n	800d288 <_svfiprintf_r+0x194>
 800d2a6:	ab03      	add	r3, sp, #12
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	462a      	mov	r2, r5
 800d2ac:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <_svfiprintf_r+0x1f8>)
 800d2ae:	a904      	add	r1, sp, #16
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f7fc fbad 	bl	8009a10 <_printf_float>
 800d2b6:	1c42      	adds	r2, r0, #1
 800d2b8:	4606      	mov	r6, r0
 800d2ba:	d1d6      	bne.n	800d26a <_svfiprintf_r+0x176>
 800d2bc:	89ab      	ldrh	r3, [r5, #12]
 800d2be:	065b      	lsls	r3, r3, #25
 800d2c0:	f53f af2c 	bmi.w	800d11c <_svfiprintf_r+0x28>
 800d2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2c6:	b01d      	add	sp, #116	; 0x74
 800d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2cc:	ab03      	add	r3, sp, #12
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	462a      	mov	r2, r5
 800d2d2:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <_svfiprintf_r+0x1f8>)
 800d2d4:	a904      	add	r1, sp, #16
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	f7fc fe3e 	bl	8009f58 <_printf_i>
 800d2dc:	e7eb      	b.n	800d2b6 <_svfiprintf_r+0x1c2>
 800d2de:	bf00      	nop
 800d2e0:	0800e644 	.word	0x0800e644
 800d2e4:	0800e64e 	.word	0x0800e64e
 800d2e8:	08009a11 	.word	0x08009a11
 800d2ec:	0800d03d 	.word	0x0800d03d
 800d2f0:	0800e64a 	.word	0x0800e64a

0800d2f4 <__sfputc_r>:
 800d2f4:	6893      	ldr	r3, [r2, #8]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	b410      	push	{r4}
 800d2fc:	6093      	str	r3, [r2, #8]
 800d2fe:	da08      	bge.n	800d312 <__sfputc_r+0x1e>
 800d300:	6994      	ldr	r4, [r2, #24]
 800d302:	42a3      	cmp	r3, r4
 800d304:	db01      	blt.n	800d30a <__sfputc_r+0x16>
 800d306:	290a      	cmp	r1, #10
 800d308:	d103      	bne.n	800d312 <__sfputc_r+0x1e>
 800d30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d30e:	f000 b977 	b.w	800d600 <__swbuf_r>
 800d312:	6813      	ldr	r3, [r2, #0]
 800d314:	1c58      	adds	r0, r3, #1
 800d316:	6010      	str	r0, [r2, #0]
 800d318:	7019      	strb	r1, [r3, #0]
 800d31a:	4608      	mov	r0, r1
 800d31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <__sfputs_r>:
 800d322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d324:	4606      	mov	r6, r0
 800d326:	460f      	mov	r7, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	18d5      	adds	r5, r2, r3
 800d32c:	42ac      	cmp	r4, r5
 800d32e:	d101      	bne.n	800d334 <__sfputs_r+0x12>
 800d330:	2000      	movs	r0, #0
 800d332:	e007      	b.n	800d344 <__sfputs_r+0x22>
 800d334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d338:	463a      	mov	r2, r7
 800d33a:	4630      	mov	r0, r6
 800d33c:	f7ff ffda 	bl	800d2f4 <__sfputc_r>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d1f3      	bne.n	800d32c <__sfputs_r+0xa>
 800d344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d348 <_vfiprintf_r>:
 800d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34c:	460d      	mov	r5, r1
 800d34e:	b09d      	sub	sp, #116	; 0x74
 800d350:	4614      	mov	r4, r2
 800d352:	4698      	mov	r8, r3
 800d354:	4606      	mov	r6, r0
 800d356:	b118      	cbz	r0, 800d360 <_vfiprintf_r+0x18>
 800d358:	6983      	ldr	r3, [r0, #24]
 800d35a:	b90b      	cbnz	r3, 800d360 <_vfiprintf_r+0x18>
 800d35c:	f000 fb40 	bl	800d9e0 <__sinit>
 800d360:	4b89      	ldr	r3, [pc, #548]	; (800d588 <_vfiprintf_r+0x240>)
 800d362:	429d      	cmp	r5, r3
 800d364:	d11b      	bne.n	800d39e <_vfiprintf_r+0x56>
 800d366:	6875      	ldr	r5, [r6, #4]
 800d368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d36a:	07d9      	lsls	r1, r3, #31
 800d36c:	d405      	bmi.n	800d37a <_vfiprintf_r+0x32>
 800d36e:	89ab      	ldrh	r3, [r5, #12]
 800d370:	059a      	lsls	r2, r3, #22
 800d372:	d402      	bmi.n	800d37a <_vfiprintf_r+0x32>
 800d374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d376:	f000 fbd1 	bl	800db1c <__retarget_lock_acquire_recursive>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	071b      	lsls	r3, r3, #28
 800d37e:	d501      	bpl.n	800d384 <_vfiprintf_r+0x3c>
 800d380:	692b      	ldr	r3, [r5, #16]
 800d382:	b9eb      	cbnz	r3, 800d3c0 <_vfiprintf_r+0x78>
 800d384:	4629      	mov	r1, r5
 800d386:	4630      	mov	r0, r6
 800d388:	f000 f99a 	bl	800d6c0 <__swsetup_r>
 800d38c:	b1c0      	cbz	r0, 800d3c0 <_vfiprintf_r+0x78>
 800d38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d390:	07dc      	lsls	r4, r3, #31
 800d392:	d50e      	bpl.n	800d3b2 <_vfiprintf_r+0x6a>
 800d394:	f04f 30ff 	mov.w	r0, #4294967295
 800d398:	b01d      	add	sp, #116	; 0x74
 800d39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d39e:	4b7b      	ldr	r3, [pc, #492]	; (800d58c <_vfiprintf_r+0x244>)
 800d3a0:	429d      	cmp	r5, r3
 800d3a2:	d101      	bne.n	800d3a8 <_vfiprintf_r+0x60>
 800d3a4:	68b5      	ldr	r5, [r6, #8]
 800d3a6:	e7df      	b.n	800d368 <_vfiprintf_r+0x20>
 800d3a8:	4b79      	ldr	r3, [pc, #484]	; (800d590 <_vfiprintf_r+0x248>)
 800d3aa:	429d      	cmp	r5, r3
 800d3ac:	bf08      	it	eq
 800d3ae:	68f5      	ldreq	r5, [r6, #12]
 800d3b0:	e7da      	b.n	800d368 <_vfiprintf_r+0x20>
 800d3b2:	89ab      	ldrh	r3, [r5, #12]
 800d3b4:	0598      	lsls	r0, r3, #22
 800d3b6:	d4ed      	bmi.n	800d394 <_vfiprintf_r+0x4c>
 800d3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3ba:	f000 fbb0 	bl	800db1e <__retarget_lock_release_recursive>
 800d3be:	e7e9      	b.n	800d394 <_vfiprintf_r+0x4c>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3c4:	2320      	movs	r3, #32
 800d3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ce:	2330      	movs	r3, #48	; 0x30
 800d3d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d594 <_vfiprintf_r+0x24c>
 800d3d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3d8:	f04f 0901 	mov.w	r9, #1
 800d3dc:	4623      	mov	r3, r4
 800d3de:	469a      	mov	sl, r3
 800d3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3e4:	b10a      	cbz	r2, 800d3ea <_vfiprintf_r+0xa2>
 800d3e6:	2a25      	cmp	r2, #37	; 0x25
 800d3e8:	d1f9      	bne.n	800d3de <_vfiprintf_r+0x96>
 800d3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ee:	d00b      	beq.n	800d408 <_vfiprintf_r+0xc0>
 800d3f0:	465b      	mov	r3, fp
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f7ff ff93 	bl	800d322 <__sfputs_r>
 800d3fc:	3001      	adds	r0, #1
 800d3fe:	f000 80aa 	beq.w	800d556 <_vfiprintf_r+0x20e>
 800d402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d404:	445a      	add	r2, fp
 800d406:	9209      	str	r2, [sp, #36]	; 0x24
 800d408:	f89a 3000 	ldrb.w	r3, [sl]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f000 80a2 	beq.w	800d556 <_vfiprintf_r+0x20e>
 800d412:	2300      	movs	r3, #0
 800d414:	f04f 32ff 	mov.w	r2, #4294967295
 800d418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d41c:	f10a 0a01 	add.w	sl, sl, #1
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	9307      	str	r3, [sp, #28]
 800d424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d428:	931a      	str	r3, [sp, #104]	; 0x68
 800d42a:	4654      	mov	r4, sl
 800d42c:	2205      	movs	r2, #5
 800d42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d432:	4858      	ldr	r0, [pc, #352]	; (800d594 <_vfiprintf_r+0x24c>)
 800d434:	f7f2 fed4 	bl	80001e0 <memchr>
 800d438:	9a04      	ldr	r2, [sp, #16]
 800d43a:	b9d8      	cbnz	r0, 800d474 <_vfiprintf_r+0x12c>
 800d43c:	06d1      	lsls	r1, r2, #27
 800d43e:	bf44      	itt	mi
 800d440:	2320      	movmi	r3, #32
 800d442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d446:	0713      	lsls	r3, r2, #28
 800d448:	bf44      	itt	mi
 800d44a:	232b      	movmi	r3, #43	; 0x2b
 800d44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d450:	f89a 3000 	ldrb.w	r3, [sl]
 800d454:	2b2a      	cmp	r3, #42	; 0x2a
 800d456:	d015      	beq.n	800d484 <_vfiprintf_r+0x13c>
 800d458:	9a07      	ldr	r2, [sp, #28]
 800d45a:	4654      	mov	r4, sl
 800d45c:	2000      	movs	r0, #0
 800d45e:	f04f 0c0a 	mov.w	ip, #10
 800d462:	4621      	mov	r1, r4
 800d464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d468:	3b30      	subs	r3, #48	; 0x30
 800d46a:	2b09      	cmp	r3, #9
 800d46c:	d94e      	bls.n	800d50c <_vfiprintf_r+0x1c4>
 800d46e:	b1b0      	cbz	r0, 800d49e <_vfiprintf_r+0x156>
 800d470:	9207      	str	r2, [sp, #28]
 800d472:	e014      	b.n	800d49e <_vfiprintf_r+0x156>
 800d474:	eba0 0308 	sub.w	r3, r0, r8
 800d478:	fa09 f303 	lsl.w	r3, r9, r3
 800d47c:	4313      	orrs	r3, r2
 800d47e:	9304      	str	r3, [sp, #16]
 800d480:	46a2      	mov	sl, r4
 800d482:	e7d2      	b.n	800d42a <_vfiprintf_r+0xe2>
 800d484:	9b03      	ldr	r3, [sp, #12]
 800d486:	1d19      	adds	r1, r3, #4
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	9103      	str	r1, [sp, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	bfbb      	ittet	lt
 800d490:	425b      	neglt	r3, r3
 800d492:	f042 0202 	orrlt.w	r2, r2, #2
 800d496:	9307      	strge	r3, [sp, #28]
 800d498:	9307      	strlt	r3, [sp, #28]
 800d49a:	bfb8      	it	lt
 800d49c:	9204      	strlt	r2, [sp, #16]
 800d49e:	7823      	ldrb	r3, [r4, #0]
 800d4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d4a2:	d10c      	bne.n	800d4be <_vfiprintf_r+0x176>
 800d4a4:	7863      	ldrb	r3, [r4, #1]
 800d4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a8:	d135      	bne.n	800d516 <_vfiprintf_r+0x1ce>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	1d1a      	adds	r2, r3, #4
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	9203      	str	r2, [sp, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	bfb8      	it	lt
 800d4b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d4ba:	3402      	adds	r4, #2
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d5a4 <_vfiprintf_r+0x25c>
 800d4c2:	7821      	ldrb	r1, [r4, #0]
 800d4c4:	2203      	movs	r2, #3
 800d4c6:	4650      	mov	r0, sl
 800d4c8:	f7f2 fe8a 	bl	80001e0 <memchr>
 800d4cc:	b140      	cbz	r0, 800d4e0 <_vfiprintf_r+0x198>
 800d4ce:	2340      	movs	r3, #64	; 0x40
 800d4d0:	eba0 000a 	sub.w	r0, r0, sl
 800d4d4:	fa03 f000 	lsl.w	r0, r3, r0
 800d4d8:	9b04      	ldr	r3, [sp, #16]
 800d4da:	4303      	orrs	r3, r0
 800d4dc:	3401      	adds	r4, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4e4:	482c      	ldr	r0, [pc, #176]	; (800d598 <_vfiprintf_r+0x250>)
 800d4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4ea:	2206      	movs	r2, #6
 800d4ec:	f7f2 fe78 	bl	80001e0 <memchr>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d03f      	beq.n	800d574 <_vfiprintf_r+0x22c>
 800d4f4:	4b29      	ldr	r3, [pc, #164]	; (800d59c <_vfiprintf_r+0x254>)
 800d4f6:	bb1b      	cbnz	r3, 800d540 <_vfiprintf_r+0x1f8>
 800d4f8:	9b03      	ldr	r3, [sp, #12]
 800d4fa:	3307      	adds	r3, #7
 800d4fc:	f023 0307 	bic.w	r3, r3, #7
 800d500:	3308      	adds	r3, #8
 800d502:	9303      	str	r3, [sp, #12]
 800d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d506:	443b      	add	r3, r7
 800d508:	9309      	str	r3, [sp, #36]	; 0x24
 800d50a:	e767      	b.n	800d3dc <_vfiprintf_r+0x94>
 800d50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d510:	460c      	mov	r4, r1
 800d512:	2001      	movs	r0, #1
 800d514:	e7a5      	b.n	800d462 <_vfiprintf_r+0x11a>
 800d516:	2300      	movs	r3, #0
 800d518:	3401      	adds	r4, #1
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	4619      	mov	r1, r3
 800d51e:	f04f 0c0a 	mov.w	ip, #10
 800d522:	4620      	mov	r0, r4
 800d524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d528:	3a30      	subs	r2, #48	; 0x30
 800d52a:	2a09      	cmp	r2, #9
 800d52c:	d903      	bls.n	800d536 <_vfiprintf_r+0x1ee>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d0c5      	beq.n	800d4be <_vfiprintf_r+0x176>
 800d532:	9105      	str	r1, [sp, #20]
 800d534:	e7c3      	b.n	800d4be <_vfiprintf_r+0x176>
 800d536:	fb0c 2101 	mla	r1, ip, r1, r2
 800d53a:	4604      	mov	r4, r0
 800d53c:	2301      	movs	r3, #1
 800d53e:	e7f0      	b.n	800d522 <_vfiprintf_r+0x1da>
 800d540:	ab03      	add	r3, sp, #12
 800d542:	9300      	str	r3, [sp, #0]
 800d544:	462a      	mov	r2, r5
 800d546:	4b16      	ldr	r3, [pc, #88]	; (800d5a0 <_vfiprintf_r+0x258>)
 800d548:	a904      	add	r1, sp, #16
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7fc fa60 	bl	8009a10 <_printf_float>
 800d550:	4607      	mov	r7, r0
 800d552:	1c78      	adds	r0, r7, #1
 800d554:	d1d6      	bne.n	800d504 <_vfiprintf_r+0x1bc>
 800d556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d558:	07d9      	lsls	r1, r3, #31
 800d55a:	d405      	bmi.n	800d568 <_vfiprintf_r+0x220>
 800d55c:	89ab      	ldrh	r3, [r5, #12]
 800d55e:	059a      	lsls	r2, r3, #22
 800d560:	d402      	bmi.n	800d568 <_vfiprintf_r+0x220>
 800d562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d564:	f000 fadb 	bl	800db1e <__retarget_lock_release_recursive>
 800d568:	89ab      	ldrh	r3, [r5, #12]
 800d56a:	065b      	lsls	r3, r3, #25
 800d56c:	f53f af12 	bmi.w	800d394 <_vfiprintf_r+0x4c>
 800d570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d572:	e711      	b.n	800d398 <_vfiprintf_r+0x50>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b09      	ldr	r3, [pc, #36]	; (800d5a0 <_vfiprintf_r+0x258>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4630      	mov	r0, r6
 800d580:	f7fc fcea 	bl	8009f58 <_printf_i>
 800d584:	e7e4      	b.n	800d550 <_vfiprintf_r+0x208>
 800d586:	bf00      	nop
 800d588:	0800e678 	.word	0x0800e678
 800d58c:	0800e698 	.word	0x0800e698
 800d590:	0800e658 	.word	0x0800e658
 800d594:	0800e644 	.word	0x0800e644
 800d598:	0800e64e 	.word	0x0800e64e
 800d59c:	08009a11 	.word	0x08009a11
 800d5a0:	0800d323 	.word	0x0800d323
 800d5a4:	0800e64a 	.word	0x0800e64a

0800d5a8 <nan>:
 800d5a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d5b0 <nan+0x8>
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	00000000 	.word	0x00000000
 800d5b4:	7ff80000 	.word	0x7ff80000

0800d5b8 <_sbrk_r>:
 800d5b8:	b538      	push	{r3, r4, r5, lr}
 800d5ba:	4d06      	ldr	r5, [pc, #24]	; (800d5d4 <_sbrk_r+0x1c>)
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4604      	mov	r4, r0
 800d5c0:	4608      	mov	r0, r1
 800d5c2:	602b      	str	r3, [r5, #0]
 800d5c4:	f7f5 fb6c 	bl	8002ca0 <_sbrk>
 800d5c8:	1c43      	adds	r3, r0, #1
 800d5ca:	d102      	bne.n	800d5d2 <_sbrk_r+0x1a>
 800d5cc:	682b      	ldr	r3, [r5, #0]
 800d5ce:	b103      	cbz	r3, 800d5d2 <_sbrk_r+0x1a>
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	20000710 	.word	0x20000710

0800d5d8 <strncmp>:
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	b17a      	cbz	r2, 800d5fc <strncmp+0x24>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	3901      	subs	r1, #1
 800d5e0:	1884      	adds	r4, r0, r2
 800d5e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d5e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5ea:	4290      	cmp	r0, r2
 800d5ec:	d101      	bne.n	800d5f2 <strncmp+0x1a>
 800d5ee:	42a3      	cmp	r3, r4
 800d5f0:	d101      	bne.n	800d5f6 <strncmp+0x1e>
 800d5f2:	1a80      	subs	r0, r0, r2
 800d5f4:	bd10      	pop	{r4, pc}
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d1f3      	bne.n	800d5e2 <strncmp+0xa>
 800d5fa:	e7fa      	b.n	800d5f2 <strncmp+0x1a>
 800d5fc:	4610      	mov	r0, r2
 800d5fe:	e7f9      	b.n	800d5f4 <strncmp+0x1c>

0800d600 <__swbuf_r>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	460e      	mov	r6, r1
 800d604:	4614      	mov	r4, r2
 800d606:	4605      	mov	r5, r0
 800d608:	b118      	cbz	r0, 800d612 <__swbuf_r+0x12>
 800d60a:	6983      	ldr	r3, [r0, #24]
 800d60c:	b90b      	cbnz	r3, 800d612 <__swbuf_r+0x12>
 800d60e:	f000 f9e7 	bl	800d9e0 <__sinit>
 800d612:	4b21      	ldr	r3, [pc, #132]	; (800d698 <__swbuf_r+0x98>)
 800d614:	429c      	cmp	r4, r3
 800d616:	d12b      	bne.n	800d670 <__swbuf_r+0x70>
 800d618:	686c      	ldr	r4, [r5, #4]
 800d61a:	69a3      	ldr	r3, [r4, #24]
 800d61c:	60a3      	str	r3, [r4, #8]
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	071a      	lsls	r2, r3, #28
 800d622:	d52f      	bpl.n	800d684 <__swbuf_r+0x84>
 800d624:	6923      	ldr	r3, [r4, #16]
 800d626:	b36b      	cbz	r3, 800d684 <__swbuf_r+0x84>
 800d628:	6923      	ldr	r3, [r4, #16]
 800d62a:	6820      	ldr	r0, [r4, #0]
 800d62c:	1ac0      	subs	r0, r0, r3
 800d62e:	6963      	ldr	r3, [r4, #20]
 800d630:	b2f6      	uxtb	r6, r6
 800d632:	4283      	cmp	r3, r0
 800d634:	4637      	mov	r7, r6
 800d636:	dc04      	bgt.n	800d642 <__swbuf_r+0x42>
 800d638:	4621      	mov	r1, r4
 800d63a:	4628      	mov	r0, r5
 800d63c:	f000 f93c 	bl	800d8b8 <_fflush_r>
 800d640:	bb30      	cbnz	r0, 800d690 <__swbuf_r+0x90>
 800d642:	68a3      	ldr	r3, [r4, #8]
 800d644:	3b01      	subs	r3, #1
 800d646:	60a3      	str	r3, [r4, #8]
 800d648:	6823      	ldr	r3, [r4, #0]
 800d64a:	1c5a      	adds	r2, r3, #1
 800d64c:	6022      	str	r2, [r4, #0]
 800d64e:	701e      	strb	r6, [r3, #0]
 800d650:	6963      	ldr	r3, [r4, #20]
 800d652:	3001      	adds	r0, #1
 800d654:	4283      	cmp	r3, r0
 800d656:	d004      	beq.n	800d662 <__swbuf_r+0x62>
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	07db      	lsls	r3, r3, #31
 800d65c:	d506      	bpl.n	800d66c <__swbuf_r+0x6c>
 800d65e:	2e0a      	cmp	r6, #10
 800d660:	d104      	bne.n	800d66c <__swbuf_r+0x6c>
 800d662:	4621      	mov	r1, r4
 800d664:	4628      	mov	r0, r5
 800d666:	f000 f927 	bl	800d8b8 <_fflush_r>
 800d66a:	b988      	cbnz	r0, 800d690 <__swbuf_r+0x90>
 800d66c:	4638      	mov	r0, r7
 800d66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d670:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <__swbuf_r+0x9c>)
 800d672:	429c      	cmp	r4, r3
 800d674:	d101      	bne.n	800d67a <__swbuf_r+0x7a>
 800d676:	68ac      	ldr	r4, [r5, #8]
 800d678:	e7cf      	b.n	800d61a <__swbuf_r+0x1a>
 800d67a:	4b09      	ldr	r3, [pc, #36]	; (800d6a0 <__swbuf_r+0xa0>)
 800d67c:	429c      	cmp	r4, r3
 800d67e:	bf08      	it	eq
 800d680:	68ec      	ldreq	r4, [r5, #12]
 800d682:	e7ca      	b.n	800d61a <__swbuf_r+0x1a>
 800d684:	4621      	mov	r1, r4
 800d686:	4628      	mov	r0, r5
 800d688:	f000 f81a 	bl	800d6c0 <__swsetup_r>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	d0cb      	beq.n	800d628 <__swbuf_r+0x28>
 800d690:	f04f 37ff 	mov.w	r7, #4294967295
 800d694:	e7ea      	b.n	800d66c <__swbuf_r+0x6c>
 800d696:	bf00      	nop
 800d698:	0800e678 	.word	0x0800e678
 800d69c:	0800e698 	.word	0x0800e698
 800d6a0:	0800e658 	.word	0x0800e658

0800d6a4 <__ascii_wctomb>:
 800d6a4:	b149      	cbz	r1, 800d6ba <__ascii_wctomb+0x16>
 800d6a6:	2aff      	cmp	r2, #255	; 0xff
 800d6a8:	bf85      	ittet	hi
 800d6aa:	238a      	movhi	r3, #138	; 0x8a
 800d6ac:	6003      	strhi	r3, [r0, #0]
 800d6ae:	700a      	strbls	r2, [r1, #0]
 800d6b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6b4:	bf98      	it	ls
 800d6b6:	2001      	movls	r0, #1
 800d6b8:	4770      	bx	lr
 800d6ba:	4608      	mov	r0, r1
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <__swsetup_r>:
 800d6c0:	4b32      	ldr	r3, [pc, #200]	; (800d78c <__swsetup_r+0xcc>)
 800d6c2:	b570      	push	{r4, r5, r6, lr}
 800d6c4:	681d      	ldr	r5, [r3, #0]
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	b125      	cbz	r5, 800d6d6 <__swsetup_r+0x16>
 800d6cc:	69ab      	ldr	r3, [r5, #24]
 800d6ce:	b913      	cbnz	r3, 800d6d6 <__swsetup_r+0x16>
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f000 f985 	bl	800d9e0 <__sinit>
 800d6d6:	4b2e      	ldr	r3, [pc, #184]	; (800d790 <__swsetup_r+0xd0>)
 800d6d8:	429c      	cmp	r4, r3
 800d6da:	d10f      	bne.n	800d6fc <__swsetup_r+0x3c>
 800d6dc:	686c      	ldr	r4, [r5, #4]
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6e4:	0719      	lsls	r1, r3, #28
 800d6e6:	d42c      	bmi.n	800d742 <__swsetup_r+0x82>
 800d6e8:	06dd      	lsls	r5, r3, #27
 800d6ea:	d411      	bmi.n	800d710 <__swsetup_r+0x50>
 800d6ec:	2309      	movs	r3, #9
 800d6ee:	6033      	str	r3, [r6, #0]
 800d6f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6f4:	81a3      	strh	r3, [r4, #12]
 800d6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fa:	e03e      	b.n	800d77a <__swsetup_r+0xba>
 800d6fc:	4b25      	ldr	r3, [pc, #148]	; (800d794 <__swsetup_r+0xd4>)
 800d6fe:	429c      	cmp	r4, r3
 800d700:	d101      	bne.n	800d706 <__swsetup_r+0x46>
 800d702:	68ac      	ldr	r4, [r5, #8]
 800d704:	e7eb      	b.n	800d6de <__swsetup_r+0x1e>
 800d706:	4b24      	ldr	r3, [pc, #144]	; (800d798 <__swsetup_r+0xd8>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	bf08      	it	eq
 800d70c:	68ec      	ldreq	r4, [r5, #12]
 800d70e:	e7e6      	b.n	800d6de <__swsetup_r+0x1e>
 800d710:	0758      	lsls	r0, r3, #29
 800d712:	d512      	bpl.n	800d73a <__swsetup_r+0x7a>
 800d714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d716:	b141      	cbz	r1, 800d72a <__swsetup_r+0x6a>
 800d718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d71c:	4299      	cmp	r1, r3
 800d71e:	d002      	beq.n	800d726 <__swsetup_r+0x66>
 800d720:	4630      	mov	r0, r6
 800d722:	f7ff fbab 	bl	800ce7c <_free_r>
 800d726:	2300      	movs	r3, #0
 800d728:	6363      	str	r3, [r4, #52]	; 0x34
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	2300      	movs	r3, #0
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	6923      	ldr	r3, [r4, #16]
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	f043 0308 	orr.w	r3, r3, #8
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	6923      	ldr	r3, [r4, #16]
 800d744:	b94b      	cbnz	r3, 800d75a <__swsetup_r+0x9a>
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d750:	d003      	beq.n	800d75a <__swsetup_r+0x9a>
 800d752:	4621      	mov	r1, r4
 800d754:	4630      	mov	r0, r6
 800d756:	f000 fa09 	bl	800db6c <__smakebuf_r>
 800d75a:	89a0      	ldrh	r0, [r4, #12]
 800d75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d760:	f010 0301 	ands.w	r3, r0, #1
 800d764:	d00a      	beq.n	800d77c <__swsetup_r+0xbc>
 800d766:	2300      	movs	r3, #0
 800d768:	60a3      	str	r3, [r4, #8]
 800d76a:	6963      	ldr	r3, [r4, #20]
 800d76c:	425b      	negs	r3, r3
 800d76e:	61a3      	str	r3, [r4, #24]
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	b943      	cbnz	r3, 800d786 <__swsetup_r+0xc6>
 800d774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d778:	d1ba      	bne.n	800d6f0 <__swsetup_r+0x30>
 800d77a:	bd70      	pop	{r4, r5, r6, pc}
 800d77c:	0781      	lsls	r1, r0, #30
 800d77e:	bf58      	it	pl
 800d780:	6963      	ldrpl	r3, [r4, #20]
 800d782:	60a3      	str	r3, [r4, #8]
 800d784:	e7f4      	b.n	800d770 <__swsetup_r+0xb0>
 800d786:	2000      	movs	r0, #0
 800d788:	e7f7      	b.n	800d77a <__swsetup_r+0xba>
 800d78a:	bf00      	nop
 800d78c:	2000000c 	.word	0x2000000c
 800d790:	0800e678 	.word	0x0800e678
 800d794:	0800e698 	.word	0x0800e698
 800d798:	0800e658 	.word	0x0800e658

0800d79c <abort>:
 800d79c:	b508      	push	{r3, lr}
 800d79e:	2006      	movs	r0, #6
 800d7a0:	f000 faa2 	bl	800dce8 <raise>
 800d7a4:	2001      	movs	r0, #1
 800d7a6:	f7f5 fa03 	bl	8002bb0 <_exit>
	...

0800d7ac <__sflush_r>:
 800d7ac:	898a      	ldrh	r2, [r1, #12]
 800d7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	0710      	lsls	r0, r2, #28
 800d7b6:	460c      	mov	r4, r1
 800d7b8:	d458      	bmi.n	800d86c <__sflush_r+0xc0>
 800d7ba:	684b      	ldr	r3, [r1, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dc05      	bgt.n	800d7cc <__sflush_r+0x20>
 800d7c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	dc02      	bgt.n	800d7cc <__sflush_r+0x20>
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d0f9      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d7d8:	682f      	ldr	r7, [r5, #0]
 800d7da:	602b      	str	r3, [r5, #0]
 800d7dc:	d032      	beq.n	800d844 <__sflush_r+0x98>
 800d7de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d7e0:	89a3      	ldrh	r3, [r4, #12]
 800d7e2:	075a      	lsls	r2, r3, #29
 800d7e4:	d505      	bpl.n	800d7f2 <__sflush_r+0x46>
 800d7e6:	6863      	ldr	r3, [r4, #4]
 800d7e8:	1ac0      	subs	r0, r0, r3
 800d7ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d7ec:	b10b      	cbz	r3, 800d7f2 <__sflush_r+0x46>
 800d7ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d7f0:	1ac0      	subs	r0, r0, r3
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d7f8:	6a21      	ldr	r1, [r4, #32]
 800d7fa:	4628      	mov	r0, r5
 800d7fc:	47b0      	blx	r6
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	89a3      	ldrh	r3, [r4, #12]
 800d802:	d106      	bne.n	800d812 <__sflush_r+0x66>
 800d804:	6829      	ldr	r1, [r5, #0]
 800d806:	291d      	cmp	r1, #29
 800d808:	d82c      	bhi.n	800d864 <__sflush_r+0xb8>
 800d80a:	4a2a      	ldr	r2, [pc, #168]	; (800d8b4 <__sflush_r+0x108>)
 800d80c:	40ca      	lsrs	r2, r1
 800d80e:	07d6      	lsls	r6, r2, #31
 800d810:	d528      	bpl.n	800d864 <__sflush_r+0xb8>
 800d812:	2200      	movs	r2, #0
 800d814:	6062      	str	r2, [r4, #4]
 800d816:	04d9      	lsls	r1, r3, #19
 800d818:	6922      	ldr	r2, [r4, #16]
 800d81a:	6022      	str	r2, [r4, #0]
 800d81c:	d504      	bpl.n	800d828 <__sflush_r+0x7c>
 800d81e:	1c42      	adds	r2, r0, #1
 800d820:	d101      	bne.n	800d826 <__sflush_r+0x7a>
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	b903      	cbnz	r3, 800d828 <__sflush_r+0x7c>
 800d826:	6560      	str	r0, [r4, #84]	; 0x54
 800d828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d82a:	602f      	str	r7, [r5, #0]
 800d82c:	2900      	cmp	r1, #0
 800d82e:	d0ca      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d834:	4299      	cmp	r1, r3
 800d836:	d002      	beq.n	800d83e <__sflush_r+0x92>
 800d838:	4628      	mov	r0, r5
 800d83a:	f7ff fb1f 	bl	800ce7c <_free_r>
 800d83e:	2000      	movs	r0, #0
 800d840:	6360      	str	r0, [r4, #52]	; 0x34
 800d842:	e7c1      	b.n	800d7c8 <__sflush_r+0x1c>
 800d844:	6a21      	ldr	r1, [r4, #32]
 800d846:	2301      	movs	r3, #1
 800d848:	4628      	mov	r0, r5
 800d84a:	47b0      	blx	r6
 800d84c:	1c41      	adds	r1, r0, #1
 800d84e:	d1c7      	bne.n	800d7e0 <__sflush_r+0x34>
 800d850:	682b      	ldr	r3, [r5, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0c4      	beq.n	800d7e0 <__sflush_r+0x34>
 800d856:	2b1d      	cmp	r3, #29
 800d858:	d001      	beq.n	800d85e <__sflush_r+0xb2>
 800d85a:	2b16      	cmp	r3, #22
 800d85c:	d101      	bne.n	800d862 <__sflush_r+0xb6>
 800d85e:	602f      	str	r7, [r5, #0]
 800d860:	e7b1      	b.n	800d7c6 <__sflush_r+0x1a>
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d868:	81a3      	strh	r3, [r4, #12]
 800d86a:	e7ad      	b.n	800d7c8 <__sflush_r+0x1c>
 800d86c:	690f      	ldr	r7, [r1, #16]
 800d86e:	2f00      	cmp	r7, #0
 800d870:	d0a9      	beq.n	800d7c6 <__sflush_r+0x1a>
 800d872:	0793      	lsls	r3, r2, #30
 800d874:	680e      	ldr	r6, [r1, #0]
 800d876:	bf08      	it	eq
 800d878:	694b      	ldreq	r3, [r1, #20]
 800d87a:	600f      	str	r7, [r1, #0]
 800d87c:	bf18      	it	ne
 800d87e:	2300      	movne	r3, #0
 800d880:	eba6 0807 	sub.w	r8, r6, r7
 800d884:	608b      	str	r3, [r1, #8]
 800d886:	f1b8 0f00 	cmp.w	r8, #0
 800d88a:	dd9c      	ble.n	800d7c6 <__sflush_r+0x1a>
 800d88c:	6a21      	ldr	r1, [r4, #32]
 800d88e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d890:	4643      	mov	r3, r8
 800d892:	463a      	mov	r2, r7
 800d894:	4628      	mov	r0, r5
 800d896:	47b0      	blx	r6
 800d898:	2800      	cmp	r0, #0
 800d89a:	dc06      	bgt.n	800d8aa <__sflush_r+0xfe>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a2:	81a3      	strh	r3, [r4, #12]
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	e78e      	b.n	800d7c8 <__sflush_r+0x1c>
 800d8aa:	4407      	add	r7, r0
 800d8ac:	eba8 0800 	sub.w	r8, r8, r0
 800d8b0:	e7e9      	b.n	800d886 <__sflush_r+0xda>
 800d8b2:	bf00      	nop
 800d8b4:	20400001 	.word	0x20400001

0800d8b8 <_fflush_r>:
 800d8b8:	b538      	push	{r3, r4, r5, lr}
 800d8ba:	690b      	ldr	r3, [r1, #16]
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	b913      	cbnz	r3, 800d8c8 <_fflush_r+0x10>
 800d8c2:	2500      	movs	r5, #0
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	bd38      	pop	{r3, r4, r5, pc}
 800d8c8:	b118      	cbz	r0, 800d8d2 <_fflush_r+0x1a>
 800d8ca:	6983      	ldr	r3, [r0, #24]
 800d8cc:	b90b      	cbnz	r3, 800d8d2 <_fflush_r+0x1a>
 800d8ce:	f000 f887 	bl	800d9e0 <__sinit>
 800d8d2:	4b14      	ldr	r3, [pc, #80]	; (800d924 <_fflush_r+0x6c>)
 800d8d4:	429c      	cmp	r4, r3
 800d8d6:	d11b      	bne.n	800d910 <_fflush_r+0x58>
 800d8d8:	686c      	ldr	r4, [r5, #4]
 800d8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d0ef      	beq.n	800d8c2 <_fflush_r+0xa>
 800d8e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d8e4:	07d0      	lsls	r0, r2, #31
 800d8e6:	d404      	bmi.n	800d8f2 <_fflush_r+0x3a>
 800d8e8:	0599      	lsls	r1, r3, #22
 800d8ea:	d402      	bmi.n	800d8f2 <_fflush_r+0x3a>
 800d8ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8ee:	f000 f915 	bl	800db1c <__retarget_lock_acquire_recursive>
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	4621      	mov	r1, r4
 800d8f6:	f7ff ff59 	bl	800d7ac <__sflush_r>
 800d8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8fc:	07da      	lsls	r2, r3, #31
 800d8fe:	4605      	mov	r5, r0
 800d900:	d4e0      	bmi.n	800d8c4 <_fflush_r+0xc>
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	059b      	lsls	r3, r3, #22
 800d906:	d4dd      	bmi.n	800d8c4 <_fflush_r+0xc>
 800d908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d90a:	f000 f908 	bl	800db1e <__retarget_lock_release_recursive>
 800d90e:	e7d9      	b.n	800d8c4 <_fflush_r+0xc>
 800d910:	4b05      	ldr	r3, [pc, #20]	; (800d928 <_fflush_r+0x70>)
 800d912:	429c      	cmp	r4, r3
 800d914:	d101      	bne.n	800d91a <_fflush_r+0x62>
 800d916:	68ac      	ldr	r4, [r5, #8]
 800d918:	e7df      	b.n	800d8da <_fflush_r+0x22>
 800d91a:	4b04      	ldr	r3, [pc, #16]	; (800d92c <_fflush_r+0x74>)
 800d91c:	429c      	cmp	r4, r3
 800d91e:	bf08      	it	eq
 800d920:	68ec      	ldreq	r4, [r5, #12]
 800d922:	e7da      	b.n	800d8da <_fflush_r+0x22>
 800d924:	0800e678 	.word	0x0800e678
 800d928:	0800e698 	.word	0x0800e698
 800d92c:	0800e658 	.word	0x0800e658

0800d930 <std>:
 800d930:	2300      	movs	r3, #0
 800d932:	b510      	push	{r4, lr}
 800d934:	4604      	mov	r4, r0
 800d936:	e9c0 3300 	strd	r3, r3, [r0]
 800d93a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d93e:	6083      	str	r3, [r0, #8]
 800d940:	8181      	strh	r1, [r0, #12]
 800d942:	6643      	str	r3, [r0, #100]	; 0x64
 800d944:	81c2      	strh	r2, [r0, #14]
 800d946:	6183      	str	r3, [r0, #24]
 800d948:	4619      	mov	r1, r3
 800d94a:	2208      	movs	r2, #8
 800d94c:	305c      	adds	r0, #92	; 0x5c
 800d94e:	f7fb ffb7 	bl	80098c0 <memset>
 800d952:	4b05      	ldr	r3, [pc, #20]	; (800d968 <std+0x38>)
 800d954:	6263      	str	r3, [r4, #36]	; 0x24
 800d956:	4b05      	ldr	r3, [pc, #20]	; (800d96c <std+0x3c>)
 800d958:	62a3      	str	r3, [r4, #40]	; 0x28
 800d95a:	4b05      	ldr	r3, [pc, #20]	; (800d970 <std+0x40>)
 800d95c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d95e:	4b05      	ldr	r3, [pc, #20]	; (800d974 <std+0x44>)
 800d960:	6224      	str	r4, [r4, #32]
 800d962:	6323      	str	r3, [r4, #48]	; 0x30
 800d964:	bd10      	pop	{r4, pc}
 800d966:	bf00      	nop
 800d968:	0800dd21 	.word	0x0800dd21
 800d96c:	0800dd43 	.word	0x0800dd43
 800d970:	0800dd7b 	.word	0x0800dd7b
 800d974:	0800dd9f 	.word	0x0800dd9f

0800d978 <_cleanup_r>:
 800d978:	4901      	ldr	r1, [pc, #4]	; (800d980 <_cleanup_r+0x8>)
 800d97a:	f000 b8af 	b.w	800dadc <_fwalk_reent>
 800d97e:	bf00      	nop
 800d980:	0800d8b9 	.word	0x0800d8b9

0800d984 <__sfmoreglue>:
 800d984:	b570      	push	{r4, r5, r6, lr}
 800d986:	2268      	movs	r2, #104	; 0x68
 800d988:	1e4d      	subs	r5, r1, #1
 800d98a:	4355      	muls	r5, r2
 800d98c:	460e      	mov	r6, r1
 800d98e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d992:	f7ff fadf 	bl	800cf54 <_malloc_r>
 800d996:	4604      	mov	r4, r0
 800d998:	b140      	cbz	r0, 800d9ac <__sfmoreglue+0x28>
 800d99a:	2100      	movs	r1, #0
 800d99c:	e9c0 1600 	strd	r1, r6, [r0]
 800d9a0:	300c      	adds	r0, #12
 800d9a2:	60a0      	str	r0, [r4, #8]
 800d9a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9a8:	f7fb ff8a 	bl	80098c0 <memset>
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}

0800d9b0 <__sfp_lock_acquire>:
 800d9b0:	4801      	ldr	r0, [pc, #4]	; (800d9b8 <__sfp_lock_acquire+0x8>)
 800d9b2:	f000 b8b3 	b.w	800db1c <__retarget_lock_acquire_recursive>
 800d9b6:	bf00      	nop
 800d9b8:	2000070d 	.word	0x2000070d

0800d9bc <__sfp_lock_release>:
 800d9bc:	4801      	ldr	r0, [pc, #4]	; (800d9c4 <__sfp_lock_release+0x8>)
 800d9be:	f000 b8ae 	b.w	800db1e <__retarget_lock_release_recursive>
 800d9c2:	bf00      	nop
 800d9c4:	2000070d 	.word	0x2000070d

0800d9c8 <__sinit_lock_acquire>:
 800d9c8:	4801      	ldr	r0, [pc, #4]	; (800d9d0 <__sinit_lock_acquire+0x8>)
 800d9ca:	f000 b8a7 	b.w	800db1c <__retarget_lock_acquire_recursive>
 800d9ce:	bf00      	nop
 800d9d0:	2000070e 	.word	0x2000070e

0800d9d4 <__sinit_lock_release>:
 800d9d4:	4801      	ldr	r0, [pc, #4]	; (800d9dc <__sinit_lock_release+0x8>)
 800d9d6:	f000 b8a2 	b.w	800db1e <__retarget_lock_release_recursive>
 800d9da:	bf00      	nop
 800d9dc:	2000070e 	.word	0x2000070e

0800d9e0 <__sinit>:
 800d9e0:	b510      	push	{r4, lr}
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	f7ff fff0 	bl	800d9c8 <__sinit_lock_acquire>
 800d9e8:	69a3      	ldr	r3, [r4, #24]
 800d9ea:	b11b      	cbz	r3, 800d9f4 <__sinit+0x14>
 800d9ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9f0:	f7ff bff0 	b.w	800d9d4 <__sinit_lock_release>
 800d9f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d9f8:	6523      	str	r3, [r4, #80]	; 0x50
 800d9fa:	4b13      	ldr	r3, [pc, #76]	; (800da48 <__sinit+0x68>)
 800d9fc:	4a13      	ldr	r2, [pc, #76]	; (800da4c <__sinit+0x6c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	62a2      	str	r2, [r4, #40]	; 0x28
 800da02:	42a3      	cmp	r3, r4
 800da04:	bf04      	itt	eq
 800da06:	2301      	moveq	r3, #1
 800da08:	61a3      	streq	r3, [r4, #24]
 800da0a:	4620      	mov	r0, r4
 800da0c:	f000 f820 	bl	800da50 <__sfp>
 800da10:	6060      	str	r0, [r4, #4]
 800da12:	4620      	mov	r0, r4
 800da14:	f000 f81c 	bl	800da50 <__sfp>
 800da18:	60a0      	str	r0, [r4, #8]
 800da1a:	4620      	mov	r0, r4
 800da1c:	f000 f818 	bl	800da50 <__sfp>
 800da20:	2200      	movs	r2, #0
 800da22:	60e0      	str	r0, [r4, #12]
 800da24:	2104      	movs	r1, #4
 800da26:	6860      	ldr	r0, [r4, #4]
 800da28:	f7ff ff82 	bl	800d930 <std>
 800da2c:	68a0      	ldr	r0, [r4, #8]
 800da2e:	2201      	movs	r2, #1
 800da30:	2109      	movs	r1, #9
 800da32:	f7ff ff7d 	bl	800d930 <std>
 800da36:	68e0      	ldr	r0, [r4, #12]
 800da38:	2202      	movs	r2, #2
 800da3a:	2112      	movs	r1, #18
 800da3c:	f7ff ff78 	bl	800d930 <std>
 800da40:	2301      	movs	r3, #1
 800da42:	61a3      	str	r3, [r4, #24]
 800da44:	e7d2      	b.n	800d9ec <__sinit+0xc>
 800da46:	bf00      	nop
 800da48:	0800e1c0 	.word	0x0800e1c0
 800da4c:	0800d979 	.word	0x0800d979

0800da50 <__sfp>:
 800da50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da52:	4607      	mov	r7, r0
 800da54:	f7ff ffac 	bl	800d9b0 <__sfp_lock_acquire>
 800da58:	4b1e      	ldr	r3, [pc, #120]	; (800dad4 <__sfp+0x84>)
 800da5a:	681e      	ldr	r6, [r3, #0]
 800da5c:	69b3      	ldr	r3, [r6, #24]
 800da5e:	b913      	cbnz	r3, 800da66 <__sfp+0x16>
 800da60:	4630      	mov	r0, r6
 800da62:	f7ff ffbd 	bl	800d9e0 <__sinit>
 800da66:	3648      	adds	r6, #72	; 0x48
 800da68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	d503      	bpl.n	800da78 <__sfp+0x28>
 800da70:	6833      	ldr	r3, [r6, #0]
 800da72:	b30b      	cbz	r3, 800dab8 <__sfp+0x68>
 800da74:	6836      	ldr	r6, [r6, #0]
 800da76:	e7f7      	b.n	800da68 <__sfp+0x18>
 800da78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800da7c:	b9d5      	cbnz	r5, 800dab4 <__sfp+0x64>
 800da7e:	4b16      	ldr	r3, [pc, #88]	; (800dad8 <__sfp+0x88>)
 800da80:	60e3      	str	r3, [r4, #12]
 800da82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da86:	6665      	str	r5, [r4, #100]	; 0x64
 800da88:	f000 f847 	bl	800db1a <__retarget_lock_init_recursive>
 800da8c:	f7ff ff96 	bl	800d9bc <__sfp_lock_release>
 800da90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800da94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800da98:	6025      	str	r5, [r4, #0]
 800da9a:	61a5      	str	r5, [r4, #24]
 800da9c:	2208      	movs	r2, #8
 800da9e:	4629      	mov	r1, r5
 800daa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800daa4:	f7fb ff0c 	bl	80098c0 <memset>
 800daa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800daac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dab0:	4620      	mov	r0, r4
 800dab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab4:	3468      	adds	r4, #104	; 0x68
 800dab6:	e7d9      	b.n	800da6c <__sfp+0x1c>
 800dab8:	2104      	movs	r1, #4
 800daba:	4638      	mov	r0, r7
 800dabc:	f7ff ff62 	bl	800d984 <__sfmoreglue>
 800dac0:	4604      	mov	r4, r0
 800dac2:	6030      	str	r0, [r6, #0]
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d1d5      	bne.n	800da74 <__sfp+0x24>
 800dac8:	f7ff ff78 	bl	800d9bc <__sfp_lock_release>
 800dacc:	230c      	movs	r3, #12
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	e7ee      	b.n	800dab0 <__sfp+0x60>
 800dad2:	bf00      	nop
 800dad4:	0800e1c0 	.word	0x0800e1c0
 800dad8:	ffff0001 	.word	0xffff0001

0800dadc <_fwalk_reent>:
 800dadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae0:	4606      	mov	r6, r0
 800dae2:	4688      	mov	r8, r1
 800dae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dae8:	2700      	movs	r7, #0
 800daea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800daee:	f1b9 0901 	subs.w	r9, r9, #1
 800daf2:	d505      	bpl.n	800db00 <_fwalk_reent+0x24>
 800daf4:	6824      	ldr	r4, [r4, #0]
 800daf6:	2c00      	cmp	r4, #0
 800daf8:	d1f7      	bne.n	800daea <_fwalk_reent+0xe>
 800dafa:	4638      	mov	r0, r7
 800dafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db00:	89ab      	ldrh	r3, [r5, #12]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d907      	bls.n	800db16 <_fwalk_reent+0x3a>
 800db06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db0a:	3301      	adds	r3, #1
 800db0c:	d003      	beq.n	800db16 <_fwalk_reent+0x3a>
 800db0e:	4629      	mov	r1, r5
 800db10:	4630      	mov	r0, r6
 800db12:	47c0      	blx	r8
 800db14:	4307      	orrs	r7, r0
 800db16:	3568      	adds	r5, #104	; 0x68
 800db18:	e7e9      	b.n	800daee <_fwalk_reent+0x12>

0800db1a <__retarget_lock_init_recursive>:
 800db1a:	4770      	bx	lr

0800db1c <__retarget_lock_acquire_recursive>:
 800db1c:	4770      	bx	lr

0800db1e <__retarget_lock_release_recursive>:
 800db1e:	4770      	bx	lr

0800db20 <__swhatbuf_r>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	460e      	mov	r6, r1
 800db24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db28:	2900      	cmp	r1, #0
 800db2a:	b096      	sub	sp, #88	; 0x58
 800db2c:	4614      	mov	r4, r2
 800db2e:	461d      	mov	r5, r3
 800db30:	da08      	bge.n	800db44 <__swhatbuf_r+0x24>
 800db32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	602a      	str	r2, [r5, #0]
 800db3a:	061a      	lsls	r2, r3, #24
 800db3c:	d410      	bmi.n	800db60 <__swhatbuf_r+0x40>
 800db3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db42:	e00e      	b.n	800db62 <__swhatbuf_r+0x42>
 800db44:	466a      	mov	r2, sp
 800db46:	f000 f951 	bl	800ddec <_fstat_r>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	dbf1      	blt.n	800db32 <__swhatbuf_r+0x12>
 800db4e:	9a01      	ldr	r2, [sp, #4]
 800db50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db58:	425a      	negs	r2, r3
 800db5a:	415a      	adcs	r2, r3
 800db5c:	602a      	str	r2, [r5, #0]
 800db5e:	e7ee      	b.n	800db3e <__swhatbuf_r+0x1e>
 800db60:	2340      	movs	r3, #64	; 0x40
 800db62:	2000      	movs	r0, #0
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	b016      	add	sp, #88	; 0x58
 800db68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800db6c <__smakebuf_r>:
 800db6c:	898b      	ldrh	r3, [r1, #12]
 800db6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db70:	079d      	lsls	r5, r3, #30
 800db72:	4606      	mov	r6, r0
 800db74:	460c      	mov	r4, r1
 800db76:	d507      	bpl.n	800db88 <__smakebuf_r+0x1c>
 800db78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db7c:	6023      	str	r3, [r4, #0]
 800db7e:	6123      	str	r3, [r4, #16]
 800db80:	2301      	movs	r3, #1
 800db82:	6163      	str	r3, [r4, #20]
 800db84:	b002      	add	sp, #8
 800db86:	bd70      	pop	{r4, r5, r6, pc}
 800db88:	ab01      	add	r3, sp, #4
 800db8a:	466a      	mov	r2, sp
 800db8c:	f7ff ffc8 	bl	800db20 <__swhatbuf_r>
 800db90:	9900      	ldr	r1, [sp, #0]
 800db92:	4605      	mov	r5, r0
 800db94:	4630      	mov	r0, r6
 800db96:	f7ff f9dd 	bl	800cf54 <_malloc_r>
 800db9a:	b948      	cbnz	r0, 800dbb0 <__smakebuf_r+0x44>
 800db9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dba0:	059a      	lsls	r2, r3, #22
 800dba2:	d4ef      	bmi.n	800db84 <__smakebuf_r+0x18>
 800dba4:	f023 0303 	bic.w	r3, r3, #3
 800dba8:	f043 0302 	orr.w	r3, r3, #2
 800dbac:	81a3      	strh	r3, [r4, #12]
 800dbae:	e7e3      	b.n	800db78 <__smakebuf_r+0xc>
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	; (800dbe8 <__smakebuf_r+0x7c>)
 800dbb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbb4:	89a3      	ldrh	r3, [r4, #12]
 800dbb6:	6020      	str	r0, [r4, #0]
 800dbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbbc:	81a3      	strh	r3, [r4, #12]
 800dbbe:	9b00      	ldr	r3, [sp, #0]
 800dbc0:	6163      	str	r3, [r4, #20]
 800dbc2:	9b01      	ldr	r3, [sp, #4]
 800dbc4:	6120      	str	r0, [r4, #16]
 800dbc6:	b15b      	cbz	r3, 800dbe0 <__smakebuf_r+0x74>
 800dbc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbcc:	4630      	mov	r0, r6
 800dbce:	f000 f91f 	bl	800de10 <_isatty_r>
 800dbd2:	b128      	cbz	r0, 800dbe0 <__smakebuf_r+0x74>
 800dbd4:	89a3      	ldrh	r3, [r4, #12]
 800dbd6:	f023 0303 	bic.w	r3, r3, #3
 800dbda:	f043 0301 	orr.w	r3, r3, #1
 800dbde:	81a3      	strh	r3, [r4, #12]
 800dbe0:	89a0      	ldrh	r0, [r4, #12]
 800dbe2:	4305      	orrs	r5, r0
 800dbe4:	81a5      	strh	r5, [r4, #12]
 800dbe6:	e7cd      	b.n	800db84 <__smakebuf_r+0x18>
 800dbe8:	0800d979 	.word	0x0800d979

0800dbec <memmove>:
 800dbec:	4288      	cmp	r0, r1
 800dbee:	b510      	push	{r4, lr}
 800dbf0:	eb01 0402 	add.w	r4, r1, r2
 800dbf4:	d902      	bls.n	800dbfc <memmove+0x10>
 800dbf6:	4284      	cmp	r4, r0
 800dbf8:	4623      	mov	r3, r4
 800dbfa:	d807      	bhi.n	800dc0c <memmove+0x20>
 800dbfc:	1e43      	subs	r3, r0, #1
 800dbfe:	42a1      	cmp	r1, r4
 800dc00:	d008      	beq.n	800dc14 <memmove+0x28>
 800dc02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc0a:	e7f8      	b.n	800dbfe <memmove+0x12>
 800dc0c:	4402      	add	r2, r0
 800dc0e:	4601      	mov	r1, r0
 800dc10:	428a      	cmp	r2, r1
 800dc12:	d100      	bne.n	800dc16 <memmove+0x2a>
 800dc14:	bd10      	pop	{r4, pc}
 800dc16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc1e:	e7f7      	b.n	800dc10 <memmove+0x24>

0800dc20 <__malloc_lock>:
 800dc20:	4801      	ldr	r0, [pc, #4]	; (800dc28 <__malloc_lock+0x8>)
 800dc22:	f7ff bf7b 	b.w	800db1c <__retarget_lock_acquire_recursive>
 800dc26:	bf00      	nop
 800dc28:	2000070c 	.word	0x2000070c

0800dc2c <__malloc_unlock>:
 800dc2c:	4801      	ldr	r0, [pc, #4]	; (800dc34 <__malloc_unlock+0x8>)
 800dc2e:	f7ff bf76 	b.w	800db1e <__retarget_lock_release_recursive>
 800dc32:	bf00      	nop
 800dc34:	2000070c 	.word	0x2000070c

0800dc38 <_realloc_r>:
 800dc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3c:	4680      	mov	r8, r0
 800dc3e:	4614      	mov	r4, r2
 800dc40:	460e      	mov	r6, r1
 800dc42:	b921      	cbnz	r1, 800dc4e <_realloc_r+0x16>
 800dc44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc48:	4611      	mov	r1, r2
 800dc4a:	f7ff b983 	b.w	800cf54 <_malloc_r>
 800dc4e:	b92a      	cbnz	r2, 800dc5c <_realloc_r+0x24>
 800dc50:	f7ff f914 	bl	800ce7c <_free_r>
 800dc54:	4625      	mov	r5, r4
 800dc56:	4628      	mov	r0, r5
 800dc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc5c:	f000 f8fa 	bl	800de54 <_malloc_usable_size_r>
 800dc60:	4284      	cmp	r4, r0
 800dc62:	4607      	mov	r7, r0
 800dc64:	d802      	bhi.n	800dc6c <_realloc_r+0x34>
 800dc66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc6a:	d812      	bhi.n	800dc92 <_realloc_r+0x5a>
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	4640      	mov	r0, r8
 800dc70:	f7ff f970 	bl	800cf54 <_malloc_r>
 800dc74:	4605      	mov	r5, r0
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d0ed      	beq.n	800dc56 <_realloc_r+0x1e>
 800dc7a:	42bc      	cmp	r4, r7
 800dc7c:	4622      	mov	r2, r4
 800dc7e:	4631      	mov	r1, r6
 800dc80:	bf28      	it	cs
 800dc82:	463a      	movcs	r2, r7
 800dc84:	f7fb fe0e 	bl	80098a4 <memcpy>
 800dc88:	4631      	mov	r1, r6
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	f7ff f8f6 	bl	800ce7c <_free_r>
 800dc90:	e7e1      	b.n	800dc56 <_realloc_r+0x1e>
 800dc92:	4635      	mov	r5, r6
 800dc94:	e7df      	b.n	800dc56 <_realloc_r+0x1e>

0800dc96 <_raise_r>:
 800dc96:	291f      	cmp	r1, #31
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	4604      	mov	r4, r0
 800dc9c:	460d      	mov	r5, r1
 800dc9e:	d904      	bls.n	800dcaa <_raise_r+0x14>
 800dca0:	2316      	movs	r3, #22
 800dca2:	6003      	str	r3, [r0, #0]
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	bd38      	pop	{r3, r4, r5, pc}
 800dcaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dcac:	b112      	cbz	r2, 800dcb4 <_raise_r+0x1e>
 800dcae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcb2:	b94b      	cbnz	r3, 800dcc8 <_raise_r+0x32>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 f831 	bl	800dd1c <_getpid_r>
 800dcba:	462a      	mov	r2, r5
 800dcbc:	4601      	mov	r1, r0
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcc4:	f000 b818 	b.w	800dcf8 <_kill_r>
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d00a      	beq.n	800dce2 <_raise_r+0x4c>
 800dccc:	1c59      	adds	r1, r3, #1
 800dcce:	d103      	bne.n	800dcd8 <_raise_r+0x42>
 800dcd0:	2316      	movs	r3, #22
 800dcd2:	6003      	str	r3, [r0, #0]
 800dcd4:	2001      	movs	r0, #1
 800dcd6:	e7e7      	b.n	800dca8 <_raise_r+0x12>
 800dcd8:	2400      	movs	r4, #0
 800dcda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dcde:	4628      	mov	r0, r5
 800dce0:	4798      	blx	r3
 800dce2:	2000      	movs	r0, #0
 800dce4:	e7e0      	b.n	800dca8 <_raise_r+0x12>
	...

0800dce8 <raise>:
 800dce8:	4b02      	ldr	r3, [pc, #8]	; (800dcf4 <raise+0xc>)
 800dcea:	4601      	mov	r1, r0
 800dcec:	6818      	ldr	r0, [r3, #0]
 800dcee:	f7ff bfd2 	b.w	800dc96 <_raise_r>
 800dcf2:	bf00      	nop
 800dcf4:	2000000c 	.word	0x2000000c

0800dcf8 <_kill_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d07      	ldr	r5, [pc, #28]	; (800dd18 <_kill_r+0x20>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	4611      	mov	r1, r2
 800dd04:	602b      	str	r3, [r5, #0]
 800dd06:	f7f4 ff43 	bl	8002b90 <_kill>
 800dd0a:	1c43      	adds	r3, r0, #1
 800dd0c:	d102      	bne.n	800dd14 <_kill_r+0x1c>
 800dd0e:	682b      	ldr	r3, [r5, #0]
 800dd10:	b103      	cbz	r3, 800dd14 <_kill_r+0x1c>
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	bd38      	pop	{r3, r4, r5, pc}
 800dd16:	bf00      	nop
 800dd18:	20000710 	.word	0x20000710

0800dd1c <_getpid_r>:
 800dd1c:	f7f4 bf30 	b.w	8002b80 <_getpid>

0800dd20 <__sread>:
 800dd20:	b510      	push	{r4, lr}
 800dd22:	460c      	mov	r4, r1
 800dd24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd28:	f000 f89c 	bl	800de64 <_read_r>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	bfab      	itete	ge
 800dd30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dd32:	89a3      	ldrhlt	r3, [r4, #12]
 800dd34:	181b      	addge	r3, r3, r0
 800dd36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dd3a:	bfac      	ite	ge
 800dd3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd3e:	81a3      	strhlt	r3, [r4, #12]
 800dd40:	bd10      	pop	{r4, pc}

0800dd42 <__swrite>:
 800dd42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd46:	461f      	mov	r7, r3
 800dd48:	898b      	ldrh	r3, [r1, #12]
 800dd4a:	05db      	lsls	r3, r3, #23
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	4616      	mov	r6, r2
 800dd52:	d505      	bpl.n	800dd60 <__swrite+0x1e>
 800dd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd58:	2302      	movs	r3, #2
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f000 f868 	bl	800de30 <_lseek_r>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd6a:	81a3      	strh	r3, [r4, #12]
 800dd6c:	4632      	mov	r2, r6
 800dd6e:	463b      	mov	r3, r7
 800dd70:	4628      	mov	r0, r5
 800dd72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd76:	f000 b817 	b.w	800dda8 <_write_r>

0800dd7a <__sseek>:
 800dd7a:	b510      	push	{r4, lr}
 800dd7c:	460c      	mov	r4, r1
 800dd7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd82:	f000 f855 	bl	800de30 <_lseek_r>
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	bf15      	itete	ne
 800dd8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd96:	81a3      	strheq	r3, [r4, #12]
 800dd98:	bf18      	it	ne
 800dd9a:	81a3      	strhne	r3, [r4, #12]
 800dd9c:	bd10      	pop	{r4, pc}

0800dd9e <__sclose>:
 800dd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda2:	f000 b813 	b.w	800ddcc <_close_r>
	...

0800dda8 <_write_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4d07      	ldr	r5, [pc, #28]	; (800ddc8 <_write_r+0x20>)
 800ddac:	4604      	mov	r4, r0
 800ddae:	4608      	mov	r0, r1
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	602a      	str	r2, [r5, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f7f4 ff21 	bl	8002bfe <_write>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_write_r+0x1e>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_write_r+0x1e>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20000710 	.word	0x20000710

0800ddcc <_close_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4d06      	ldr	r5, [pc, #24]	; (800dde8 <_close_r+0x1c>)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	602b      	str	r3, [r5, #0]
 800ddd8:	f7f4 ff2d 	bl	8002c36 <_close>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_close_r+0x1a>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_close_r+0x1a>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20000710 	.word	0x20000710

0800ddec <_fstat_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4d07      	ldr	r5, [pc, #28]	; (800de0c <_fstat_r+0x20>)
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	602b      	str	r3, [r5, #0]
 800ddfa:	f7f4 ff28 	bl	8002c4e <_fstat>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d102      	bne.n	800de08 <_fstat_r+0x1c>
 800de02:	682b      	ldr	r3, [r5, #0]
 800de04:	b103      	cbz	r3, 800de08 <_fstat_r+0x1c>
 800de06:	6023      	str	r3, [r4, #0]
 800de08:	bd38      	pop	{r3, r4, r5, pc}
 800de0a:	bf00      	nop
 800de0c:	20000710 	.word	0x20000710

0800de10 <_isatty_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d06      	ldr	r5, [pc, #24]	; (800de2c <_isatty_r+0x1c>)
 800de14:	2300      	movs	r3, #0
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	602b      	str	r3, [r5, #0]
 800de1c:	f7f4 ff27 	bl	8002c6e <_isatty>
 800de20:	1c43      	adds	r3, r0, #1
 800de22:	d102      	bne.n	800de2a <_isatty_r+0x1a>
 800de24:	682b      	ldr	r3, [r5, #0]
 800de26:	b103      	cbz	r3, 800de2a <_isatty_r+0x1a>
 800de28:	6023      	str	r3, [r4, #0]
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	20000710 	.word	0x20000710

0800de30 <_lseek_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4d07      	ldr	r5, [pc, #28]	; (800de50 <_lseek_r+0x20>)
 800de34:	4604      	mov	r4, r0
 800de36:	4608      	mov	r0, r1
 800de38:	4611      	mov	r1, r2
 800de3a:	2200      	movs	r2, #0
 800de3c:	602a      	str	r2, [r5, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	f7f4 ff20 	bl	8002c84 <_lseek>
 800de44:	1c43      	adds	r3, r0, #1
 800de46:	d102      	bne.n	800de4e <_lseek_r+0x1e>
 800de48:	682b      	ldr	r3, [r5, #0]
 800de4a:	b103      	cbz	r3, 800de4e <_lseek_r+0x1e>
 800de4c:	6023      	str	r3, [r4, #0]
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	20000710 	.word	0x20000710

0800de54 <_malloc_usable_size_r>:
 800de54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de58:	1f18      	subs	r0, r3, #4
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	bfbc      	itt	lt
 800de5e:	580b      	ldrlt	r3, [r1, r0]
 800de60:	18c0      	addlt	r0, r0, r3
 800de62:	4770      	bx	lr

0800de64 <_read_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	; (800de84 <_read_r+0x20>)
 800de68:	4604      	mov	r4, r0
 800de6a:	4608      	mov	r0, r1
 800de6c:	4611      	mov	r1, r2
 800de6e:	2200      	movs	r2, #0
 800de70:	602a      	str	r2, [r5, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	f7f4 fea6 	bl	8002bc4 <_read>
 800de78:	1c43      	adds	r3, r0, #1
 800de7a:	d102      	bne.n	800de82 <_read_r+0x1e>
 800de7c:	682b      	ldr	r3, [r5, #0]
 800de7e:	b103      	cbz	r3, 800de82 <_read_r+0x1e>
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	bd38      	pop	{r3, r4, r5, pc}
 800de84:	20000710 	.word	0x20000710

0800de88 <_init>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr

0800de94 <_fini>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	bf00      	nop
 800de98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de9a:	bc08      	pop	{r3}
 800de9c:	469e      	mov	lr, r3
 800de9e:	4770      	bx	lr
