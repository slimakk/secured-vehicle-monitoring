
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  0800cbe8  0800cbe8  0001cbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2d8  0800d2d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2d8  0800d2d8  0001d2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2e0  0800d2e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2e0  0800d2e0  0001d2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d2e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200001e0  0800d4c4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000720  0800d4c4  00020720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1ce  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be7  00000000  00000000  0003b3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003efc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  000405b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027521  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d277  00000000  00000000  00068f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ad7  00000000  00000000  00086198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e30  00000000  00000000  00169cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbcc 	.word	0x0800cbcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800cbcc 	.word	0x0800cbcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <kline_init>:

static void MX_GPIO_KLineUART_Init(void);
static void uart_pin_state(uint8_t state);
static uint8_t verify_checksum (uint8_t *data, uint8_t lenght);

obd_protocol kline_init(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 8000f52:	f000 f909 	bl	8001168 <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 8000f56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f5a:	f002 fe13 	bl	8003b84 <HAL_Delay>
	uart_pin_state(0); //0
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f918 	bl	8001194 <uart_pin_state>
	HAL_Delay(200);
 8000f64:	20c8      	movs	r0, #200	; 0xc8
 8000f66:	f002 fe0d 	bl	8003b84 <HAL_Delay>
	uart_pin_state(1);//11
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f912 	bl	8001194 <uart_pin_state>
	HAL_Delay(400);
 8000f70:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f74:	f002 fe06 	bl	8003b84 <HAL_Delay>
	uart_pin_state(0);//00
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f90b 	bl	8001194 <uart_pin_state>
	HAL_Delay(400);
 8000f7e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f82:	f002 fdff 	bl	8003b84 <HAL_Delay>
	uart_pin_state(1);//11
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 f904 	bl	8001194 <uart_pin_state>
	HAL_Delay(400);
 8000f8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f90:	f002 fdf8 	bl	8003b84 <HAL_Delay>
	uart_pin_state(0);//00
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 f8fd 	bl	8001194 <uart_pin_state>
	HAL_Delay(400);
 8000f9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f9e:	f002 fdf1 	bl	8003b84 <HAL_Delay>
	uart_pin_state(1);//1
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 f8f6 	bl	8001194 <uart_pin_state>

	MX_USART1_UART_Init();
 8000fa8:	f001 ffe2 	bl	8002f70 <MX_USART1_UART_Init>

	HAL_UART_Receive(KLINE, uartBuf, 3, 500);
 8000fac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	492b      	ldr	r1, [pc, #172]	; (8001060 <kline_init+0x114>)
 8000fb4:	482b      	ldr	r0, [pc, #172]	; (8001064 <kline_init+0x118>)
 8000fb6:	f007 f8d8 	bl	800816a <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 8000fba:	4b29      	ldr	r3, [pc, #164]	; (8001060 <kline_init+0x114>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b55      	cmp	r3, #85	; 0x55
 8000fc0:	d001      	beq.n	8000fc6 <kline_init+0x7a>
	{
		return (OBD_NONE);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e047      	b.n	8001056 <kline_init+0x10a>
	}
	else if(uartBuf[1] == uartBuf[2])
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <kline_init+0x114>)
 8000fc8:	785a      	ldrb	r2, [r3, #1]
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <kline_init+0x114>)
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d122      	bne.n	8001018 <kline_init+0xcc>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <kline_init+0x114>)
 8000fd4:	785b      	ldrb	r3, [r3, #1]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8000fdc:	2019      	movs	r0, #25
 8000fde:	f002 fdd1 	bl	8003b84 <HAL_Delay>
			HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 8000fe2:	1df9      	adds	r1, r7, #7
 8000fe4:	2332      	movs	r3, #50	; 0x32
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <kline_init+0x118>)
 8000fea:	f007 f82a 	bl	8008042 <HAL_UART_Transmit>
			HAL_Delay(25);
 8000fee:	2019      	movs	r0, #25
 8000ff0:	f002 fdc8 	bl	8003b84 <HAL_Delay>
			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <kline_init+0x118>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	8b1b      	ldrh	r3, [r3, #24]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <kline_init+0x118>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f042 0208 	orr.w	r2, r2, #8
 8001004:	b292      	uxth	r2, r2
 8001006:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 8001008:	2364      	movs	r3, #100	; 0x64
 800100a:	2201      	movs	r2, #1
 800100c:	4916      	ldr	r1, [pc, #88]	; (8001068 <kline_init+0x11c>)
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <kline_init+0x118>)
 8001010:	f007 f8ab 	bl	800816a <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
			return (OBD_PROTO_ISO9141);
 8001014:	2301      	movs	r3, #1
 8001016:	e01e      	b.n	8001056 <kline_init+0x10a>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <kline_init+0x114>)
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	43db      	mvns	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 8001022:	2019      	movs	r0, #25
 8001024:	f002 fdae 	bl	8003b84 <HAL_Delay>
		HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 8001028:	1db9      	adds	r1, r7, #6
 800102a:	2332      	movs	r3, #50	; 0x32
 800102c:	2201      	movs	r2, #1
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <kline_init+0x118>)
 8001030:	f007 f807 	bl	8008042 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <kline_init+0x118>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	8b1b      	ldrh	r3, [r3, #24]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <kline_init+0x118>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0208 	orr.w	r2, r2, #8
 8001044:	b292      	uxth	r2, r2
 8001046:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 8001048:	2364      	movs	r3, #100	; 0x64
 800104a:	2201      	movs	r2, #1
 800104c:	4906      	ldr	r1, [pc, #24]	; (8001068 <kline_init+0x11c>)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <kline_init+0x118>)
 8001050:	f007 f88b 	bl	800816a <HAL_UART_Receive>
		return (OBD_PROTO_KWP2000_SLOW);
 8001054:	2302      	movs	r3, #2
	}
	return (OBD_NONE);
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200002b0 	.word	0x200002b0
 8001064:	2000050c 	.word	0x2000050c
 8001068:	20000213 	.word	0x20000213

0800106c <kwp2000_fast_init>:

obd_protocol kwp2000_fast_init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 8001072:	4a37      	ldr	r2, [pc, #220]	; (8001150 <kwp2000_fast_init+0xe4>)
 8001074:	463b      	mov	r3, r7
 8001076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800107a:	6018      	str	r0, [r3, #0]
 800107c:	3304      	adds	r3, #4
 800107e:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <kwp2000_fast_init+0xe8>)
 8001086:	2201      	movs	r2, #1
 8001088:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_UART_DeInit(KLINE);
 800108c:	4832      	ldr	r0, [pc, #200]	; (8001158 <kwp2000_fast_init+0xec>)
 800108e:	f006 ff9f 	bl	8007fd0 <HAL_UART_DeInit>
	HAL_Delay(3000);
 8001092:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001096:	f002 fd75 	bl	8003b84 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 800109a:	f000 f865 	bl	8001168 <MX_GPIO_KLineUART_Init>
	uart_pin_state(0);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f878 	bl	8001194 <uart_pin_state>
	HAL_Delay(25);
 80010a4:	2019      	movs	r0, #25
 80010a6:	f002 fd6d 	bl	8003b84 <HAL_Delay>
	uart_pin_state(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 f872 	bl	8001194 <uart_pin_state>
	HAL_Delay(25);
 80010b0:	2019      	movs	r0, #25
 80010b2:	f002 fd67 	bl	8003b84 <HAL_Delay>
	if (HAL_UART_Init(KLINE) != HAL_OK)
 80010b6:	4828      	ldr	r0, [pc, #160]	; (8001158 <kwp2000_fast_init+0xec>)
 80010b8:	f006 ff3c 	bl	8007f34 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <kwp2000_fast_init+0x5a>
	{
		Error_Handler();
 80010c2:	f001 fc28 	bl	8002916 <Error_Handler>
	}
	HAL_UART_Transmit(KLINE, start_msg, 5, 10);
 80010c6:	4639      	mov	r1, r7
 80010c8:	230a      	movs	r3, #10
 80010ca:	2205      	movs	r2, #5
 80010cc:	4822      	ldr	r0, [pc, #136]	; (8001158 <kwp2000_fast_init+0xec>)
 80010ce:	f006 ffb8 	bl	8008042 <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);

	HAL_UART_Receive_DMA(KLINE, uartBuf, 8);
 80010d2:	2208      	movs	r2, #8
 80010d4:	4921      	ldr	r1, [pc, #132]	; (800115c <kwp2000_fast_init+0xf0>)
 80010d6:	4820      	ldr	r0, [pc, #128]	; (8001158 <kwp2000_fast_init+0xec>)
 80010d8:	f007 f96e 	bl	80083b8 <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(KLINE_TIMER);
 80010dc:	4820      	ldr	r0, [pc, #128]	; (8001160 <kwp2000_fast_init+0xf4>)
 80010de:	f006 fb13 	bl	8007708 <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 80010e2:	e000      	b.n	80010e6 <kwp2000_fast_init+0x7a>
	{
		__NOP();
 80010e4:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <kwp2000_fast_init+0xe8>)
 80010e8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <kwp2000_fast_init+0x8e>
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <kwp2000_fast_init+0xe8>)
 80010f2:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d1f4      	bne.n	80010e4 <kwp2000_fast_init+0x78>
	}
	if(obd_comm.msg_type == 0)
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <kwp2000_fast_init+0xe8>)
 80010fc:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d11f      	bne.n	8001144 <kwp2000_fast_init+0xd8>
	{
		for(int i = 1; i < 7; i++)
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	e009      	b.n	800111e <kwp2000_fast_init+0xb2>
		{
			checksum = checksum + uartBuf[i];
 800110a:	4a14      	ldr	r2, [pc, #80]	; (800115c <kwp2000_fast_init+0xf0>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	4413      	add	r3, r2
 8001116:	73fb      	strb	r3, [r7, #15]
		for(int i = 1; i < 7; i++)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b06      	cmp	r3, #6
 8001122:	ddf2      	ble.n	800110a <kwp2000_fast_init+0x9e>
		}
		checksum = checksum % 256;
		if(checksum == uartBuf[7] && checksum != 0)
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <kwp2000_fast_init+0xf0>)
 8001126:	79db      	ldrb	r3, [r3, #7]
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	429a      	cmp	r2, r3
 800112c:	d108      	bne.n	8001140 <kwp2000_fast_init+0xd4>
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <kwp2000_fast_init+0xd4>
		{
			ecu_addr = uartBuf[3];
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <kwp2000_fast_init+0xf0>)
 8001136:	78da      	ldrb	r2, [r3, #3]
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <kwp2000_fast_init+0xf8>)
 800113a:	701a      	strb	r2, [r3, #0]
			return (OBD_PROTO_KWP2000_FAST);
 800113c:	2303      	movs	r3, #3
 800113e:	e002      	b.n	8001146 <kwp2000_fast_init+0xda>
		}
		else
			return (OBD_NONE);
 8001140:	2300      	movs	r3, #0
 8001142:	e000      	b.n	8001146 <kwp2000_fast_init+0xda>
	}
	else
		return (OBD_NONE);
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	0800cbe8 	.word	0x0800cbe8
 8001154:	200002bc 	.word	0x200002bc
 8001158:	2000050c 	.word	0x2000050c
 800115c:	200002b0 	.word	0x200002b0
 8001160:	20000428 	.word	0x20000428
 8001164:	20000213 	.word	0x20000213

08001168 <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = K_Line_TX_Pin;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(K_Line_TX_GPIO_Port, &GPIO_InitStruct);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_GPIO_KLineUART_Init+0x28>)
 8001184:	f004 fe58 	bl	8005e38 <HAL_GPIO_Init>
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	48000400 	.word	0x48000400

08001194 <uart_pin_state>:

static void uart_pin_state(uint8_t state)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d10c      	bne.n	80011be <uart_pin_state+0x2a>
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <uart_pin_state+0x4c>)
 80011aa:	f005 f899 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f005 f892 	bl	80062e0 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
	}
}
 80011bc:	e00b      	b.n	80011d6 <uart_pin_state+0x42>
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2140      	movs	r1, #64	; 0x40
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <uart_pin_state+0x4c>)
 80011c4:	f005 f88c 	bl	80062e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f005 f885 	bl	80062e0 <HAL_GPIO_WritePin>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	48000400 	.word	0x48000400

080011e4 <kline_send_msg>:

uint8_t kline_send_msg(uint8_t *tx_frame)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 80011ec:	2368      	movs	r3, #104	; 0x68
 80011ee:	723b      	strb	r3, [r7, #8]
 80011f0:	236a      	movs	r3, #106	; 0x6a
 80011f2:	727b      	strb	r3, [r7, #9]
 80011f4:	23f1      	movs	r3, #241	; 0xf1
 80011f6:	72bb      	strb	r3, [r7, #10]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	72fb      	strb	r3, [r7, #11]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	785b      	ldrb	r3, [r3, #1]
 8001202:	733b      	strb	r3, [r7, #12]
 8001204:	2300      	movs	r3, #0
 8001206:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fe3e 	bl	8001e90 <PID_Get_Lenght>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <kline_send_msg+0x128>)
 800121a:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	e00a      	b.n	800123c <kline_send_msg+0x58>
	{
		checksum += kline_msg[i];
 8001226:	f107 0208 	add.w	r2, r7, #8
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4413      	add	r3, r2
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	4413      	add	r3, r2
 8001234:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	3301      	adds	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b04      	cmp	r3, #4
 8001240:	d9f1      	bls.n	8001226 <kline_send_msg+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(KLINE, kline_msg, sizeof(kline_msg), 12);
 8001246:	f107 0108 	add.w	r1, r7, #8
 800124a:	230c      	movs	r3, #12
 800124c:	2206      	movs	r2, #6
 800124e:	4830      	ldr	r0, [pc, #192]	; (8001310 <kline_send_msg+0x12c>)
 8001250:	f006 fef7 	bl	8008042 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <kline_send_msg+0x12c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	8b1b      	ldrh	r3, [r3, #24]
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <kline_send_msg+0x12c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0208 	orr.w	r2, r2, #8
 8001264:	b292      	uxth	r2, r2
 8001266:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 4);
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <kline_send_msg+0x128>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	3304      	adds	r3, #4
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4927      	ldr	r1, [pc, #156]	; (8001314 <kline_send_msg+0x130>)
 8001276:	4826      	ldr	r0, [pc, #152]	; (8001310 <kline_send_msg+0x12c>)
 8001278:	f007 f89e 	bl	80083b8 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start_IT(MSG_TIMER);
 800127c:	4826      	ldr	r0, [pc, #152]	; (8001318 <kline_send_msg+0x134>)
 800127e:	f006 fa43 	bl	8007708 <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8001282:	e000      	b.n	8001286 <kline_send_msg+0xa2>
	{
		__NOP();
 8001284:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <kline_send_msg+0x138>)
 8001288:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d004      	beq.n	800129a <kline_send_msg+0xb6>
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <kline_send_msg+0x138>)
 8001292:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001296:	2b01      	cmp	r3, #1
 8001298:	d1f4      	bne.n	8001284 <kline_send_msg+0xa0>
	}
	if(obd_comm.timeout == 1)
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <kline_send_msg+0x138>)
 800129c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d101      	bne.n	80012a8 <kline_send_msg+0xc4>
	{
		return (FALSE);
 80012a4:	2300      	movs	r3, #0
 80012a6:	e02c      	b.n	8001302 <kline_send_msg+0x11e>
	}
	if(verify_checksum(kline_rx_buf, pid_length + 5))
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <kline_send_msg+0x128>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	3305      	adds	r3, #5
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <kline_send_msg+0x130>)
 80012b4:	f000 f8dc 	bl	8001470 <verify_checksum>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d020      	beq.n	8001300 <kline_send_msg+0x11c>
	{
		uint8_t j = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80012c2:	2302      	movs	r3, #2
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	e00b      	b.n	80012e0 <kline_send_msg+0xfc>
		{
			rx_frame[j] = kline_rx_buf[i];
 80012c8:	7bba      	ldrb	r2, [r7, #14]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4911      	ldr	r1, [pc, #68]	; (8001314 <kline_send_msg+0x130>)
 80012ce:	5c89      	ldrb	r1, [r1, r2]
 80012d0:	4a13      	ldr	r2, [pc, #76]	; (8001320 <kline_send_msg+0x13c>)
 80012d2:	54d1      	strb	r1, [r2, r3]
			j++;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	3301      	adds	r3, #1
 80012de:	73bb      	strb	r3, [r7, #14]
 80012e0:	7bba      	ldrb	r2, [r7, #14]
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <kline_send_msg+0x128>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dded      	ble.n	80012c8 <kline_send_msg+0xe4>
		}
		obd_comm.current_value = obd2_pid_parse(rx_frame);
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <kline_send_msg+0x13c>)
 80012ee:	f000 f9cf 	bl	8001690 <obd2_pid_parse>
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <kline_send_msg+0x138>)
 80012f8:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		return (TRUE);
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <kline_send_msg+0x11e>
	}
	return (FALSE);
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000214 	.word	0x20000214
 8001310:	2000050c 	.word	0x2000050c
 8001314:	200001fc 	.word	0x200001fc
 8001318:	200004c0 	.word	0x200004c0
 800131c:	200002bc 	.word	0x200002bc
 8001320:	2000020c 	.word	0x2000020c

08001324 <kwp2000_send_msg>:

uint8_t kwp2000_send_msg(uint8_t *tx_frame)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 800132c:	23c2      	movs	r3, #194	; 0xc2
 800132e:	723b      	strb	r3, [r7, #8]
 8001330:	2333      	movs	r3, #51	; 0x33
 8001332:	727b      	strb	r3, [r7, #9]
 8001334:	23f1      	movs	r3, #241	; 0xf1
 8001336:	72bb      	strb	r3, [r7, #10]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	72fb      	strb	r3, [r7, #11]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	733b      	strb	r3, [r7, #12]
 8001344:	2300      	movs	r3, #0
 8001346:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3301      	adds	r3, #1
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fd9e 	bl	8001e90 <PID_Get_Lenght>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <kwp2000_send_msg+0x134>)
 800135a:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <kwp2000_send_msg+0x138>)
 8001362:	2202      	movs	r2, #2
 8001364:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e00a      	b.n	8001384 <kwp2000_send_msg+0x60>
	{
		checksum += kwp_msg[i];
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	4413      	add	r3, r2
 800137c:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	3301      	adds	r3, #1
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d9f1      	bls.n	800136e <kwp2000_send_msg+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 800138e:	2014      	movs	r0, #20
 8001390:	f002 fbf8 	bl	8003b84 <HAL_Delay>

	HAL_UART_Transmit(KLINE, kwp_msg, sizeof(kwp_msg), 12);
 8001394:	f107 0108 	add.w	r1, r7, #8
 8001398:	230c      	movs	r3, #12
 800139a:	2206      	movs	r2, #6
 800139c:	4830      	ldr	r0, [pc, #192]	; (8001460 <kwp2000_send_msg+0x13c>)
 800139e:	f006 fe50 	bl	8008042 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 80013a2:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <kwp2000_send_msg+0x13c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	8b1b      	ldrh	r3, [r3, #24]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <kwp2000_send_msg+0x13c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0208 	orr.w	r2, r2, #8
 80013b2:	b292      	uxth	r2, r2
 80013b4:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 5);
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <kwp2000_send_msg+0x134>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3305      	adds	r3, #5
 80013be:	b29b      	uxth	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4928      	ldr	r1, [pc, #160]	; (8001464 <kwp2000_send_msg+0x140>)
 80013c4:	4826      	ldr	r0, [pc, #152]	; (8001460 <kwp2000_send_msg+0x13c>)
 80013c6:	f006 fff7 	bl	80083b8 <HAL_UART_Receive_DMA>

	HAL_TIM_Base_Start_IT(MSG_TIMER);
 80013ca:	4827      	ldr	r0, [pc, #156]	; (8001468 <kwp2000_send_msg+0x144>)
 80013cc:	f006 f99c 	bl	8007708 <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 80013d0:	e000      	b.n	80013d4 <kwp2000_send_msg+0xb0>
	{
		__NOP();
 80013d2:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <kwp2000_send_msg+0x138>)
 80013d6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d004      	beq.n	80013e8 <kwp2000_send_msg+0xc4>
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <kwp2000_send_msg+0x138>)
 80013e0:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d1f4      	bne.n	80013d2 <kwp2000_send_msg+0xae>
	}
	if(obd_comm.timeout == 1)
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <kwp2000_send_msg+0x138>)
 80013ea:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <kwp2000_send_msg+0xd2>
	{
		return (FALSE);
 80013f2:	2300      	movs	r3, #0
 80013f4:	e02c      	b.n	8001450 <kwp2000_send_msg+0x12c>
	}
	if(verify_checksum(kline_rx_buf, pid_length + 5))
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <kwp2000_send_msg+0x134>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	3305      	adds	r3, #5
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	4818      	ldr	r0, [pc, #96]	; (8001464 <kwp2000_send_msg+0x140>)
 8001402:	f000 f835 	bl	8001470 <verify_checksum>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d020      	beq.n	800144e <kwp2000_send_msg+0x12a>
	{
		uint8_t j = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001410:	2302      	movs	r3, #2
 8001412:	73bb      	strb	r3, [r7, #14]
 8001414:	e00b      	b.n	800142e <kwp2000_send_msg+0x10a>
		{
			rx_frame[j] = kline_rx_buf[i];
 8001416:	7bba      	ldrb	r2, [r7, #14]
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	4912      	ldr	r1, [pc, #72]	; (8001464 <kwp2000_send_msg+0x140>)
 800141c:	5c89      	ldrb	r1, [r1, r2]
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <kwp2000_send_msg+0x148>)
 8001420:	54d1      	strb	r1, [r2, r3]
			j++;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	3301      	adds	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	3301      	adds	r3, #1
 800142c:	73bb      	strb	r3, [r7, #14]
 800142e:	7bba      	ldrb	r2, [r7, #14]
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <kwp2000_send_msg+0x134>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	429a      	cmp	r2, r3
 8001438:	dded      	ble.n	8001416 <kwp2000_send_msg+0xf2>
		}
		obd_comm.current_value = obd2_pid_parse(rx_frame);
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <kwp2000_send_msg+0x148>)
 800143c:	f000 f928 	bl	8001690 <obd2_pid_parse>
 8001440:	eef0 7a40 	vmov.f32	s15, s0
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <kwp2000_send_msg+0x138>)
 8001446:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		return (TRUE);
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <kwp2000_send_msg+0x12c>
	}
	return (FALSE);
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000214 	.word	0x20000214
 800145c:	200002bc 	.word	0x200002bc
 8001460:	2000050c 	.word	0x2000050c
 8001464:	200001fc 	.word	0x200001fc
 8001468:	200004c0 	.word	0x200004c0
 800146c:	2000020c 	.word	0x2000020c

08001470 <verify_checksum>:

static uint8_t verify_checksum (uint8_t *data, uint8_t lenght)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	e009      	b.n	800149a <verify_checksum+0x2a>
	{
		checksum += data[i];
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4413      	add	r3, r2
 8001492:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	3301      	adds	r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	3b01      	subs	r3, #1
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <verify_checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d101      	bne.n	80014b8 <verify_checksum+0x48>
	{
		return (TRUE);
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <verify_checksum+0x4a>
	}
	return (FALSE);
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <kline_rx_callback>:

void kline_rx_callback(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <kline_rx_callback+0x3c>)
 80014ce:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <kline_rx_callback+0x1e>
	{
		HAL_TIM_Base_Stop_IT(KLINE_TIMER);
 80014d6:	480c      	ldr	r0, [pc, #48]	; (8001508 <kline_rx_callback+0x40>)
 80014d8:	f006 f96a 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <kline_rx_callback+0x3c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	else if (obd_comm.msg_type == 2)
	{
		HAL_TIM_Base_Stop_IT(MSG_TIMER);
		obd_comm.msg_type = 0;
	}
}
 80014e4:	e00b      	b.n	80014fe <kline_rx_callback+0x36>
	else if (obd_comm.msg_type == 2)
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <kline_rx_callback+0x3c>)
 80014e8:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d106      	bne.n	80014fe <kline_rx_callback+0x36>
		HAL_TIM_Base_Stop_IT(MSG_TIMER);
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <kline_rx_callback+0x44>)
 80014f2:	f006 f95d 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <kline_rx_callback+0x3c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002bc 	.word	0x200002bc
 8001508:	20000428 	.word	0x20000428
 800150c:	200004c0 	.word	0x200004c0

08001510 <obd2_pid_decode>:
extern OBD obd_comm;

static void obd2_pid_decode(uint8_t* rx_frame);

static void obd2_pid_decode(uint8_t* rx_frame)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	uint8_t number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3303      	adds	r3, #3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	061b      	lsls	r3, r3, #24
 8001520:	b25a      	sxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25a      	sxtb	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3305      	adds	r3, #5
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b25a      	sxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3306      	adds	r3, #6
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b25b      	sxtb	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b25b      	sxtb	r3, r3
 800154a:	72fb      	strb	r3, [r7, #11]
	uint8_t j = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 32;
 8001550:	2320      	movs	r3, #32
 8001552:	73bb      	strb	r3, [r7, #14]
	uint8_t l = 64;
 8001554:	2340      	movs	r3, #64	; 0x40
 8001556:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8001558:	231f      	movs	r3, #31
 800155a:	733b      	strb	r3, [r7, #12]
	{
		uint8_t digit = number >> i;
 800155c:	7afa      	ldrb	r2, [r7, #11]
 800155e:	7b3b      	ldrb	r3, [r7, #12]
 8001560:	fa42 f303 	asr.w	r3, r2, r3
 8001564:	72bb      	strb	r3, [r7, #10]
		digit &= 1;
 8001566:	7abb      	ldrb	r3, [r7, #10]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	72bb      	strb	r3, [r7, #10]
		if(obd_comm.pid == 0x00)
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <obd2_pid_decode+0xac>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <obd2_pid_decode+0x78>
		{
			obd_comm.available_pids[j] = digit;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <obd2_pid_decode+0xac>)
 800157a:	4413      	add	r3, r2
 800157c:	7aba      	ldrb	r2, [r7, #10]
 800157e:	70da      	strb	r2, [r3, #3]
			j++;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3301      	adds	r3, #1
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e014      	b.n	80015b2 <obd2_pid_decode+0xa2>
		}
		else if(obd_comm.pid == 0x20)
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <obd2_pid_decode+0xac>)
 800158a:	785b      	ldrb	r3, [r3, #1]
 800158c:	2b20      	cmp	r3, #32
 800158e:	d108      	bne.n	80015a2 <obd2_pid_decode+0x92>
		{
			obd_comm.available_pids[k] = digit;
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <obd2_pid_decode+0xac>)
 8001594:	4413      	add	r3, r2
 8001596:	7aba      	ldrb	r2, [r7, #10]
 8001598:	70da      	strb	r2, [r3, #3]
			k++;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	3301      	adds	r3, #1
 800159e:	73bb      	strb	r3, [r7, #14]
 80015a0:	e007      	b.n	80015b2 <obd2_pid_decode+0xa2>
		}
		else
		{
			obd_comm.available_pids[l] = digit;
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <obd2_pid_decode+0xac>)
 80015a6:	4413      	add	r3, r2
 80015a8:	7aba      	ldrb	r2, [r7, #10]
 80015aa:	70da      	strb	r2, [r3, #3]
			l++;
 80015ac:	7b7b      	ldrb	r3, [r7, #13]
 80015ae:	3301      	adds	r3, #1
 80015b0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	733b      	strb	r3, [r7, #12]
	{
 80015b8:	e7d0      	b.n	800155c <obd2_pid_decode+0x4c>
 80015ba:	bf00      	nop
 80015bc:	200002bc 	.word	0x200002bc

080015c0 <obd2_request>:
		}
	}
}

uint8_t obd2_request(OBD obd)
{
 80015c0:	b084      	sub	sp, #16
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	f107 0c18 	add.w	ip, r7, #24
 80015cc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f002 fad7 	bl	8003b84 <HAL_Delay>
	uint8_t repeat = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
	if(obd.used_protocol == OBD_PROTO_CAN)
 80015da:	7e3b      	ldrb	r3, [r7, #24]
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d122      	bne.n	8001626 <obd2_request+0x66>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 80015e0:	2302      	movs	r3, #2
 80015e2:	713b      	strb	r3, [r7, #4]
 80015e4:	2301      	movs	r3, #1
 80015e6:	717b      	strb	r3, [r7, #5]
 80015e8:	7e7b      	ldrb	r3, [r7, #25]
 80015ea:	71bb      	strb	r3, [r7, #6]
 80015ec:	2300      	movs	r3, #0
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	2300      	movs	r3, #0
 80015f2:	723b      	strb	r3, [r7, #8]
 80015f4:	2300      	movs	r3, #0
 80015f6:	727b      	strb	r3, [r7, #9]
 80015f8:	2300      	movs	r3, #0
 80015fa:	72bb      	strb	r3, [r7, #10]
 80015fc:	2300      	movs	r3, #0
 80015fe:	72fb      	strb	r3, [r7, #11]
		while (!(can_send_msg(tx_data_CAN)))
 8001600:	e008      	b.n	8001614 <obd2_request+0x54>
		{
			if(repeat < MAX_REQ_REPEAT)
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	2b09      	cmp	r3, #9
 8001606:	d803      	bhi.n	8001610 <obd2_request+0x50>
			{
				repeat++;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e001      	b.n	8001614 <obd2_request+0x54>
			}
			else
			{
				return (FALSE);
 8001610:	2300      	movs	r3, #0
 8001612:	e033      	b.n	800167c <obd2_request+0xbc>
		while (!(can_send_msg(tx_data_CAN)))
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fd08 	bl	800202c <can_send_msg>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ef      	beq.n	8001602 <obd2_request+0x42>
			}
		}
		return (TRUE);
 8001622:	2301      	movs	r3, #1
 8001624:	e02a      	b.n	800167c <obd2_request+0xbc>
	}
	else if(obd.used_protocol == OBD_PROTO_ISO9141 || OBD_PROTO_KWP2000_SLOW || OBD_PROTO_KWP2000_FAST)
	{
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 8001626:	2301      	movs	r3, #1
 8001628:	703b      	strb	r3, [r7, #0]
 800162a:	7e7b      	ldrb	r3, [r7, #25]
 800162c:	707b      	strb	r3, [r7, #1]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 800162e:	7e3b      	ldrb	r3, [r7, #24]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d11b      	bne.n	800166c <obd2_request+0xac>
		{
			while (!(kline_send_msg(tx_data_ISO)))
 8001634:	e008      	b.n	8001648 <obd2_request+0x88>
			{
			if(repeat < MAX_REQ_REPEAT)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d803      	bhi.n	8001644 <obd2_request+0x84>
			{
				repeat++;
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e001      	b.n	8001648 <obd2_request+0x88>
			}
			else
			{
				return (FALSE);
 8001644:	2300      	movs	r3, #0
 8001646:	e019      	b.n	800167c <obd2_request+0xbc>
			while (!(kline_send_msg(tx_data_ISO)))
 8001648:	463b      	mov	r3, r7
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fdca 	bl	80011e4 <kline_send_msg>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0ef      	beq.n	8001636 <obd2_request+0x76>
			}
			}
			return (TRUE);
 8001656:	2301      	movs	r3, #1
 8001658:	e010      	b.n	800167c <obd2_request+0xbc>
		}
		else
		{
			while (!(kwp2000_send_msg(tx_data_ISO)))
			{
			if(repeat < MAX_REQ_REPEAT)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d803      	bhi.n	8001668 <obd2_request+0xa8>
			{
				repeat++;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	3301      	adds	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
 8001666:	e001      	b.n	800166c <obd2_request+0xac>
			}
			else
			{
				return (FALSE);
 8001668:	2300      	movs	r3, #0
 800166a:	e007      	b.n	800167c <obd2_request+0xbc>
			while (!(kwp2000_send_msg(tx_data_ISO)))
 800166c:	463b      	mov	r3, r7
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe58 	bl	8001324 <kwp2000_send_msg>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0ef      	beq.n	800165a <obd2_request+0x9a>
			}
			}
			return (TRUE);
 800167a:	2301      	movs	r3, #1
		}
		return (FALSE);
	}
	return (FALSE);
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001686:	b004      	add	sp, #16
 8001688:	4770      	bx	lr
 800168a:	0000      	movs	r0, r0
 800168c:	0000      	movs	r0, r0
	...

08001690 <obd2_pid_parse>:

float obd2_pid_parse(uint8_t* rx_frame)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3302      	adds	r3, #2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2ba6      	cmp	r3, #166	; 0xa6
 80016a6:	f200 83b6 	bhi.w	8001e16 <obd2_pid_parse+0x786>
 80016aa:	a201      	add	r2, pc, #4	; (adr r2, 80016b0 <obd2_pid_parse+0x20>)
 80016ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b0:	0800194d 	.word	0x0800194d
 80016b4:	08001e17 	.word	0x08001e17
 80016b8:	08001e17 	.word	0x08001e17
 80016bc:	08001e17 	.word	0x08001e17
 80016c0:	0800195b 	.word	0x0800195b
 80016c4:	08001963 	.word	0x08001963
 80016c8:	08001979 	.word	0x08001979
 80016cc:	08001979 	.word	0x08001979
 80016d0:	08001979 	.word	0x08001979
 80016d4:	08001979 	.word	0x08001979
 80016d8:	0800197f 	.word	0x0800197f
 80016dc:	0800199b 	.word	0x0800199b
 80016e0:	080019af 	.word	0x080019af
 80016e4:	080019d5 	.word	0x080019d5
 80016e8:	080019e9 	.word	0x080019e9
 80016ec:	08001a03 	.word	0x08001a03
 80016f0:	08001a19 	.word	0x08001a19
 80016f4:	08001a43 	.word	0x08001a43
 80016f8:	08001e17 	.word	0x08001e17
 80016fc:	08001e17 	.word	0x08001e17
 8001700:	08001a4b 	.word	0x08001a4b
 8001704:	08001a4b 	.word	0x08001a4b
 8001708:	08001a4b 	.word	0x08001a4b
 800170c:	08001a4b 	.word	0x08001a4b
 8001710:	08001a4b 	.word	0x08001a4b
 8001714:	08001a4b 	.word	0x08001a4b
 8001718:	08001a4b 	.word	0x08001a4b
 800171c:	08001a4b 	.word	0x08001a4b
 8001720:	08001e17 	.word	0x08001e17
 8001724:	08001e17 	.word	0x08001e17
 8001728:	08001e17 	.word	0x08001e17
 800172c:	08001a69 	.word	0x08001a69
 8001730:	08001a87 	.word	0x08001a87
 8001734:	08001a69 	.word	0x08001a69
 8001738:	08001a95 	.word	0x08001a95
 800173c:	08001ac7 	.word	0x08001ac7
 8001740:	08001aed 	.word	0x08001aed
 8001744:	08001aed 	.word	0x08001aed
 8001748:	08001aed 	.word	0x08001aed
 800174c:	08001aed 	.word	0x08001aed
 8001750:	08001aed 	.word	0x08001aed
 8001754:	08001aed 	.word	0x08001aed
 8001758:	08001aed 	.word	0x08001aed
 800175c:	08001aed 	.word	0x08001aed
 8001760:	08001af5 	.word	0x08001af5
 8001764:	08001afd 	.word	0x08001afd
 8001768:	08001b03 	.word	0x08001b03
 800176c:	08001b03 	.word	0x08001b03
 8001770:	08001b0b 	.word	0x08001b0b
 8001774:	08001b1f 	.word	0x08001b1f
 8001778:	08001b3d 	.word	0x08001b3d
 800177c:	08001b63 	.word	0x08001b63
 8001780:	08001b77 	.word	0x08001b77
 8001784:	08001b77 	.word	0x08001b77
 8001788:	08001b77 	.word	0x08001b77
 800178c:	08001b77 	.word	0x08001b77
 8001790:	08001b77 	.word	0x08001b77
 8001794:	08001b77 	.word	0x08001b77
 8001798:	08001b77 	.word	0x08001b77
 800179c:	08001b77 	.word	0x08001b77
 80017a0:	08001b7f 	.word	0x08001b7f
 80017a4:	08001b7f 	.word	0x08001b7f
 80017a8:	08001b7f 	.word	0x08001b7f
 80017ac:	08001b7f 	.word	0x08001b7f
 80017b0:	08001bab 	.word	0x08001bab
 80017b4:	08001e17 	.word	0x08001e17
 80017b8:	08001bb9 	.word	0x08001bb9
 80017bc:	08001be3 	.word	0x08001be3
 80017c0:	08001beb 	.word	0x08001beb
 80017c4:	08001bf3 	.word	0x08001bf3
 80017c8:	08001bfb 	.word	0x08001bfb
 80017cc:	08001c11 	.word	0x08001c11
 80017d0:	08001c11 	.word	0x08001c11
 80017d4:	08001c11 	.word	0x08001c11
 80017d8:	08001c11 	.word	0x08001c11
 80017dc:	08001c11 	.word	0x08001c11
 80017e0:	08001c11 	.word	0x08001c11
 80017e4:	08001c19 	.word	0x08001c19
 80017e8:	08001c19 	.word	0x08001c19
 80017ec:	08001c37 	.word	0x08001c37
 80017f0:	08001e17 	.word	0x08001e17
 80017f4:	08001e17 	.word	0x08001e17
 80017f8:	08001c4b 	.word	0x08001c4b
 80017fc:	08001c6d 	.word	0x08001c6d
 8001800:	08001c9f 	.word	0x08001c9f
 8001804:	08001cc3 	.word	0x08001cc3
 8001808:	08001cc3 	.word	0x08001cc3
 800180c:	08001cc3 	.word	0x08001cc3
 8001810:	08001cc3 	.word	0x08001cc3
 8001814:	08001cc9 	.word	0x08001cc9
 8001818:	08001ce7 	.word	0x08001ce7
 800181c:	08001ce7 	.word	0x08001ce7
 8001820:	08001cef 	.word	0x08001cef
 8001824:	08001d05 	.word	0x08001d05
 8001828:	08001d0b 	.word	0x08001d0b
 800182c:	08001e17 	.word	0x08001e17
 8001830:	08001e17 	.word	0x08001e17
 8001834:	08001d3d 	.word	0x08001d3d
 8001838:	08001d3d 	.word	0x08001d3d
 800183c:	08001d53 	.word	0x08001d53
 8001840:	08001d71 	.word	0x08001d71
 8001844:	08001e17 	.word	0x08001e17
 8001848:	08001d87 	.word	0x08001d87
 800184c:	08001d8f 	.word	0x08001d8f
 8001850:	08001d8f 	.word	0x08001d8f
 8001854:	08001e17 	.word	0x08001e17
 8001858:	08001e17 	.word	0x08001e17
 800185c:	08001e17 	.word	0x08001e17
 8001860:	08001e17 	.word	0x08001e17
 8001864:	08001e17 	.word	0x08001e17
 8001868:	08001e17 	.word	0x08001e17
 800186c:	08001e17 	.word	0x08001e17
 8001870:	08001e17 	.word	0x08001e17
 8001874:	08001e17 	.word	0x08001e17
 8001878:	08001e17 	.word	0x08001e17
 800187c:	08001e17 	.word	0x08001e17
 8001880:	08001e17 	.word	0x08001e17
 8001884:	08001e17 	.word	0x08001e17
 8001888:	08001e17 	.word	0x08001e17
 800188c:	08001e17 	.word	0x08001e17
 8001890:	08001e17 	.word	0x08001e17
 8001894:	08001e17 	.word	0x08001e17
 8001898:	08001e17 	.word	0x08001e17
 800189c:	08001e17 	.word	0x08001e17
 80018a0:	08001da5 	.word	0x08001da5
 80018a4:	08001e17 	.word	0x08001e17
 80018a8:	08001e17 	.word	0x08001e17
 80018ac:	08001e17 	.word	0x08001e17
 80018b0:	08001e17 	.word	0x08001e17
 80018b4:	08001e17 	.word	0x08001e17
 80018b8:	08001e17 	.word	0x08001e17
 80018bc:	08001e17 	.word	0x08001e17
 80018c0:	08001e17 	.word	0x08001e17
 80018c4:	08001e17 	.word	0x08001e17
 80018c8:	08001e17 	.word	0x08001e17
 80018cc:	08001e17 	.word	0x08001e17
 80018d0:	08001e17 	.word	0x08001e17
 80018d4:	08001e17 	.word	0x08001e17
 80018d8:	08001e17 	.word	0x08001e17
 80018dc:	08001e17 	.word	0x08001e17
 80018e0:	08001e17 	.word	0x08001e17
 80018e4:	08001e17 	.word	0x08001e17
 80018e8:	08001e17 	.word	0x08001e17
 80018ec:	08001e17 	.word	0x08001e17
 80018f0:	08001e17 	.word	0x08001e17
 80018f4:	08001e17 	.word	0x08001e17
 80018f8:	08001e17 	.word	0x08001e17
 80018fc:	08001e17 	.word	0x08001e17
 8001900:	08001e17 	.word	0x08001e17
 8001904:	08001e17 	.word	0x08001e17
 8001908:	08001e17 	.word	0x08001e17
 800190c:	08001e17 	.word	0x08001e17
 8001910:	08001e17 	.word	0x08001e17
 8001914:	08001e17 	.word	0x08001e17
 8001918:	08001e17 	.word	0x08001e17
 800191c:	08001e17 	.word	0x08001e17
 8001920:	08001e17 	.word	0x08001e17
 8001924:	08001e17 	.word	0x08001e17
 8001928:	08001e17 	.word	0x08001e17
 800192c:	08001e17 	.word	0x08001e17
 8001930:	08001e17 	.word	0x08001e17
 8001934:	08001e17 	.word	0x08001e17
 8001938:	08001e17 	.word	0x08001e17
 800193c:	08001e17 	.word	0x08001e17
 8001940:	08001e17 	.word	0x08001e17
 8001944:	08001e17 	.word	0x08001e17
 8001948:	08001dd1 	.word	0x08001dd1
	{
	case 0x00:
		obd2_pid_decode(rx_frame);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fddf 	bl	8001510 <obd2_pid_decode>
		value = 0;
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
		break;
 8001958:	e260      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x04:
		value = (100/255)*rx_frame[3];
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
		break;
 8001960:	e25c      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x05:
		value = rx_frame[3] - 40;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3303      	adds	r3, #3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	3b28      	subs	r3, #40	; 0x28
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001972:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001976:	e251      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001978:	4bb9      	ldr	r3, [pc, #740]	; (8001c60 <obd2_pid_parse+0x5d0>)
 800197a:	60fb      	str	r3, [r7, #12]
		break;
 800197c:	e24e      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0A:
		value = 3 * rx_frame[3];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3303      	adds	r3, #3
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001998:	e240      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0B:
		value = rx_frame[3];
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3303      	adds	r3, #3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019ac:	e236      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3303      	adds	r3, #3
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	3204      	adds	r2, #4
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4313      	orrs	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	da00      	bge.n	80019c4 <obd2_pid_parse+0x334>
 80019c2:	3303      	adds	r3, #3
 80019c4:	109b      	asrs	r3, r3, #2
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019d2:	e223      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0D:
		value = rx_frame[3];
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3303      	adds	r3, #3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019e6:	e219      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3303      	adds	r3, #3
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	085b      	lsrs	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3b40      	subs	r3, #64	; 0x40
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a00:	e20c      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3303      	adds	r3, #3
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	3b28      	subs	r3, #40	; 0x28
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a16:	e201      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3303      	adds	r3, #3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	3204      	adds	r2, #4
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	4a8e      	ldr	r2, [pc, #568]	; (8001c64 <obd2_pid_parse+0x5d4>)
 8001a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a2e:	1152      	asrs	r2, r2, #5
 8001a30:	17db      	asrs	r3, r3, #31
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a40:	e1ec      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
		break;
 8001a48:	e1e8      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4a84      	ldr	r2, [pc, #528]	; (8001c64 <obd2_pid_parse+0x5d4>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a66:	e1d9      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3303      	adds	r3, #3
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	3204      	adds	r2, #4
 8001a74:	7812      	ldrb	r2, [r2, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a84:	e1ca      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x20:
		obd2_pid_decode(rx_frame);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fd42 	bl	8001510 <obd2_pid_decode>
		value = 0;
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
		break;
 8001a92:	e1c3      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3303      	adds	r3, #3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3204      	adds	r2, #4
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd3d 	bl	8000524 <__aeabi_i2d>
 8001aaa:	a36b      	add	r3, pc, #428	; (adr r3, 8001c58 <obd2_pid_parse+0x5c8>)
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	f7fe fda2 	bl	80005f8 <__aeabi_dmul>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7ff f874 	bl	8000ba8 <__aeabi_d2f>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60fb      	str	r3, [r7, #12]
		break;
 8001ac4:	e1aa      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3303      	adds	r3, #3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	3204      	adds	r2, #4
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aea:	e197      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
		break;
 8001af2:	e193      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
		break;
 8001afa:	e18f      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8001afc:	4b58      	ldr	r3, [pc, #352]	; (8001c60 <obd2_pid_parse+0x5d0>)
 8001afe:	60fb      	str	r3, [r7, #12]
		break;
 8001b00:	e18c      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
		break;
 8001b08:	e188      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x30:
		value = rx_frame[3];
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b18:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b1c:	e17e      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3303      	adds	r3, #3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	3204      	adds	r2, #4
 8001b2a:	7812      	ldrb	r2, [r2, #0]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b36:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b3a:	e16f      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3303      	adds	r3, #3
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	3204      	adds	r2, #4
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	da00      	bge.n	8001b52 <obd2_pid_parse+0x4c2>
 8001b50:	3303      	adds	r3, #3
 8001b52:	109b      	asrs	r3, r3, #2
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b60:	e15c      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x33:
		value = rx_frame[3];
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b74:	e152      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
		break;
 8001b7c:	e14e      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3303      	adds	r3, #3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	3204      	adds	r2, #4
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <obd2_pid_parse+0x5d4>)
 8001b90:	fb82 1203 	smull	r1, r2, r2, r3
 8001b94:	1152      	asrs	r2, r2, #5
 8001b96:	17db      	asrs	r3, r3, #31
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	3b28      	subs	r3, #40	; 0x28
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ba8:	e138      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x40:
		obd2_pid_decode(rx_frame);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fcb0 	bl	8001510 <obd2_pid_decode>
		value = 0;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
		break;
 8001bb6:	e131      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3303      	adds	r3, #3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	3204      	adds	r2, #4
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <obd2_pid_parse+0x5d8>)
 8001bca:	fb82 1203 	smull	r1, r2, r2, r3
 8001bce:	1192      	asrs	r2, r2, #6
 8001bd0:	17db      	asrs	r3, r3, #31
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	ee07 3a90 	vmov	s15, r3
 8001bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bdc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001be0:	e11c      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
		break;
 8001be8:	e118      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
		break;
 8001bf0:	e114      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		break;
 8001bf8:	e110      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x46:
		value = rx_frame[3] - 40;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b28      	subs	r3, #40	; 0x28
 8001c02:	ee07 3a90 	vmov	s15, r3
 8001c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c0e:	e105      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
		break;
 8001c16:	e101      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3303      	adds	r3, #3
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	3204      	adds	r2, #4
 8001c24:	7812      	ldrb	r2, [r2, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c30:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c34:	e0f2      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x4F:
		value = rx_frame[3];
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3303      	adds	r3, #3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001c48:	e0e8      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001c4a:	f04f 0300 	mov.w	r3, #0
 8001c4e:	60fb      	str	r3, [r7, #12]
		break;
 8001c50:	e0e4      	b.n	8001e1c <obd2_pid_parse+0x78c>
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	10624dd3 	.word	0x10624dd3
 8001c5c:	3fb43958 	.word	0x3fb43958
 8001c60:	c2c80000 	.word	0xc2c80000
 8001c64:	51eb851f 	.word	0x51eb851f
 8001c68:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3303      	adds	r3, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	3204      	adds	r2, #4
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc51 	bl	8000524 <__aeabi_i2d>
 8001c82:	a373      	add	r3, pc, #460	; (adr r3, 8001e50 <obd2_pid_parse+0x7c0>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fcb6 	bl	80005f8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ff88 	bl	8000ba8 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60fb      	str	r3, [r7, #12]
		break;
 8001c9c:	e0be      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3303      	adds	r3, #3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	3204      	adds	r2, #4
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001cb2:	3b7f      	subs	r3, #127	; 0x7f
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001cc0:	e0ac      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001cc2:	4b5f      	ldr	r3, [pc, #380]	; (8001e40 <obd2_pid_parse+0x7b0>)
 8001cc4:	60fb      	str	r3, [r7, #12]
		break;
 8001cc6:	e0a9      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3303      	adds	r3, #3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	021b      	lsls	r3, r3, #8
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	3204      	adds	r2, #4
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ce4:	e09a      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001ce6:	f04f 0300 	mov.w	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
		break;
 8001cec:	e096      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3b28      	subs	r3, #40	; 0x28
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d02:	e08b      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <obd2_pid_parse+0x7b4>)
 8001d06:	60fb      	str	r3, [r7, #12]
		break;
 8001d08:	e088      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3303      	adds	r3, #3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	3204      	adds	r2, #4
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fc02 	bl	8000524 <__aeabi_i2d>
 8001d20:	a343      	add	r3, pc, #268	; (adr r3, 8001e30 <obd2_pid_parse+0x7a0>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff39 	bl	8000ba8 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	60fb      	str	r3, [r7, #12]
		break;
 8001d3a:	e06f      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	3b7d      	subs	r3, #125	; 0x7d
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d50:	e064      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3303      	adds	r3, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	3204      	adds	r2, #4
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d6e:	e055      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x64:
		value = rx_frame[3] - 125;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3303      	adds	r3, #3
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b7d      	subs	r3, #125	; 0x7d
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001d84:	e04a      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
		break;
 8001d8c:	e046      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3303      	adds	r3, #3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b28      	subs	r3, #40	; 0x28
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001da2:	e03b      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3303      	adds	r3, #3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	3204      	adds	r2, #4
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <obd2_pid_parse+0x7b8>)
 8001db6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dba:	1152      	asrs	r2, r2, #5
 8001dbc:	17db      	asrs	r3, r3, #31
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	3b28      	subs	r3, #40	; 0x28
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001dce:	e025      	b.n	8001e1c <obd2_pid_parse+0x78c>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	061a      	lsls	r2, r3, #24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3305      	adds	r3, #5
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	4313      	orrs	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3206      	adds	r2, #6
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb95 	bl	8000524 <__aeabi_i2d>
 8001dfa:	a30f      	add	r3, pc, #60	; (adr r3, 8001e38 <obd2_pid_parse+0x7a8>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fbfa 	bl	80005f8 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fecc 	bl	8000ba8 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	60fb      	str	r3, [r7, #12]
		break;
 8001e14:	e002      	b.n	8001e1c <obd2_pid_parse+0x78c>
	default:
		value = 255;
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <obd2_pid_parse+0x7bc>)
 8001e18:	60fb      	str	r3, [r7, #12]
		break;
 8001e1a:	bf00      	nop
	}
	return (value);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	ee07 3a90 	vmov	s15, r3
}
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	f3af 8000 	nop.w
 8001e30:	9999999a 	.word	0x9999999a
 8001e34:	3fa99999 	.word	0x3fa99999
 8001e38:	9999999a 	.word	0x9999999a
 8001e3c:	3fb99999 	.word	0x3fb99999
 8001e40:	c2c80000 	.word	0xc2c80000
 8001e44:	c3520000 	.word	0xc3520000
 8001e48:	51eb851f 	.word	0x51eb851f
 8001e4c:	437f0000 	.word	0x437f0000
 8001e50:	47ae147b 	.word	0x47ae147b
 8001e54:	3f747ae1 	.word	0x3f747ae1

08001e58 <obd2_init>:

obd_protocol obd2_init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = kline_init();
 8001e5e:	f7ff f875 	bl	8000f4c <kline_init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10c      	bne.n	8001e86 <obd2_init+0x2e>
	{
		used_protocol = kwp2000_fast_init();
 8001e6c:	f7ff f8fe 	bl	800106c <kwp2000_fast_init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <obd2_init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	71fb      	strb	r3, [r7, #7]
			MX_CAN1_Init();
 8001e7e:	f000 f817 	bl	8001eb0 <MX_CAN1_Init>
			can_config();
 8001e82:	f000 f89f 	bl	8001fc4 <can_config>
		}
	}
	return (used_protocol);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	return (PID_LUT[pid][0]);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <PID_Get_Lenght+0x1c>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	0800cd54 	.word	0x0800cd54

08001eb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <MX_CAN1_Init+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ece:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ed2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <MX_CAN1_Init+0x64>)
 8001f00:	f002 fd18 	bl	8004934 <HAL_CAN_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001f0a:	f000 fd04 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000224 	.word	0x20000224
 8001f18:	40006400 	.word	0x40006400

08001f1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_CAN_MspInit+0x9c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d138      	bne.n	8001fb0 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_CAN_MspInit+0xa0>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f80:	2309      	movs	r3, #9
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <HAL_CAN_MspInit+0xa4>)
 8001f8c:	f003 ff54 	bl	8005e38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	2014      	movs	r0, #20
 8001f96:	f003 fc02 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001f9a:	2014      	movs	r0, #20
 8001f9c:	f003 fc1b 	bl	80057d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2015      	movs	r0, #21
 8001fa6:	f003 fbfa 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001faa:	2015      	movs	r0, #21
 8001fac:	f003 fc13 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40006400 	.word	0x40006400
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	48000400 	.word	0x48000400

08001fc4 <can_config>:
  }
}

/* USER CODE BEGIN 1 */
void can_config(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8001fd6:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001fda:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8001fe0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001fe4:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <can_config+0x64>)
 8001ff8:	f002 fd97 	bl	8004b2a <HAL_CAN_ConfigFilter>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <can_config+0x42>
	{
		Error_Handler();
 8002002:	f000 fc88 	bl	8002916 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8002006:	4808      	ldr	r0, [pc, #32]	; (8002028 <can_config+0x64>)
 8002008:	f002 fe59 	bl	8004cbe <HAL_CAN_Start>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <can_config+0x52>
	{
		Error_Handler();
 8002012:	f000 fc80 	bl	8002916 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002016:	2102      	movs	r1, #2
 8002018:	4803      	ldr	r0, [pc, #12]	; (8002028 <can_config+0x64>)
 800201a:	f003 f876 	bl	800510a <HAL_CAN_ActivateNotification>
}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	; 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000224 	.word	0x20000224

0800202c <can_send_msg>:

uint8_t can_send_msg(uint8_t *tx_frame)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = 0x7DF;
 8002034:	f240 73df 	movw	r3, #2015	; 0x7df
 8002038:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 800203a:	2308      	movs	r3, #8
 800203c:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

	obd_comm.msg_type = 1;
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <can_send_msg+0x88>)
 8002048:	2201      	movs	r2, #1
 800204a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	HAL_TIM_Base_Start_IT(MSG_TIMER);
 800204e:	481a      	ldr	r0, [pc, #104]	; (80020b8 <can_send_msg+0x8c>)
 8002050:	f005 fb5a 	bl	8007708 <HAL_TIM_Base_Start_IT>
	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8002054:	f107 0108 	add.w	r1, r7, #8
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <can_send_msg+0x90>)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4818      	ldr	r0, [pc, #96]	; (80020c0 <can_send_msg+0x94>)
 800205e:	f002 fe72 	bl	8004d46 <HAL_CAN_AddTxMessage>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <can_send_msg+0x44>
	{
		Error_Handler();
 8002068:	f000 fc55 	bl	8002916 <Error_Handler>
	}
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 800206c:	e000      	b.n	8002070 <can_send_msg+0x44>
	{
		__NOP();
 800206e:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.timeout != 1))
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <can_send_msg+0x88>)
 8002072:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d004      	beq.n	8002084 <can_send_msg+0x58>
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <can_send_msg+0x88>)
 800207c:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002080:	2b01      	cmp	r3, #1
 8002082:	d1f4      	bne.n	800206e <can_send_msg+0x42>
	}
	if(obd_comm.timeout == 1)
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <can_send_msg+0x88>)
 8002086:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800208a:	2b01      	cmp	r3, #1
 800208c:	d105      	bne.n	800209a <can_send_msg+0x6e>
	{
		obd_comm.timeout = 0;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <can_send_msg+0x88>)
 8002090:	2200      	movs	r2, #0
 8002092:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		return (FALSE);
 8002096:	2300      	movs	r3, #0
 8002098:	e008      	b.n	80020ac <can_send_msg+0x80>
	}
	obd_comm.current_value = obd2_pid_parse(rx_mailbox);
 800209a:	480a      	ldr	r0, [pc, #40]	; (80020c4 <can_send_msg+0x98>)
 800209c:	f7ff faf8 	bl	8001690 <obd2_pid_parse>
 80020a0:	eef0 7a40 	vmov.f32	s15, s0
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <can_send_msg+0x88>)
 80020a6:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	return (TRUE);
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	200002bc 	.word	0x200002bc
 80020b8:	200004c0 	.word	0x200004c0
 80020bc:	20000218 	.word	0x20000218
 80020c0:	20000224 	.word	0x20000224
 80020c4:	2000021c 	.word	0x2000021c

080020c8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;

	obd_comm.msg_type = 0;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_mailbox);
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80020de:	2100      	movs	r1, #0
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80020e2:	f002 ff00 	bl	8004ee6 <HAL_CAN_GetRxMessage>

	HAL_TIM_Base_Stop_IT(MSG_TIMER);
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80020e8:	f005 fb62 	bl	80077b0 <HAL_TIM_Base_Stop_IT>

//	HAL_IWDG_Refresh(&hiwdg);
}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002bc 	.word	0x200002bc
 80020f8:	2000021c 	.word	0x2000021c
 80020fc:	20000224 	.word	0x20000224
 8002100:	200004c0 	.word	0x200004c0

08002104 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2210      	movs	r2, #16
 8002112:	60da      	str	r2, [r3, #12]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002126:	463b      	mov	r3, r7
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <MX_ADC1_Init+0xc0>)
 800213a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <MX_ADC1_Init+0xbc>)
 800213e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002142:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_ADC1_Init+0xbc>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002156:	4b21      	ldr	r3, [pc, #132]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002158:	2204      	movs	r2, #4
 800215a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <MX_ADC1_Init+0xbc>)
 800215e:	2200      	movs	r2, #0
 8002160:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002164:	2201      	movs	r2, #1
 8002166:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MX_ADC1_Init+0xbc>)
 800216a:	2201      	movs	r2, #1
 800216c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800216e:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002178:	2200      	movs	r2, #0
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <MX_ADC1_Init+0xbc>)
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_ADC1_Init+0xbc>)
 800218c:	2200      	movs	r2, #0
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_ADC1_Init+0xbc>)
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002198:	4810      	ldr	r0, [pc, #64]	; (80021dc <MX_ADC1_Init+0xbc>)
 800219a:	f001 fea3 	bl	8003ee4 <HAL_ADC_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80021a4:	f000 fbb7 	bl	8002916 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_ADC1_Init+0xc4>)
 80021aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021ac:	2306      	movs	r3, #6
 80021ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021b4:	237f      	movs	r3, #127	; 0x7f
 80021b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021b8:	2304      	movs	r3, #4
 80021ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c0:	463b      	mov	r3, r7
 80021c2:	4619      	mov	r1, r3
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_ADC1_Init+0xbc>)
 80021c6:	f001 ffd5 	bl	8004174 <HAL_ADC_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80021d0:	f000 fba1 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000024c 	.word	0x2000024c
 80021e0:	50040000 	.word	0x50040000
 80021e4:	3ac04000 	.word	0x3ac04000

080021e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0a0      	sub	sp, #128	; 0x80
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 0310 	add.w	r3, r7, #16
 8002204:	225c      	movs	r2, #92	; 0x5c
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f007 fcf3 	bl	8009bf4 <memset>
  if(adcHandle->Instance==ADC1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <HAL_ADC_MspInit+0xc0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d142      	bne.n	800229e <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002218:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800221c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800221e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002222:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002224:	2303      	movs	r3, #3
 8002226:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800222c:	2308      	movs	r3, #8
 800222e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002230:	2307      	movs	r3, #7
 8002232:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002234:	2302      	movs	r3, #2
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800223c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4618      	mov	r0, r3
 8002248:	f004 fefc 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002252:	f000 fb60 	bl	8002916 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	4a14      	ldr	r2, [pc, #80]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 800225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_ADC_MspInit+0xc4>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 8002286:	2320      	movs	r3, #32
 8002288:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800228a:	230b      	movs	r3, #11
 800228c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_ADC_MspInit+0xc8>)
 800229a:	f003 fdcd 	bl	8005e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3780      	adds	r7, #128	; 0x80
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	50040000 	.word	0x50040000
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48000800 	.word	0x48000800

080022b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_DMA_Init+0x38>)
 80022bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <MX_DMA_Init+0x38>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6493      	str	r3, [r2, #72]	; 0x48
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_DMA_Init+0x38>)
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	200f      	movs	r0, #15
 80022d8:	f003 fa61 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80022dc:	200f      	movs	r0, #15
 80022de:	f003 fa7a 	bl	80057d6 <HAL_NVIC_EnableIRQ>

}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000

080022f0 <MX_GPIO_Init>:
        * EXTI
     PC10   ------> USART3_TX
     PC11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002306:	4b53      	ldr	r3, [pc, #332]	; (8002454 <MX_GPIO_Init+0x164>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	4a52      	ldr	r2, [pc, #328]	; (8002454 <MX_GPIO_Init+0x164>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002312:	4b50      	ldr	r3, [pc, #320]	; (8002454 <MX_GPIO_Init+0x164>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231e:	4b4d      	ldr	r3, [pc, #308]	; (8002454 <MX_GPIO_Init+0x164>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	4a4c      	ldr	r2, [pc, #304]	; (8002454 <MX_GPIO_Init+0x164>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232a:	4b4a      	ldr	r3, [pc, #296]	; (8002454 <MX_GPIO_Init+0x164>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <MX_GPIO_Init+0x164>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233a:	4a46      	ldr	r2, [pc, #280]	; (8002454 <MX_GPIO_Init+0x164>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002342:	4b44      	ldr	r3, [pc, #272]	; (8002454 <MX_GPIO_Init+0x164>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <MX_GPIO_Init+0x164>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a40      	ldr	r2, [pc, #256]	; (8002454 <MX_GPIO_Init+0x164>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <MX_GPIO_Init+0x164>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <MX_GPIO_Init+0x164>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <MX_GPIO_Init+0x164>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <MX_GPIO_Init+0x164>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	210c      	movs	r1, #12
 8002382:	4835      	ldr	r0, [pc, #212]	; (8002458 <MX_GPIO_Init+0x168>)
 8002384:	f003 ffac 	bl	80062e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f003 ffa5 	bl	80062e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2104      	movs	r1, #4
 800239a:	4830      	ldr	r0, [pc, #192]	; (800245c <MX_GPIO_Init+0x16c>)
 800239c:	f003 ffa0 	bl	80062e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 80023a0:	230c      	movs	r3, #12
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	4828      	ldr	r0, [pc, #160]	; (8002458 <MX_GPIO_Init+0x168>)
 80023b8:	f003 fd3e 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 80023bc:	2350      	movs	r3, #80	; 0x50
 80023be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0314 	add.w	r3, r7, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d2:	f003 fd31 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 80023d6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023dc:	2301      	movs	r3, #1
 80023de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f2:	f003 fd21 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80023f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002408:	2307      	movs	r3, #7
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_GPIO_Init+0x168>)
 8002414:	f003 fd10 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8002418:	2304      	movs	r3, #4
 800241a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	480b      	ldr	r0, [pc, #44]	; (800245c <MX_GPIO_Init+0x16c>)
 8002430:	f003 fd02 	bl	8005e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8002434:	2308      	movs	r3, #8
 8002436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_GPIO_Init+0x170>)
 8002448:	f003 fcf6 	bl	8005e38 <HAL_GPIO_Init>

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	48000800 	.word	0x48000800
 800245c:	48000c00 	.word	0x48000c00
 8002460:	48001c00 	.word	0x48001c00

08002464 <acquire_vehicle_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void acquire_vehicle_data(float buffer[][2])
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b0b5      	sub	sp, #212	; 0xd4
 8002468:	af30      	add	r7, sp, #192	; 0xc0
 800246a:	6078      	str	r0, [r7, #4]
	uint8_t pids [3] = {0x5, 0xc, 0xd};
 800246c:	4a26      	ldr	r2, [pc, #152]	; (8002508 <acquire_vehicle_data+0xa4>)
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4611      	mov	r1, r2
 8002476:	8019      	strh	r1, [r3, #0]
 8002478:	3302      	adds	r3, #2
 800247a:	0c12      	lsrs	r2, r2, #16
 800247c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(pids); i++)
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e038      	b.n	80024f6 <acquire_vehicle_data+0x92>
	{
		obd_comm.pid = pids[i];
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	3310      	adds	r3, #16
 8002488:	443b      	add	r3, r7
 800248a:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <acquire_vehicle_data+0xa8>)
 8002490:	705a      	strb	r2, [r3, #1]
		obd2_request(obd_comm);
 8002492:	4c1e      	ldr	r4, [pc, #120]	; (800250c <acquire_vehicle_data+0xa8>)
 8002494:	4668      	mov	r0, sp
 8002496:	f104 0310 	add.w	r3, r4, #16
 800249a:	22c0      	movs	r2, #192	; 0xc0
 800249c:	4619      	mov	r1, r3
 800249e:	f007 fb9b 	bl	8009bd8 <memcpy>
 80024a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024a6:	f7ff f88b 	bl	80015c0 <obd2_request>
		if(obd2_request(obd_comm))
 80024aa:	4c18      	ldr	r4, [pc, #96]	; (800250c <acquire_vehicle_data+0xa8>)
 80024ac:	4668      	mov	r0, sp
 80024ae:	f104 0310 	add.w	r3, r4, #16
 80024b2:	22c0      	movs	r2, #192	; 0xc0
 80024b4:	4619      	mov	r1, r3
 80024b6:	f007 fb8f 	bl	8009bd8 <memcpy>
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	f7ff f87f 	bl	80015c0 <obd2_request>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d013      	beq.n	80024f0 <acquire_vehicle_data+0x8c>
		{
			buffer[i][0] = obd_comm.pid;
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <acquire_vehicle_data+0xa8>)
 80024ca:	7859      	ldrb	r1, [r3, #1]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	ee07 1a90 	vmov	s15, r1
 80024d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024dc:	edc3 7a00 	vstr	s15, [r3]
			buffer[i][1] = obd_comm.current_value;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a08      	ldr	r2, [pc, #32]	; (800250c <acquire_vehicle_data+0xa8>)
 80024ea:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 80024ee:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < sizeof(pids); i++)
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
 80024f2:	3301      	adds	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d9c3      	bls.n	8002484 <acquire_vehicle_data+0x20>
		}

	}
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	bf00      	nop
 8002508:	0800cbf0 	.word	0x0800cbf0
 800250c:	200002bc 	.word	0x200002bc

08002510 <createJson>:

static void createJson(char buff[1000], float array[][2], float array_cpy[][2], int num_of_values)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b0a5      	sub	sp, #148	; 0x94
 8002514:	af02      	add	r7, sp, #8
 8002516:	6178      	str	r0, [r7, #20]
 8002518:	6139      	str	r1, [r7, #16]
 800251a:	60fa      	str	r2, [r7, #12]
 800251c:	60bb      	str	r3, [r7, #8]
    char json_string [10] = "{\n";
 800251e:	f640 237b 	movw	r3, #2683	; 0xa7b
 8002522:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002524:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	809a      	strh	r2, [r3, #4]
    char temp[100];
    sprintf(buff, json_string);
 800252e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002532:	4619      	mov	r1, r3
 8002534:	6978      	ldr	r0, [r7, #20]
 8002536:	f007 ffcf 	bl	800a4d8 <siprintf>
    for (uint8_t i = 0; i <= num_of_values - 1; i++)
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002540:	e06b      	b.n	800261a <createJson+0x10a>
    {
        if(i == num_of_values - 1)
 8002542:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3b01      	subs	r3, #1
 800254a:	429a      	cmp	r2, r3
 800254c:	d121      	bne.n	8002592 <createJson+0x82>
        {
        	sprintf(temp, "\"0x%x\":%.2f}\n", (uint8_t)array[i][0], array[i][1]);
 800254e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002560:	edc7 7a01 	vstr	s15, [r7, #4]
 8002564:	793b      	ldrb	r3, [r7, #4]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461c      	mov	r4, r3
 800256a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffe6 	bl	8000548 <__aeabi_f2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	f107 0018 	add.w	r0, r7, #24
 8002584:	e9cd 2300 	strd	r2, r3, [sp]
 8002588:	4622      	mov	r2, r4
 800258a:	4929      	ldr	r1, [pc, #164]	; (8002630 <createJson+0x120>)
 800258c:	f007 ffa4 	bl	800a4d8 <siprintf>
 8002590:	e020      	b.n	80025d4 <createJson+0xc4>
        }
        else
        {
        	sprintf(temp, "\"0x%x\":%.2f,\n", (uint8_t)array[i][0], array[i][1]);
 8002592:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80025a8:	793b      	ldrb	r3, [r7, #4]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461c      	mov	r4, r3
 80025ae:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ffc4 	bl	8000548 <__aeabi_f2d>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	f107 0018 	add.w	r0, r7, #24
 80025c8:	e9cd 2300 	strd	r2, r3, [sp]
 80025cc:	4622      	mov	r2, r4
 80025ce:	4919      	ldr	r1, [pc, #100]	; (8002634 <createJson+0x124>)
 80025d0:	f007 ff82 	bl	800a4d8 <siprintf>
        }
        strcat(buff, temp);
 80025d4:	f107 0318 	add.w	r3, r7, #24
 80025d8:	4619      	mov	r1, r3
 80025da:	6978      	ldr	r0, [r7, #20]
 80025dc:	f007 ff9c 	bl	800a518 <strcat>
        array_cpy[i][0] = array[i][0];
 80025e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	441a      	add	r2, r3
 80025ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	68f9      	ldr	r1, [r7, #12]
 80025f2:	440b      	add	r3, r1
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	601a      	str	r2, [r3, #0]
        array_cpy[i][1] = array[i][1];
 80025f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	441a      	add	r2, r3
 8002602:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	68f9      	ldr	r1, [r7, #12]
 800260a:	440b      	add	r3, r1
 800260c:	6852      	ldr	r2, [r2, #4]
 800260e:	605a      	str	r2, [r3, #4]
    for (uint8_t i = 0; i <= num_of_values - 1; i++)
 8002610:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002614:	3301      	adds	r3, #1
 8002616:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800261a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	dc8e      	bgt.n	8002542 <createJson+0x32>
    }
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	378c      	adds	r7, #140	; 0x8c
 800262a:	46bd      	mov	sp, r7
 800262c:	bd90      	pop	{r4, r7, pc}
 800262e:	bf00      	nop
 8002630:	0800cbf4 	.word	0x0800cbf4
 8002634:	0800cc04 	.word	0x0800cc04

08002638 <mqtt_start>:

static uint8_t mqtt_start(BG77 module)
{
 8002638:	b084      	sub	sp, #16
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
 800263e:	f107 0c08 	add.w	ip, r7, #8
 8002642:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	module.mqtt_status = mqtt_open(MQTT_IP,  MQTT_PORT, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	f240 715b 	movw	r1, #1883	; 0x75b
 800264c:	480f      	ldr	r0, [pc, #60]	; (800268c <mqtt_start+0x54>)
 800264e:	f000 ff87 	bl	8003560 <mqtt_open>
 8002652:	4603      	mov	r3, r0
 8002654:	747b      	strb	r3, [r7, #17]
	if(module.mqtt_status != 0)
 8002656:	7c7b      	ldrb	r3, [r7, #17]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <mqtt_start+0x28>
	{
		return (FALSE);
 800265c:	2300      	movs	r3, #0
 800265e:	e00f      	b.n	8002680 <mqtt_start+0x48>
	}
	HAL_Delay(10000);
 8002660:	f242 7010 	movw	r0, #10000	; 0x2710
 8002664:	f001 fa8e 	bl	8003b84 <HAL_Delay>
	if(mqtt_connect(0,"obd5", &module))
 8002668:	f107 0208 	add.w	r2, r7, #8
 800266c:	4908      	ldr	r1, [pc, #32]	; (8002690 <mqtt_start+0x58>)
 800266e:	2000      	movs	r0, #0
 8002670:	f001 f802 	bl	8003678 <mqtt_connect>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <mqtt_start+0x46>
	{
		return (TRUE);
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <mqtt_start+0x48>
	}
	return (TRUE);
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002688:	b004      	add	sp, #16
 800268a:	4770      	bx	lr
 800268c:	0800cc14 	.word	0x0800cc14
 8002690:	0800cc24 	.word	0x0800cc24

08002694 <mqtt_stop>:

static uint8_t mqtt_stop(BG77 module)
{
 8002694:	b084      	sub	sp, #16
 8002696:	b5b0      	push	{r4, r5, r7, lr}
 8002698:	b090      	sub	sp, #64	; 0x40
 800269a:	af10      	add	r7, sp, #64	; 0x40
 800269c:	f107 0410 	add.w	r4, r7, #16
 80026a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(mqtt_disconnect(0))
 80026a4:	2000      	movs	r0, #0
 80026a6:	f001 f887 	bl	80037b8 <mqtt_disconnect>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d019      	beq.n	80026e4 <mqtt_stop+0x50>
	{
		if(mqtt_close(0, module))
 80026b0:	466d      	mov	r5, sp
 80026b2:	f107 0418 	add.w	r4, r7, #24
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	cb0c      	ldmia	r3, {r2, r3}
 80026d0:	2000      	movs	r0, #0
 80026d2:	f001 f8e9 	bl	80038a8 <mqtt_close>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <mqtt_stop+0x4c>
		{
			return (FALSE);
 80026dc:	2300      	movs	r3, #0
 80026de:	e002      	b.n	80026e6 <mqtt_stop+0x52>
		}
		else
		{
			return (TRUE);
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <mqtt_stop+0x52>
		}
	}
	else
	{
		return (TRUE);
 80026e4:	2301      	movs	r3, #1
	}
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80026ee:	b004      	add	sp, #16
 80026f0:	4770      	bx	lr
	...

080026f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f6:	f6ad 2d5c 	subw	sp, sp, #2652	; 0xa5c
 80026fa:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	float obd_buf[99][2];
	float obd_buf_cpy[99][2];
	char buffer[1000];
	uint32_t timer = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
//	uint32_t timer_t = 0;
	uint16_t counter = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	f8a7 3a1a 	strh.w	r3, [r7, #2586]	; 0xa1a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002708:	f001 f9c8 	bl	8003a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800270c:	f000 f8a0 	bl	8002850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002710:	f7ff fdee 	bl	80022f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002714:	f7ff fdce 	bl	80022b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8002718:	f7ff fd02 	bl	8002120 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800271c:	f000 fc28 	bl	8002f70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002720:	f000 fc5a 	bl	8002fd8 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002724:	f000 facc 	bl	8002cc0 <MX_TIM6_Init>
  MX_TIM2_Init();
 8002728:	f000 fa7a 	bl	8002c20 <MX_TIM2_Init>
  MX_TIM7_Init();
 800272c:	f000 fb00 	bl	8002d30 <MX_TIM7_Init>
  MX_TIM16_Init();
 8002730:	f000 fb36 	bl	8002da0 <MX_TIM16_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002734:	f000 f8db 	bl	80028ee <MX_NVIC_Init>
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 64);
//
//  obd_comm.voltage = adc_avg(adc_buffer);

  module.initialized = module_init(&module);
 8002738:	4842      	ldr	r0, [pc, #264]	; (8002844 <main+0x150>)
 800273a:	f000 fe2f 	bl	800339c <module_init>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <main+0x150>)
 8002744:	70da      	strb	r2, [r3, #3]
  module.rssi = check_signal();
 8002746:	f000 fecf 	bl	80034e8 <check_signal>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	4b3d      	ldr	r3, [pc, #244]	; (8002844 <main+0x150>)
 8002750:	721a      	strb	r2, [r3, #8]
  obd_comm.used_protocol = obd2_init();
 8002752:	f7ff fb81 	bl	8001e58 <obd2_init>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <main+0x154>)
 800275c:	701a      	strb	r2, [r3, #0]

  acquire_vehicle_data(obd_buf);
 800275e:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fe7e 	bl	8002464 <acquire_vehicle_data>
  module.connected = mqtt_start(module);
 8002768:	4e36      	ldr	r6, [pc, #216]	; (8002844 <main+0x150>)
 800276a:	466d      	mov	r5, sp
 800276c:	f106 0410 	add.w	r4, r6, #16
 8002770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002774:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002780:	e885 0003 	stmia.w	r5, {r0, r1}
 8002784:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002788:	f7ff ff56 	bl	8002638 <mqtt_start>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <main+0x150>)
 8002792:	709a      	strb	r2, [r3, #2]

  createJson(buffer, obd_buf, obd_buf_cpy,3);
 8002794:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 8002798:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 800279c:	4638      	mov	r0, r7
 800279e:	2303      	movs	r3, #3
 80027a0:	f7ff feb6 	bl	8002510 <createJson>

  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 80027a4:	463b      	mov	r3, r7
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	4b28      	ldr	r3, [pc, #160]	; (800284c <main+0x158>)
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	2000      	movs	r0, #0
 80027b4:	f001 f8f2 	bl	800399c <mqtt_publish>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer) >= 5000)
 80027b8:	f001 f9d8 	bl	8003b6c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d91f      	bls.n	800280c <main+0x118>
	  {
		  acquire_vehicle_data(obd_buf);
 80027cc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fe47 	bl	8002464 <acquire_vehicle_data>
		  createJson(buffer, obd_buf, obd_buf_cpy,3);
 80027d6:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 80027da:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 80027de:	4638      	mov	r0, r7
 80027e0:	2303      	movs	r3, #3
 80027e2:	f7ff fe95 	bl	8002510 <createJson>
		  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 80027e6:	463b      	mov	r3, r7
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	4b18      	ldr	r3, [pc, #96]	; (800284c <main+0x158>)
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f001 f8d1 	bl	800399c <mqtt_publish>
		  counter++;
 80027fa:	f8b7 3a1a 	ldrh.w	r3, [r7, #2586]	; 0xa1a
 80027fe:	3301      	adds	r3, #1
 8002800:	f8a7 3a1a 	strh.w	r3, [r7, #2586]	; 0xa1a
		  timer = HAL_GetTick();
 8002804:	f001 f9b2 	bl	8003b6c <HAL_GetTick>
 8002808:	f8c7 0a1c 	str.w	r0, [r7, #2588]	; 0xa1c
	  }
	  if(counter >= 1000)
 800280c:	f8b7 3a1a 	ldrh.w	r3, [r7, #2586]	; 0xa1a
 8002810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002814:	d3d0      	bcc.n	80027b8 <main+0xc4>
	  {
		  module.connected = mqtt_stop(module);
 8002816:	4e0b      	ldr	r6, [pc, #44]	; (8002844 <main+0x150>)
 8002818:	466d      	mov	r5, sp
 800281a:	f106 0410 	add.w	r4, r6, #16
 800281e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800282e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002832:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002836:	f7ff ff2d 	bl	8002694 <mqtt_stop>
 800283a:	4603      	mov	r3, r0
 800283c:	461a      	mov	r2, r3
 800283e:	4b01      	ldr	r3, [pc, #4]	; (8002844 <main+0x150>)
 8002840:	709a      	strb	r2, [r3, #2]
	  if((HAL_GetTick() - timer) >= 5000)
 8002842:	e7b9      	b.n	80027b8 <main+0xc4>
 8002844:	20000390 	.word	0x20000390
 8002848:	200002bc 	.word	0x200002bc
 800284c:	0800cc2c 	.word	0x0800cc2c

08002850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b096      	sub	sp, #88	; 0x58
 8002854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	2244      	movs	r2, #68	; 0x44
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f007 f9c8 	bl	8009bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002864:	463b      	mov	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002872:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002876:	f003 fd59 	bl	800632c <HAL_PWREx_ControlVoltageScaling>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002880:	f000 f849 	bl	8002916 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800288c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288e:	2302      	movs	r3, #2
 8002890:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002892:	2303      	movs	r3, #3
 8002894:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002896:	2301      	movs	r3, #1
 8002898:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800289a:	230a      	movs	r3, #10
 800289c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800289e:	2307      	movs	r3, #7
 80028a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028a6:	2302      	movs	r3, #2
 80028a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4618      	mov	r0, r3
 80028b0:	f003 fd92 	bl	80063d8 <HAL_RCC_OscConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80028ba:	f000 f82c 	bl	8002916 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028be:	230f      	movs	r3, #15
 80028c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c2:	2303      	movs	r3, #3
 80028c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80028d2:	463b      	mov	r3, r7
 80028d4:	2104      	movs	r1, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 f992 	bl	8006c00 <HAL_RCC_ClockConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028e2:	f000 f818 	bl	8002916 <Error_Handler>
  }
}
 80028e6:	bf00      	nop
 80028e8:	3758      	adds	r7, #88	; 0x58
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2010      	movs	r0, #16
 80028f8:	f002 ff51 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80028fc:	2010      	movs	r0, #16
 80028fe:	f002 ff6a 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2101      	movs	r1, #1
 8002906:	2026      	movs	r0, #38	; 0x26
 8002908:	f002 ff49 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800290c:	2026      	movs	r0, #38	; 0x26
 800290e:	f002 ff62 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}

08002916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800291a:	b672      	cpsid	i
}
 800291c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800291e:	e7fe      	b.n	800291e <Error_Handler+0x8>

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <HAL_MspInit+0x44>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_MspInit+0x44>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6613      	str	r3, [r2, #96]	; 0x60
 8002932:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <HAL_MspInit+0x44>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_MspInit+0x44>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_MspInit+0x44>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_MspInit+0x44>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f001 f8c6 	bl	8003b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <DMA1_Channel5_IRQHandler+0x10>)
 80029c2:	f003 f95a 	bl	8005c7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000614 	.word	0x20000614

080029d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <DMA1_Channel6_IRQHandler+0x10>)
 80029d6:	f003 f950 	bl	8005c7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000065c 	.word	0x2000065c

080029e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <CAN1_RX0_IRQHandler+0x10>)
 80029ea:	f002 fbb4 	bl	8005156 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000224 	.word	0x20000224

080029f8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <CAN1_RX1_IRQHandler+0x10>)
 80029fe:	f002 fbaa 	bl	8005156 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000224 	.word	0x20000224

08002a0c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002a12:	f004 fefc 	bl	800780e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200004c0 	.word	0x200004c0

08002a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <USART1_IRQHandler+0x10>)
 8002a26:	f005 fd1d 	bl	8008464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000050c 	.word	0x2000050c

08002a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <USART2_IRQHandler+0x10>)
 8002a3a:	f005 fd13 	bl	8008464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000590 	.word	0x20000590

08002a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <TIM6_DAC_IRQHandler+0x10>)
 8002a4e:	f004 fede 	bl	800780e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000428 	.word	0x20000428

08002a5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM7_IRQHandler+0x10>)
 8002a62:	f004 fed4 	bl	800780e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000474 	.word	0x20000474

08002a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_kill>:

int _kill(int pid, int sig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a8a:	f007 f87b 	bl	8009b84 <__errno>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2216      	movs	r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
	return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_exit>:

void _exit (int status)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe7 	bl	8002a80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ab2:	e7fe      	b.n	8002ab2 <_exit+0x12>

08002ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ac6:	f3af 8000 	nop.w
 8002aca:	4601      	mov	r1, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	b2ca      	uxtb	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf0      	blt.n	8002ac6 <_read+0x12>
	}

return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e009      	b.n	8002b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf1      	blt.n	8002b00 <_write+0x12>
	}
	return len;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_close>:

int _close(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_isatty>:

int _isatty(int file)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	return 1;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <_sbrk+0x5c>)
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <_sbrk+0x60>)
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <_sbrk+0x64>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <_sbrk+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc0:	f006 ffe0 	bl	8009b84 <__errno>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e009      	b.n	8002be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <_sbrk+0x64>)
 8002be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20010000 	.word	0x20010000
 8002bf0:	00000400 	.word	0x00000400
 8002bf4:	200003d8 	.word	0x200003d8
 8002bf8:	20000720 	.word	0x20000720

08002bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <SystemInit+0x20>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <SystemInit+0x20>)
 8002c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c26:	f107 0310 	add.w	r3, r7, #16
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c48:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002c54:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c56:	4a19      	ldr	r2, [pc, #100]	; (8002cbc <MX_TIM2_Init+0x9c>)
 8002c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c66:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c68:	f004 fcf6 	bl	8007658 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002c72:	f7ff fe50 	bl	8002916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002c84:	f004 fee2 	bl	8007a4c <HAL_TIM_ConfigClockSource>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002c8e:	f7ff fe42 	bl	8002916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c9a:	1d3b      	adds	r3, r7, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <MX_TIM2_Init+0x98>)
 8002ca0:	f005 f8c4 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002caa:	f7ff fe34 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200003dc 	.word	0x200003dc
 8002cbc:	000f423f 	.word	0x000f423f

08002cc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002cd2:	4a16      	ldr	r2, [pc, #88]	; (8002d2c <MX_TIM6_Init+0x6c>)
 8002cd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002cd8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002cdc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002ce6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002cea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cf2:	480d      	ldr	r0, [pc, #52]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002cf4:	f004 fcb0 	bl	8007658 <HAL_TIM_Base_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cfe:	f7ff fe0a 	bl	8002916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <MX_TIM6_Init+0x68>)
 8002d10:	f005 f88c 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002d1a:	f7ff fdfc 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000428 	.word	0x20000428
 8002d2c:	40001000 	.word	0x40001000

08002d30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d42:	4a16      	ldr	r2, [pc, #88]	; (8002d9c <MX_TIM7_Init+0x6c>)
 8002d44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d48:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002d4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d56:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002d5a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002d62:	480d      	ldr	r0, [pc, #52]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d64:	f004 fc78 	bl	8007658 <HAL_TIM_Base_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002d6e:	f7ff fdd2 	bl	8002916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <MX_TIM7_Init+0x68>)
 8002d80:	f005 f854 	bl	8007e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002d8a:	f7ff fdc4 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000474 	.word	0x20000474
 8002d9c:	40001400 	.word	0x40001400

08002da0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <MX_TIM16_Init+0x4c>)
 8002da8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dac:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002db0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3999;
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dba:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002dbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <MX_TIM16_Init+0x48>)
 8002dd4:	f004 fc40 	bl	8007658 <HAL_TIM_Base_Init>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002dde:	f7ff fd9a 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200004c0 	.word	0x200004c0
 8002dec:	40014400 	.word	0x40014400

08002df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d10c      	bne.n	8002e1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	4a2e      	ldr	r2, [pc, #184]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002e1a:	e04c      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a28      	ldr	r2, [pc, #160]	; (8002ec4 <HAL_TIM_Base_MspInit+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d114      	bne.n	8002e50 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e26:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e2c:	f043 0310 	orr.w	r3, r3, #16
 8002e30:	6593      	str	r3, [r2, #88]	; 0x58
 8002e32:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	2036      	movs	r0, #54	; 0x36
 8002e44:	f002 fcab 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e48:	2036      	movs	r0, #54	; 0x36
 8002e4a:	f002 fcc4 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8002e4e:	e032      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <HAL_TIM_Base_MspInit+0xd8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d114      	bne.n	8002e84 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e60:	f043 0320 	orr.w	r3, r3, #32
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002e72:	2200      	movs	r2, #0
 8002e74:	2102      	movs	r1, #2
 8002e76:	2037      	movs	r0, #55	; 0x37
 8002e78:	f002 fc91 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e7c:	2037      	movs	r0, #55	; 0x37
 8002e7e:	f002 fcaa 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8002e82:	e018      	b.n	8002eb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_TIM_Base_MspInit+0xdc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d113      	bne.n	8002eb6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e98:	6613      	str	r3, [r2, #96]	; 0x60
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_TIM_Base_MspInit+0xd0>)
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2019      	movs	r0, #25
 8002eac:	f002 fc77 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002eb0:	2019      	movs	r0, #25
 8002eb2:	f002 fc90 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40001000 	.word	0x40001000
 8002ec8:	40001400 	.word	0x40001400
 8002ecc:	40014400 	.word	0x40014400

08002ed0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10e      	bne.n	8002f00 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(obd_comm.msg_type == 0)
 8002ee2:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ee4:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 8002eec:	bf00      	nop
 8002eee:	e003      	b.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
		{
			obd_comm.msg_type = 3;
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}
		HAL_TIM_Base_Stop_IT(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f004 fc59 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
	else if(htim->Instance == TIM16)
	{
		obd_comm.timeout = 1;
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 8002efe:	e029      	b.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x84>
	else if(htim->Instance == TIM2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d10c      	bne.n	8002f24 <HAL_TIM_PeriodElapsedCallback+0x54>
		if(module.received == 1)
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PeriodElapsedCallback+0x46>
			__NOP();
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <HAL_TIM_PeriodElapsedCallback+0x4c>
			module.received = 2;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002f18:	2202      	movs	r2, #2
 8002f1a:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop_IT(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f004 fc47 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
}
 8002f22:	e017      	b.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x84>
	else if(htim->Instance == TIM7)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0f      	ldr	r2, [pc, #60]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d106      	bne.n	8002f3c <HAL_TIM_PeriodElapsedCallback+0x6c>
		module.received = 1;
 8002f2e:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop_IT(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 fc3b 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
}
 8002f3a:	e00b      	b.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x84>
	else if(htim->Instance == TIM16)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_PeriodElapsedCallback+0x84>
		obd_comm.timeout = 1;
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		HAL_TIM_Base_Stop_IT(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f004 fc2e 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
}
 8002f54:	bf00      	nop
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40001000 	.word	0x40001000
 8002f60:	200002bc 	.word	0x200002bc
 8002f64:	20000390 	.word	0x20000390
 8002f68:	40001400 	.word	0x40001400
 8002f6c:	40014400 	.word	0x40014400

08002f70 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <MX_USART1_UART_Init+0x64>)
 8002f78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f7c:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002f80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f96:	220c      	movs	r2, #12
 8002f98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_USART1_UART_Init+0x60>)
 8002fbc:	f004 ffba 	bl	8007f34 <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002fc6:	f7ff fca6 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000050c 	.word	0x2000050c
 8002fd4:	40013800 	.word	0x40013800

08002fd8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <MX_USART2_UART_Init+0x64>)
 8002fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8002ffe:	220c      	movs	r2, #12
 8003000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8003004:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003008:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <MX_USART2_UART_Init+0x60>)
 800300c:	2200      	movs	r2, #0
 800300e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8003012:	2200      	movs	r2, #0
 8003014:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8003018:	2208      	movs	r2, #8
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <MX_USART2_UART_Init+0x60>)
 800301e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003022:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	; (8003038 <MX_USART2_UART_Init+0x60>)
 8003026:	f004 ff85 	bl	8007f34 <HAL_UART_Init>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003030:	f7ff fc71 	bl	8002916 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000590 	.word	0x20000590
 800303c:	40004400 	.word	0x40004400

08003040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0a2      	sub	sp, #136	; 0x88
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	225c      	movs	r2, #92	; 0x5c
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f006 fdc7 	bl	8009bf4 <memset>
  if(uartHandle->Instance==USART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a76      	ldr	r2, [pc, #472]	; (8003244 <HAL_UART_MspInit+0x204>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d169      	bne.n	8003144 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003070:	2301      	movs	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003074:	2300      	movs	r3, #0
 8003076:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003078:	f107 0318 	add.w	r3, r7, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f003 ffe1 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003088:	f7ff fc45 	bl	8002916 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800308c:	4b6e      	ldr	r3, [pc, #440]	; (8003248 <HAL_UART_MspInit+0x208>)
 800308e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003090:	4a6d      	ldr	r2, [pc, #436]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003096:	6613      	str	r3, [r2, #96]	; 0x60
 8003098:	4b6b      	ldr	r3, [pc, #428]	; (8003248 <HAL_UART_MspInit+0x208>)
 800309a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_UART_MspInit+0x208>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4a67      	ldr	r2, [pc, #412]	; (8003248 <HAL_UART_MspInit+0x208>)
 80030aa:	f043 0302 	orr.w	r3, r3, #2
 80030ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b0:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_UART_MspInit+0x208>)
 80030b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c8:	2303      	movs	r3, #3
 80030ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030ce:	2307      	movs	r3, #7
 80030d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80030d8:	4619      	mov	r1, r3
 80030da:	485c      	ldr	r0, [pc, #368]	; (800324c <HAL_UART_MspInit+0x20c>)
 80030dc:	f002 feac 	bl	8005e38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80030e0:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_UART_MspInit+0x210>)
 80030e2:	4a5c      	ldr	r2, [pc, #368]	; (8003254 <HAL_UART_MspInit+0x214>)
 80030e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 80030e6:	4b5a      	ldr	r3, [pc, #360]	; (8003250 <HAL_UART_MspInit+0x210>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ec:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_UART_MspInit+0x210>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_UART_MspInit+0x210>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b55      	ldr	r3, [pc, #340]	; (8003250 <HAL_UART_MspInit+0x210>)
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030fe:	4b54      	ldr	r3, [pc, #336]	; (8003250 <HAL_UART_MspInit+0x210>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_UART_MspInit+0x210>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800310a:	4b51      	ldr	r3, [pc, #324]	; (8003250 <HAL_UART_MspInit+0x210>)
 800310c:	2200      	movs	r2, #0
 800310e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_UART_MspInit+0x210>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003116:	484e      	ldr	r0, [pc, #312]	; (8003250 <HAL_UART_MspInit+0x210>)
 8003118:	f002 fb86 	bl	8005828 <HAL_DMA_Init>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003122:	f7ff fbf8 	bl	8002916 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a49      	ldr	r2, [pc, #292]	; (8003250 <HAL_UART_MspInit+0x210>)
 800312a:	671a      	str	r2, [r3, #112]	; 0x70
 800312c:	4a48      	ldr	r2, [pc, #288]	; (8003250 <HAL_UART_MspInit+0x210>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2101      	movs	r1, #1
 8003136:	2025      	movs	r0, #37	; 0x25
 8003138:	f002 fb31 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800313c:	2025      	movs	r0, #37	; 0x25
 800313e:	f002 fb4a 	bl	80057d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003142:	e07a      	b.n	800323a <HAL_UART_MspInit+0x1fa>
  else if(uartHandle->Instance==USART2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a43      	ldr	r2, [pc, #268]	; (8003258 <HAL_UART_MspInit+0x218>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d175      	bne.n	800323a <HAL_UART_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800314e:	2302      	movs	r3, #2
 8003150:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003152:	2300      	movs	r3, #0
 8003154:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003156:	f107 0318 	add.w	r3, r7, #24
 800315a:	4618      	mov	r0, r3
 800315c:	f003 ff72 	bl	8007044 <HAL_RCCEx_PeriphCLKConfig>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_UART_MspInit+0x12a>
      Error_Handler();
 8003166:	f7ff fbd6 	bl	8002916 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800316a:	4b37      	ldr	r3, [pc, #220]	; (8003248 <HAL_UART_MspInit+0x208>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4a36      	ldr	r2, [pc, #216]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003186:	4a30      	ldr	r2, [pc, #192]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800318e:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_UART_MspInit+0x208>)
 8003190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 800319a:	230b      	movs	r3, #11
 800319c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319e:	2302      	movs	r3, #2
 80031a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ac:	2307      	movs	r3, #7
 80031ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031b6:	4619      	mov	r1, r3
 80031b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031bc:	f002 fe3c 	bl	8005e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 80031c0:	2304      	movs	r3, #4
 80031c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031d2:	2307      	movs	r3, #7
 80031d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031dc:	4619      	mov	r1, r3
 80031de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e2:	f002 fe29 	bl	8005e38 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_UART_MspInit+0x21c>)
 80031e8:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_UART_MspInit+0x220>)
 80031ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_UART_MspInit+0x21c>)
 80031ee:	2202      	movs	r2, #2
 80031f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <HAL_UART_MspInit+0x21c>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f8:	4b18      	ldr	r3, [pc, #96]	; (800325c <HAL_UART_MspInit+0x21c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003206:	2200      	movs	r2, #0
 8003208:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_UART_MspInit+0x21c>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003212:	2220      	movs	r2, #32
 8003214:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003216:	4b11      	ldr	r3, [pc, #68]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003218:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800321e:	480f      	ldr	r0, [pc, #60]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003220:	f002 fb02 	bl	8005828 <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 800322a:	f7ff fb74 	bl	8002916 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003232:	671a      	str	r2, [r3, #112]	; 0x70
 8003234:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_UART_MspInit+0x21c>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6293      	str	r3, [r2, #40]	; 0x28
}
 800323a:	bf00      	nop
 800323c:	3788      	adds	r7, #136	; 0x88
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40013800 	.word	0x40013800
 8003248:	40021000 	.word	0x40021000
 800324c:	48000400 	.word	0x48000400
 8003250:	20000614 	.word	0x20000614
 8003254:	40020058 	.word	0x40020058
 8003258:	40004400 	.word	0x40004400
 800325c:	2000065c 	.word	0x2000065c
 8003260:	4002006c 	.word	0x4002006c

08003264 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_UART_MspDeInit+0x70>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d112      	bne.n	800329c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_UART_MspDeInit+0x74>)
 8003278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327a:	4a17      	ldr	r2, [pc, #92]	; (80032d8 <HAL_UART_MspDeInit+0x74>)
 800327c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003280:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, K_Line_TX_Pin|K_Line_RX_Pin);
 8003282:	21c0      	movs	r1, #192	; 0xc0
 8003284:	4815      	ldr	r0, [pc, #84]	; (80032dc <HAL_UART_MspDeInit+0x78>)
 8003286:	f002 ff51 	bl	800612c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4618      	mov	r0, r3
 8003290:	f002 fb82 	bl	8005998 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003294:	2025      	movs	r0, #37	; 0x25
 8003296:	f002 faac 	bl	80057f2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800329a:	e017      	b.n	80032cc <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_UART_MspDeInit+0x7c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d112      	bne.n	80032cc <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <HAL_UART_MspDeInit+0x74>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <HAL_UART_MspDeInit+0x74>)
 80032ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, IoT_CTS_Pin|IoT_RTS_Pin|IoT_TX_Pin|IoT_RX_Pin);
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b8:	f002 ff38 	bl	800612c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fb69 	bl	8005998 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80032c6:	2026      	movs	r0, #38	; 0x26
 80032c8:	f002 fa93 	bl	80057f2 <HAL_NVIC_DisableIRQ>
}
 80032cc:	bf00      	nop
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40021000 	.word	0x40021000
 80032dc:	48000400 	.word	0x48000400
 80032e0:	40004400 	.word	0x40004400

080032e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a08      	ldr	r2, [pc, #32]	; (8003310 <HAL_UART_RxCpltCallback+0x2c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d102      	bne.n	80032fa <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 80032f4:	f7fe f8e8 	bl	80014c8 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 80032f8:	e005      	b.n	8003306 <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_UART_RxCpltCallback+0x30>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 8003302:	f000 f8c7 	bl	8003494 <nb_rx_callback>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000050c 	.word	0x2000050c
 8003314:	20000590 	.word	0x20000590

08003318 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 8003324:	f000 f8b6 	bl	8003494 <nb_rx_callback>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	__NOP();
 8003338:	bf00      	nop
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800334c:	f7ff fc56 	bl	8002bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003350:	480c      	ldr	r0, [pc, #48]	; (8003384 <LoopForever+0x6>)
  ldr r1, =_edata
 8003352:	490d      	ldr	r1, [pc, #52]	; (8003388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003354:	4a0d      	ldr	r2, [pc, #52]	; (800338c <LoopForever+0xe>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003358:	e002      	b.n	8003360 <LoopCopyDataInit>

0800335a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335e:	3304      	adds	r3, #4

08003360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003364:	d3f9      	bcc.n	800335a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003368:	4c0a      	ldr	r4, [pc, #40]	; (8003394 <LoopForever+0x16>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800336c:	e001      	b.n	8003372 <LoopFillZerobss>

0800336e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003370:	3204      	adds	r2, #4

08003372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003374:	d3fb      	bcc.n	800336e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003376:	f006 fc0b 	bl	8009b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800337a:	f7ff f9bb 	bl	80026f4 <main>

0800337e <LoopForever>:

LoopForever:
    b LoopForever
 800337e:	e7fe      	b.n	800337e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003380:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003388:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800338c:	0800d2e8 	.word	0x0800d2e8
  ldr r2, =_sbss
 8003390:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003394:	20000720 	.word	0x20000720

08003398 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003398:	e7fe      	b.n	8003398 <ADC1_IRQHandler>
	...

0800339c <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	pointer to a BG77 struct
 */
uint8_t module_init(BG77 *module)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	uint8_t repeat = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
	power_on();
 80033a8:	f000 fb54 	bl	8003a54 <power_on>
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 80033ac:	e007      	b.n	80033be <module_init+0x22>
	{
		if(repeat > MAX_REPEAT)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b0a      	cmp	r3, #10
 80033b2:	d901      	bls.n	80033b8 <module_init+0x1c>
		{
			return (FALSE);
 80033b4:	2300      	movs	r3, #0
 80033b6:	e019      	b.n	80033ec <module_init+0x50>
		}
		repeat++;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	3301      	adds	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <module_init+0x58>)
 80033c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <module_init+0x5c>)
 80033c6:	480d      	ldr	r0, [pc, #52]	; (80033fc <module_init+0x60>)
 80033c8:	f000 f81c 	bl	8003404 <send_command>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d1ed      	bne.n	80033ae <module_init+0x12>
	}
	if(send_command("ATE0\r\n", "OK", DEFAULT_TIMEOUT, NB))
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <module_init+0x58>)
 80033d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d8:	4907      	ldr	r1, [pc, #28]	; (80033f8 <module_init+0x5c>)
 80033da:	4809      	ldr	r0, [pc, #36]	; (8003400 <module_init+0x64>)
 80033dc:	f000 f812 	bl	8003404 <send_command>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <module_init+0x4e>
	{
		return (TRUE);
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <module_init+0x50>
	}
	return (FALSE);
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000590 	.word	0x20000590
 80033f8:	0800cc38 	.word	0x0800cc38
 80033fc:	0800cc3c 	.word	0x0800cc3c
 8003400:	0800cc44 	.word	0x0800cc44

08003404 <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval (TRUE) if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <send_command+0x80>)
 8003416:	2200      	movs	r2, #0
 8003418:	711a      	strb	r2, [r3, #4]
	clear_rx_buff();
 800341a:	f000 fb2f 	bl	8003a7c <clear_rx_buff>
//	__HAL_UART_SEND_REQ(NB, UART_RXDATA_FLUSH_REQUEST);
	uint8_t length = strlen(command);
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f7fc fed6 	bl	80001d0 <strlen>
 8003424:	4603      	mov	r3, r0
 8003426:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Receive_IT(interface, &rx_data, 1);
 8003428:	2201      	movs	r2, #1
 800342a:	4917      	ldr	r1, [pc, #92]	; (8003488 <send_command+0x84>)
 800342c:	6838      	ldr	r0, [r7, #0]
 800342e:	f004 ff6d 	bl	800830c <HAL_UART_Receive_IT>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	b29a      	uxth	r2, r3
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f004 fe01 	bl	8008042 <HAL_UART_Transmit>
//	HAL_TIM_Base_Start_IT(NB_TIMER);
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <send_command+0x88>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0201 	mvn.w	r2, #1
 8003448:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 800344a:	4810      	ldr	r0, [pc, #64]	; (800348c <send_command+0x88>)
 800344c:	f004 f95c 	bl	8007708 <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 8003450:	e000      	b.n	8003454 <send_command+0x50>
	{
		__NOP();
 8003452:	bf00      	nop
	while(module.received == 0)
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <send_command+0x80>)
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0fa      	beq.n	8003452 <send_command+0x4e>
	}
	if(module.received != 1)
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <send_command+0x80>)
 800345e:	791b      	ldrb	r3, [r3, #4]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d001      	beq.n	8003468 <send_command+0x64>
	{
		return (FALSE);
 8003464:	2300      	movs	r3, #0
 8003466:	e009      	b.n	800347c <send_command+0x78>
	}
	if(strstr((char *)rx_buffer, reply) != NULL)
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <send_command+0x8c>)
 800346c:	f007 f863 	bl	800a536 <strstr>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <send_command+0x76>
	{
		return (TRUE);
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <send_command+0x78>
	}
	return (FALSE);
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000390 	.word	0x20000390
 8003488:	200006a4 	.word	0x200006a4
 800348c:	20000474 	.word	0x20000474
 8003490:	200006a8 	.word	0x200006a8

08003494 <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
	rx_buffer[module.rx_index++] = rx_data;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <nb_rx_callback+0x40>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	b2d1      	uxtb	r1, r2
 80034a0:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <nb_rx_callback+0x40>)
 80034a2:	7011      	strb	r1, [r2, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <nb_rx_callback+0x44>)
 80034a8:	7819      	ldrb	r1, [r3, #0]
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <nb_rx_callback+0x48>)
 80034ac:	5499      	strb	r1, [r3, r2]
	HAL_TIM_Base_Stop_IT(UART_TIMER);
 80034ae:	480c      	ldr	r0, [pc, #48]	; (80034e0 <nb_rx_callback+0x4c>)
 80034b0:	f004 f97e 	bl	80077b0 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <nb_rx_callback+0x4c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0201 	mvn.w	r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 80034be:	4808      	ldr	r0, [pc, #32]	; (80034e0 <nb_rx_callback+0x4c>)
 80034c0:	f004 f922 	bl	8007708 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(NB, &rx_data, 1);
 80034c4:	2201      	movs	r2, #1
 80034c6:	4904      	ldr	r1, [pc, #16]	; (80034d8 <nb_rx_callback+0x44>)
 80034c8:	4806      	ldr	r0, [pc, #24]	; (80034e4 <nb_rx_callback+0x50>)
 80034ca:	f004 ff1f 	bl	800830c <HAL_UART_Receive_IT>
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000390 	.word	0x20000390
 80034d8:	200006a4 	.word	0x200006a4
 80034dc:	200006a8 	.word	0x200006a8
 80034e0:	20000474 	.word	0x20000474
 80034e4:	20000590 	.word	0x20000590

080034e8 <check_signal>:
/*
 *	@brief	Checks the RSSI for NB signal
 *	@retval	rssi or (FALSE) if the the is no response
 */
uint8_t check_signal(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
	if(!(send_command("AT+CSQ\r\n","OK",DEFAULT_TIMEOUT, NB)))
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <check_signal+0x60>)
 80034f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f4:	4915      	ldr	r1, [pc, #84]	; (800354c <check_signal+0x64>)
 80034f6:	4816      	ldr	r0, [pc, #88]	; (8003550 <check_signal+0x68>)
 80034f8:	f7ff ff84 	bl	8003404 <send_command>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <check_signal+0x1e>
	{
		return (FALSE);
 8003502:	2300      	movs	r3, #0
 8003504:	e01c      	b.n	8003540 <check_signal+0x58>
	}
	char *token = strtok((char *)rx_buffer, " ");
 8003506:	4913      	ldr	r1, [pc, #76]	; (8003554 <check_signal+0x6c>)
 8003508:	4813      	ldr	r0, [pc, #76]	; (8003558 <check_signal+0x70>)
 800350a:	f007 f82b 	bl	800a564 <strtok>
 800350e:	60f8      	str	r0, [r7, #12]
	if(token)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <check_signal+0x56>
	{
		token = strtok(NULL,",");
 8003516:	4911      	ldr	r1, [pc, #68]	; (800355c <check_signal+0x74>)
 8003518:	2000      	movs	r0, #0
 800351a:	f007 f823 	bl	800a564 <strtok>
 800351e:	60f8      	str	r0, [r7, #12]
		if(token)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <check_signal+0x52>
		{
			char *ptr;
			uint8_t rssi = strtol(token, &ptr, 10);
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	220a      	movs	r2, #10
 800352a:	4619      	mov	r1, r3
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f007 f8f7 	bl	800a720 <strtol>
 8003532:	4603      	mov	r3, r0
 8003534:	72fb      	strb	r3, [r7, #11]
			return (rssi);
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	e002      	b.n	8003540 <check_signal+0x58>
		}
		return (FALSE);
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <check_signal+0x58>
	}
	return (FALSE);
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000590 	.word	0x20000590
 800354c:	0800cc38 	.word	0x0800cc38
 8003550:	0800cc64 	.word	0x0800cc64
 8003554:	0800cc58 	.word	0x0800cc58
 8003558:	200006a8 	.word	0x200006a8
 800355c:	0800cc5c 	.word	0x0800cc5c

08003560 <mqtt_open>:
 *	@param	port			Port of desired MQTT broker
 *	@param	id				Connection ID (0-5)
 *	@retval	(TRUE) or (FALSE) depending on the response
 * */
uint8_t mqtt_open(const char* broker_address, uint16_t port, uint8_t id)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0c8      	sub	sp, #288	; 0x120
 8003564:	af02      	add	r7, sp, #8
 8003566:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800356a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800356e:	6018      	str	r0, [r3, #0]
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003578:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 800357c:	4602      	mov	r2, r0
 800357e:	801a      	strh	r2, [r3, #0]
 8003580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003584:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8003588:	460a      	mov	r2, r1
 800358a:	701a      	strb	r2, [r3, #0]
//	wake_up();
	char command [COMMAND_SIZE];
	uint8_t ret [2] = {255};
 800358c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command, "AT+QMTOPEN=%d,\"%s\",%d\r\n", id, broker_address, port);
 800359e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80035a2:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 80035a6:	7819      	ldrb	r1, [r3, #0]
 80035a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80035ac:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80035b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035ba:	f107 0010 	add.w	r0, r7, #16
 80035be:	9200      	str	r2, [sp, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	460a      	mov	r2, r1
 80035c4:	4926      	ldr	r1, [pc, #152]	; (8003660 <mqtt_open+0x100>)
 80035c6:	f006 ff87 	bl	800a4d8 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 80035ca:	f107 0010 	add.w	r0, r7, #16
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <mqtt_open+0x104>)
 80035d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d4:	4924      	ldr	r1, [pc, #144]	; (8003668 <mqtt_open+0x108>)
 80035d6:	f7ff ff15 	bl	8003404 <send_command>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <mqtt_open+0x84>
	{
		return (FALSE);
 80035e0:	2300      	movs	r3, #0
 80035e2:	e037      	b.n	8003654 <mqtt_open+0xf4>
	}
	char *token = strtok((char*)rx_buffer, " ");
 80035e4:	4921      	ldr	r1, [pc, #132]	; (800366c <mqtt_open+0x10c>)
 80035e6:	4822      	ldr	r0, [pc, #136]	; (8003670 <mqtt_open+0x110>)
 80035e8:	f006 ffbc 	bl	800a564 <strtok>
 80035ec:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 80035f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <mqtt_open+0x9c>
	{
		return (FALSE);
 80035f8:	2300      	movs	r3, #0
 80035fa:	e02b      	b.n	8003654 <mqtt_open+0xf4>
	}
	token = strtok(NULL, ",");
 80035fc:	491d      	ldr	r1, [pc, #116]	; (8003674 <mqtt_open+0x114>)
 80035fe:	2000      	movs	r0, #0
 8003600:	f006 ffb0 	bl	800a564 <strtok>
 8003604:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 8003608:	e01b      	b.n	8003642 <mqtt_open+0xe2>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	220a      	movs	r2, #10
 8003610:	4619      	mov	r1, r3
 8003612:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003616:	f007 f883 	bl	800a720 <strtol>
 800361a:	4602      	mov	r2, r0
 800361c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003620:	b2d1      	uxtb	r1, r2
 8003622:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003626:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800362a:	54d1      	strb	r1, [r2, r3]
		token = strtok(NULL, ",");
 800362c:	4911      	ldr	r1, [pc, #68]	; (8003674 <mqtt_open+0x114>)
 800362e:	2000      	movs	r0, #0
 8003630:	f006 ff98 	bl	800a564 <strtok>
 8003634:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800363c:	3301      	adds	r3, #1
 800363e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 8003642:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1df      	bne.n	800360a <mqtt_open+0xaa>
	}
	return (ret[1]);
 800364a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800364e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003652:	785b      	ldrb	r3, [r3, #1]
}
 8003654:	4618      	mov	r0, r3
 8003656:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	0800cc88 	.word	0x0800cc88
 8003664:	20000590 	.word	0x20000590
 8003668:	0800cc38 	.word	0x0800cc38
 800366c:	0800cc58 	.word	0x0800cc58
 8003670:	200006a8 	.word	0x200006a8
 8003674:	0800cc5c 	.word	0x0800cc5c

08003678 <mqtt_connect>:
 * @param	module		pointer to a BG77 struct
 * @retval	return code for the command
 */
//TODO
uint8_t mqtt_connect(uint8_t id, const char* client_id, BG77 *module)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b0c8      	sub	sp, #288	; 0x120
 800367c:	af00      	add	r7, sp, #0
 800367e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003682:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003686:	6019      	str	r1, [r3, #0]
 8003688:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800368c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003696:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800369a:	4602      	mov	r2, r0
 800369c:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [3] = {255};
 800369e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036a6:	4a3d      	ldr	r2, [pc, #244]	; (800379c <mqtt_connect+0x124>)
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	2200      	movs	r2, #0
 80036ae:	709a      	strb	r2, [r3, #2]
	uint8_t i = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	sprintf(command, "AT+QMTCONN=%d,\"%s\"\r\n",id,client_id);
 80036b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036ba:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80036c8:	f107 0018 	add.w	r0, r7, #24
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4934      	ldr	r1, [pc, #208]	; (80037a0 <mqtt_connect+0x128>)
 80036d0:	f006 ff02 	bl	800a4d8 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 80036d4:	f107 0018 	add.w	r0, r7, #24
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <mqtt_connect+0x12c>)
 80036da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036de:	4932      	ldr	r1, [pc, #200]	; (80037a8 <mqtt_connect+0x130>)
 80036e0:	f7ff fe90 	bl	8003404 <send_command>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <mqtt_connect+0x76>
	{
		return (FALSE);
 80036ea:	2300      	movs	r3, #0
 80036ec:	e050      	b.n	8003790 <mqtt_connect+0x118>
	}
	char *token = strtok((char *)rx_buffer, " ");
 80036ee:	492f      	ldr	r1, [pc, #188]	; (80037ac <mqtt_connect+0x134>)
 80036f0:	482f      	ldr	r0, [pc, #188]	; (80037b0 <mqtt_connect+0x138>)
 80036f2:	f006 ff37 	bl	800a564 <strtok>
 80036f6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if(!token)
 80036fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <mqtt_connect+0x8e>
	{
		return (FALSE);
 8003702:	2300      	movs	r3, #0
 8003704:	e044      	b.n	8003790 <mqtt_connect+0x118>
	}
	token = strtok(NULL, ",");
 8003706:	492b      	ldr	r1, [pc, #172]	; (80037b4 <mqtt_connect+0x13c>)
 8003708:	2000      	movs	r0, #0
 800370a:	f006 ff2b 	bl	800a564 <strtok>
 800370e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 8003712:	e01b      	b.n	800374c <mqtt_connect+0xd4>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	220a      	movs	r2, #10
 800371a:	4619      	mov	r1, r3
 800371c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8003720:	f006 fffe 	bl	800a720 <strtol>
 8003724:	4602      	mov	r2, r0
 8003726:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800372a:	b2d1      	uxtb	r1, r2
 800372c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8003730:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003734:	54d1      	strb	r1, [r2, r3]
		i++;
 8003736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800373a:	3301      	adds	r3, #1
 800373c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		token = strtok(NULL, ",");
 8003740:	491c      	ldr	r1, [pc, #112]	; (80037b4 <mqtt_connect+0x13c>)
 8003742:	2000      	movs	r0, #0
 8003744:	f006 ff0e 	bl	800a564 <strtok>
 8003748:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 800374c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1df      	bne.n	8003714 <mqtt_connect+0x9c>
	}
	if(ret[1] == (0 | 1))
 8003754:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003758:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d115      	bne.n	800378e <mqtt_connect+0x116>
	{
		switch(ret[2])
 8003762:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003766:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800376a:	789b      	ldrb	r3, [r3, #2]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <mqtt_connect+0xfc>
		{
			case 0:
				return (TRUE);
 8003770:	2301      	movs	r3, #1
 8003772:	e00d      	b.n	8003790 <mqtt_connect+0x118>
				break;
			default:
				module->error = ret[2];
 8003774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003778:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800377c:	789a      	ldrb	r2, [r3, #2]
 800377e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	71da      	strb	r2, [r3, #7]
				return (FALSE);
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <mqtt_connect+0x118>
		}
	}
	return (FALSE);
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	0800ccb8 	.word	0x0800ccb8
 80037a0:	0800cca0 	.word	0x0800cca0
 80037a4:	20000590 	.word	0x20000590
 80037a8:	0800cc38 	.word	0x0800cc38
 80037ac:	0800cc58 	.word	0x0800cc58
 80037b0:	200006a8 	.word	0x200006a8
 80037b4:	0800cc5c 	.word	0x0800cc5c

080037b8 <mqtt_disconnect>:
 *	@brief	Disconnects for MQTT broker
 *	@param	id	 	Connection ID (0-5)
 *	@retval	(TRUE) if the disconnect is successful
 */
uint8_t mqtt_disconnect(uint8_t id)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b0c6      	sub	sp, #280	; 0x118
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4602      	mov	r2, r0
 80037c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037c4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80037c8:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [2] = {255};
 80037ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037d2:	22ff      	movs	r2, #255	; 0xff
 80037d4:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command,"AT+QMTDISC=%d\r\n",id);
 80037dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80037e0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	f107 0310 	add.w	r3, r7, #16
 80037ea:	4929      	ldr	r1, [pc, #164]	; (8003890 <mqtt_disconnect+0xd8>)
 80037ec:	4618      	mov	r0, r3
 80037ee:	f006 fe73 	bl	800a4d8 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 80037f2:	f107 0010 	add.w	r0, r7, #16
 80037f6:	4b27      	ldr	r3, [pc, #156]	; (8003894 <mqtt_disconnect+0xdc>)
 80037f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037fc:	4926      	ldr	r1, [pc, #152]	; (8003898 <mqtt_disconnect+0xe0>)
 80037fe:	f7ff fe01 	bl	8003404 <send_command>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <mqtt_disconnect+0x54>
	{
		return (FALSE);
 8003808:	2300      	movs	r3, #0
 800380a:	e03c      	b.n	8003886 <mqtt_disconnect+0xce>
	}
	char *token = strtok((char *)rx_buffer, " ");
 800380c:	4923      	ldr	r1, [pc, #140]	; (800389c <mqtt_disconnect+0xe4>)
 800380e:	4824      	ldr	r0, [pc, #144]	; (80038a0 <mqtt_disconnect+0xe8>)
 8003810:	f006 fea8 	bl	800a564 <strtok>
 8003814:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 8003818:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <mqtt_disconnect+0x6c>
	{
		return (FALSE);
 8003820:	2300      	movs	r3, #0
 8003822:	e030      	b.n	8003886 <mqtt_disconnect+0xce>
	}
	token = strtok(NULL, ",");
 8003824:	491f      	ldr	r1, [pc, #124]	; (80038a4 <mqtt_disconnect+0xec>)
 8003826:	2000      	movs	r0, #0
 8003828:	f006 fe9c 	bl	800a564 <strtok>
 800382c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 8003830:	e01b      	b.n	800386a <mqtt_disconnect+0xb2>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	220a      	movs	r2, #10
 8003838:	4619      	mov	r1, r3
 800383a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800383e:	f006 ff6f 	bl	800a720 <strtol>
 8003842:	4602      	mov	r2, r0
 8003844:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003848:	b2d1      	uxtb	r1, r2
 800384a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800384e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003852:	54d1      	strb	r1, [r2, r3]
		token = strtok(NULL, ",");
 8003854:	4913      	ldr	r1, [pc, #76]	; (80038a4 <mqtt_disconnect+0xec>)
 8003856:	2000      	movs	r0, #0
 8003858:	f006 fe84 	bl	800a564 <strtok>
 800385c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003864:	3301      	adds	r3, #1
 8003866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 800386a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1df      	bne.n	8003832 <mqtt_disconnect+0x7a>
	}
	if(ret[1] == 0)
 8003872:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003876:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <mqtt_disconnect+0xcc>
	{
		return (TRUE);
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <mqtt_disconnect+0xce>
	}
	return (FALSE);
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	0800ccbc 	.word	0x0800ccbc
 8003894:	20000590 	.word	0x20000590
 8003898:	0800cc38 	.word	0x0800cc38
 800389c:	0800cc58 	.word	0x0800cc58
 80038a0:	200006a8 	.word	0x200006a8
 80038a4:	0800cc5c 	.word	0x0800cc5c

080038a8 <mqtt_close>:
 *	@param	id	 	Connection ID (0-5)
 *	@param	module	BG77 struct
 *	@retval	0 if the closure is successful, else or 1
 */
uint8_t mqtt_close(uint8_t id, BG77 module)
{
 80038a8:	b082      	sub	sp, #8
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b0c6      	sub	sp, #280	; 0x118
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4601      	mov	r1, r0
 80038b2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80038b6:	e880 000c 	stmia.w	r0, {r2, r3}
 80038ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80038be:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80038c2:	460a      	mov	r2, r1
 80038c4:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t i = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t ret = 255;
 80038cc:	23ff      	movs	r3, #255	; 0xff
 80038ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	sprintf(command,"AT+QMTCLOSE=%d\r\n",id);
 80038d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80038d6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	f107 0310 	add.w	r3, r7, #16
 80038e0:	4928      	ldr	r1, [pc, #160]	; (8003984 <mqtt_close+0xdc>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f006 fdf8 	bl	800a4d8 <siprintf>
	if((send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 80038e8:	f107 0010 	add.w	r0, r7, #16
 80038ec:	4b26      	ldr	r3, [pc, #152]	; (8003988 <mqtt_close+0xe0>)
 80038ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038f2:	4926      	ldr	r1, [pc, #152]	; (800398c <mqtt_close+0xe4>)
 80038f4:	f7ff fd86 	bl	8003404 <send_command>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <mqtt_close+0x5a>
	{
		return (1);
 80038fe:	2301      	movs	r3, #1
 8003900:	e037      	b.n	8003972 <mqtt_close+0xca>
	}
	char *token = strtok((char *)rx_buffer, " ");
 8003902:	4923      	ldr	r1, [pc, #140]	; (8003990 <mqtt_close+0xe8>)
 8003904:	4823      	ldr	r0, [pc, #140]	; (8003994 <mqtt_close+0xec>)
 8003906:	f006 fe2d 	bl	800a564 <strtok>
 800390a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 800390e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <mqtt_close+0x72>
	{
		return (1);
 8003916:	2301      	movs	r3, #1
 8003918:	e02b      	b.n	8003972 <mqtt_close+0xca>
	}
	token = strtok(NULL, ",");
 800391a:	491f      	ldr	r1, [pc, #124]	; (8003998 <mqtt_close+0xf0>)
 800391c:	2000      	movs	r0, #0
 800391e:	f006 fe21 	bl	800a564 <strtok>
 8003922:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 8003926:	e019      	b.n	800395c <mqtt_close+0xb4>
	{
		if(i == 1)
 8003928:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10a      	bne.n	8003946 <mqtt_close+0x9e>
		{
			char *ptr;
			ret = strtol(token, &ptr, 10);
 8003930:	f107 030c 	add.w	r3, r7, #12
 8003934:	220a      	movs	r2, #10
 8003936:	4619      	mov	r1, r3
 8003938:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800393c:	f006 fef0 	bl	800a720 <strtol>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		}
		token = strtok(NULL, ",");
 8003946:	4914      	ldr	r1, [pc, #80]	; (8003998 <mqtt_close+0xf0>)
 8003948:	2000      	movs	r0, #0
 800394a:	f006 fe0b 	bl	800a564 <strtok>
 800394e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003952:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003956:	3301      	adds	r3, #1
 8003958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 800395c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e1      	bne.n	8003928 <mqtt_close+0x80>
	}
	if(ret == 0)
 8003964:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <mqtt_close+0xc8>
	{
		return (0);
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <mqtt_close+0xca>
	}
	return (1);
 8003970:	2301      	movs	r3, #1
}
 8003972:	4618      	mov	r0, r3
 8003974:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800397e:	b002      	add	sp, #8
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	0800cccc 	.word	0x0800cccc
 8003988:	20000590 	.word	0x20000590
 800398c:	0800cc38 	.word	0x0800cc38
 8003990:	0800cc58 	.word	0x0800cc58
 8003994:	200006a8 	.word	0x200006a8
 8003998:	0800cc5c 	.word	0x0800cc5c

0800399c <mqtt_publish>:
 *	@param	topic	MQTT topic
 *	@param	msg		data to be published
 *	@retval	(TRUE) if the publication is successful
 */
uint8_t mqtt_publish(uint8_t id, uint8_t msg_id, uint8_t qos, uint8_t retain, const char *topic, const char *msg)
{
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b0c6      	sub	sp, #280	; 0x118
 80039a0:	af04      	add	r7, sp, #16
 80039a2:	4605      	mov	r5, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ae:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80039b2:	462a      	mov	r2, r5
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ba:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80039be:	4622      	mov	r2, r4
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039c6:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80039ca:	4602      	mov	r2, r0
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039d6:	460a      	mov	r2, r1
 80039d8:	701a      	strb	r2, [r3, #0]
	char command[COMMAND_SIZE];
	sprintf(command, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",\"%s\"\r\n",id, msg_id, qos, retain, topic, msg);
 80039da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039de:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80039e2:	781c      	ldrb	r4, [r3, #0]
 80039e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039e8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80039ec:	781d      	ldrb	r5, [r3, #0]
 80039ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039f2:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80039fc:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	f107 0008 	add.w	r0, r7, #8
 8003a06:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003a0a:	9103      	str	r1, [sp, #12]
 8003a0c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003a10:	9102      	str	r1, [sp, #8]
 8003a12:	9201      	str	r2, [sp, #4]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	462b      	mov	r3, r5
 8003a18:	4622      	mov	r2, r4
 8003a1a:	490b      	ldr	r1, [pc, #44]	; (8003a48 <mqtt_publish+0xac>)
 8003a1c:	f006 fd5c 	bl	800a4d8 <siprintf>
	if(send_command(command, "OK", DEFAULT_TIMEOUT, NB))
 8003a20:	f107 0008 	add.w	r0, r7, #8
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <mqtt_publish+0xb0>)
 8003a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a2a:	4909      	ldr	r1, [pc, #36]	; (8003a50 <mqtt_publish+0xb4>)
 8003a2c:	f7ff fcea 	bl	8003404 <send_command>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <mqtt_publish+0x9e>
	{
		return (TRUE);
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <mqtt_publish+0xa0>
	}
	return (FALSE);
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bdb0      	pop	{r4, r5, r7, pc}
 8003a46:	bf00      	nop
 8003a48:	0800cd14 	.word	0x0800cd14
 8003a4c:	20000590 	.word	0x20000590
 8003a50:	0800cc38 	.word	0x0800cc38

08003a54 <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a60:	f002 fc3e 	bl	80062e0 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8003a64:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003a68:	f000 f88c 	bl	8003b84 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2120      	movs	r1, #32
 8003a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a74:	f002 fc34 	bl	80062e0 <HAL_GPIO_WritePin>
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 8003a80:	4b04      	ldr	r3, [pc, #16]	; (8003a94 <clear_rx_buff+0x18>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 8003a86:	2264      	movs	r2, #100	; 0x64
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4803      	ldr	r0, [pc, #12]	; (8003a98 <clear_rx_buff+0x1c>)
 8003a8c:	f006 f8b2 	bl	8009bf4 <memset>
}
 8003a90:	bf00      	nop
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	20000390 	.word	0x20000390
 8003a98:	200006a8 	.word	0x200006a8

08003a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	f001 fe6e 	bl	8005788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aac:	200f      	movs	r0, #15
 8003aae:	f000 f80d 	bl	8003acc <HAL_InitTick>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	71fb      	strb	r3, [r7, #7]
 8003abc:	e001      	b.n	8003ac2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003abe:	f7fe ff2f 	bl	8002920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_InitTick+0x6c>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d023      	beq.n	8003b28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_InitTick+0x70>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_InitTick+0x6c>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fe89 	bl	800580e <HAL_SYSTICK_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10f      	bne.n	8003b22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d809      	bhi.n	8003b1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b10:	f001 fe45 	bl	800579e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <HAL_InitTick+0x74>)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	e007      	b.n	8003b2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e004      	b.n	8003b2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	e001      	b.n	8003b2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000008 	.word	0x20000008
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	20000004 	.word	0x20000004

08003b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_IncTick+0x20>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <HAL_IncTick+0x24>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <HAL_IncTick+0x24>)
 8003b56:	6013      	str	r3, [r2, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000008 	.word	0x20000008
 8003b68:	2000070c 	.word	0x2000070c

08003b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_GetTick+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	2000070c 	.word	0x2000070c

08003b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b8c:	f7ff ffee 	bl	8003b6c <HAL_GetTick>
 8003b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d005      	beq.n	8003baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_Delay+0x44>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003baa:	bf00      	nop
 8003bac:	f7ff ffde 	bl	8003b6c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d8f7      	bhi.n	8003bac <HAL_Delay+0x28>
  {
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000008 	.word	0x20000008

08003bcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3360      	adds	r3, #96	; 0x60
 8003c46:	461a      	mov	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <LL_ADC_SetOffset+0x44>)
 8003c56:	4013      	ands	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	03fff000 	.word	0x03fff000

08003c7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3360      	adds	r3, #96	; 0x60
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3360      	adds	r3, #96	; 0x60
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3330      	adds	r3, #48	; 0x30
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0a1b      	lsrs	r3, r3, #8
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	4413      	add	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	211f      	movs	r1, #31
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	401a      	ands	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0e9b      	lsrs	r3, r3, #26
 8003d16:	f003 011f 	and.w	r1, r3, #31
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa01 f303 	lsl.w	r3, r1, r3
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3314      	adds	r3, #20
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	0e5b      	lsrs	r3, r3, #25
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	4413      	add	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	0d1b      	lsrs	r3, r3, #20
 8003d5e:	f003 031f 	and.w	r3, r3, #31
 8003d62:	2107      	movs	r1, #7
 8003d64:	fa01 f303 	lsl.w	r3, r1, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	0d1b      	lsrs	r3, r3, #20
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0318 	and.w	r3, r3, #24
 8003dae:	4908      	ldr	r1, [pc, #32]	; (8003dd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003db0:	40d9      	lsrs	r1, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	400b      	ands	r3, r1
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	0007ffff 	.word	0x0007ffff

08003dd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6093      	str	r3, [r2, #8]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e0c:	d101      	bne.n	8003e12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e000      	b.n	8003e14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003e30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5c:	d101      	bne.n	8003e62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <LL_ADC_IsEnabled+0x18>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <LL_ADC_IsEnabled+0x1a>
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d101      	bne.n	8003eae <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d101      	bne.n	8003ed4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e12c      	b.n	8004158 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fe f96b 	bl	80021e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff67 	bl	8003df8 <LL_ADC_IsDeepPowerDownEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff4d 	bl	8003dd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff ff82 	bl	8003e48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d115      	bne.n	8003f76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff ff66 	bl	8003e20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f54:	4b82      	ldr	r3, [pc, #520]	; (8004160 <HAL_ADC_Init+0x27c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	4a82      	ldr	r2, [pc, #520]	; (8004164 <HAL_ADC_Init+0x280>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f68:	e002      	b.n	8003f70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f9      	bne.n	8003f6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff64 	bl	8003e48 <LL_ADC_IsInternalRegulatorEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f043 0210 	orr.w	r2, r3, #16
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff75 	bl	8003e96 <LL_ADC_REG_IsConversionOngoing>
 8003fac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 80c5 	bne.w	8004146 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f040 80c1 	bne.w	8004146 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fcc:	f043 0202 	orr.w	r2, r3, #2
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff49 	bl	8003e70 <LL_ADC_IsEnabled>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fe4:	4860      	ldr	r0, [pc, #384]	; (8004168 <HAL_ADC_Init+0x284>)
 8003fe6:	f7ff ff43 	bl	8003e70 <LL_ADC_IsEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	485d      	ldr	r0, [pc, #372]	; (800416c <HAL_ADC_Init+0x288>)
 8003ff8:	f7ff fde8 	bl	8003bcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7e5b      	ldrb	r3, [r3, #25]
 8004000:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004006:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800400c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004012:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d106      	bne.n	8004038 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	3b01      	subs	r3, #1
 8004030:	045b      	lsls	r3, r3, #17
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d009      	beq.n	8004054 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	4b45      	ldr	r3, [pc, #276]	; (8004170 <HAL_ADC_Init+0x28c>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	69b9      	ldr	r1, [r7, #24]
 8004064:	430b      	orrs	r3, r1
 8004066:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff ff12 	bl	8003e96 <LL_ADC_REG_IsConversionOngoing>
 8004072:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff1f 	bl	8003ebc <LL_ADC_INJ_IsConversionOngoing>
 800407e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13d      	bne.n	8004102 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d13a      	bne.n	8004102 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004090:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004098:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040a8:	f023 0302 	bic.w	r3, r3, #2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d118      	bne.n	80040f2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040dc:	4311      	orrs	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040e2:	430a      	orrs	r2, r1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	e007      	b.n	8004102 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10c      	bne.n	8004124 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	f023 010f 	bic.w	r1, r3, #15
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	1e5a      	subs	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
 8004122:	e007      	b.n	8004134 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 020f 	bic.w	r2, r2, #15
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f023 0303 	bic.w	r3, r3, #3
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	655a      	str	r2, [r3, #84]	; 0x54
 8004144:	e007      	b.n	8004156 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f043 0210 	orr.w	r2, r3, #16
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004156:	7ffb      	ldrb	r3, [r7, #31]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000000 	.word	0x20000000
 8004164:	053e2d63 	.word	0x053e2d63
 8004168:	50040000 	.word	0x50040000
 800416c:	50040300 	.word	0x50040300
 8004170:	fff0c007 	.word	0xfff0c007

08004174 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b0b6      	sub	sp, #216	; 0xd8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x22>
 8004192:	2302      	movs	r3, #2
 8004194:	e3b9      	b.n	800490a <HAL_ADC_ConfigChannel+0x796>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fe77 	bl	8003e96 <LL_ADC_REG_IsConversionOngoing>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 839e 	bne.w	80048ec <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d824      	bhi.n	8004202 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	3b02      	subs	r3, #2
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d81b      	bhi.n	80041fa <HAL_ADC_ConfigChannel+0x86>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_ADC_ConfigChannel+0x54>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041d9 	.word	0x080041d9
 80041cc:	080041e1 	.word	0x080041e1
 80041d0:	080041e9 	.word	0x080041e9
 80041d4:	080041f1 	.word	0x080041f1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	220c      	movs	r2, #12
 80041dc:	605a      	str	r2, [r3, #4]
          break;
 80041de:	e011      	b.n	8004204 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2212      	movs	r2, #18
 80041e4:	605a      	str	r2, [r3, #4]
          break;
 80041e6:	e00d      	b.n	8004204 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2218      	movs	r2, #24
 80041ec:	605a      	str	r2, [r3, #4]
          break;
 80041ee:	e009      	b.n	8004204 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041f6:	605a      	str	r2, [r3, #4]
          break;
 80041f8:	e004      	b.n	8004204 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2206      	movs	r2, #6
 80041fe:	605a      	str	r2, [r3, #4]
          break;
 8004200:	e000      	b.n	8004204 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004202:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	f7ff fd64 	bl	8003cde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fe3b 	bl	8003e96 <LL_ADC_REG_IsConversionOngoing>
 8004220:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fe47 	bl	8003ebc <LL_ADC_INJ_IsConversionOngoing>
 800422e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004232:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 81a6 	bne.w	8004588 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800423c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004240:	2b00      	cmp	r3, #0
 8004242:	f040 81a1 	bne.w	8004588 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	461a      	mov	r2, r3
 8004254:	f7ff fd6f 	bl	8003d36 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b04      	cmp	r3, #4
 8004278:	d00a      	beq.n	8004290 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6919      	ldr	r1, [r3, #16]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800428a:	f7ff fcd3 	bl	8003c34 <LL_ADC_SetOffset>
 800428e:	e17b      	b.n	8004588 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fcf0 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 800429c:	4603      	mov	r3, r0
 800429e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x148>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fce5 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 80042b2:	4603      	mov	r3, r0
 80042b4:	0e9b      	lsrs	r3, r3, #26
 80042b6:	f003 021f 	and.w	r2, r3, #31
 80042ba:	e01e      	b.n	80042fa <HAL_ADC_ConfigChannel+0x186>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff fcda 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80042ea:	2320      	movs	r3, #32
 80042ec:	e004      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80042ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x19e>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0e9b      	lsrs	r3, r3, #26
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	e018      	b.n	8004344 <HAL_ADC_ConfigChannel+0x1d0>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800432a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800432e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004336:	2320      	movs	r3, #32
 8004338:	e004      	b.n	8004344 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800433a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004344:	429a      	cmp	r2, r3
 8004346:	d106      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff fca9 	bl	8003ca8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2101      	movs	r1, #1
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff fc8d 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004362:	4603      	mov	r3, r0
 8004364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_ADC_ConfigChannel+0x20e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fc82 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004378:	4603      	mov	r3, r0
 800437a:	0e9b      	lsrs	r3, r3, #26
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	e01e      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x24c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fc77 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 800438e:	4603      	mov	r3, r0
 8004390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80043a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80043a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80043b0:	2320      	movs	r3, #32
 80043b2:	e004      	b.n	80043be <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80043b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043b8:	fab3 f383 	clz	r3, r3
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x264>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	e018      	b.n	800440a <HAL_ADC_ConfigChannel+0x296>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80043ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80043f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80043fc:	2320      	movs	r3, #32
 80043fe:	e004      	b.n	800440a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800440a:	429a      	cmp	r2, r3
 800440c:	d106      	bne.n	800441c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2200      	movs	r2, #0
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff fc46 	bl	8003ca8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2102      	movs	r1, #2
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fc2a 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004428:	4603      	mov	r3, r0
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x2d4>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2102      	movs	r1, #2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fc1f 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 800443e:	4603      	mov	r3, r0
 8004440:	0e9b      	lsrs	r3, r3, #26
 8004442:	f003 021f 	and.w	r2, r3, #31
 8004446:	e01e      	b.n	8004486 <HAL_ADC_ConfigChannel+0x312>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2102      	movs	r1, #2
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fc14 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004454:	4603      	mov	r3, r0
 8004456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800446e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004476:	2320      	movs	r3, #32
 8004478:	e004      	b.n	8004484 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448e:	2b00      	cmp	r3, #0
 8004490:	d105      	bne.n	800449e <HAL_ADC_ConfigChannel+0x32a>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0e9b      	lsrs	r3, r3, #26
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	e016      	b.n	80044cc <HAL_ADC_ConfigChannel+0x358>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80044b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80044b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80044be:	2320      	movs	r3, #32
 80044c0:	e004      	b.n	80044cc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80044c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d106      	bne.n	80044de <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fbe5 	bl	8003ca8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2103      	movs	r1, #3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fbc9 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_ADC_ConfigChannel+0x396>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2103      	movs	r1, #3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fbbe 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	0e9b      	lsrs	r3, r3, #26
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	e017      	b.n	800453a <HAL_ADC_ConfigChannel+0x3c6>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2103      	movs	r1, #3
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff fbb3 	bl	8003c7c <LL_ADC_GetOffsetChannel>
 8004516:	4603      	mov	r3, r0
 8004518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451c:	fa93 f3a3 	rbit	r3, r3
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004524:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e003      	b.n	8004538 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	2b00      	cmp	r3, #0
 8004544:	d105      	bne.n	8004552 <HAL_ADC_ConfigChannel+0x3de>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	0e9b      	lsrs	r3, r3, #26
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	e011      	b.n	8004576 <HAL_ADC_ConfigChannel+0x402>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004562:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800456a:	2320      	movs	r3, #32
 800456c:	e003      	b.n	8004576 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800456e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004570:	fab3 f383 	clz	r3, r3
 8004574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004576:	429a      	cmp	r2, r3
 8004578:	d106      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2200      	movs	r2, #0
 8004580:	2103      	movs	r1, #3
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fb90 	bl	8003ca8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fc6f 	bl	8003e70 <LL_ADC_IsEnabled>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 813f 	bne.w	8004818 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	461a      	mov	r2, r3
 80045a8:	f7ff fbf0 	bl	8003d8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a8e      	ldr	r2, [pc, #568]	; (80047ec <HAL_ADC_ConfigChannel+0x678>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	f040 8130 	bne.w	8004818 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x46c>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0e9b      	lsrs	r3, r3, #26
 80045ce:	3301      	adds	r3, #1
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2b09      	cmp	r3, #9
 80045d6:	bf94      	ite	ls
 80045d8:	2301      	movls	r3, #1
 80045da:	2300      	movhi	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e019      	b.n	8004614 <HAL_ADC_ConfigChannel+0x4a0>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80045ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80045f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80045f8:	2320      	movs	r3, #32
 80045fa:	e003      	b.n	8004604 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80045fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2b09      	cmp	r3, #9
 800460c:	bf94      	ite	ls
 800460e:	2301      	movls	r3, #1
 8004610:	2300      	movhi	r3, #0
 8004612:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004614:	2b00      	cmp	r3, #0
 8004616:	d079      	beq.n	800470c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x4c0>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	3301      	adds	r3, #1
 800462c:	069b      	lsls	r3, r3, #26
 800462e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004632:	e015      	b.n	8004660 <HAL_ADC_ConfigChannel+0x4ec>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004644:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e003      	b.n	8004658 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3301      	adds	r3, #1
 800465a:	069b      	lsls	r3, r3, #26
 800465c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x50c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0e9b      	lsrs	r3, r3, #26
 8004672:	3301      	adds	r3, #1
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f303 	lsl.w	r3, r1, r3
 800467e:	e017      	b.n	80046b0 <HAL_ADC_ConfigChannel+0x53c>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800468e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004690:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e003      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800469c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	ea42 0103 	orr.w	r1, r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x562>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	0e9b      	lsrs	r3, r3, #26
 80046c6:	3301      	adds	r3, #1
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	051b      	lsls	r3, r3, #20
 80046d4:	e018      	b.n	8004708 <HAL_ADC_ConfigChannel+0x594>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046de:	fa93 f3a3 	rbit	r3, r3
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80046ee:	2320      	movs	r3, #32
 80046f0:	e003      	b.n	80046fa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	fab3 f383 	clz	r3, r3
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 021f 	and.w	r2, r3, #31
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004708:	430b      	orrs	r3, r1
 800470a:	e080      	b.n	800480e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x5b4>
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0e9b      	lsrs	r3, r3, #26
 800471e:	3301      	adds	r3, #1
 8004720:	069b      	lsls	r3, r3, #26
 8004722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004726:	e015      	b.n	8004754 <HAL_ADC_ConfigChannel+0x5e0>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e003      	b.n	800474c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	069b      	lsls	r3, r3, #26
 8004750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475c:	2b00      	cmp	r3, #0
 800475e:	d109      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x600>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	3301      	adds	r3, #1
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	e017      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x630>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	fa93 f3a3 	rbit	r3, r3
 8004780:	61fb      	str	r3, [r7, #28]
  return result;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800478c:	2320      	movs	r3, #32
 800478e:	e003      	b.n	8004798 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	3301      	adds	r3, #1
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	2101      	movs	r1, #1
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10d      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x65c>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	0e9b      	lsrs	r3, r3, #26
 80047ba:	3301      	adds	r3, #1
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	4613      	mov	r3, r2
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	4413      	add	r3, r2
 80047c6:	3b1e      	subs	r3, #30
 80047c8:	051b      	lsls	r3, r3, #20
 80047ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047ce:	e01d      	b.n	800480c <HAL_ADC_ConfigChannel+0x698>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	613b      	str	r3, [r7, #16]
  return result;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e005      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x684>
 80047ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	f003 021f 	and.w	r2, r3, #31
 80047fe:	4613      	mov	r3, r2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	4413      	add	r3, r2
 8004804:	3b1e      	subs	r3, #30
 8004806:	051b      	lsls	r3, r3, #20
 8004808:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800480c:	430b      	orrs	r3, r1
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	4619      	mov	r1, r3
 8004814:	f7ff fa8f 	bl	8003d36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_ADC_ConfigChannel+0x7a0>)
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d06c      	beq.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004824:	483c      	ldr	r0, [pc, #240]	; (8004918 <HAL_ADC_ConfigChannel+0x7a4>)
 8004826:	f7ff f9f7 	bl	8003c18 <LL_ADC_GetCommonPathInternalCh>
 800482a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a3a      	ldr	r2, [pc, #232]	; (800491c <HAL_ADC_ConfigChannel+0x7a8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d127      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800483c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d121      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a35      	ldr	r2, [pc, #212]	; (8004920 <HAL_ADC_ConfigChannel+0x7ac>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d157      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800484e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004856:	4619      	mov	r1, r3
 8004858:	482f      	ldr	r0, [pc, #188]	; (8004918 <HAL_ADC_ConfigChannel+0x7a4>)
 800485a:	f7ff f9ca 	bl	8003bf2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_ADC_ConfigChannel+0x7b0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	099b      	lsrs	r3, r3, #6
 8004864:	4a30      	ldr	r2, [pc, #192]	; (8004928 <HAL_ADC_ConfigChannel+0x7b4>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004878:	e002      	b.n	8004880 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b01      	subs	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f9      	bne.n	800487a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004886:	e03a      	b.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a27      	ldr	r2, [pc, #156]	; (800492c <HAL_ADC_ConfigChannel+0x7b8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d113      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x746>
 8004892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_ADC_ConfigChannel+0x7ac>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d12a      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b0:	4619      	mov	r1, r3
 80048b2:	4819      	ldr	r0, [pc, #100]	; (8004918 <HAL_ADC_ConfigChannel+0x7a4>)
 80048b4:	f7ff f99d 	bl	8003bf2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b8:	e021      	b.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <HAL_ADC_ConfigChannel+0x7bc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d11c      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d116      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a12      	ldr	r2, [pc, #72]	; (8004920 <HAL_ADC_ConfigChannel+0x7ac>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d111      	bne.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048e2:	4619      	mov	r1, r3
 80048e4:	480c      	ldr	r0, [pc, #48]	; (8004918 <HAL_ADC_ConfigChannel+0x7a4>)
 80048e6:	f7ff f984 	bl	8003bf2 <LL_ADC_SetCommonPathInternalCh>
 80048ea:	e008      	b.n	80048fe <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004906:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800490a:	4618      	mov	r0, r3
 800490c:	37d8      	adds	r7, #216	; 0xd8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	80080000 	.word	0x80080000
 8004918:	50040300 	.word	0x50040300
 800491c:	c7520000 	.word	0xc7520000
 8004920:	50040000 	.word	0x50040000
 8004924:	20000000 	.word	0x20000000
 8004928:	053e2d63 	.word	0x053e2d63
 800492c:	cb840000 	.word	0xcb840000
 8004930:	80000001 	.word	0x80000001

08004934 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e0ed      	b.n	8004b22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd fae2 	bl	8001f1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004968:	f7ff f900 	bl	8003b6c <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800496e:	e012      	b.n	8004996 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004970:	f7ff f8fc 	bl	8003b6c <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b0a      	cmp	r3, #10
 800497c:	d90b      	bls.n	8004996 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2205      	movs	r2, #5
 800498e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0c5      	b.n	8004b22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0e5      	beq.n	8004970 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0202 	bic.w	r2, r2, #2
 80049b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049b4:	f7ff f8da 	bl	8003b6c <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049ba:	e012      	b.n	80049e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80049bc:	f7ff f8d6 	bl	8003b6c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b0a      	cmp	r3, #10
 80049c8:	d90b      	bls.n	80049e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2205      	movs	r2, #5
 80049da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e09f      	b.n	8004b22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	7e1b      	ldrb	r3, [r3, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d108      	bne.n	8004a0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e007      	b.n	8004a1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	7e5b      	ldrb	r3, [r3, #25]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d108      	bne.n	8004a34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e007      	b.n	8004a44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7e9b      	ldrb	r3, [r3, #26]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d108      	bne.n	8004a5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0220 	orr.w	r2, r2, #32
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e007      	b.n	8004a6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0220 	bic.w	r2, r2, #32
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7edb      	ldrb	r3, [r3, #27]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d108      	bne.n	8004a88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0210 	bic.w	r2, r2, #16
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0210 	orr.w	r2, r2, #16
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7f1b      	ldrb	r3, [r3, #28]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d108      	bne.n	8004ab2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0208 	orr.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e007      	b.n	8004ac2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0208 	bic.w	r2, r2, #8
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	7f5b      	ldrb	r3, [r3, #29]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d108      	bne.n	8004adc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0204 	orr.w	r2, r2, #4
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e007      	b.n	8004aec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	ea42 0103 	orr.w	r1, r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	1e5a      	subs	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b087      	sub	sp, #28
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b40:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d003      	beq.n	8004b50 <HAL_CAN_ConfigFilter+0x26>
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	f040 80aa 	bne.w	8004ca4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b56:	f043 0201 	orr.w	r2, r3, #1
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	2201      	movs	r2, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d123      	bne.n	8004bd2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	43db      	mvns	r3, r3
 8004b94:	401a      	ands	r2, r3
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004bac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	3248      	adds	r2, #72	; 0x48
 8004bb2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004bc6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004bc8:	6979      	ldr	r1, [r7, #20]
 8004bca:	3348      	adds	r3, #72	; 0x48
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	440b      	add	r3, r1
 8004bd0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d122      	bne.n	8004c20 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004bfa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3248      	adds	r2, #72	; 0x48
 8004c00:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004c14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	3348      	adds	r3, #72	; 0x48
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	440b      	add	r3, r1
 8004c1e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	401a      	ands	r2, r3
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004c3a:	e007      	b.n	8004c4c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d109      	bne.n	8004c68 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004c66:	e007      	b.n	8004c78 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	431a      	orrs	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d107      	bne.n	8004c90 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e006      	b.n	8004cb2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d12e      	bne.n	8004d30 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cea:	f7fe ff3f 	bl	8003b6c <HAL_GetTick>
 8004cee:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004cf0:	e012      	b.n	8004d18 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cf2:	f7fe ff3b 	bl	8003b6c <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b0a      	cmp	r3, #10
 8004cfe:	d90b      	bls.n	8004d18 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2205      	movs	r2, #5
 8004d10:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e012      	b.n	8004d3e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e5      	bne.n	8004cf2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	e006      	b.n	8004d3e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
  }
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b089      	sub	sp, #36	; 0x24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004d64:	7ffb      	ldrb	r3, [r7, #31]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d003      	beq.n	8004d72 <HAL_CAN_AddTxMessage+0x2c>
 8004d6a:	7ffb      	ldrb	r3, [r7, #31]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f040 80ad 	bne.w	8004ecc <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8095 	beq.w	8004ebc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	0e1b      	lsrs	r3, r3, #24
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	409a      	lsls	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10d      	bne.n	8004dca <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3318      	adds	r3, #24
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	440b      	add	r3, r1
 8004dc6:	601a      	str	r2, [r3, #0]
 8004dc8:	e00f      	b.n	8004dea <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dd4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004dde:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3318      	adds	r3, #24
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	440b      	add	r3, r1
 8004de8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6819      	ldr	r1, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3318      	adds	r3, #24
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	440b      	add	r3, r1
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	7d1b      	ldrb	r3, [r3, #20]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d111      	bne.n	8004e2a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3318      	adds	r3, #24
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4413      	add	r3, r2
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3318      	adds	r3, #24
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	440b      	add	r3, r1
 8004e26:	3304      	adds	r3, #4
 8004e28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3307      	adds	r3, #7
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	061a      	lsls	r2, r3, #24
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3306      	adds	r3, #6
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3305      	adds	r3, #5
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	021b      	lsls	r3, r3, #8
 8004e44:	4313      	orrs	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	3204      	adds	r2, #4
 8004e4a:	7812      	ldrb	r2, [r2, #0]
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	6811      	ldr	r1, [r2, #0]
 8004e52:	ea43 0200 	orr.w	r2, r3, r0
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004e60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3303      	adds	r3, #3
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	061a      	lsls	r2, r3, #24
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	4610      	mov	r0, r2
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6811      	ldr	r1, [r2, #0]
 8004e88:	ea43 0200 	orr.w	r2, r3, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	440b      	add	r3, r1
 8004e92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004e96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3318      	adds	r3, #24
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	440b      	add	r3, r1
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e00e      	b.n	8004eda <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e006      	b.n	8004eda <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	; 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004efa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004efc:	7dfb      	ldrb	r3, [r7, #23]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d003      	beq.n	8004f0a <HAL_CAN_GetRxMessage+0x24>
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	f040 80f3 	bne.w	80050f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10e      	bne.n	8004f2e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d116      	bne.n	8004f4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0e7      	b.n	80050fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0d8      	b.n	80050fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	331b      	adds	r3, #27
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	4413      	add	r3, r2
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0204 	and.w	r2, r3, #4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10c      	bne.n	8004f84 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	331b      	adds	r3, #27
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	4413      	add	r3, r2
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0d5b      	lsrs	r3, r3, #21
 8004f7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e00b      	b.n	8004f9c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	331b      	adds	r3, #27
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	4413      	add	r3, r2
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	08db      	lsrs	r3, r3, #3
 8004f94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	331b      	adds	r3, #27
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0202 	and.w	r2, r3, #2
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	331b      	adds	r3, #27
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 020f 	and.w	r2, r3, #15
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	331b      	adds	r3, #27
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0a1b      	lsrs	r3, r3, #8
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	331b      	adds	r3, #27
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	0c1b      	lsrs	r3, r3, #16
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4413      	add	r3, r2
 8005004:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	4413      	add	r3, r2
 800501a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0a1a      	lsrs	r2, r3, #8
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4413      	add	r3, r2
 8005034:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	0c1a      	lsrs	r2, r3, #16
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3302      	adds	r3, #2
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	4413      	add	r3, r2
 800504e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	0e1a      	lsrs	r2, r3, #24
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	3303      	adds	r3, #3
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4413      	add	r3, r2
 8005068:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3304      	adds	r3, #4
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	4413      	add	r3, r2
 8005080:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	0a1a      	lsrs	r2, r3, #8
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3305      	adds	r3, #5
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	011b      	lsls	r3, r3, #4
 8005098:	4413      	add	r3, r2
 800509a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0c1a      	lsrs	r2, r3, #16
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	3306      	adds	r3, #6
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	0e1a      	lsrs	r2, r3, #24
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	3307      	adds	r3, #7
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0220 	orr.w	r2, r2, #32
 80050d8:	60da      	str	r2, [r3, #12]
 80050da:	e007      	b.n	80050ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0220 	orr.w	r2, r2, #32
 80050ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e006      	b.n	80050fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800511a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d002      	beq.n	8005128 <HAL_CAN_ActivateNotification+0x1e>
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d109      	bne.n	800513c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6959      	ldr	r1, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	e006      	b.n	800514a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08a      	sub	sp, #40	; 0x28
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d07c      	beq.n	8005296 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d023      	beq.n	80051ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f983 	bl	80054c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80051be:	e016      	b.n	80051ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	e00c      	b.n	80051ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e002      	b.n	80051ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 f989 	bl	8005500 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d024      	beq.n	8005242 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005200:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f963 	bl	80054d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8005212:	e016      	b.n	8005242 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
 8005226:	e00c      	b.n	8005242 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
 800523a:	e002      	b.n	8005242 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f969 	bl	8005514 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d024      	beq.n	8005296 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005254:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f943 	bl	80054ec <HAL_CAN_TxMailbox2CompleteCallback>
 8005266:	e016      	b.n	8005296 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	e00c      	b.n	8005296 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
 800528e:	e002      	b.n	8005296 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f949 	bl	8005528 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00c      	beq.n	80052ba <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2210      	movs	r2, #16
 80052b8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2208      	movs	r2, #8
 80052d4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f930 	bl	800553c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fc fee7 	bl	80020c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00c      	beq.n	800531e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005314:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2210      	movs	r2, #16
 800531c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2208      	movs	r2, #8
 8005338:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f912 	bl	8005564 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8f9 	bl	8005550 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d006      	beq.n	8005380 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2210      	movs	r2, #16
 8005378:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8fc 	bl	8005578 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f003 0308 	and.w	r3, r3, #8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d006      	beq.n	80053a2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2208      	movs	r2, #8
 800539a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f8f5 	bl	800558c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d07b      	beq.n	80054a4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d072      	beq.n	800549c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	f043 0302 	orr.w	r3, r3, #2
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	f043 0304 	orr.w	r3, r3, #4
 8005408:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	2b00      	cmp	r3, #0
 8005412:	d043      	beq.n	800549c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	d03e      	beq.n	800549c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005424:	2b60      	cmp	r3, #96	; 0x60
 8005426:	d02b      	beq.n	8005480 <HAL_CAN_IRQHandler+0x32a>
 8005428:	2b60      	cmp	r3, #96	; 0x60
 800542a:	d82e      	bhi.n	800548a <HAL_CAN_IRQHandler+0x334>
 800542c:	2b50      	cmp	r3, #80	; 0x50
 800542e:	d022      	beq.n	8005476 <HAL_CAN_IRQHandler+0x320>
 8005430:	2b50      	cmp	r3, #80	; 0x50
 8005432:	d82a      	bhi.n	800548a <HAL_CAN_IRQHandler+0x334>
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d019      	beq.n	800546c <HAL_CAN_IRQHandler+0x316>
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d826      	bhi.n	800548a <HAL_CAN_IRQHandler+0x334>
 800543c:	2b30      	cmp	r3, #48	; 0x30
 800543e:	d010      	beq.n	8005462 <HAL_CAN_IRQHandler+0x30c>
 8005440:	2b30      	cmp	r3, #48	; 0x30
 8005442:	d822      	bhi.n	800548a <HAL_CAN_IRQHandler+0x334>
 8005444:	2b10      	cmp	r3, #16
 8005446:	d002      	beq.n	800544e <HAL_CAN_IRQHandler+0x2f8>
 8005448:	2b20      	cmp	r3, #32
 800544a:	d005      	beq.n	8005458 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800544c:	e01d      	b.n	800548a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005456:	e019      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	f043 0310 	orr.w	r3, r3, #16
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005460:	e014      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005464:	f043 0320 	orr.w	r3, r3, #32
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800546a:	e00f      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005474:	e00a      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800547e:	e005      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005488:	e000      	b.n	800548c <HAL_CAN_IRQHandler+0x336>
            break;
 800548a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800549a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2204      	movs	r2, #4
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fc fe24 	bl	8002104 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80054bc:	bf00      	nop
 80054be:	3728      	adds	r7, #40	; 0x28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__NVIC_GetPriorityGrouping+0x18>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 0307 	and.w	r3, r3, #7
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db0b      	blt.n	800562e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <__NVIC_EnableIRQ+0x38>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2001      	movs	r0, #1
 8005626:	fa00 f202 	lsl.w	r2, r0, r2
 800562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100

08005640 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564e:	2b00      	cmp	r3, #0
 8005650:	db12      	blt.n	8005678 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	f003 021f 	and.w	r2, r3, #31
 8005658:	490a      	ldr	r1, [pc, #40]	; (8005684 <__NVIC_DisableIRQ+0x44>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	2001      	movs	r0, #1
 8005662:	fa00 f202 	lsl.w	r2, r0, r2
 8005666:	3320      	adds	r3, #32
 8005668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800566c:	f3bf 8f4f 	dsb	sy
}
 8005670:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005672:	f3bf 8f6f 	isb	sy
}
 8005676:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	e000e100 	.word	0xe000e100

08005688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005698:	2b00      	cmp	r3, #0
 800569a:	db0a      	blt.n	80056b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	490c      	ldr	r1, [pc, #48]	; (80056d4 <__NVIC_SetPriority+0x4c>)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	0112      	lsls	r2, r2, #4
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	440b      	add	r3, r1
 80056ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056b0:	e00a      	b.n	80056c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4908      	ldr	r1, [pc, #32]	; (80056d8 <__NVIC_SetPriority+0x50>)
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	3b04      	subs	r3, #4
 80056c0:	0112      	lsls	r2, r2, #4
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	440b      	add	r3, r1
 80056c6:	761a      	strb	r2, [r3, #24]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000e100 	.word	0xe000e100
 80056d8:	e000ed00 	.word	0xe000ed00

080056dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	; 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f1c3 0307 	rsb	r3, r3, #7
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	bf28      	it	cs
 80056fa:	2304      	movcs	r3, #4
 80056fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	3304      	adds	r3, #4
 8005702:	2b06      	cmp	r3, #6
 8005704:	d902      	bls.n	800570c <NVIC_EncodePriority+0x30>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3b03      	subs	r3, #3
 800570a:	e000      	b.n	800570e <NVIC_EncodePriority+0x32>
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	401a      	ands	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005724:	f04f 31ff 	mov.w	r1, #4294967295
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	43d9      	mvns	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005734:	4313      	orrs	r3, r2
         );
}
 8005736:	4618      	mov	r0, r3
 8005738:	3724      	adds	r7, #36	; 0x24
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3b01      	subs	r3, #1
 8005750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005754:	d301      	bcc.n	800575a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005756:	2301      	movs	r3, #1
 8005758:	e00f      	b.n	800577a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <SysTick_Config+0x40>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005762:	210f      	movs	r1, #15
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	f7ff ff8e 	bl	8005688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <SysTick_Config+0x40>)
 800576e:	2200      	movs	r2, #0
 8005770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005772:	4b04      	ldr	r3, [pc, #16]	; (8005784 <SysTick_Config+0x40>)
 8005774:	2207      	movs	r2, #7
 8005776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	e000e010 	.word	0xe000e010

08005788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ff05 	bl	80055a0 <__NVIC_SetPriorityGrouping>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	4603      	mov	r3, r0
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057b0:	f7ff ff1a 	bl	80055e8 <__NVIC_GetPriorityGrouping>
 80057b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7ff ff8e 	bl	80056dc <NVIC_EncodePriority>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff5d 	bl	8005688 <__NVIC_SetPriority>
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff0d 	bl	8005604 <__NVIC_EnableIRQ>
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4603      	mov	r3, r0
 80057fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80057fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff ff1d 	bl	8005640 <__NVIC_DisableIRQ>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ff94 	bl	8005744 <SysTick_Config>
 800581c:	4603      	mov	r3, r0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e098      	b.n	800596c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	4b4d      	ldr	r3, [pc, #308]	; (8005978 <HAL_DMA_Init+0x150>)
 8005842:	429a      	cmp	r2, r3
 8005844:	d80f      	bhi.n	8005866 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	4b4b      	ldr	r3, [pc, #300]	; (800597c <HAL_DMA_Init+0x154>)
 800584e:	4413      	add	r3, r2
 8005850:	4a4b      	ldr	r2, [pc, #300]	; (8005980 <HAL_DMA_Init+0x158>)
 8005852:	fba2 2303 	umull	r2, r3, r2, r3
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	009a      	lsls	r2, r3, #2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_DMA_Init+0x15c>)
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
 8005864:	e00e      	b.n	8005884 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	461a      	mov	r2, r3
 800586c:	4b46      	ldr	r3, [pc, #280]	; (8005988 <HAL_DMA_Init+0x160>)
 800586e:	4413      	add	r3, r2
 8005870:	4a43      	ldr	r2, [pc, #268]	; (8005980 <HAL_DMA_Init+0x158>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	091b      	lsrs	r3, r3, #4
 8005878:	009a      	lsls	r2, r3, #2
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a42      	ldr	r2, [pc, #264]	; (800598c <HAL_DMA_Init+0x164>)
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80058a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058de:	d039      	beq.n	8005954 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	4a27      	ldr	r2, [pc, #156]	; (8005984 <HAL_DMA_Init+0x15c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d11a      	bne.n	8005920 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80058ea:	4b29      	ldr	r3, [pc, #164]	; (8005990 <HAL_DMA_Init+0x168>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f2:	f003 031c 	and.w	r3, r3, #28
 80058f6:	210f      	movs	r1, #15
 80058f8:	fa01 f303 	lsl.w	r3, r1, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	4924      	ldr	r1, [pc, #144]	; (8005990 <HAL_DMA_Init+0x168>)
 8005900:	4013      	ands	r3, r2
 8005902:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005904:	4b22      	ldr	r3, [pc, #136]	; (8005990 <HAL_DMA_Init+0x168>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6859      	ldr	r1, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f003 031c 	and.w	r3, r3, #28
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	491d      	ldr	r1, [pc, #116]	; (8005990 <HAL_DMA_Init+0x168>)
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]
 800591e:	e019      	b.n	8005954 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005920:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	f003 031c 	and.w	r3, r3, #28
 800592c:	210f      	movs	r1, #15
 800592e:	fa01 f303 	lsl.w	r3, r1, r3
 8005932:	43db      	mvns	r3, r3
 8005934:	4917      	ldr	r1, [pc, #92]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005936:	4013      	ands	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800593a:	4b16      	ldr	r3, [pc, #88]	; (8005994 <HAL_DMA_Init+0x16c>)
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	f003 031c 	and.w	r3, r3, #28
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	4911      	ldr	r1, [pc, #68]	; (8005994 <HAL_DMA_Init+0x16c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40020407 	.word	0x40020407
 800597c:	bffdfff8 	.word	0xbffdfff8
 8005980:	cccccccd 	.word	0xcccccccd
 8005984:	40020000 	.word	0x40020000
 8005988:	bffdfbf8 	.word	0xbffdfbf8
 800598c:	40020400 	.word	0x40020400
 8005990:	400200a8 	.word	0x400200a8
 8005994:	400204a8 	.word	0x400204a8

08005998 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e072      	b.n	8005a90 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	4b36      	ldr	r3, [pc, #216]	; (8005a9c <HAL_DMA_DeInit+0x104>)
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d80f      	bhi.n	80059e6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_DMA_DeInit+0x108>)
 80059ce:	4413      	add	r3, r2
 80059d0:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <HAL_DMA_DeInit+0x10c>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	009a      	lsls	r2, r3, #2
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a31      	ldr	r2, [pc, #196]	; (8005aa8 <HAL_DMA_DeInit+0x110>)
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
 80059e4:	e00e      	b.n	8005a04 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	4b2f      	ldr	r3, [pc, #188]	; (8005aac <HAL_DMA_DeInit+0x114>)
 80059ee:	4413      	add	r3, r2
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <HAL_DMA_DeInit+0x10c>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	009a      	lsls	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2b      	ldr	r2, [pc, #172]	; (8005ab0 <HAL_DMA_DeInit+0x118>)
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	f003 021c 	and.w	r2, r3, #28
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	2101      	movs	r1, #1
 8005a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a1e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <HAL_DMA_DeInit+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d10d      	bne.n	8005a46 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <HAL_DMA_DeInit+0x11c>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a32:	f003 031c 	and.w	r3, r3, #28
 8005a36:	210f      	movs	r1, #15
 8005a38:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	491d      	ldr	r1, [pc, #116]	; (8005ab4 <HAL_DMA_DeInit+0x11c>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
 8005a44:	e00c      	b.n	8005a60 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a46:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_DMA_DeInit+0x120>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f003 031c 	and.w	r3, r3, #28
 8005a52:	210f      	movs	r1, #15
 8005a54:	fa01 f303 	lsl.w	r3, r1, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	4917      	ldr	r1, [pc, #92]	; (8005ab8 <HAL_DMA_DeInit+0x120>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40020407 	.word	0x40020407
 8005aa0:	bffdfff8 	.word	0xbffdfff8
 8005aa4:	cccccccd 	.word	0xcccccccd
 8005aa8:	40020000 	.word	0x40020000
 8005aac:	bffdfbf8 	.word	0xbffdfbf8
 8005ab0:	40020400 	.word	0x40020400
 8005ab4:	400200a8 	.word	0x400200a8
 8005ab8:	400204a8 	.word	0x400204a8

08005abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_DMA_Start_IT+0x20>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e04b      	b.n	8005b74 <HAL_DMA_Start_IT+0xb8>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d13a      	bne.n	8005b66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f95f 	bl	8005dd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 020e 	orr.w	r2, r2, #14
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e00f      	b.n	8005b54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0204 	bic.w	r2, r2, #4
 8005b42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 020a 	orr.w	r2, r2, #10
 8005b52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0201 	orr.w	r2, r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e005      	b.n	8005b72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d008      	beq.n	8005ba6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e022      	b.n	8005bec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 020e 	bic.w	r2, r2, #14
 8005bb4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bca:	f003 021c 	and.w	r2, r3, #28
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d005      	beq.n	8005c1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2204      	movs	r2, #4
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
 8005c1a:	e029      	b.n	8005c70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 020e 	bic.w	r2, r2, #14
 8005c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c40:	f003 021c 	and.w	r2, r3, #28
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2101      	movs	r1, #1
 8005c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
    }
  }
  return status;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f003 031c 	and.w	r3, r3, #28
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	409a      	lsls	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d026      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x7a>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d021      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0204 	bic.w	r2, r2, #4
 8005ccc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f003 021c 	and.w	r2, r3, #28
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2104      	movs	r1, #4
 8005cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d071      	beq.n	8005dce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005cf2:	e06c      	b.n	8005dce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf8:	f003 031c 	and.w	r3, r3, #28
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d02e      	beq.n	8005d66 <HAL_DMA_IRQHandler+0xec>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d029      	beq.n	8005d66 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f022 020a 	bic.w	r2, r2, #10
 8005d2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	f003 021c 	and.w	r2, r3, #28
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2102      	movs	r1, #2
 8005d46:	fa01 f202 	lsl.w	r2, r1, r2
 8005d4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d038      	beq.n	8005dce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d64:	e033      	b.n	8005dce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6a:	f003 031c 	and.w	r3, r3, #28
 8005d6e:	2208      	movs	r2, #8
 8005d70:	409a      	lsls	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4013      	ands	r3, r2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d02a      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x156>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d025      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 020e 	bic.w	r2, r2, #14
 8005d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d98:	f003 021c 	and.w	r2, r3, #28
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f202 	lsl.w	r2, r1, r2
 8005da6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
}
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
 8005de4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f003 021c 	and.w	r2, r3, #28
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2101      	movs	r1, #1
 8005df4:	fa01 f202 	lsl.w	r2, r1, r2
 8005df8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d108      	bne.n	8005e1c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e1a:	e007      	b.n	8005e2c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
}
 8005e2c:	bf00      	nop
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e46:	e154      	b.n	80060f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fa01 f303 	lsl.w	r3, r1, r3
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8146 	beq.w	80060ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d005      	beq.n	8005e78 <HAL_GPIO_Init+0x40>
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d130      	bne.n	8005eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	2203      	movs	r2, #3
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005eae:	2201      	movs	r2, #1
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f003 0201 	and.w	r2, r3, #1
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d017      	beq.n	8005f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4013      	ands	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d123      	bne.n	8005f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	08da      	lsrs	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3208      	adds	r2, #8
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	220f      	movs	r2, #15
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4013      	ands	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	08da      	lsrs	r2, r3, #3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3208      	adds	r2, #8
 8005f64:	6939      	ldr	r1, [r7, #16]
 8005f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2203      	movs	r2, #3
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 0203 	and.w	r2, r3, #3
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80a0 	beq.w	80060ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fac:	4b58      	ldr	r3, [pc, #352]	; (8006110 <HAL_GPIO_Init+0x2d8>)
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	4a57      	ldr	r2, [pc, #348]	; (8006110 <HAL_GPIO_Init+0x2d8>)
 8005fb2:	f043 0301 	orr.w	r3, r3, #1
 8005fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8005fb8:	4b55      	ldr	r3, [pc, #340]	; (8006110 <HAL_GPIO_Init+0x2d8>)
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fc4:	4a53      	ldr	r2, [pc, #332]	; (8006114 <HAL_GPIO_Init+0x2dc>)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	089b      	lsrs	r3, r3, #2
 8005fca:	3302      	adds	r3, #2
 8005fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f003 0303 	and.w	r3, r3, #3
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	220f      	movs	r2, #15
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fee:	d019      	beq.n	8006024 <HAL_GPIO_Init+0x1ec>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a49      	ldr	r2, [pc, #292]	; (8006118 <HAL_GPIO_Init+0x2e0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_GPIO_Init+0x1e8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a48      	ldr	r2, [pc, #288]	; (800611c <HAL_GPIO_Init+0x2e4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00d      	beq.n	800601c <HAL_GPIO_Init+0x1e4>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a47      	ldr	r2, [pc, #284]	; (8006120 <HAL_GPIO_Init+0x2e8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <HAL_GPIO_Init+0x1e0>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a46      	ldr	r2, [pc, #280]	; (8006124 <HAL_GPIO_Init+0x2ec>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d101      	bne.n	8006014 <HAL_GPIO_Init+0x1dc>
 8006010:	2304      	movs	r3, #4
 8006012:	e008      	b.n	8006026 <HAL_GPIO_Init+0x1ee>
 8006014:	2307      	movs	r3, #7
 8006016:	e006      	b.n	8006026 <HAL_GPIO_Init+0x1ee>
 8006018:	2303      	movs	r3, #3
 800601a:	e004      	b.n	8006026 <HAL_GPIO_Init+0x1ee>
 800601c:	2302      	movs	r3, #2
 800601e:	e002      	b.n	8006026 <HAL_GPIO_Init+0x1ee>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_GPIO_Init+0x1ee>
 8006024:	2300      	movs	r3, #0
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	f002 0203 	and.w	r2, r2, #3
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	4093      	lsls	r3, r2
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006036:	4937      	ldr	r1, [pc, #220]	; (8006114 <HAL_GPIO_Init+0x2dc>)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	3302      	adds	r3, #2
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006044:	4b38      	ldr	r3, [pc, #224]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	43db      	mvns	r3, r3
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4013      	ands	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006068:	4a2f      	ldr	r2, [pc, #188]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	43db      	mvns	r3, r3
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4013      	ands	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006092:	4a25      	ldr	r2, [pc, #148]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006098:	4b23      	ldr	r3, [pc, #140]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4013      	ands	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060bc:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	43db      	mvns	r3, r3
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4013      	ands	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80060e6:	4a10      	ldr	r2, [pc, #64]	; (8006128 <HAL_GPIO_Init+0x2f0>)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	3301      	adds	r3, #1
 80060f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	fa22 f303 	lsr.w	r3, r2, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f47f aea3 	bne.w	8005e48 <HAL_GPIO_Init+0x10>
  }
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40021000 	.word	0x40021000
 8006114:	40010000 	.word	0x40010000
 8006118:	48000400 	.word	0x48000400
 800611c:	48000800 	.word	0x48000800
 8006120:	48000c00 	.word	0x48000c00
 8006124:	48001000 	.word	0x48001000
 8006128:	40010400 	.word	0x40010400

0800612c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800613a:	e0b7      	b.n	80062ac <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800613c:	2201      	movs	r2, #1
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	683a      	ldr	r2, [r7, #0]
 8006146:	4013      	ands	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80aa 	beq.w	80062a6 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006152:	4a5d      	ldr	r2, [pc, #372]	; (80062c8 <HAL_GPIO_DeInit+0x19c>)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	089b      	lsrs	r3, r3, #2
 8006158:	3302      	adds	r3, #2
 800615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4013      	ands	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800617a:	d019      	beq.n	80061b0 <HAL_GPIO_DeInit+0x84>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a53      	ldr	r2, [pc, #332]	; (80062cc <HAL_GPIO_DeInit+0x1a0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d013      	beq.n	80061ac <HAL_GPIO_DeInit+0x80>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a52      	ldr	r2, [pc, #328]	; (80062d0 <HAL_GPIO_DeInit+0x1a4>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00d      	beq.n	80061a8 <HAL_GPIO_DeInit+0x7c>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a51      	ldr	r2, [pc, #324]	; (80062d4 <HAL_GPIO_DeInit+0x1a8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <HAL_GPIO_DeInit+0x78>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a50      	ldr	r2, [pc, #320]	; (80062d8 <HAL_GPIO_DeInit+0x1ac>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d101      	bne.n	80061a0 <HAL_GPIO_DeInit+0x74>
 800619c:	2304      	movs	r3, #4
 800619e:	e008      	b.n	80061b2 <HAL_GPIO_DeInit+0x86>
 80061a0:	2307      	movs	r3, #7
 80061a2:	e006      	b.n	80061b2 <HAL_GPIO_DeInit+0x86>
 80061a4:	2303      	movs	r3, #3
 80061a6:	e004      	b.n	80061b2 <HAL_GPIO_DeInit+0x86>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e002      	b.n	80061b2 <HAL_GPIO_DeInit+0x86>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <HAL_GPIO_DeInit+0x86>
 80061b0:	2300      	movs	r3, #0
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	f002 0203 	and.w	r2, r2, #3
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	4093      	lsls	r3, r2
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d132      	bne.n	8006228 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80061c2:	4b46      	ldr	r3, [pc, #280]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	4944      	ldr	r1, [pc, #272]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80061d0:	4b42      	ldr	r3, [pc, #264]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	43db      	mvns	r3, r3
 80061d8:	4940      	ldr	r1, [pc, #256]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061da:	4013      	ands	r3, r2
 80061dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80061de:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	493d      	ldr	r1, [pc, #244]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061e8:	4013      	ands	r3, r2
 80061ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80061ec:	4b3b      	ldr	r3, [pc, #236]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	43db      	mvns	r3, r3
 80061f4:	4939      	ldr	r1, [pc, #228]	; (80062dc <HAL_GPIO_DeInit+0x1b0>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	220f      	movs	r2, #15
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800620a:	4a2f      	ldr	r2, [pc, #188]	; (80062c8 <HAL_GPIO_DeInit+0x19c>)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	3302      	adds	r3, #2
 8006212:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43da      	mvns	r2, r3
 800621a:	482b      	ldr	r0, [pc, #172]	; (80062c8 <HAL_GPIO_DeInit+0x19c>)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	400a      	ands	r2, r1
 8006222:	3302      	adds	r3, #2
 8006224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	2103      	movs	r1, #3
 8006232:	fa01 f303 	lsl.w	r3, r1, r3
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	08da      	lsrs	r2, r3, #3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3208      	adds	r2, #8
 8006244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	220f      	movs	r2, #15
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	08d2      	lsrs	r2, r2, #3
 800625c:	4019      	ands	r1, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3208      	adds	r2, #8
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	2103      	movs	r1, #3
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	401a      	ands	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	2101      	movs	r1, #1
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	fa01 f303 	lsl.w	r3, r1, r3
 8006288:	43db      	mvns	r3, r3
 800628a:	401a      	ands	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	2103      	movs	r1, #3
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	43db      	mvns	r3, r3
 80062a0:	401a      	ands	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	3301      	adds	r3, #1
 80062aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f47f af41 	bne.w	800613c <HAL_GPIO_DeInit+0x10>
  }
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000
 80062cc:	48000400 	.word	0x48000400
 80062d0:	48000800 	.word	0x48000800
 80062d4:	48000c00 	.word	0x48000c00
 80062d8:	48001000 	.word	0x48001000
 80062dc:	40010400 	.word	0x40010400

080062e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	807b      	strh	r3, [r7, #2]
 80062ec:	4613      	mov	r3, r2
 80062ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062f0:	787b      	ldrb	r3, [r7, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062fc:	e002      	b.n	8006304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006314:	4b04      	ldr	r3, [pc, #16]	; (8006328 <HAL_PWREx_GetVoltageRange+0x18>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800631c:	4618      	mov	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40007000 	.word	0x40007000

0800632c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800633a:	d130      	bne.n	800639e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800633c:	4b23      	ldr	r3, [pc, #140]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006348:	d038      	beq.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006354:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800635a:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2232      	movs	r2, #50	; 0x32
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006366:	fba2 2303 	umull	r2, r3, r2, r3
 800636a:	0c9b      	lsrs	r3, r3, #18
 800636c:	3301      	adds	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006370:	e002      	b.n	8006378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3b01      	subs	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006378:	4b14      	ldr	r3, [pc, #80]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d102      	bne.n	800638c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1f2      	bne.n	8006372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d110      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e00f      	b.n	80063be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063aa:	d007      	beq.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063b4:	4a05      	ldr	r2, [pc, #20]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40007000 	.word	0x40007000
 80063d0:	20000000 	.word	0x20000000
 80063d4:	431bde83 	.word	0x431bde83

080063d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f000 bc02 	b.w	8006bf0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063ec:	4b96      	ldr	r3, [pc, #600]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 030c 	and.w	r3, r3, #12
 80063f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f6:	4b94      	ldr	r3, [pc, #592]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80e4 	beq.w	80065d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <HAL_RCC_OscConfig+0x4c>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	f040 808b 	bne.w	8006532 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b01      	cmp	r3, #1
 8006420:	f040 8087 	bne.w	8006532 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006424:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_OscConfig+0x64>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e3d9      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1a      	ldr	r2, [r3, #32]
 8006440:	4b81      	ldr	r3, [pc, #516]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <HAL_RCC_OscConfig+0x7e>
 800644c:	4b7e      	ldr	r3, [pc, #504]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006454:	e005      	b.n	8006462 <HAL_RCC_OscConfig+0x8a>
 8006456:	4b7c      	ldr	r3, [pc, #496]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006462:	4293      	cmp	r3, r2
 8006464:	d223      	bcs.n	80064ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fd8a 	bl	8006f84 <RCC_SetFlashLatencyFromMSIRange>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e3ba      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800647a:	4b73      	ldr	r3, [pc, #460]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a72      	ldr	r2, [pc, #456]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006480:	f043 0308 	orr.w	r3, r3, #8
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	4b70      	ldr	r3, [pc, #448]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	496d      	ldr	r1, [pc, #436]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006498:	4b6b      	ldr	r3, [pc, #428]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	4968      	ldr	r1, [pc, #416]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	604b      	str	r3, [r1, #4]
 80064ac:	e025      	b.n	80064fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ae:	4b66      	ldr	r3, [pc, #408]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a65      	ldr	r2, [pc, #404]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064b4:	f043 0308 	orr.w	r3, r3, #8
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	4b63      	ldr	r3, [pc, #396]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4960      	ldr	r1, [pc, #384]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064cc:	4b5e      	ldr	r3, [pc, #376]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	495b      	ldr	r1, [pc, #364]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d109      	bne.n	80064fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fd4a 	bl	8006f84 <RCC_SetFlashLatencyFromMSIRange>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e37a      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064fa:	f000 fc81 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 80064fe:	4602      	mov	r2, r0
 8006500:	4b51      	ldr	r3, [pc, #324]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	4950      	ldr	r1, [pc, #320]	; (800664c <HAL_RCC_OscConfig+0x274>)
 800650c:	5ccb      	ldrb	r3, [r1, r3]
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	fa22 f303 	lsr.w	r3, r2, r3
 8006516:	4a4e      	ldr	r2, [pc, #312]	; (8006650 <HAL_RCC_OscConfig+0x278>)
 8006518:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800651a:	4b4e      	ldr	r3, [pc, #312]	; (8006654 <HAL_RCC_OscConfig+0x27c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fd fad4 	bl	8003acc <HAL_InitTick>
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d052      	beq.n	80065d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	e35e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d032      	beq.n	80065a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800653a:	4b43      	ldr	r3, [pc, #268]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a42      	ldr	r2, [pc, #264]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006546:	f7fd fb11 	bl	8003b6c <HAL_GetTick>
 800654a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800654e:	f7fd fb0d 	bl	8003b6c <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e347      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006560:	4b39      	ldr	r3, [pc, #228]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800656c:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a35      	ldr	r2, [pc, #212]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006572:	f043 0308 	orr.w	r3, r3, #8
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4b33      	ldr	r3, [pc, #204]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	4930      	ldr	r1, [pc, #192]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006586:	4313      	orrs	r3, r2
 8006588:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800658a:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	492b      	ldr	r1, [pc, #172]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800659a:	4313      	orrs	r3, r2
 800659c:	604b      	str	r3, [r1, #4]
 800659e:	e01a      	b.n	80065d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065a0:	4b29      	ldr	r3, [pc, #164]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a28      	ldr	r2, [pc, #160]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80065a6:	f023 0301 	bic.w	r3, r3, #1
 80065aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065ac:	f7fd fade 	bl	8003b6c <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065b4:	f7fd fada 	bl	8003b6c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e314      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065c6:	4b20      	ldr	r3, [pc, #128]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0x1dc>
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d073      	beq.n	80066ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d005      	beq.n	80065f4 <HAL_RCC_OscConfig+0x21c>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b0c      	cmp	r3, #12
 80065ec:	d10e      	bne.n	800660c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d10b      	bne.n	800660c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	4b14      	ldr	r3, [pc, #80]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d063      	beq.n	80066c8 <HAL_RCC_OscConfig+0x2f0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d15f      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e2f1      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006614:	d106      	bne.n	8006624 <HAL_RCC_OscConfig+0x24c>
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a0b      	ldr	r2, [pc, #44]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e025      	b.n	8006670 <HAL_RCC_OscConfig+0x298>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d114      	bne.n	8006658 <HAL_RCC_OscConfig+0x280>
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a05      	ldr	r2, [pc, #20]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a02      	ldr	r2, [pc, #8]	; (8006648 <HAL_RCC_OscConfig+0x270>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e013      	b.n	8006670 <HAL_RCC_OscConfig+0x298>
 8006648:	40021000 	.word	0x40021000
 800664c:	0800ce54 	.word	0x0800ce54
 8006650:	20000000 	.word	0x20000000
 8006654:	20000004 	.word	0x20000004
 8006658:	4ba0      	ldr	r3, [pc, #640]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a9f      	ldr	r2, [pc, #636]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800665e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	4b9d      	ldr	r3, [pc, #628]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a9c      	ldr	r2, [pc, #624]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800666a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800666e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d013      	beq.n	80066a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006678:	f7fd fa78 	bl	8003b6c <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006680:	f7fd fa74 	bl	8003b6c <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b64      	cmp	r3, #100	; 0x64
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e2ae      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006692:	4b92      	ldr	r3, [pc, #584]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x2a8>
 800669e:	e014      	b.n	80066ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a0:	f7fd fa64 	bl	8003b6c <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a8:	f7fd fa60 	bl	8003b6c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b64      	cmp	r3, #100	; 0x64
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e29a      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ba:	4b88      	ldr	r3, [pc, #544]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x2d0>
 80066c6:	e000      	b.n	80066ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d060      	beq.n	8006798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_OscConfig+0x310>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b0c      	cmp	r3, #12
 80066e0:	d119      	bne.n	8006716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d116      	bne.n	8006716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066e8:	4b7c      	ldr	r3, [pc, #496]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCC_OscConfig+0x328>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e277      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006700:	4b76      	ldr	r3, [pc, #472]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	061b      	lsls	r3, r3, #24
 800670e:	4973      	ldr	r1, [pc, #460]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006710:	4313      	orrs	r3, r2
 8006712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006714:	e040      	b.n	8006798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d023      	beq.n	8006766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800671e:	4b6f      	ldr	r3, [pc, #444]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6e      	ldr	r2, [pc, #440]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fd fa1f 	bl	8003b6c <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006732:	f7fd fa1b 	bl	8003b6c <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e255      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006744:	4b65      	ldr	r3, [pc, #404]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b62      	ldr	r3, [pc, #392]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	495f      	ldr	r1, [pc, #380]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006760:	4313      	orrs	r3, r2
 8006762:	604b      	str	r3, [r1, #4]
 8006764:	e018      	b.n	8006798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b5d      	ldr	r3, [pc, #372]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a5c      	ldr	r2, [pc, #368]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006772:	f7fd f9fb 	bl	8003b6c <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677a:	f7fd f9f7 	bl	8003b6c <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e231      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0308 	and.w	r3, r3, #8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d03c      	beq.n	800681e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01c      	beq.n	80067e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067ac:	4b4b      	ldr	r3, [pc, #300]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80067ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067b2:	4a4a      	ldr	r2, [pc, #296]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067bc:	f7fd f9d6 	bl	8003b6c <HAL_GetTick>
 80067c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c4:	f7fd f9d2 	bl	8003b6c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e20c      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067d6:	4b41      	ldr	r3, [pc, #260]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80067d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ef      	beq.n	80067c4 <HAL_RCC_OscConfig+0x3ec>
 80067e4:	e01b      	b.n	800681e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e6:	4b3d      	ldr	r3, [pc, #244]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80067e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ec:	4a3b      	ldr	r2, [pc, #236]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f6:	f7fd f9b9 	bl	8003b6c <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067fe:	f7fd f9b5 	bl	8003b6c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e1ef      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006810:	4b32      	ldr	r3, [pc, #200]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ef      	bne.n	80067fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80a6 	beq.w	8006978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006830:	4b2a      	ldr	r3, [pc, #168]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10d      	bne.n	8006858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800683c:	4b27      	ldr	r3, [pc, #156]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800683e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 8006842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006846:	6593      	str	r3, [r2, #88]	; 0x58
 8006848:	4b24      	ldr	r3, [pc, #144]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006854:	2301      	movs	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006858:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <HAL_RCC_OscConfig+0x508>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d118      	bne.n	8006896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b1e      	ldr	r3, [pc, #120]	; (80068e0 <HAL_RCC_OscConfig+0x508>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <HAL_RCC_OscConfig+0x508>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006870:	f7fd f97c 	bl	8003b6c <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006878:	f7fd f978 	bl	8003b6c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e1b2      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <HAL_RCC_OscConfig+0x508>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d108      	bne.n	80068b0 <HAL_RCC_OscConfig+0x4d8>
 800689e:	4b0f      	ldr	r3, [pc, #60]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a4:	4a0d      	ldr	r2, [pc, #52]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068ae:	e029      	b.n	8006904 <HAL_RCC_OscConfig+0x52c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d115      	bne.n	80068e4 <HAL_RCC_OscConfig+0x50c>
 80068b8:	4b08      	ldr	r3, [pc, #32]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	4a07      	ldr	r2, [pc, #28]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068c8:	4b04      	ldr	r3, [pc, #16]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ce:	4a03      	ldr	r2, [pc, #12]	; (80068dc <HAL_RCC_OscConfig+0x504>)
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068d8:	e014      	b.n	8006904 <HAL_RCC_OscConfig+0x52c>
 80068da:	bf00      	nop
 80068dc:	40021000 	.word	0x40021000
 80068e0:	40007000 	.word	0x40007000
 80068e4:	4b9a      	ldr	r3, [pc, #616]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	4a99      	ldr	r2, [pc, #612]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068f4:	4b96      	ldr	r3, [pc, #600]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	4a95      	ldr	r2, [pc, #596]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80068fc:	f023 0304 	bic.w	r3, r3, #4
 8006900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d016      	beq.n	800693a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800690c:	f7fd f92e 	bl	8003b6c <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fd f92a 	bl	8003b6c <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e162      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800692a:	4b89      	ldr	r3, [pc, #548]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ed      	beq.n	8006914 <HAL_RCC_OscConfig+0x53c>
 8006938:	e015      	b.n	8006966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800693a:	f7fd f917 	bl	8003b6c <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006940:	e00a      	b.n	8006958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006942:	f7fd f913 	bl	8003b6c <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e14b      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006958:	4b7d      	ldr	r3, [pc, #500]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ed      	bne.n	8006942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006966:	7ffb      	ldrb	r3, [r7, #31]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696c:	4b78      	ldr	r3, [pc, #480]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 800696e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006970:	4a77      	ldr	r2, [pc, #476]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006976:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d03c      	beq.n	80069fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01c      	beq.n	80069c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800698c:	4b70      	ldr	r3, [pc, #448]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 800698e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006992:	4a6f      	ldr	r2, [pc, #444]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fd f8e6 	bl	8003b6c <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069a4:	f7fd f8e2 	bl	8003b6c <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e11c      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069b6:	4b66      	ldr	r3, [pc, #408]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80069b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069bc:	f003 0302 	and.w	r3, r3, #2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0ef      	beq.n	80069a4 <HAL_RCC_OscConfig+0x5cc>
 80069c4:	e01b      	b.n	80069fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069c6:	4b62      	ldr	r3, [pc, #392]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80069c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069cc:	4a60      	ldr	r2, [pc, #384]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fd f8c9 	bl	8003b6c <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069de:	f7fd f8c5 	bl	8003b6c <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e0ff      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069f0:	4b57      	ldr	r3, [pc, #348]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 80069f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1ef      	bne.n	80069de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 80f3 	beq.w	8006bee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	f040 80c9 	bne.w	8006ba4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a12:	4b4f      	ldr	r3, [pc, #316]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f003 0203 	and.w	r2, r3, #3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d12c      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	3b01      	subs	r3, #1
 8006a32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d123      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d11b      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d113      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	085b      	lsrs	r3, r3, #1
 8006a64:	3b01      	subs	r3, #1
 8006a66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d109      	bne.n	8006a80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d06b      	beq.n	8006b58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b0c      	cmp	r3, #12
 8006a84:	d062      	beq.n	8006b4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a86:	4b32      	ldr	r3, [pc, #200]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e0ac      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2d      	ldr	r2, [pc, #180]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006a9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006aa2:	f7fd f863 	bl	8003b6c <HAL_GetTick>
 8006aa6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa8:	e008      	b.n	8006abc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aaa:	f7fd f85f 	bl	8003b6c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e099      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006abc:	4b24      	ldr	r3, [pc, #144]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f0      	bne.n	8006aaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ac8:	4b21      	ldr	r3, [pc, #132]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	4b21      	ldr	r3, [pc, #132]	; (8006b54 <HAL_RCC_OscConfig+0x77c>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ad8:	3a01      	subs	r2, #1
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	4311      	orrs	r1, r2
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ae2:	0212      	lsls	r2, r2, #8
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006aea:	0852      	lsrs	r2, r2, #1
 8006aec:	3a01      	subs	r2, #1
 8006aee:	0552      	lsls	r2, r2, #21
 8006af0:	4311      	orrs	r1, r2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006af6:	0852      	lsrs	r2, r2, #1
 8006af8:	3a01      	subs	r2, #1
 8006afa:	0652      	lsls	r2, r2, #25
 8006afc:	4311      	orrs	r1, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b02:	06d2      	lsls	r2, r2, #27
 8006b04:	430a      	orrs	r2, r1
 8006b06:	4912      	ldr	r1, [pc, #72]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b0c:	4b10      	ldr	r3, [pc, #64]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b18:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a0c      	ldr	r2, [pc, #48]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b24:	f7fd f822 	bl	8003b6c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b2c:	f7fd f81e 	bl	8003b6c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e058      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b3e:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <HAL_RCC_OscConfig+0x778>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b4a:	e050      	b.n	8006bee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e04f      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
 8006b50:	40021000 	.word	0x40021000
 8006b54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b58:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d144      	bne.n	8006bee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b70:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4a20      	ldr	r2, [pc, #128]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b7c:	f7fc fff6 	bl	8003b6c <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b84:	f7fc fff2 	bl	8003b6c <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e02c      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x7ac>
 8006ba2:	e024      	b.n	8006bee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b0c      	cmp	r3, #12
 8006ba8:	d01f      	beq.n	8006bea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb6:	f7fc ffd9 	bl	8003b6c <HAL_GetTick>
 8006bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bbe:	f7fc ffd5 	bl	8003b6c <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e00f      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f0      	bne.n	8006bbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006bdc:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	4905      	ldr	r1, [pc, #20]	; (8006bf8 <HAL_RCC_OscConfig+0x820>)
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_OscConfig+0x824>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	60cb      	str	r3, [r1, #12]
 8006be8:	e001      	b.n	8006bee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	feeefffc 	.word	0xfeeefffc

08006c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0e7      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c14:	4b75      	ldr	r3, [pc, #468]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d910      	bls.n	8006c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c22:	4b72      	ldr	r3, [pc, #456]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 0207 	bic.w	r2, r3, #7
 8006c2a:	4970      	ldr	r1, [pc, #448]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c32:	4b6e      	ldr	r3, [pc, #440]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d001      	beq.n	8006c44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0cf      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d010      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	4b66      	ldr	r3, [pc, #408]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d908      	bls.n	8006c72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c60:	4b63      	ldr	r3, [pc, #396]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4960      	ldr	r1, [pc, #384]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d04c      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c86:	4b5a      	ldr	r3, [pc, #360]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d121      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e0a6      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d107      	bne.n	8006cae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c9e:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d115      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e09a      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cb6:	4b4e      	ldr	r3, [pc, #312]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e08e      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cc6:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e086      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cd6:	4b46      	ldr	r3, [pc, #280]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f023 0203 	bic.w	r2, r3, #3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4943      	ldr	r1, [pc, #268]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ce8:	f7fc ff40 	bl	8003b6c <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf0:	f7fc ff3c 	bl	8003b6c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e06e      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	4b3a      	ldr	r3, [pc, #232]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 020c 	and.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1eb      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d208      	bcs.n	8006d46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d34:	4b2e      	ldr	r3, [pc, #184]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	492b      	ldr	r1, [pc, #172]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d46:	4b29      	ldr	r3, [pc, #164]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d210      	bcs.n	8006d76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d54:	4b25      	ldr	r3, [pc, #148]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f023 0207 	bic.w	r2, r3, #7
 8006d5c:	4923      	ldr	r1, [pc, #140]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d64:	4b21      	ldr	r3, [pc, #132]	; (8006dec <HAL_RCC_ClockConfig+0x1ec>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d001      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e036      	b.n	8006de4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d008      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d82:	4b1b      	ldr	r3, [pc, #108]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	4918      	ldr	r1, [pc, #96]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	4910      	ldr	r1, [pc, #64]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006db4:	f000 f824 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <HAL_RCC_ClockConfig+0x1f0>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	091b      	lsrs	r3, r3, #4
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	490b      	ldr	r1, [pc, #44]	; (8006df4 <HAL_RCC_ClockConfig+0x1f4>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	f003 031f 	and.w	r3, r3, #31
 8006dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd0:	4a09      	ldr	r2, [pc, #36]	; (8006df8 <HAL_RCC_ClockConfig+0x1f8>)
 8006dd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <HAL_RCC_ClockConfig+0x1fc>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fc fe77 	bl	8003acc <HAL_InitTick>
 8006dde:	4603      	mov	r3, r0
 8006de0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006de2:	7afb      	ldrb	r3, [r7, #11]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40022000 	.word	0x40022000
 8006df0:	40021000 	.word	0x40021000
 8006df4:	0800ce54 	.word	0x0800ce54
 8006df8:	20000000 	.word	0x20000000
 8006dfc:	20000004 	.word	0x20000004

08006e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b089      	sub	sp, #36	; 0x24
 8006e04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e0e:	4b3e      	ldr	r3, [pc, #248]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d005      	beq.n	8006e34 <HAL_RCC_GetSysClockFreq+0x34>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	2b0c      	cmp	r3, #12
 8006e2c:	d121      	bne.n	8006e72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d11e      	bne.n	8006e72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e34:	4b34      	ldr	r3, [pc, #208]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0308 	and.w	r3, r3, #8
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d107      	bne.n	8006e50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e40:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	61fb      	str	r3, [r7, #28]
 8006e4e:	e005      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	091b      	lsrs	r3, r3, #4
 8006e56:	f003 030f 	and.w	r3, r3, #15
 8006e5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10d      	bne.n	8006e88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e70:	e00a      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d102      	bne.n	8006e7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	e004      	b.n	8006e88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b08      	cmp	r3, #8
 8006e82:	d101      	bne.n	8006e88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e84:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b0c      	cmp	r3, #12
 8006e8c:	d134      	bne.n	8006ef8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e8e:	4b1e      	ldr	r3, [pc, #120]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCC_GetSysClockFreq+0xa6>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d003      	beq.n	8006eac <HAL_RCC_GetSysClockFreq+0xac>
 8006ea4:	e005      	b.n	8006eb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ea8:	617b      	str	r3, [r7, #20]
      break;
 8006eaa:	e005      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006eac:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eae:	617b      	str	r3, [r7, #20]
      break;
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	617b      	str	r3, [r7, #20]
      break;
 8006eb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eb8:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	fb03 f202 	mul.w	r2, r3, r2
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	0e5b      	lsrs	r3, r3, #25
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	3301      	adds	r3, #1
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ef8:	69bb      	ldr	r3, [r7, #24]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3724      	adds	r7, #36	; 0x24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	0800ce6c 	.word	0x0800ce6c
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	20000000 	.word	0x20000000

08006f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f30:	f7ff fff0 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f34:	4602      	mov	r2, r0
 8006f36:	4b06      	ldr	r3, [pc, #24]	; (8006f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	f003 0307 	and.w	r3, r3, #7
 8006f40:	4904      	ldr	r1, [pc, #16]	; (8006f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f42:	5ccb      	ldrb	r3, [r1, r3]
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40021000 	.word	0x40021000
 8006f54:	0800ce64 	.word	0x0800ce64

08006f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f5c:	f7ff ffda 	bl	8006f14 <HAL_RCC_GetHCLKFreq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	0adb      	lsrs	r3, r3, #11
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	4904      	ldr	r1, [pc, #16]	; (8006f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	f003 031f 	and.w	r3, r3, #31
 8006f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	0800ce64 	.word	0x0800ce64

08006f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f90:	4b2a      	ldr	r3, [pc, #168]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f9c:	f7ff f9b8 	bl	8006310 <HAL_PWREx_GetVoltageRange>
 8006fa0:	6178      	str	r0, [r7, #20]
 8006fa2:	e014      	b.n	8006fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fa4:	4b25      	ldr	r3, [pc, #148]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa8:	4a24      	ldr	r2, [pc, #144]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fae:	6593      	str	r3, [r2, #88]	; 0x58
 8006fb0:	4b22      	ldr	r3, [pc, #136]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fbc:	f7ff f9a8 	bl	8006310 <HAL_PWREx_GetVoltageRange>
 8006fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd4:	d10b      	bne.n	8006fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d919      	bls.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2ba0      	cmp	r3, #160	; 0xa0
 8006fe0:	d902      	bls.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	e013      	b.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fe8:	2301      	movs	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	e010      	b.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d902      	bls.n	8006ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	e00a      	b.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b80      	cmp	r3, #128	; 0x80
 8006ffe:	d102      	bne.n	8007006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007000:	2302      	movs	r3, #2
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	e004      	b.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2b70      	cmp	r3, #112	; 0x70
 800700a:	d101      	bne.n	8007010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800700c:	2301      	movs	r3, #1
 800700e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f023 0207 	bic.w	r2, r3, #7
 8007018:	4909      	ldr	r1, [pc, #36]	; (8007040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	429a      	cmp	r2, r3
 800702c:	d001      	beq.n	8007032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40021000 	.word	0x40021000
 8007040:	40022000 	.word	0x40022000

08007044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800704c:	2300      	movs	r3, #0
 800704e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007050:	2300      	movs	r3, #0
 8007052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800705c:	2b00      	cmp	r3, #0
 800705e:	d031      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007068:	d01a      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800706a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800706e:	d814      	bhi.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007070:	2b00      	cmp	r3, #0
 8007072:	d009      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007078:	d10f      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800707a:	4b5d      	ldr	r3, [pc, #372]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4a5c      	ldr	r2, [pc, #368]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007084:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007086:	e00c      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f000 f9f0 	bl	8007474 <RCCEx_PLLSAI1_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007098:	e003      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	74fb      	strb	r3, [r7, #19]
      break;
 800709e:	e000      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80070a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a2:	7cfb      	ldrb	r3, [r7, #19]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070a8:	4b51      	ldr	r3, [pc, #324]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	494e      	ldr	r1, [pc, #312]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070be:	e001      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c0:	7cfb      	ldrb	r3, [r7, #19]
 80070c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 809e 	beq.w	800720e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d2:	2300      	movs	r3, #0
 80070d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070d6:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00d      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ec:	4b40      	ldr	r3, [pc, #256]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f0:	4a3f      	ldr	r2, [pc, #252]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f6:	6593      	str	r3, [r2, #88]	; 0x58
 80070f8:	4b3d      	ldr	r3, [pc, #244]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007104:	2301      	movs	r3, #1
 8007106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007108:	4b3a      	ldr	r3, [pc, #232]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a39      	ldr	r2, [pc, #228]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800710e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007114:	f7fc fd2a 	bl	8003b6c <HAL_GetTick>
 8007118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800711a:	e009      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711c:	f7fc fd26 	bl	8003b6c <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d902      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	74fb      	strb	r3, [r7, #19]
        break;
 800712e:	e005      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007130:	4b30      	ldr	r3, [pc, #192]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0ef      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800713c:	7cfb      	ldrb	r3, [r7, #19]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d15a      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007142:	4b2b      	ldr	r3, [pc, #172]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800714c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01e      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	429a      	cmp	r2, r3
 800715c:	d019      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007168:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800716c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007170:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800717a:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800718a:	4a19      	ldr	r2, [pc, #100]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d016      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fc fce6 	bl	8003b6c <HAL_GetTick>
 80071a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071a2:	e00b      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a4:	f7fc fce2 	bl	8003b6c <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d902      	bls.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	74fb      	strb	r3, [r7, #19]
            break;
 80071ba:	e006      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071bc:	4b0c      	ldr	r3, [pc, #48]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ec      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80071ca:	7cfb      	ldrb	r3, [r7, #19]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071de:	4904      	ldr	r1, [pc, #16]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071e6:	e009      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	74bb      	strb	r3, [r7, #18]
 80071ec:	e006      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80071ee:	bf00      	nop
 80071f0:	40021000 	.word	0x40021000
 80071f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071fc:	7c7b      	ldrb	r3, [r7, #17]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d105      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007202:	4b9b      	ldr	r3, [pc, #620]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007206:	4a9a      	ldr	r2, [pc, #616]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800720c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800721a:	4b95      	ldr	r3, [pc, #596]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007220:	f023 0203 	bic.w	r2, r3, #3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	4991      	ldr	r1, [pc, #580]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800723c:	4b8c      	ldr	r3, [pc, #560]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f023 020c 	bic.w	r2, r3, #12
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	4989      	ldr	r1, [pc, #548]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800725e:	4b84      	ldr	r3, [pc, #528]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726c:	4980      	ldr	r1, [pc, #512]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007280:	4b7b      	ldr	r3, [pc, #492]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728e:	4978      	ldr	r1, [pc, #480]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072a2:	4b73      	ldr	r3, [pc, #460]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b0:	496f      	ldr	r1, [pc, #444]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072c4:	4b6a      	ldr	r3, [pc, #424]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	4967      	ldr	r1, [pc, #412]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072e6:	4b62      	ldr	r3, [pc, #392]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f4:	495e      	ldr	r1, [pc, #376]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00a      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007308:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	4956      	ldr	r1, [pc, #344]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007318:	4313      	orrs	r3, r2
 800731a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800732a:	4b51      	ldr	r3, [pc, #324]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800732c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	494d      	ldr	r1, [pc, #308]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d028      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800734c:	4b48      	ldr	r3, [pc, #288]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800734e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007352:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	4945      	ldr	r1, [pc, #276]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800735c:	4313      	orrs	r3, r2
 800735e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007366:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800736a:	d106      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800736c:	4b40      	ldr	r3, [pc, #256]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	4a3f      	ldr	r2, [pc, #252]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007376:	60d3      	str	r3, [r2, #12]
 8007378:	e011      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007382:	d10c      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	2101      	movs	r1, #1
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f872 	bl	8007474 <RCCEx_PLLSAI1_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007394:	7cfb      	ldrb	r3, [r7, #19]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800739a:	7cfb      	ldrb	r3, [r7, #19]
 800739c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d028      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073aa:	4b31      	ldr	r3, [pc, #196]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b8:	492d      	ldr	r1, [pc, #180]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c8:	d106      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ca:	4b29      	ldr	r3, [pc, #164]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	4a28      	ldr	r2, [pc, #160]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80073d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073d4:	60d3      	str	r3, [r2, #12]
 80073d6:	e011      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073e0:	d10c      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 f843 	bl	8007474 <RCCEx_PLLSAI1_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80073f8:	7cfb      	ldrb	r3, [r7, #19]
 80073fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01c      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007408:	4b19      	ldr	r3, [pc, #100]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800740a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	4916      	ldr	r1, [pc, #88]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007418:	4313      	orrs	r3, r2
 800741a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007426:	d10c      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3304      	adds	r3, #4
 800742c:	2102      	movs	r1, #2
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f820 	bl	8007474 <RCCEx_PLLSAI1_Config>
 8007434:	4603      	mov	r3, r0
 8007436:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800743e:	7cfb      	ldrb	r3, [r7, #19]
 8007440:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800744e:	4b08      	ldr	r3, [pc, #32]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8007450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007454:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	4904      	ldr	r1, [pc, #16]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007464:	7cbb      	ldrb	r3, [r7, #18]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40021000 	.word	0x40021000

08007474 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007482:	4b74      	ldr	r3, [pc, #464]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800748e:	4b71      	ldr	r3, [pc, #452]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f003 0203 	and.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d10d      	bne.n	80074ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
       ||
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074a6:	4b6b      	ldr	r3, [pc, #428]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0307 	and.w	r3, r3, #7
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
       ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d047      	beq.n	800754a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]
 80074be:	e044      	b.n	800754a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d018      	beq.n	80074fa <RCCEx_PLLSAI1_Config+0x86>
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d825      	bhi.n	8007518 <RCCEx_PLLSAI1_Config+0xa4>
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d002      	beq.n	80074d6 <RCCEx_PLLSAI1_Config+0x62>
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d009      	beq.n	80074e8 <RCCEx_PLLSAI1_Config+0x74>
 80074d4:	e020      	b.n	8007518 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074d6:	4b5f      	ldr	r3, [pc, #380]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11d      	bne.n	800751e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e6:	e01a      	b.n	800751e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074e8:	4b5a      	ldr	r3, [pc, #360]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d116      	bne.n	8007522 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f8:	e013      	b.n	8007522 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074fa:	4b56      	ldr	r3, [pc, #344]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10f      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007506:	4b53      	ldr	r3, [pc, #332]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007516:	e006      	b.n	8007526 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
      break;
 800751c:	e004      	b.n	8007528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800751e:	bf00      	nop
 8007520:	e002      	b.n	8007528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007522:	bf00      	nop
 8007524:	e000      	b.n	8007528 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007526:	bf00      	nop
    }

    if(status == HAL_OK)
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10d      	bne.n	800754a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800752e:	4b49      	ldr	r3, [pc, #292]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6819      	ldr	r1, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	3b01      	subs	r3, #1
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	430b      	orrs	r3, r1
 8007544:	4943      	ldr	r1, [pc, #268]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d17c      	bne.n	800764a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007550:	4b40      	ldr	r3, [pc, #256]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007556:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800755a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755c:	f7fc fb06 	bl	8003b6c <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007562:	e009      	b.n	8007578 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007564:	f7fc fb02 	bl	8003b6c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d902      	bls.n	8007578 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	73fb      	strb	r3, [r7, #15]
        break;
 8007576:	e005      	b.n	8007584 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007578:	4b36      	ldr	r3, [pc, #216]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1ef      	bne.n	8007564 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d15f      	bne.n	800764a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d110      	bne.n	80075b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007590:	4b30      	ldr	r3, [pc, #192]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007598:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6892      	ldr	r2, [r2, #8]
 80075a0:	0211      	lsls	r1, r2, #8
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	68d2      	ldr	r2, [r2, #12]
 80075a6:	06d2      	lsls	r2, r2, #27
 80075a8:	430a      	orrs	r2, r1
 80075aa:	492a      	ldr	r1, [pc, #168]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	610b      	str	r3, [r1, #16]
 80075b0:	e027      	b.n	8007602 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d112      	bne.n	80075de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075b8:	4b26      	ldr	r3, [pc, #152]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80075c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	6892      	ldr	r2, [r2, #8]
 80075c8:	0211      	lsls	r1, r2, #8
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6912      	ldr	r2, [r2, #16]
 80075ce:	0852      	lsrs	r2, r2, #1
 80075d0:	3a01      	subs	r2, #1
 80075d2:	0552      	lsls	r2, r2, #21
 80075d4:	430a      	orrs	r2, r1
 80075d6:	491f      	ldr	r1, [pc, #124]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	610b      	str	r3, [r1, #16]
 80075dc:	e011      	b.n	8007602 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6892      	ldr	r2, [r2, #8]
 80075ee:	0211      	lsls	r1, r2, #8
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	6952      	ldr	r2, [r2, #20]
 80075f4:	0852      	lsrs	r2, r2, #1
 80075f6:	3a01      	subs	r2, #1
 80075f8:	0652      	lsls	r2, r2, #25
 80075fa:	430a      	orrs	r2, r1
 80075fc:	4915      	ldr	r1, [pc, #84]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800760c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760e:	f7fc faad 	bl	8003b6c <HAL_GetTick>
 8007612:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007614:	e009      	b.n	800762a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007616:	f7fc faa9 	bl	8003b6c <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d902      	bls.n	800762a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	73fb      	strb	r3, [r7, #15]
          break;
 8007628:	e005      	b.n	8007636 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ef      	beq.n	8007616 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4903      	ldr	r1, [pc, #12]	; (8007654 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007646:	4313      	orrs	r3, r2
 8007648:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40021000 	.word	0x40021000

08007658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e049      	b.n	80076fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fb fbb6 	bl	8002df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3304      	adds	r3, #4
 8007694:	4619      	mov	r1, r3
 8007696:	4610      	mov	r0, r2
 8007698:	f000 faca 	bl	8007c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d001      	beq.n	8007720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e03b      	b.n	8007798 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a19      	ldr	r2, [pc, #100]	; (80077a4 <HAL_TIM_Base_Start_IT+0x9c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_TIM_Base_Start_IT+0x4e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d004      	beq.n	8007756 <HAL_TIM_Base_Start_IT+0x4e>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d115      	bne.n	8007782 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	4b13      	ldr	r3, [pc, #76]	; (80077ac <HAL_TIM_Base_Start_IT+0xa4>)
 800775e:	4013      	ands	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b06      	cmp	r3, #6
 8007766:	d015      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x8c>
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776e:	d011      	beq.n	8007794 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007780:	e008      	b.n	8007794 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0201 	orr.w	r2, r2, #1
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e000      	b.n	8007796 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	40012c00 	.word	0x40012c00
 80077a8:	40014000 	.word	0x40014000
 80077ac:	00010007 	.word	0x00010007

080077b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80077d2:	4013      	ands	r3, r2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10f      	bne.n	80077f8 <HAL_TIM_Base_Stop_IT+0x48>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	f240 4344 	movw	r3, #1092	; 0x444
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d107      	bne.n	80077f8 <HAL_TIM_Base_Stop_IT+0x48>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0201 	bic.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b02      	cmp	r3, #2
 8007822:	d122      	bne.n	800786a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b02      	cmp	r3, #2
 8007830:	d11b      	bne.n	800786a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f06f 0202 	mvn.w	r2, #2
 800783a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f003 0303 	and.w	r3, r3, #3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f9ce 	bl	8007bf2 <HAL_TIM_IC_CaptureCallback>
 8007856:	e005      	b.n	8007864 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f9c0 	bl	8007bde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f9d1 	bl	8007c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0304 	and.w	r3, r3, #4
 8007874:	2b04      	cmp	r3, #4
 8007876:	d122      	bne.n	80078be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d11b      	bne.n	80078be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f06f 0204 	mvn.w	r2, #4
 800788e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f9a4 	bl	8007bf2 <HAL_TIM_IC_CaptureCallback>
 80078aa:	e005      	b.n	80078b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f996 	bl	8007bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9a7 	bl	8007c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d122      	bne.n	8007912 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d11b      	bne.n	8007912 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0208 	mvn.w	r2, #8
 80078e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2204      	movs	r2, #4
 80078e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f97a 	bl	8007bf2 <HAL_TIM_IC_CaptureCallback>
 80078fe:	e005      	b.n	800790c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f96c 	bl	8007bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f97d 	bl	8007c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b10      	cmp	r3, #16
 800791e:	d122      	bne.n	8007966 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b10      	cmp	r3, #16
 800792c:	d11b      	bne.n	8007966 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f06f 0210 	mvn.w	r2, #16
 8007936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2208      	movs	r2, #8
 800793c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f950 	bl	8007bf2 <HAL_TIM_IC_CaptureCallback>
 8007952:	e005      	b.n	8007960 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f942 	bl	8007bde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f953 	bl	8007c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10e      	bne.n	8007992 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b01      	cmp	r3, #1
 8007980:	d107      	bne.n	8007992 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f06f 0201 	mvn.w	r2, #1
 800798a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7fb fa9f 	bl	8002ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799c:	2b80      	cmp	r3, #128	; 0x80
 800799e:	d10e      	bne.n	80079be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b80      	cmp	r3, #128	; 0x80
 80079ac:	d107      	bne.n	80079be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 faa7 	bl	8007f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079cc:	d10e      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d107      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa9a 	bl	8007f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d10e      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d107      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f901 	bl	8007c1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d10e      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d107      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0220 	mvn.w	r2, #32
 8007a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa5a 	bl	8007ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIM_ConfigClockSource+0x1c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e0b6      	b.n	8007bd6 <HAL_TIM_ConfigClockSource+0x18a>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa4:	d03e      	beq.n	8007b24 <HAL_TIM_ConfigClockSource+0xd8>
 8007aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aaa:	f200 8087 	bhi.w	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab2:	f000 8086 	beq.w	8007bc2 <HAL_TIM_ConfigClockSource+0x176>
 8007ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aba:	d87f      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007abc:	2b70      	cmp	r3, #112	; 0x70
 8007abe:	d01a      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0xaa>
 8007ac0:	2b70      	cmp	r3, #112	; 0x70
 8007ac2:	d87b      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007ac4:	2b60      	cmp	r3, #96	; 0x60
 8007ac6:	d050      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x11e>
 8007ac8:	2b60      	cmp	r3, #96	; 0x60
 8007aca:	d877      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007acc:	2b50      	cmp	r3, #80	; 0x50
 8007ace:	d03c      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0xfe>
 8007ad0:	2b50      	cmp	r3, #80	; 0x50
 8007ad2:	d873      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007ad4:	2b40      	cmp	r3, #64	; 0x40
 8007ad6:	d058      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x13e>
 8007ad8:	2b40      	cmp	r3, #64	; 0x40
 8007ada:	d86f      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d064      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x15e>
 8007ae0:	2b30      	cmp	r3, #48	; 0x30
 8007ae2:	d86b      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d060      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x15e>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d867      	bhi.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d05c      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x15e>
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d05a      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x15e>
 8007af4:	e062      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6899      	ldr	r1, [r3, #8]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f000 f971 	bl	8007dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	609a      	str	r2, [r3, #8]
      break;
 8007b22:	e04f      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	6899      	ldr	r1, [r3, #8]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f000 f95a 	bl	8007dec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b46:	609a      	str	r2, [r3, #8]
      break;
 8007b48:	e03c      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 f8ce 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2150      	movs	r1, #80	; 0x50
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f927 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007b68:	e02c      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 f8ed 	bl	8007d56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2160      	movs	r1, #96	; 0x60
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 f917 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007b88:	e01c      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f000 f8ae 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2140      	movs	r1, #64	; 0x40
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f907 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007ba8:	e00c      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f000 f8fe 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007bba:	e003      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc0:	e000      	b.n	8007bc4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a2a      	ldr	r2, [pc, #168]	; (8007cec <TIM_Base_SetConfig+0xbc>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_Base_SetConfig+0x20>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4e:	d108      	bne.n	8007c62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a21      	ldr	r2, [pc, #132]	; (8007cec <TIM_Base_SetConfig+0xbc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_Base_SetConfig+0x52>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c70:	d007      	beq.n	8007c82 <TIM_Base_SetConfig+0x52>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	; (8007cf0 <TIM_Base_SetConfig+0xc0>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_Base_SetConfig+0x52>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	; (8007cf4 <TIM_Base_SetConfig+0xc4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d108      	bne.n	8007c94 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <TIM_Base_SetConfig+0xbc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <TIM_Base_SetConfig+0xa0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a0b      	ldr	r2, [pc, #44]	; (8007cf0 <TIM_Base_SetConfig+0xc0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_Base_SetConfig+0xa0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a0a      	ldr	r2, [pc, #40]	; (8007cf4 <TIM_Base_SetConfig+0xc4>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d103      	bne.n	8007cd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691a      	ldr	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	615a      	str	r2, [r3, #20]
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40012c00 	.word	0x40012c00
 8007cf0:	40014000 	.word	0x40014000
 8007cf4:	40014400 	.word	0x40014400

08007cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0201 	bic.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 030a 	bic.w	r3, r3, #10
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	f023 0210 	bic.w	r2, r3, #16
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f043 0307 	orr.w	r3, r3, #7
 8007dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	021a      	lsls	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	609a      	str	r2, [r3, #8]
}
 8007e20:	bf00      	nop
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e04f      	b.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a21      	ldr	r2, [pc, #132]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d108      	bne.n	8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a14      	ldr	r2, [pc, #80]	; (8007ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d009      	beq.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eac:	d004      	beq.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d10c      	bne.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3714      	adds	r7, #20
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	40012c00 	.word	0x40012c00
 8007ef4:	40014000 	.word	0x40014000

08007ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e040      	b.n	8007fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d106      	bne.n	8007f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fb f872 	bl	8003040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2224      	movs	r2, #36	; 0x24
 8007f60:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f022 0201 	bic.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fd6c 	bl	8008a50 <UART_SetConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e022      	b.n	8007fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 ffba 	bl	8008f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689a      	ldr	r2, [r3, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f841 	bl	8009048 <UART_CheckIdleState>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e02b      	b.n	800803a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2224      	movs	r2, #36	; 0x24
 8007fe6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0201 	bic.w	r2, r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fb f927 	bl	8003264 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b08a      	sub	sp, #40	; 0x28
 8008046:	af02      	add	r7, sp, #8
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	603b      	str	r3, [r7, #0]
 800804e:	4613      	mov	r3, r2
 8008050:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008056:	2b20      	cmp	r3, #32
 8008058:	f040 8082 	bne.w	8008160 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <HAL_UART_Transmit+0x26>
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e07a      	b.n	8008162 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_UART_Transmit+0x38>
 8008076:	2302      	movs	r3, #2
 8008078:	e073      	b.n	8008162 <HAL_UART_Transmit+0x120>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2221      	movs	r2, #33	; 0x21
 800808e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008090:	f7fb fd6c 	bl	8003b6c <HAL_GetTick>
 8008094:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	88fa      	ldrh	r2, [r7, #6]
 800809a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	88fa      	ldrh	r2, [r7, #6]
 80080a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ae:	d108      	bne.n	80080c2 <HAL_UART_Transmit+0x80>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	e003      	b.n	80080ca <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80080d2:	e02d      	b.n	8008130 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2200      	movs	r2, #0
 80080dc:	2180      	movs	r1, #128	; 0x80
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fffb 	bl	80090da <UART_WaitOnFlagUntilTimeout>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e039      	b.n	8008162 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	881a      	ldrh	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008100:	b292      	uxth	r2, r2
 8008102:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	3302      	adds	r3, #2
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	e008      	b.n	800811e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	b292      	uxth	r2, r2
 8008116:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1cb      	bne.n	80080d4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2200      	movs	r2, #0
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 ffc7 	bl	80090da <UART_WaitOnFlagUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e005      	b.n	8008162 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	e000      	b.n	8008162 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008160:	2302      	movs	r3, #2
  }
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b08a      	sub	sp, #40	; 0x28
 800816e:	af02      	add	r7, sp, #8
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800817e:	2b20      	cmp	r3, #32
 8008180:	f040 80bf 	bne.w	8008302 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_UART_Receive+0x26>
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0b7      	b.n	8008304 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_UART_Receive+0x38>
 800819e:	2302      	movs	r3, #2
 80081a0:	e0b0      	b.n	8008304 <HAL_UART_Receive+0x19a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2222      	movs	r2, #34	; 0x22
 80081b6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081be:	f7fb fcd5 	bl	8003b6c <HAL_GetTick>
 80081c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	88fa      	ldrh	r2, [r7, #6]
 80081c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	88fa      	ldrh	r2, [r7, #6]
 80081d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d10e      	bne.n	80081fc <HAL_UART_Receive+0x92>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <HAL_UART_Receive+0x88>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081f0:	e02d      	b.n	800824e <HAL_UART_Receive+0xe4>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	22ff      	movs	r2, #255	; 0xff
 80081f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081fa:	e028      	b.n	800824e <HAL_UART_Receive+0xe4>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10d      	bne.n	8008220 <HAL_UART_Receive+0xb6>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <HAL_UART_Receive+0xac>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	22ff      	movs	r2, #255	; 0xff
 8008210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008214:	e01b      	b.n	800824e <HAL_UART_Receive+0xe4>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	227f      	movs	r2, #127	; 0x7f
 800821a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800821e:	e016      	b.n	800824e <HAL_UART_Receive+0xe4>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008228:	d10d      	bne.n	8008246 <HAL_UART_Receive+0xdc>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <HAL_UART_Receive+0xd2>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	227f      	movs	r2, #127	; 0x7f
 8008236:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800823a:	e008      	b.n	800824e <HAL_UART_Receive+0xe4>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	223f      	movs	r2, #63	; 0x3f
 8008240:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008244:	e003      	b.n	800824e <HAL_UART_Receive+0xe4>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008254:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825e:	d108      	bne.n	8008272 <HAL_UART_Receive+0x108>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008268:	2300      	movs	r3, #0
 800826a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	61bb      	str	r3, [r7, #24]
 8008270:	e003      	b.n	800827a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008282:	e033      	b.n	80082ec <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2200      	movs	r2, #0
 800828c:	2120      	movs	r1, #32
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 ff23 	bl	80090da <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d001      	beq.n	800829e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e032      	b.n	8008304 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10c      	bne.n	80082be <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	8a7b      	ldrh	r3, [r7, #18]
 80082ae:	4013      	ands	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	3302      	adds	r3, #2
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	e00d      	b.n	80082da <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	8a7b      	ldrh	r3, [r7, #18]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4013      	ands	r3, r2
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1c5      	bne.n	8008284 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2220      	movs	r2, #32
 80082fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831e:	2b20      	cmp	r3, #32
 8008320:	d142      	bne.n	80083a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_UART_Receive_IT+0x22>
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e03b      	b.n	80083aa <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_UART_Receive_IT+0x34>
 800833c:	2302      	movs	r3, #2
 800833e:	e034      	b.n	80083aa <HAL_UART_Receive_IT+0x9e>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a18      	ldr	r2, [pc, #96]	; (80083b4 <HAL_UART_Receive_IT+0xa8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d01f      	beq.n	8008398 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d018      	beq.n	8008398 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	613b      	str	r3, [r7, #16]
   return(result);
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	623b      	str	r3, [r7, #32]
 8008386:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	69f9      	ldr	r1, [r7, #28]
 800838a:	6a3a      	ldr	r2, [r7, #32]
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	61bb      	str	r3, [r7, #24]
   return(result);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e6      	bne.n	8008366 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	461a      	mov	r2, r3
 800839c:	68b9      	ldr	r1, [r7, #8]
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 ff60 	bl	8009264 <UART_Start_Receive_IT>
 80083a4:	4603      	mov	r3, r0
 80083a6:	e000      	b.n	80083aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80083a8:	2302      	movs	r3, #2
  }
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3728      	adds	r7, #40	; 0x28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	40008000 	.word	0x40008000

080083b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ca:	2b20      	cmp	r3, #32
 80083cc:	d142      	bne.n	8008454 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <HAL_UART_Receive_DMA+0x22>
 80083d4:	88fb      	ldrh	r3, [r7, #6]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e03b      	b.n	8008456 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_UART_Receive_DMA+0x34>
 80083e8:	2302      	movs	r3, #2
 80083ea:	e034      	b.n	8008456 <HAL_UART_Receive_DMA+0x9e>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a18      	ldr	r2, [pc, #96]	; (8008460 <HAL_UART_Receive_DMA+0xa8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d01f      	beq.n	8008444 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d018      	beq.n	8008444 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	e853 3f00 	ldrex	r3, [r3]
 800841e:	613b      	str	r3, [r7, #16]
   return(result);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	623b      	str	r3, [r7, #32]
 8008432:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008434:	69f9      	ldr	r1, [r7, #28]
 8008436:	6a3a      	ldr	r2, [r7, #32]
 8008438:	e841 2300 	strex	r3, r2, [r1]
 800843c:	61bb      	str	r3, [r7, #24]
   return(result);
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1e6      	bne.n	8008412 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	461a      	mov	r2, r3
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 ffd4 	bl	80093f8 <UART_Start_Receive_DMA>
 8008450:	4603      	mov	r3, r0
 8008452:	e000      	b.n	8008456 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008454:	2302      	movs	r3, #2
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3728      	adds	r7, #40	; 0x28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	40008000 	.word	0x40008000

08008464 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b0ba      	sub	sp, #232	; 0xe8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800848a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800848e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008492:	4013      	ands	r3, r2
 8008494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008498:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800849c:	2b00      	cmp	r3, #0
 800849e:	d115      	bne.n	80084cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00f      	beq.n	80084cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b0:	f003 0320 	and.w	r3, r3, #32
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 82a6 	beq.w	8008a0e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
      }
      return;
 80084ca:	e2a0      	b.n	8008a0e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80084cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8117 	beq.w	8008704 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d106      	bne.n	80084f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084e6:	4b85      	ldr	r3, [pc, #532]	; (80086fc <HAL_UART_IRQHandler+0x298>)
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 810a 	beq.w	8008704 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d011      	beq.n	8008520 <HAL_UART_IRQHandler+0xbc>
 80084fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2201      	movs	r2, #1
 800850e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d011      	beq.n	8008550 <HAL_UART_IRQHandler+0xec>
 800852c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2202      	movs	r2, #2
 800853e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008546:	f043 0204 	orr.w	r2, r3, #4
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d011      	beq.n	8008580 <HAL_UART_IRQHandler+0x11c>
 800855c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2204      	movs	r2, #4
 800856e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008576:	f043 0202 	orr.w	r2, r3, #2
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008584:	f003 0308 	and.w	r3, r3, #8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d017      	beq.n	80085bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800858c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008590:	f003 0320 	and.w	r3, r3, #32
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800859c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2208      	movs	r2, #8
 80085aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085b2:	f043 0208 	orr.w	r2, r3, #8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d012      	beq.n	80085ee <HAL_UART_IRQHandler+0x18a>
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00c      	beq.n	80085ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e4:	f043 0220 	orr.w	r2, r3, #32
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 820c 	beq.w	8008a12 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fe:	f003 0320 	and.w	r3, r3, #32
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00d      	beq.n	8008622 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d007      	beq.n	8008622 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008628:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008636:	2b40      	cmp	r3, #64	; 0x40
 8008638:	d005      	beq.n	8008646 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800863a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800863e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008642:	2b00      	cmp	r3, #0
 8008644:	d04f      	beq.n	80086e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 ffa2 	bl	8009590 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d141      	bne.n	80086de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3308      	adds	r3, #8
 8008660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	3308      	adds	r3, #8
 8008682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800868a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800869e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1d9      	bne.n	800865a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d013      	beq.n	80086d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b2:	4a13      	ldr	r2, [pc, #76]	; (8008700 <HAL_UART_IRQHandler+0x29c>)
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fd fa9c 	bl	8005bf8 <HAL_DMA_Abort_IT>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d017      	beq.n	80086f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	e00f      	b.n	80086f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f9b0 	bl	8008a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086dc:	e00b      	b.n	80086f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f9ac 	bl	8008a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e4:	e007      	b.n	80086f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f9a8 	bl	8008a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80086f4:	e18d      	b.n	8008a12 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f6:	bf00      	nop
    return;
 80086f8:	e18b      	b.n	8008a12 <HAL_UART_IRQHandler+0x5ae>
 80086fa:	bf00      	nop
 80086fc:	04000120 	.word	0x04000120
 8008700:	0800982f 	.word	0x0800982f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008708:	2b01      	cmp	r3, #1
 800870a:	f040 8146 	bne.w	800899a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 813f 	beq.w	800899a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 0310 	and.w	r3, r3, #16
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8138 	beq.w	800899a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2210      	movs	r2, #16
 8008730:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	f040 80b4 	bne.w	80088aa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800874e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 815f 	beq.w	8008a16 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800875e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008762:	429a      	cmp	r2, r3
 8008764:	f080 8157 	bcs.w	8008a16 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800876e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	f040 8085 	bne.w	800888e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800879c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80087b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80087ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1da      	bne.n	8008784 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e0:	f023 0301 	bic.w	r3, r3, #1
 80087e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80087f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087fe:	e841 2300 	strex	r3, r2, [r1]
 8008802:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1e1      	bne.n	80087ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800881a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800881c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	3308      	adds	r3, #8
 800882a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800882e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008830:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008834:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e3      	bne.n	800880a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800885c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885e:	f023 0310 	bic.w	r3, r3, #16
 8008862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008870:	65bb      	str	r3, [r7, #88]	; 0x58
 8008872:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800887e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e4      	bne.n	800884e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008888:	4618      	mov	r0, r3
 800888a:	f7fd f977 	bl	8005b7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800889a:	b29b      	uxth	r3, r3
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	b29b      	uxth	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fa fd38 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088a8:	e0b5      	b.n	8008a16 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 80a7 	beq.w	8008a1a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80088cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80a2 	beq.w	8008a1a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80088f8:	647b      	str	r3, [r7, #68]	; 0x44
 80088fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	623b      	str	r3, [r7, #32]
   return(result);
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008930:	633a      	str	r2, [r7, #48]	; 0x30
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008938:	e841 2300 	strex	r3, r2, [r1]
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1e3      	bne.n	800890c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2220      	movs	r2, #32
 8008948:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	60fb      	str	r3, [r7, #12]
   return(result);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f023 0310 	bic.w	r3, r3, #16
 800896a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008978:	61fb      	str	r3, [r7, #28]
 800897a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	69b9      	ldr	r1, [r7, #24]
 800897e:	69fa      	ldr	r2, [r7, #28]
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	617b      	str	r3, [r7, #20]
   return(result);
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e4      	bne.n	8008956 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800898c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fa fcc0 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008998:	e03f      	b.n	8008a1a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800899e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <HAL_UART_IRQHandler+0x560>
 80089a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d008      	beq.n	80089c4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f8d6 	bl	8009b6e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089c2:	e02d      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00e      	beq.n	80089ee <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01c      	beq.n	8008a1e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	4798      	blx	r3
    }
    return;
 80089ec:	e017      	b.n	8008a1e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d012      	beq.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
 80089fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00c      	beq.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 ff27 	bl	800985a <UART_EndTransmit_IT>
    return;
 8008a0c:	e008      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008a0e:	bf00      	nop
 8008a10:	e006      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008a12:	bf00      	nop
 8008a14:	e004      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008a16:	bf00      	nop
 8008a18:	e002      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008a1a:	bf00      	nop
 8008a1c:	e000      	b.n	8008a20 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008a1e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008a20:	37e8      	adds	r7, #232	; 0xe8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop

08008a28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a54:	b08a      	sub	sp, #40	; 0x28
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b9e      	ldr	r3, [pc, #632]	; (8008cf8 <UART_SetConfig+0x2a8>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	6812      	ldr	r2, [r2, #0]
 8008a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68da      	ldr	r2, [r3, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a93      	ldr	r2, [pc, #588]	; (8008cfc <UART_SetConfig+0x2ac>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d004      	beq.n	8008abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008acc:	430a      	orrs	r2, r1
 8008ace:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a8a      	ldr	r2, [pc, #552]	; (8008d00 <UART_SetConfig+0x2b0>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d126      	bne.n	8008b28 <UART_SetConfig+0xd8>
 8008ada:	4b8a      	ldr	r3, [pc, #552]	; (8008d04 <UART_SetConfig+0x2b4>)
 8008adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d81b      	bhi.n	8008b20 <UART_SetConfig+0xd0>
 8008ae8:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <UART_SetConfig+0xa0>)
 8008aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aee:	bf00      	nop
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b11 	.word	0x08008b11
 8008af8:	08008b09 	.word	0x08008b09
 8008afc:	08008b19 	.word	0x08008b19
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b06:	e0ab      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b0e:	e0a7      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b10:	2304      	movs	r3, #4
 8008b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b16:	e0a3      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b18:	2308      	movs	r3, #8
 8008b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b1e:	e09f      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b20:	2310      	movs	r3, #16
 8008b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b26:	e09b      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a76      	ldr	r2, [pc, #472]	; (8008d08 <UART_SetConfig+0x2b8>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d138      	bne.n	8008ba4 <UART_SetConfig+0x154>
 8008b32:	4b74      	ldr	r3, [pc, #464]	; (8008d04 <UART_SetConfig+0x2b4>)
 8008b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b38:	f003 030c 	and.w	r3, r3, #12
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	d82d      	bhi.n	8008b9c <UART_SetConfig+0x14c>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <UART_SetConfig+0xf8>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b7d 	.word	0x08008b7d
 8008b4c:	08008b9d 	.word	0x08008b9d
 8008b50:	08008b9d 	.word	0x08008b9d
 8008b54:	08008b9d 	.word	0x08008b9d
 8008b58:	08008b8d 	.word	0x08008b8d
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008b9d 	.word	0x08008b9d
 8008b64:	08008b9d 	.word	0x08008b9d
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b9d 	.word	0x08008b9d
 8008b70:	08008b9d 	.word	0x08008b9d
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008b95 	.word	0x08008b95
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b82:	e06d      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b84:	2302      	movs	r3, #2
 8008b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b8a:	e069      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b8c:	2304      	movs	r3, #4
 8008b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b92:	e065      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b94:	2308      	movs	r3, #8
 8008b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b9a:	e061      	b.n	8008c60 <UART_SetConfig+0x210>
 8008b9c:	2310      	movs	r3, #16
 8008b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ba2:	e05d      	b.n	8008c60 <UART_SetConfig+0x210>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a58      	ldr	r2, [pc, #352]	; (8008d0c <UART_SetConfig+0x2bc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d125      	bne.n	8008bfa <UART_SetConfig+0x1aa>
 8008bae:	4b55      	ldr	r3, [pc, #340]	; (8008d04 <UART_SetConfig+0x2b4>)
 8008bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008bb8:	2b30      	cmp	r3, #48	; 0x30
 8008bba:	d016      	beq.n	8008bea <UART_SetConfig+0x19a>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d818      	bhi.n	8008bf2 <UART_SetConfig+0x1a2>
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d00a      	beq.n	8008bda <UART_SetConfig+0x18a>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d814      	bhi.n	8008bf2 <UART_SetConfig+0x1a2>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <UART_SetConfig+0x182>
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d008      	beq.n	8008be2 <UART_SetConfig+0x192>
 8008bd0:	e00f      	b.n	8008bf2 <UART_SetConfig+0x1a2>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bd8:	e042      	b.n	8008c60 <UART_SetConfig+0x210>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be0:	e03e      	b.n	8008c60 <UART_SetConfig+0x210>
 8008be2:	2304      	movs	r3, #4
 8008be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008be8:	e03a      	b.n	8008c60 <UART_SetConfig+0x210>
 8008bea:	2308      	movs	r3, #8
 8008bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf0:	e036      	b.n	8008c60 <UART_SetConfig+0x210>
 8008bf2:	2310      	movs	r3, #16
 8008bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008bf8:	e032      	b.n	8008c60 <UART_SetConfig+0x210>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a3f      	ldr	r2, [pc, #252]	; (8008cfc <UART_SetConfig+0x2ac>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d12a      	bne.n	8008c5a <UART_SetConfig+0x20a>
 8008c04:	4b3f      	ldr	r3, [pc, #252]	; (8008d04 <UART_SetConfig+0x2b4>)
 8008c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c0a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c12:	d01a      	beq.n	8008c4a <UART_SetConfig+0x1fa>
 8008c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c18:	d81b      	bhi.n	8008c52 <UART_SetConfig+0x202>
 8008c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1e:	d00c      	beq.n	8008c3a <UART_SetConfig+0x1ea>
 8008c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c24:	d815      	bhi.n	8008c52 <UART_SetConfig+0x202>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <UART_SetConfig+0x1e2>
 8008c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2e:	d008      	beq.n	8008c42 <UART_SetConfig+0x1f2>
 8008c30:	e00f      	b.n	8008c52 <UART_SetConfig+0x202>
 8008c32:	2300      	movs	r3, #0
 8008c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c38:	e012      	b.n	8008c60 <UART_SetConfig+0x210>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c40:	e00e      	b.n	8008c60 <UART_SetConfig+0x210>
 8008c42:	2304      	movs	r3, #4
 8008c44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c48:	e00a      	b.n	8008c60 <UART_SetConfig+0x210>
 8008c4a:	2308      	movs	r3, #8
 8008c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c50:	e006      	b.n	8008c60 <UART_SetConfig+0x210>
 8008c52:	2310      	movs	r3, #16
 8008c54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c58:	e002      	b.n	8008c60 <UART_SetConfig+0x210>
 8008c5a:	2310      	movs	r3, #16
 8008c5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a25      	ldr	r2, [pc, #148]	; (8008cfc <UART_SetConfig+0x2ac>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	f040 808a 	bne.w	8008d80 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d824      	bhi.n	8008cbe <UART_SetConfig+0x26e>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <UART_SetConfig+0x22c>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ca1 	.word	0x08008ca1
 8008c80:	08008cbf 	.word	0x08008cbf
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008cbf 	.word	0x08008cbf
 8008c8c:	08008caf 	.word	0x08008caf
 8008c90:	08008cbf 	.word	0x08008cbf
 8008c94:	08008cbf 	.word	0x08008cbf
 8008c98:	08008cbf 	.word	0x08008cbf
 8008c9c:	08008cb7 	.word	0x08008cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ca0:	f7fe f944 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8008ca4:	61f8      	str	r0, [r7, #28]
        break;
 8008ca6:	e010      	b.n	8008cca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ca8:	4b19      	ldr	r3, [pc, #100]	; (8008d10 <UART_SetConfig+0x2c0>)
 8008caa:	61fb      	str	r3, [r7, #28]
        break;
 8008cac:	e00d      	b.n	8008cca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cae:	f7fe f8a7 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8008cb2:	61f8      	str	r0, [r7, #28]
        break;
 8008cb4:	e009      	b.n	8008cca <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cba:	61fb      	str	r3, [r7, #28]
        break;
 8008cbc:	e005      	b.n	8008cca <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8109 	beq.w	8008ee4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4413      	add	r3, r2
 8008cdc:	69fa      	ldr	r2, [r7, #28]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d305      	bcc.n	8008cee <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ce8:	69fa      	ldr	r2, [r7, #28]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d912      	bls.n	8008d14 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008cf4:	e0f6      	b.n	8008ee4 <UART_SetConfig+0x494>
 8008cf6:	bf00      	nop
 8008cf8:	efff69f3 	.word	0xefff69f3
 8008cfc:	40008000 	.word	0x40008000
 8008d00:	40013800 	.word	0x40013800
 8008d04:	40021000 	.word	0x40021000
 8008d08:	40004400 	.word	0x40004400
 8008d0c:	40004800 	.word	0x40004800
 8008d10:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	2200      	movs	r2, #0
 8008d18:	461c      	mov	r4, r3
 8008d1a:	4615      	mov	r5, r2
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	022b      	lsls	r3, r5, #8
 8008d26:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008d2a:	0222      	lsls	r2, r4, #8
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	6849      	ldr	r1, [r1, #4]
 8008d30:	0849      	lsrs	r1, r1, #1
 8008d32:	2000      	movs	r0, #0
 8008d34:	4688      	mov	r8, r1
 8008d36:	4681      	mov	r9, r0
 8008d38:	eb12 0a08 	adds.w	sl, r2, r8
 8008d3c:	eb43 0b09 	adc.w	fp, r3, r9
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	603b      	str	r3, [r7, #0]
 8008d48:	607a      	str	r2, [r7, #4]
 8008d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d4e:	4650      	mov	r0, sl
 8008d50:	4659      	mov	r1, fp
 8008d52:	f7f7 ff79 	bl	8000c48 <__aeabi_uldivmod>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d64:	d308      	bcc.n	8008d78 <UART_SetConfig+0x328>
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d6c:	d204      	bcs.n	8008d78 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	60da      	str	r2, [r3, #12]
 8008d76:	e0b5      	b.n	8008ee4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d7e:	e0b1      	b.n	8008ee4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d88:	d15d      	bne.n	8008e46 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8008d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d827      	bhi.n	8008de2 <UART_SetConfig+0x392>
 8008d92:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <UART_SetConfig+0x348>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dc5 	.word	0x08008dc5
 8008da0:	08008dcd 	.word	0x08008dcd
 8008da4:	08008de3 	.word	0x08008de3
 8008da8:	08008dd3 	.word	0x08008dd3
 8008dac:	08008de3 	.word	0x08008de3
 8008db0:	08008de3 	.word	0x08008de3
 8008db4:	08008de3 	.word	0x08008de3
 8008db8:	08008ddb 	.word	0x08008ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dbc:	f7fe f8b6 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8008dc0:	61f8      	str	r0, [r7, #28]
        break;
 8008dc2:	e014      	b.n	8008dee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc4:	f7fe f8c8 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 8008dc8:	61f8      	str	r0, [r7, #28]
        break;
 8008dca:	e010      	b.n	8008dee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dcc:	4b4c      	ldr	r3, [pc, #304]	; (8008f00 <UART_SetConfig+0x4b0>)
 8008dce:	61fb      	str	r3, [r7, #28]
        break;
 8008dd0:	e00d      	b.n	8008dee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd2:	f7fe f815 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8008dd6:	61f8      	str	r0, [r7, #28]
        break;
 8008dd8:	e009      	b.n	8008dee <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dde:	61fb      	str	r3, [r7, #28]
        break;
 8008de0:	e005      	b.n	8008dee <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008dec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d077      	beq.n	8008ee4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	005a      	lsls	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	085b      	lsrs	r3, r3, #1
 8008dfe:	441a      	add	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b0f      	cmp	r3, #15
 8008e0e:	d916      	bls.n	8008e3e <UART_SetConfig+0x3ee>
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e16:	d212      	bcs.n	8008e3e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f023 030f 	bic.w	r3, r3, #15
 8008e20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	085b      	lsrs	r3, r3, #1
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	8afb      	ldrh	r3, [r7, #22]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	8afa      	ldrh	r2, [r7, #22]
 8008e3a:	60da      	str	r2, [r3, #12]
 8008e3c:	e052      	b.n	8008ee4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008e44:	e04e      	b.n	8008ee4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d827      	bhi.n	8008e9e <UART_SetConfig+0x44e>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x404>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e81 	.word	0x08008e81
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	08008e9f 	.word	0x08008e9f
 8008e64:	08008e8f 	.word	0x08008e8f
 8008e68:	08008e9f 	.word	0x08008e9f
 8008e6c:	08008e9f 	.word	0x08008e9f
 8008e70:	08008e9f 	.word	0x08008e9f
 8008e74:	08008e97 	.word	0x08008e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e78:	f7fe f858 	bl	8006f2c <HAL_RCC_GetPCLK1Freq>
 8008e7c:	61f8      	str	r0, [r7, #28]
        break;
 8008e7e:	e014      	b.n	8008eaa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e80:	f7fe f86a 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 8008e84:	61f8      	str	r0, [r7, #28]
        break;
 8008e86:	e010      	b.n	8008eaa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e88:	4b1d      	ldr	r3, [pc, #116]	; (8008f00 <UART_SetConfig+0x4b0>)
 8008e8a:	61fb      	str	r3, [r7, #28]
        break;
 8008e8c:	e00d      	b.n	8008eaa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e8e:	f7fd ffb7 	bl	8006e00 <HAL_RCC_GetSysClockFreq>
 8008e92:	61f8      	str	r0, [r7, #28]
        break;
 8008e94:	e009      	b.n	8008eaa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e9a:	61fb      	str	r3, [r7, #28]
        break;
 8008e9c:	e005      	b.n	8008eaa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ea8:	bf00      	nop
    }

    if (pclk != 0U)
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d019      	beq.n	8008ee4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	085a      	lsrs	r2, r3, #1
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d909      	bls.n	8008ede <UART_SetConfig+0x48e>
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d205      	bcs.n	8008ede <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	b29a      	uxth	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60da      	str	r2, [r3, #12]
 8008edc:	e002      	b.n	8008ee4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008ef0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3728      	adds	r7, #40	; 0x28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008efe:	bf00      	nop
 8008f00:	00f42400 	.word	0x00f42400

08008f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	f003 0304 	and.w	r3, r3, #4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	f003 0308 	and.w	r3, r3, #8
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	f003 0310 	and.w	r3, r3, #16
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	f003 0320 	and.w	r3, r3, #32
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d01a      	beq.n	800901a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009002:	d10a      	bne.n	800901a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	430a      	orrs	r2, r1
 8009018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00a      	beq.n	800903c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	430a      	orrs	r2, r1
 800903a:	605a      	str	r2, [r3, #4]
  }
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009058:	f7fa fd88 	bl	8003b6c <HAL_GetTick>
 800905c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b08      	cmp	r3, #8
 800906a:	d10e      	bne.n	800908a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800906c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f82d 	bl	80090da <UART_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e023      	b.n	80090d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b04      	cmp	r3, #4
 8009096:	d10e      	bne.n	80090b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f817 	bl	80090da <UART_WaitOnFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e00d      	b.n	80090d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2220      	movs	r2, #32
 80090ba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b09c      	sub	sp, #112	; 0x70
 80090de:	af00      	add	r7, sp, #0
 80090e0:	60f8      	str	r0, [r7, #12]
 80090e2:	60b9      	str	r1, [r7, #8]
 80090e4:	603b      	str	r3, [r7, #0]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ea:	e0a5      	b.n	8009238 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	f000 80a1 	beq.w	8009238 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f6:	f7fa fd39 	bl	8003b6c <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009102:	429a      	cmp	r2, r3
 8009104:	d302      	bcc.n	800910c <UART_WaitOnFlagUntilTimeout+0x32>
 8009106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009108:	2b00      	cmp	r3, #0
 800910a:	d13e      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800911a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009120:	667b      	str	r3, [r7, #100]	; 0x64
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800912a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800912c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e6      	bne.n	800910c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3308      	adds	r3, #8
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	663b      	str	r3, [r7, #96]	; 0x60
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800915e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800916c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e5      	bne.n	800913e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2220      	movs	r2, #32
 800917c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e067      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0304 	and.w	r3, r3, #4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d04f      	beq.n	8009238 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091a6:	d147      	bne.n	8009238 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091b0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e6      	bne.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	e853 3f00 	ldrex	r3, [r3]
 80091f2:	613b      	str	r3, [r7, #16]
   return(result);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f023 0301 	bic.w	r3, r3, #1
 80091fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3308      	adds	r3, #8
 8009202:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009204:	623a      	str	r2, [r7, #32]
 8009206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009208:	69f9      	ldr	r1, [r7, #28]
 800920a:	6a3a      	ldr	r2, [r7, #32]
 800920c:	e841 2300 	strex	r3, r2, [r1]
 8009210:	61bb      	str	r3, [r7, #24]
   return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e5      	bne.n	80091e4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2220      	movs	r2, #32
 800921c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2220      	movs	r2, #32
 8009222:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e010      	b.n	800925a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69da      	ldr	r2, [r3, #28]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4013      	ands	r3, r2
 8009242:	68ba      	ldr	r2, [r7, #8]
 8009244:	429a      	cmp	r2, r3
 8009246:	bf0c      	ite	eq
 8009248:	2301      	moveq	r3, #1
 800924a:	2300      	movne	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	461a      	mov	r2, r3
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	429a      	cmp	r2, r3
 8009254:	f43f af4a 	beq.w	80090ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3770      	adds	r7, #112	; 0x70
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009264:	b480      	push	{r7}
 8009266:	b097      	sub	sp, #92	; 0x5c
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	4613      	mov	r3, r2
 8009270:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	88fa      	ldrh	r2, [r7, #6]
 800927c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	88fa      	ldrh	r2, [r7, #6]
 8009284:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009296:	d10e      	bne.n	80092b6 <UART_Start_Receive_IT+0x52>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d105      	bne.n	80092ac <UART_Start_Receive_IT+0x48>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80092a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092aa:	e02d      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	22ff      	movs	r2, #255	; 0xff
 80092b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092b4:	e028      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <UART_Start_Receive_IT+0x76>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <UART_Start_Receive_IT+0x6c>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	22ff      	movs	r2, #255	; 0xff
 80092ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092ce:	e01b      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	227f      	movs	r2, #127	; 0x7f
 80092d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092d8:	e016      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092e2:	d10d      	bne.n	8009300 <UART_Start_Receive_IT+0x9c>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <UART_Start_Receive_IT+0x92>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	227f      	movs	r2, #127	; 0x7f
 80092f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092f4:	e008      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	223f      	movs	r2, #63	; 0x3f
 80092fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80092fe:	e003      	b.n	8009308 <UART_Start_Receive_IT+0xa4>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2222      	movs	r2, #34	; 0x22
 8009314:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3308      	adds	r3, #8
 800931c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	657b      	str	r3, [r7, #84]	; 0x54
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3308      	adds	r3, #8
 8009334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009336:	64ba      	str	r2, [r7, #72]	; 0x48
 8009338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800933c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e5      	bne.n	8009316 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009352:	d107      	bne.n	8009364 <UART_Start_Receive_IT+0x100>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	4a24      	ldr	r2, [pc, #144]	; (80093f0 <UART_Start_Receive_IT+0x18c>)
 8009360:	665a      	str	r2, [r3, #100]	; 0x64
 8009362:	e002      	b.n	800936a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4a23      	ldr	r2, [pc, #140]	; (80093f4 <UART_Start_Receive_IT+0x190>)
 8009368:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d019      	beq.n	80093ae <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	e853 3f00 	ldrex	r3, [r3]
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800938e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
 800939a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800939e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a0:	e841 2300 	strex	r3, r2, [r1]
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1e6      	bne.n	800937a <UART_Start_Receive_IT+0x116>
 80093ac:	e018      	b.n	80093e0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	613b      	str	r3, [r7, #16]
   return(result);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f043 0320 	orr.w	r3, r3, #32
 80093c2:	653b      	str	r3, [r7, #80]	; 0x50
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	461a      	mov	r2, r3
 80093ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093cc:	623b      	str	r3, [r7, #32]
 80093ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d0:	69f9      	ldr	r1, [r7, #28]
 80093d2:	6a3a      	ldr	r2, [r7, #32]
 80093d4:	e841 2300 	strex	r3, r2, [r1]
 80093d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e6      	bne.n	80093ae <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	375c      	adds	r7, #92	; 0x5c
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	08009a0f 	.word	0x08009a0f
 80093f4:	080098af 	.word	0x080098af

080093f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b096      	sub	sp, #88	; 0x58
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2222      	movs	r2, #34	; 0x22
 8009420:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02b      	beq.n	8009482 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942e:	4a42      	ldr	r2, [pc, #264]	; (8009538 <UART_Start_Receive_DMA+0x140>)
 8009430:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009436:	4a41      	ldr	r2, [pc, #260]	; (800953c <UART_Start_Receive_DMA+0x144>)
 8009438:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943e:	4a40      	ldr	r2, [pc, #256]	; (8009540 <UART_Start_Receive_DMA+0x148>)
 8009440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009446:	2200      	movs	r2, #0
 8009448:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3324      	adds	r3, #36	; 0x24
 8009454:	4619      	mov	r1, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945a:	461a      	mov	r2, r3
 800945c:	88fb      	ldrh	r3, [r7, #6]
 800945e:	f7fc fb2d 	bl	8005abc <HAL_DMA_Start_IT>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00c      	beq.n	8009482 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2210      	movs	r2, #16
 800946c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2220      	movs	r2, #32
 800947c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e055      	b.n	800952e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	691b      	ldr	r3, [r3, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d018      	beq.n	80094c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949a:	e853 3f00 	ldrex	r3, [r3]
 800949e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	657b      	str	r3, [r7, #84]	; 0x54
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094b8:	e841 2300 	strex	r3, r2, [r1]
 80094bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80094be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1e6      	bne.n	8009492 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3308      	adds	r3, #8
 80094ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	f043 0301 	orr.w	r3, r3, #1
 80094da:	653b      	str	r3, [r7, #80]	; 0x50
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094e4:	637a      	str	r2, [r7, #52]	; 0x34
 80094e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e5      	bne.n	80094c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3308      	adds	r3, #8
 80094fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009518:	623a      	str	r2, [r7, #32]
 800951a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	6a3a      	ldr	r2, [r7, #32]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	61bb      	str	r3, [r7, #24]
   return(result);
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e5      	bne.n	80094f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3758      	adds	r7, #88	; 0x58
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	08009657 	.word	0x08009657
 800953c:	0800977b 	.word	0x0800977b
 8009540:	080097b3 	.word	0x080097b3

08009544 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b089      	sub	sp, #36	; 0x24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956e:	6979      	ldr	r1, [r7, #20]
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	e841 2300 	strex	r3, r2, [r1]
 8009576:	613b      	str	r3, [r7, #16]
   return(result);
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1e6      	bne.n	800954c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2220      	movs	r2, #32
 8009582:	679a      	str	r2, [r3, #120]	; 0x78
}
 8009584:	bf00      	nop
 8009586:	3724      	adds	r7, #36	; 0x24
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009590:	b480      	push	{r7}
 8009592:	b095      	sub	sp, #84	; 0x54
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b6:	643b      	str	r3, [r7, #64]	; 0x40
 80095b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e6      	bne.n	8009598 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	3308      	adds	r3, #8
 80095d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	e853 3f00 	ldrex	r3, [r3]
 80095d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	f023 0301 	bic.w	r3, r3, #1
 80095e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	3308      	adds	r3, #8
 80095e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80095f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f2:	e841 2300 	strex	r3, r2, [r1]
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1e5      	bne.n	80095ca <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009602:	2b01      	cmp	r3, #1
 8009604:	d118      	bne.n	8009638 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	60bb      	str	r3, [r7, #8]
   return(result);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f023 0310 	bic.w	r3, r3, #16
 800961a:	647b      	str	r3, [r7, #68]	; 0x44
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	613b      	str	r3, [r7, #16]
   return(result);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e6      	bne.n	8009606 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2220      	movs	r2, #32
 800963c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	665a      	str	r2, [r3, #100]	; 0x64
}
 800964a:	bf00      	nop
 800964c:	3754      	adds	r7, #84	; 0x54
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b09c      	sub	sp, #112	; 0x70
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d170      	bne.n	8009754 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8009672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009674:	2200      	movs	r2, #0
 8009676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800967a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800968e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009698:	65bb      	str	r3, [r7, #88]	; 0x58
 800969a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800969e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3308      	adds	r3, #8
 80096b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096be:	f023 0301 	bic.w	r3, r3, #1
 80096c2:	667b      	str	r3, [r7, #100]	; 0x64
 80096c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	3308      	adds	r3, #8
 80096ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80096cc:	647a      	str	r2, [r7, #68]	; 0x44
 80096ce:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e5      	bne.n	80096ac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3308      	adds	r3, #8
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	623b      	str	r3, [r7, #32]
   return(result);
 80096f0:	6a3b      	ldr	r3, [r7, #32]
 80096f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096f6:	663b      	str	r3, [r7, #96]	; 0x60
 80096f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009700:	633a      	str	r2, [r7, #48]	; 0x30
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e5      	bne.n	80096e0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009716:	2220      	movs	r2, #32
 8009718:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800971e:	2b01      	cmp	r3, #1
 8009720:	d118      	bne.n	8009754 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f023 0310 	bic.w	r3, r3, #16
 8009736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009740:	61fb      	str	r3, [r7, #28]
 8009742:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	69b9      	ldr	r1, [r7, #24]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	617b      	str	r3, [r7, #20]
   return(result);
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009758:	2b01      	cmp	r3, #1
 800975a:	d107      	bne.n	800976c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800975c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800975e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009762:	4619      	mov	r1, r3
 8009764:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009766:	f7f9 fdd7 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800976a:	e002      	b.n	8009772 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800976c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800976e:	f7f9 fdb9 	bl	80032e4 <HAL_UART_RxCpltCallback>
}
 8009772:	bf00      	nop
 8009774:	3770      	adds	r7, #112	; 0x70
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978c:	2b01      	cmp	r3, #1
 800978e:	d109      	bne.n	80097a4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009796:	085b      	lsrs	r3, r3, #1
 8009798:	b29b      	uxth	r3, r3
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7f9 fdbb 	bl	8003318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097a2:	e002      	b.n	80097aa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff f93f 	bl	8008a28 <HAL_UART_RxHalfCpltCallback>
}
 80097aa:	bf00      	nop
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097d6:	2b80      	cmp	r3, #128	; 0x80
 80097d8:	d109      	bne.n	80097ee <UART_DMAError+0x3c>
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	2b21      	cmp	r3, #33	; 0x21
 80097de:	d106      	bne.n	80097ee <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80097e8:	6978      	ldr	r0, [r7, #20]
 80097ea:	f7ff feab 	bl	8009544 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097f8:	2b40      	cmp	r3, #64	; 0x40
 80097fa:	d109      	bne.n	8009810 <UART_DMAError+0x5e>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2b22      	cmp	r3, #34	; 0x22
 8009800:	d106      	bne.n	8009810 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2200      	movs	r2, #0
 8009806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800980a:	6978      	ldr	r0, [r7, #20]
 800980c:	f7ff fec0 	bl	8009590 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009816:	f043 0210 	orr.w	r2, r3, #16
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009820:	6978      	ldr	r0, [r7, #20]
 8009822:	f7ff f90b 	bl	8008a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009826:	bf00      	nop
 8009828:	3718      	adds	r7, #24
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f7ff f8f5 	bl	8008a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009852:	bf00      	nop
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	e853 3f00 	ldrex	r3, [r3]
 800986e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009884:	6979      	ldr	r1, [r7, #20]
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	e841 2300 	strex	r3, r2, [r1]
 800988c:	613b      	str	r3, [r7, #16]
   return(result);
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e6      	bne.n	8009862 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7f9 fd45 	bl	8003330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a6:	bf00      	nop
 80098a8:	3720      	adds	r7, #32
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b096      	sub	sp, #88	; 0x58
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80098bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c4:	2b22      	cmp	r3, #34	; 0x22
 80098c6:	f040 8094 	bne.w	80099f2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80098d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80098d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80098d8:	b2d9      	uxtb	r1, r3
 80098da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	400a      	ands	r2, r1
 80098e6:	b2d2      	uxtb	r2, r2
 80098e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ee:	1c5a      	adds	r2, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d179      	bne.n	8009a06 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	e853 3f00 	ldrex	r3, [r3]
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009926:	653b      	str	r3, [r7, #80]	; 0x50
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	461a      	mov	r2, r3
 800992e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009930:	647b      	str	r3, [r7, #68]	; 0x44
 8009932:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009938:	e841 2300 	strex	r3, r2, [r1]
 800993c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800993e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1e6      	bne.n	8009912 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	e853 3f00 	ldrex	r3, [r3]
 8009952:	623b      	str	r3, [r7, #32]
   return(result);
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f023 0301 	bic.w	r3, r3, #1
 800995a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3308      	adds	r3, #8
 8009962:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009964:	633a      	str	r2, [r7, #48]	; 0x30
 8009966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800996a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800996c:	e841 2300 	strex	r3, r2, [r1]
 8009970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1e5      	bne.n	8009944 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2220      	movs	r2, #32
 800997c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009988:	2b01      	cmp	r3, #1
 800998a:	d12e      	bne.n	80099ea <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	e853 3f00 	ldrex	r3, [r3]
 800999e:	60fb      	str	r3, [r7, #12]
   return(result);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f023 0310 	bic.w	r3, r3, #16
 80099a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	461a      	mov	r2, r3
 80099ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099b0:	61fb      	str	r3, [r7, #28]
 80099b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	69b9      	ldr	r1, [r7, #24]
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	617b      	str	r3, [r7, #20]
   return(result);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e6      	bne.n	8009992 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	f003 0310 	and.w	r3, r3, #16
 80099ce:	2b10      	cmp	r3, #16
 80099d0:	d103      	bne.n	80099da <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2210      	movs	r2, #16
 80099d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099e0:	4619      	mov	r1, r3
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7f9 fc98 	bl	8003318 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099e8:	e00d      	b.n	8009a06 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7f9 fc7a 	bl	80032e4 <HAL_UART_RxCpltCallback>
}
 80099f0:	e009      	b.n	8009a06 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	8b1b      	ldrh	r3, [r3, #24]
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0208 	orr.w	r2, r2, #8
 8009a02:	b292      	uxth	r2, r2
 8009a04:	831a      	strh	r2, [r3, #24]
}
 8009a06:	bf00      	nop
 8009a08:	3758      	adds	r7, #88	; 0x58
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b096      	sub	sp, #88	; 0x58
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a24:	2b22      	cmp	r3, #34	; 0x22
 8009a26:	f040 8094 	bne.w	8009b52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009a30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009a3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009a42:	4013      	ands	r3, r2
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	1c9a      	adds	r2, r3, #2
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d179      	bne.n	8009b66 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a90:	643b      	str	r3, [r7, #64]	; 0x40
 8009a92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a98:	e841 2300 	strex	r3, r2, [r1]
 8009a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1e6      	bne.n	8009a72 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	6a3b      	ldr	r3, [r7, #32]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f023 0301 	bic.w	r3, r3, #1
 8009aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e5      	bne.n	8009aa4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2220      	movs	r2, #32
 8009adc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d12e      	bne.n	8009b4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f023 0310 	bic.w	r3, r3, #16
 8009b06:	647b      	str	r3, [r7, #68]	; 0x44
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6979      	ldr	r1, [r7, #20]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69db      	ldr	r3, [r3, #28]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b10      	cmp	r3, #16
 8009b30:	d103      	bne.n	8009b3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2210      	movs	r2, #16
 8009b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7f9 fbe8 	bl	8003318 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b48:	e00d      	b.n	8009b66 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7f9 fbca 	bl	80032e4 <HAL_UART_RxCpltCallback>
}
 8009b50:	e009      	b.n	8009b66 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	8b1b      	ldrh	r3, [r3, #24]
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0208 	orr.w	r2, r2, #8
 8009b62:	b292      	uxth	r2, r2
 8009b64:	831a      	strh	r2, [r3, #24]
}
 8009b66:	bf00      	nop
 8009b68:	3758      	adds	r7, #88	; 0x58
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b76:	bf00      	nop
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <__errno>:
 8009b84:	4b01      	ldr	r3, [pc, #4]	; (8009b8c <__errno+0x8>)
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	2000000c 	.word	0x2000000c

08009b90 <__libc_init_array>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	4d0d      	ldr	r5, [pc, #52]	; (8009bc8 <__libc_init_array+0x38>)
 8009b94:	4c0d      	ldr	r4, [pc, #52]	; (8009bcc <__libc_init_array+0x3c>)
 8009b96:	1b64      	subs	r4, r4, r5
 8009b98:	10a4      	asrs	r4, r4, #2
 8009b9a:	2600      	movs	r6, #0
 8009b9c:	42a6      	cmp	r6, r4
 8009b9e:	d109      	bne.n	8009bb4 <__libc_init_array+0x24>
 8009ba0:	4d0b      	ldr	r5, [pc, #44]	; (8009bd0 <__libc_init_array+0x40>)
 8009ba2:	4c0c      	ldr	r4, [pc, #48]	; (8009bd4 <__libc_init_array+0x44>)
 8009ba4:	f003 f812 	bl	800cbcc <_init>
 8009ba8:	1b64      	subs	r4, r4, r5
 8009baa:	10a4      	asrs	r4, r4, #2
 8009bac:	2600      	movs	r6, #0
 8009bae:	42a6      	cmp	r6, r4
 8009bb0:	d105      	bne.n	8009bbe <__libc_init_array+0x2e>
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb8:	4798      	blx	r3
 8009bba:	3601      	adds	r6, #1
 8009bbc:	e7ee      	b.n	8009b9c <__libc_init_array+0xc>
 8009bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc2:	4798      	blx	r3
 8009bc4:	3601      	adds	r6, #1
 8009bc6:	e7f2      	b.n	8009bae <__libc_init_array+0x1e>
 8009bc8:	0800d2e0 	.word	0x0800d2e0
 8009bcc:	0800d2e0 	.word	0x0800d2e0
 8009bd0:	0800d2e0 	.word	0x0800d2e0
 8009bd4:	0800d2e4 	.word	0x0800d2e4

08009bd8 <memcpy>:
 8009bd8:	440a      	add	r2, r1
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be0:	d100      	bne.n	8009be4 <memcpy+0xc>
 8009be2:	4770      	bx	lr
 8009be4:	b510      	push	{r4, lr}
 8009be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bee:	4291      	cmp	r1, r2
 8009bf0:	d1f9      	bne.n	8009be6 <memcpy+0xe>
 8009bf2:	bd10      	pop	{r4, pc}

08009bf4 <memset>:
 8009bf4:	4402      	add	r2, r0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d100      	bne.n	8009bfe <memset+0xa>
 8009bfc:	4770      	bx	lr
 8009bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009c02:	e7f9      	b.n	8009bf8 <memset+0x4>

08009c04 <__cvt>:
 8009c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	ec55 4b10 	vmov	r4, r5, d0
 8009c0c:	2d00      	cmp	r5, #0
 8009c0e:	460e      	mov	r6, r1
 8009c10:	4619      	mov	r1, r3
 8009c12:	462b      	mov	r3, r5
 8009c14:	bfbb      	ittet	lt
 8009c16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c1a:	461d      	movlt	r5, r3
 8009c1c:	2300      	movge	r3, #0
 8009c1e:	232d      	movlt	r3, #45	; 0x2d
 8009c20:	700b      	strb	r3, [r1, #0]
 8009c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c28:	4691      	mov	r9, r2
 8009c2a:	f023 0820 	bic.w	r8, r3, #32
 8009c2e:	bfbc      	itt	lt
 8009c30:	4622      	movlt	r2, r4
 8009c32:	4614      	movlt	r4, r2
 8009c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c38:	d005      	beq.n	8009c46 <__cvt+0x42>
 8009c3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c3e:	d100      	bne.n	8009c42 <__cvt+0x3e>
 8009c40:	3601      	adds	r6, #1
 8009c42:	2102      	movs	r1, #2
 8009c44:	e000      	b.n	8009c48 <__cvt+0x44>
 8009c46:	2103      	movs	r1, #3
 8009c48:	ab03      	add	r3, sp, #12
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	ab02      	add	r3, sp, #8
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	ec45 4b10 	vmov	d0, r4, r5
 8009c54:	4653      	mov	r3, sl
 8009c56:	4632      	mov	r2, r6
 8009c58:	f000 fe16 	bl	800a888 <_dtoa_r>
 8009c5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c60:	4607      	mov	r7, r0
 8009c62:	d102      	bne.n	8009c6a <__cvt+0x66>
 8009c64:	f019 0f01 	tst.w	r9, #1
 8009c68:	d022      	beq.n	8009cb0 <__cvt+0xac>
 8009c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c6e:	eb07 0906 	add.w	r9, r7, r6
 8009c72:	d110      	bne.n	8009c96 <__cvt+0x92>
 8009c74:	783b      	ldrb	r3, [r7, #0]
 8009c76:	2b30      	cmp	r3, #48	; 0x30
 8009c78:	d10a      	bne.n	8009c90 <__cvt+0x8c>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 ff21 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c86:	b918      	cbnz	r0, 8009c90 <__cvt+0x8c>
 8009c88:	f1c6 0601 	rsb	r6, r6, #1
 8009c8c:	f8ca 6000 	str.w	r6, [sl]
 8009c90:	f8da 3000 	ldr.w	r3, [sl]
 8009c94:	4499      	add	r9, r3
 8009c96:	2200      	movs	r2, #0
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	f7f6 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca2:	b108      	cbz	r0, 8009ca8 <__cvt+0xa4>
 8009ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ca8:	2230      	movs	r2, #48	; 0x30
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	454b      	cmp	r3, r9
 8009cae:	d307      	bcc.n	8009cc0 <__cvt+0xbc>
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb4:	1bdb      	subs	r3, r3, r7
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	b004      	add	sp, #16
 8009cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc0:	1c59      	adds	r1, r3, #1
 8009cc2:	9103      	str	r1, [sp, #12]
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	e7f0      	b.n	8009caa <__cvt+0xa6>

08009cc8 <__exponent>:
 8009cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	bfb8      	it	lt
 8009cd0:	4249      	neglt	r1, r1
 8009cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8009cd6:	bfb4      	ite	lt
 8009cd8:	222d      	movlt	r2, #45	; 0x2d
 8009cda:	222b      	movge	r2, #43	; 0x2b
 8009cdc:	2909      	cmp	r1, #9
 8009cde:	7042      	strb	r2, [r0, #1]
 8009ce0:	dd2a      	ble.n	8009d38 <__exponent+0x70>
 8009ce2:	f10d 0407 	add.w	r4, sp, #7
 8009ce6:	46a4      	mov	ip, r4
 8009ce8:	270a      	movs	r7, #10
 8009cea:	46a6      	mov	lr, r4
 8009cec:	460a      	mov	r2, r1
 8009cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cf2:	fb07 1516 	mls	r5, r7, r6, r1
 8009cf6:	3530      	adds	r5, #48	; 0x30
 8009cf8:	2a63      	cmp	r2, #99	; 0x63
 8009cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8009cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d02:	4631      	mov	r1, r6
 8009d04:	dcf1      	bgt.n	8009cea <__exponent+0x22>
 8009d06:	3130      	adds	r1, #48	; 0x30
 8009d08:	f1ae 0502 	sub.w	r5, lr, #2
 8009d0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d10:	1c44      	adds	r4, r0, #1
 8009d12:	4629      	mov	r1, r5
 8009d14:	4561      	cmp	r1, ip
 8009d16:	d30a      	bcc.n	8009d2e <__exponent+0x66>
 8009d18:	f10d 0209 	add.w	r2, sp, #9
 8009d1c:	eba2 020e 	sub.w	r2, r2, lr
 8009d20:	4565      	cmp	r5, ip
 8009d22:	bf88      	it	hi
 8009d24:	2200      	movhi	r2, #0
 8009d26:	4413      	add	r3, r2
 8009d28:	1a18      	subs	r0, r3, r0
 8009d2a:	b003      	add	sp, #12
 8009d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d36:	e7ed      	b.n	8009d14 <__exponent+0x4c>
 8009d38:	2330      	movs	r3, #48	; 0x30
 8009d3a:	3130      	adds	r1, #48	; 0x30
 8009d3c:	7083      	strb	r3, [r0, #2]
 8009d3e:	70c1      	strb	r1, [r0, #3]
 8009d40:	1d03      	adds	r3, r0, #4
 8009d42:	e7f1      	b.n	8009d28 <__exponent+0x60>

08009d44 <_printf_float>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	ed2d 8b02 	vpush	{d8}
 8009d4c:	b08d      	sub	sp, #52	; 0x34
 8009d4e:	460c      	mov	r4, r1
 8009d50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d54:	4616      	mov	r6, r2
 8009d56:	461f      	mov	r7, r3
 8009d58:	4605      	mov	r5, r0
 8009d5a:	f001 fb95 	bl	800b488 <_localeconv_r>
 8009d5e:	f8d0 a000 	ldr.w	sl, [r0]
 8009d62:	4650      	mov	r0, sl
 8009d64:	f7f6 fa34 	bl	80001d0 <strlen>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	f8d8 3000 	ldr.w	r3, [r8]
 8009d74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d78:	3307      	adds	r3, #7
 8009d7a:	f023 0307 	bic.w	r3, r3, #7
 8009d7e:	f103 0208 	add.w	r2, r3, #8
 8009d82:	f8c8 2000 	str.w	r2, [r8]
 8009d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d9c:	ee08 0a10 	vmov	s16, r0
 8009da0:	4b9f      	ldr	r3, [pc, #636]	; (800a020 <_printf_float+0x2dc>)
 8009da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295
 8009daa:	f7f6 febf 	bl	8000b2c <__aeabi_dcmpun>
 8009dae:	bb88      	cbnz	r0, 8009e14 <_printf_float+0xd0>
 8009db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009db4:	4b9a      	ldr	r3, [pc, #616]	; (800a020 <_printf_float+0x2dc>)
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	f7f6 fe99 	bl	8000af0 <__aeabi_dcmple>
 8009dbe:	bb48      	cbnz	r0, 8009e14 <_printf_float+0xd0>
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f7f6 fe88 	bl	8000adc <__aeabi_dcmplt>
 8009dcc:	b110      	cbz	r0, 8009dd4 <_printf_float+0x90>
 8009dce:	232d      	movs	r3, #45	; 0x2d
 8009dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dd4:	4b93      	ldr	r3, [pc, #588]	; (800a024 <_printf_float+0x2e0>)
 8009dd6:	4894      	ldr	r0, [pc, #592]	; (800a028 <_printf_float+0x2e4>)
 8009dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ddc:	bf94      	ite	ls
 8009dde:	4698      	movls	r8, r3
 8009de0:	4680      	movhi	r8, r0
 8009de2:	2303      	movs	r3, #3
 8009de4:	6123      	str	r3, [r4, #16]
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	f023 0204 	bic.w	r2, r3, #4
 8009dec:	6022      	str	r2, [r4, #0]
 8009dee:	f04f 0900 	mov.w	r9, #0
 8009df2:	9700      	str	r7, [sp, #0]
 8009df4:	4633      	mov	r3, r6
 8009df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009df8:	4621      	mov	r1, r4
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	f000 f9d8 	bl	800a1b0 <_printf_common>
 8009e00:	3001      	adds	r0, #1
 8009e02:	f040 8090 	bne.w	8009f26 <_printf_float+0x1e2>
 8009e06:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0a:	b00d      	add	sp, #52	; 0x34
 8009e0c:	ecbd 8b02 	vpop	{d8}
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	4642      	mov	r2, r8
 8009e16:	464b      	mov	r3, r9
 8009e18:	4640      	mov	r0, r8
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	f7f6 fe86 	bl	8000b2c <__aeabi_dcmpun>
 8009e20:	b140      	cbz	r0, 8009e34 <_printf_float+0xf0>
 8009e22:	464b      	mov	r3, r9
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	bfbc      	itt	lt
 8009e28:	232d      	movlt	r3, #45	; 0x2d
 8009e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e2e:	487f      	ldr	r0, [pc, #508]	; (800a02c <_printf_float+0x2e8>)
 8009e30:	4b7f      	ldr	r3, [pc, #508]	; (800a030 <_printf_float+0x2ec>)
 8009e32:	e7d1      	b.n	8009dd8 <_printf_float+0x94>
 8009e34:	6863      	ldr	r3, [r4, #4]
 8009e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e3a:	9206      	str	r2, [sp, #24]
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	d13f      	bne.n	8009ec0 <_printf_float+0x17c>
 8009e40:	2306      	movs	r3, #6
 8009e42:	6063      	str	r3, [r4, #4]
 8009e44:	9b05      	ldr	r3, [sp, #20]
 8009e46:	6861      	ldr	r1, [r4, #4]
 8009e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	ab0a      	add	r3, sp, #40	; 0x28
 8009e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e56:	ab09      	add	r3, sp, #36	; 0x24
 8009e58:	ec49 8b10 	vmov	d0, r8, r9
 8009e5c:	9300      	str	r3, [sp, #0]
 8009e5e:	6022      	str	r2, [r4, #0]
 8009e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e64:	4628      	mov	r0, r5
 8009e66:	f7ff fecd 	bl	8009c04 <__cvt>
 8009e6a:	9b06      	ldr	r3, [sp, #24]
 8009e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e6e:	2b47      	cmp	r3, #71	; 0x47
 8009e70:	4680      	mov	r8, r0
 8009e72:	d108      	bne.n	8009e86 <_printf_float+0x142>
 8009e74:	1cc8      	adds	r0, r1, #3
 8009e76:	db02      	blt.n	8009e7e <_printf_float+0x13a>
 8009e78:	6863      	ldr	r3, [r4, #4]
 8009e7a:	4299      	cmp	r1, r3
 8009e7c:	dd41      	ble.n	8009f02 <_printf_float+0x1be>
 8009e7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e82:	fa5f fb8b 	uxtb.w	fp, fp
 8009e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e8a:	d820      	bhi.n	8009ece <_printf_float+0x18a>
 8009e8c:	3901      	subs	r1, #1
 8009e8e:	465a      	mov	r2, fp
 8009e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e94:	9109      	str	r1, [sp, #36]	; 0x24
 8009e96:	f7ff ff17 	bl	8009cc8 <__exponent>
 8009e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9c:	1813      	adds	r3, r2, r0
 8009e9e:	2a01      	cmp	r2, #1
 8009ea0:	4681      	mov	r9, r0
 8009ea2:	6123      	str	r3, [r4, #16]
 8009ea4:	dc02      	bgt.n	8009eac <_printf_float+0x168>
 8009ea6:	6822      	ldr	r2, [r4, #0]
 8009ea8:	07d2      	lsls	r2, r2, #31
 8009eaa:	d501      	bpl.n	8009eb0 <_printf_float+0x16c>
 8009eac:	3301      	adds	r3, #1
 8009eae:	6123      	str	r3, [r4, #16]
 8009eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d09c      	beq.n	8009df2 <_printf_float+0xae>
 8009eb8:	232d      	movs	r3, #45	; 0x2d
 8009eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ebe:	e798      	b.n	8009df2 <_printf_float+0xae>
 8009ec0:	9a06      	ldr	r2, [sp, #24]
 8009ec2:	2a47      	cmp	r2, #71	; 0x47
 8009ec4:	d1be      	bne.n	8009e44 <_printf_float+0x100>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1bc      	bne.n	8009e44 <_printf_float+0x100>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e7b9      	b.n	8009e42 <_printf_float+0xfe>
 8009ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ed2:	d118      	bne.n	8009f06 <_printf_float+0x1c2>
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	6863      	ldr	r3, [r4, #4]
 8009ed8:	dd0b      	ble.n	8009ef2 <_printf_float+0x1ae>
 8009eda:	6121      	str	r1, [r4, #16]
 8009edc:	b913      	cbnz	r3, 8009ee4 <_printf_float+0x1a0>
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	07d0      	lsls	r0, r2, #31
 8009ee2:	d502      	bpl.n	8009eea <_printf_float+0x1a6>
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	440b      	add	r3, r1
 8009ee8:	6123      	str	r3, [r4, #16]
 8009eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8009eec:	f04f 0900 	mov.w	r9, #0
 8009ef0:	e7de      	b.n	8009eb0 <_printf_float+0x16c>
 8009ef2:	b913      	cbnz	r3, 8009efa <_printf_float+0x1b6>
 8009ef4:	6822      	ldr	r2, [r4, #0]
 8009ef6:	07d2      	lsls	r2, r2, #31
 8009ef8:	d501      	bpl.n	8009efe <_printf_float+0x1ba>
 8009efa:	3302      	adds	r3, #2
 8009efc:	e7f4      	b.n	8009ee8 <_printf_float+0x1a4>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e7f2      	b.n	8009ee8 <_printf_float+0x1a4>
 8009f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f08:	4299      	cmp	r1, r3
 8009f0a:	db05      	blt.n	8009f18 <_printf_float+0x1d4>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	6121      	str	r1, [r4, #16]
 8009f10:	07d8      	lsls	r0, r3, #31
 8009f12:	d5ea      	bpl.n	8009eea <_printf_float+0x1a6>
 8009f14:	1c4b      	adds	r3, r1, #1
 8009f16:	e7e7      	b.n	8009ee8 <_printf_float+0x1a4>
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	bfd4      	ite	le
 8009f1c:	f1c1 0202 	rsble	r2, r1, #2
 8009f20:	2201      	movgt	r2, #1
 8009f22:	4413      	add	r3, r2
 8009f24:	e7e0      	b.n	8009ee8 <_printf_float+0x1a4>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	055a      	lsls	r2, r3, #21
 8009f2a:	d407      	bmi.n	8009f3c <_printf_float+0x1f8>
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	4642      	mov	r2, r8
 8009f30:	4631      	mov	r1, r6
 8009f32:	4628      	mov	r0, r5
 8009f34:	47b8      	blx	r7
 8009f36:	3001      	adds	r0, #1
 8009f38:	d12c      	bne.n	8009f94 <_printf_float+0x250>
 8009f3a:	e764      	b.n	8009e06 <_printf_float+0xc2>
 8009f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f40:	f240 80e0 	bls.w	800a104 <_printf_float+0x3c0>
 8009f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f7f6 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d034      	beq.n	8009fbe <_printf_float+0x27a>
 8009f54:	4a37      	ldr	r2, [pc, #220]	; (800a034 <_printf_float+0x2f0>)
 8009f56:	2301      	movs	r3, #1
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af51 	beq.w	8009e06 <_printf_float+0xc2>
 8009f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	db02      	blt.n	8009f72 <_printf_float+0x22e>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	07d8      	lsls	r0, r3, #31
 8009f70:	d510      	bpl.n	8009f94 <_printf_float+0x250>
 8009f72:	ee18 3a10 	vmov	r3, s16
 8009f76:	4652      	mov	r2, sl
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	f43f af41 	beq.w	8009e06 <_printf_float+0xc2>
 8009f84:	f04f 0800 	mov.w	r8, #0
 8009f88:	f104 091a 	add.w	r9, r4, #26
 8009f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	4543      	cmp	r3, r8
 8009f92:	dc09      	bgt.n	8009fa8 <_printf_float+0x264>
 8009f94:	6823      	ldr	r3, [r4, #0]
 8009f96:	079b      	lsls	r3, r3, #30
 8009f98:	f100 8105 	bmi.w	800a1a6 <_printf_float+0x462>
 8009f9c:	68e0      	ldr	r0, [r4, #12]
 8009f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa0:	4298      	cmp	r0, r3
 8009fa2:	bfb8      	it	lt
 8009fa4:	4618      	movlt	r0, r3
 8009fa6:	e730      	b.n	8009e0a <_printf_float+0xc6>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	464a      	mov	r2, r9
 8009fac:	4631      	mov	r1, r6
 8009fae:	4628      	mov	r0, r5
 8009fb0:	47b8      	blx	r7
 8009fb2:	3001      	adds	r0, #1
 8009fb4:	f43f af27 	beq.w	8009e06 <_printf_float+0xc2>
 8009fb8:	f108 0801 	add.w	r8, r8, #1
 8009fbc:	e7e6      	b.n	8009f8c <_printf_float+0x248>
 8009fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dc39      	bgt.n	800a038 <_printf_float+0x2f4>
 8009fc4:	4a1b      	ldr	r2, [pc, #108]	; (800a034 <_printf_float+0x2f0>)
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4628      	mov	r0, r5
 8009fcc:	47b8      	blx	r7
 8009fce:	3001      	adds	r0, #1
 8009fd0:	f43f af19 	beq.w	8009e06 <_printf_float+0xc2>
 8009fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	d102      	bne.n	8009fe2 <_printf_float+0x29e>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	07d9      	lsls	r1, r3, #31
 8009fe0:	d5d8      	bpl.n	8009f94 <_printf_float+0x250>
 8009fe2:	ee18 3a10 	vmov	r3, s16
 8009fe6:	4652      	mov	r2, sl
 8009fe8:	4631      	mov	r1, r6
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f af09 	beq.w	8009e06 <_printf_float+0xc2>
 8009ff4:	f04f 0900 	mov.w	r9, #0
 8009ff8:	f104 0a1a 	add.w	sl, r4, #26
 8009ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffe:	425b      	negs	r3, r3
 800a000:	454b      	cmp	r3, r9
 800a002:	dc01      	bgt.n	800a008 <_printf_float+0x2c4>
 800a004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a006:	e792      	b.n	8009f2e <_printf_float+0x1ea>
 800a008:	2301      	movs	r3, #1
 800a00a:	4652      	mov	r2, sl
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	f43f aef7 	beq.w	8009e06 <_printf_float+0xc2>
 800a018:	f109 0901 	add.w	r9, r9, #1
 800a01c:	e7ee      	b.n	8009ffc <_printf_float+0x2b8>
 800a01e:	bf00      	nop
 800a020:	7fefffff 	.word	0x7fefffff
 800a024:	0800cea0 	.word	0x0800cea0
 800a028:	0800cea4 	.word	0x0800cea4
 800a02c:	0800ceac 	.word	0x0800ceac
 800a030:	0800cea8 	.word	0x0800cea8
 800a034:	0800ceb0 	.word	0x0800ceb0
 800a038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a03a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a03c:	429a      	cmp	r2, r3
 800a03e:	bfa8      	it	ge
 800a040:	461a      	movge	r2, r3
 800a042:	2a00      	cmp	r2, #0
 800a044:	4691      	mov	r9, r2
 800a046:	dc37      	bgt.n	800a0b8 <_printf_float+0x374>
 800a048:	f04f 0b00 	mov.w	fp, #0
 800a04c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a050:	f104 021a 	add.w	r2, r4, #26
 800a054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	eba3 0309 	sub.w	r3, r3, r9
 800a05c:	455b      	cmp	r3, fp
 800a05e:	dc33      	bgt.n	800a0c8 <_printf_float+0x384>
 800a060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a064:	429a      	cmp	r2, r3
 800a066:	db3b      	blt.n	800a0e0 <_printf_float+0x39c>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	07da      	lsls	r2, r3, #31
 800a06c:	d438      	bmi.n	800a0e0 <_printf_float+0x39c>
 800a06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a070:	9a05      	ldr	r2, [sp, #20]
 800a072:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a074:	1a9a      	subs	r2, r3, r2
 800a076:	eba3 0901 	sub.w	r9, r3, r1
 800a07a:	4591      	cmp	r9, r2
 800a07c:	bfa8      	it	ge
 800a07e:	4691      	movge	r9, r2
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	dc35      	bgt.n	800a0f2 <_printf_float+0x3ae>
 800a086:	f04f 0800 	mov.w	r8, #0
 800a08a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a08e:	f104 0a1a 	add.w	sl, r4, #26
 800a092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a096:	1a9b      	subs	r3, r3, r2
 800a098:	eba3 0309 	sub.w	r3, r3, r9
 800a09c:	4543      	cmp	r3, r8
 800a09e:	f77f af79 	ble.w	8009f94 <_printf_float+0x250>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4652      	mov	r2, sl
 800a0a6:	4631      	mov	r1, r6
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	47b8      	blx	r7
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f43f aeaa 	beq.w	8009e06 <_printf_float+0xc2>
 800a0b2:	f108 0801 	add.w	r8, r8, #1
 800a0b6:	e7ec      	b.n	800a092 <_printf_float+0x34e>
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	d1c0      	bne.n	800a048 <_printf_float+0x304>
 800a0c6:	e69e      	b.n	8009e06 <_printf_float+0xc2>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	9205      	str	r2, [sp, #20]
 800a0d0:	47b8      	blx	r7
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	f43f ae97 	beq.w	8009e06 <_printf_float+0xc2>
 800a0d8:	9a05      	ldr	r2, [sp, #20]
 800a0da:	f10b 0b01 	add.w	fp, fp, #1
 800a0de:	e7b9      	b.n	800a054 <_printf_float+0x310>
 800a0e0:	ee18 3a10 	vmov	r3, s16
 800a0e4:	4652      	mov	r2, sl
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b8      	blx	r7
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d1be      	bne.n	800a06e <_printf_float+0x32a>
 800a0f0:	e689      	b.n	8009e06 <_printf_float+0xc2>
 800a0f2:	9a05      	ldr	r2, [sp, #20]
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	4442      	add	r2, r8
 800a0f8:	4631      	mov	r1, r6
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	47b8      	blx	r7
 800a0fe:	3001      	adds	r0, #1
 800a100:	d1c1      	bne.n	800a086 <_printf_float+0x342>
 800a102:	e680      	b.n	8009e06 <_printf_float+0xc2>
 800a104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a106:	2a01      	cmp	r2, #1
 800a108:	dc01      	bgt.n	800a10e <_printf_float+0x3ca>
 800a10a:	07db      	lsls	r3, r3, #31
 800a10c:	d538      	bpl.n	800a180 <_printf_float+0x43c>
 800a10e:	2301      	movs	r3, #1
 800a110:	4642      	mov	r2, r8
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	f43f ae74 	beq.w	8009e06 <_printf_float+0xc2>
 800a11e:	ee18 3a10 	vmov	r3, s16
 800a122:	4652      	mov	r2, sl
 800a124:	4631      	mov	r1, r6
 800a126:	4628      	mov	r0, r5
 800a128:	47b8      	blx	r7
 800a12a:	3001      	adds	r0, #1
 800a12c:	f43f ae6b 	beq.w	8009e06 <_printf_float+0xc2>
 800a130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a134:	2200      	movs	r2, #0
 800a136:	2300      	movs	r3, #0
 800a138:	f7f6 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a13c:	b9d8      	cbnz	r0, 800a176 <_printf_float+0x432>
 800a13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a140:	f108 0201 	add.w	r2, r8, #1
 800a144:	3b01      	subs	r3, #1
 800a146:	4631      	mov	r1, r6
 800a148:	4628      	mov	r0, r5
 800a14a:	47b8      	blx	r7
 800a14c:	3001      	adds	r0, #1
 800a14e:	d10e      	bne.n	800a16e <_printf_float+0x42a>
 800a150:	e659      	b.n	8009e06 <_printf_float+0xc2>
 800a152:	2301      	movs	r3, #1
 800a154:	4652      	mov	r2, sl
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	f43f ae52 	beq.w	8009e06 <_printf_float+0xc2>
 800a162:	f108 0801 	add.w	r8, r8, #1
 800a166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a168:	3b01      	subs	r3, #1
 800a16a:	4543      	cmp	r3, r8
 800a16c:	dcf1      	bgt.n	800a152 <_printf_float+0x40e>
 800a16e:	464b      	mov	r3, r9
 800a170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a174:	e6dc      	b.n	8009f30 <_printf_float+0x1ec>
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	f104 0a1a 	add.w	sl, r4, #26
 800a17e:	e7f2      	b.n	800a166 <_printf_float+0x422>
 800a180:	2301      	movs	r3, #1
 800a182:	4642      	mov	r2, r8
 800a184:	e7df      	b.n	800a146 <_printf_float+0x402>
 800a186:	2301      	movs	r3, #1
 800a188:	464a      	mov	r2, r9
 800a18a:	4631      	mov	r1, r6
 800a18c:	4628      	mov	r0, r5
 800a18e:	47b8      	blx	r7
 800a190:	3001      	adds	r0, #1
 800a192:	f43f ae38 	beq.w	8009e06 <_printf_float+0xc2>
 800a196:	f108 0801 	add.w	r8, r8, #1
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a19e:	1a5b      	subs	r3, r3, r1
 800a1a0:	4543      	cmp	r3, r8
 800a1a2:	dcf0      	bgt.n	800a186 <_printf_float+0x442>
 800a1a4:	e6fa      	b.n	8009f9c <_printf_float+0x258>
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	f104 0919 	add.w	r9, r4, #25
 800a1ae:	e7f4      	b.n	800a19a <_printf_float+0x456>

0800a1b0 <_printf_common>:
 800a1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	4699      	mov	r9, r3
 800a1b8:	688a      	ldr	r2, [r1, #8]
 800a1ba:	690b      	ldr	r3, [r1, #16]
 800a1bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	bfb8      	it	lt
 800a1c4:	4613      	movlt	r3, r2
 800a1c6:	6033      	str	r3, [r6, #0]
 800a1c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1cc:	4607      	mov	r7, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b10a      	cbz	r2, 800a1d6 <_printf_common+0x26>
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	6033      	str	r3, [r6, #0]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	0699      	lsls	r1, r3, #26
 800a1da:	bf42      	ittt	mi
 800a1dc:	6833      	ldrmi	r3, [r6, #0]
 800a1de:	3302      	addmi	r3, #2
 800a1e0:	6033      	strmi	r3, [r6, #0]
 800a1e2:	6825      	ldr	r5, [r4, #0]
 800a1e4:	f015 0506 	ands.w	r5, r5, #6
 800a1e8:	d106      	bne.n	800a1f8 <_printf_common+0x48>
 800a1ea:	f104 0a19 	add.w	sl, r4, #25
 800a1ee:	68e3      	ldr	r3, [r4, #12]
 800a1f0:	6832      	ldr	r2, [r6, #0]
 800a1f2:	1a9b      	subs	r3, r3, r2
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dc26      	bgt.n	800a246 <_printf_common+0x96>
 800a1f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1fc:	1e13      	subs	r3, r2, #0
 800a1fe:	6822      	ldr	r2, [r4, #0]
 800a200:	bf18      	it	ne
 800a202:	2301      	movne	r3, #1
 800a204:	0692      	lsls	r2, r2, #26
 800a206:	d42b      	bmi.n	800a260 <_printf_common+0xb0>
 800a208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a20c:	4649      	mov	r1, r9
 800a20e:	4638      	mov	r0, r7
 800a210:	47c0      	blx	r8
 800a212:	3001      	adds	r0, #1
 800a214:	d01e      	beq.n	800a254 <_printf_common+0xa4>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	68e5      	ldr	r5, [r4, #12]
 800a21a:	6832      	ldr	r2, [r6, #0]
 800a21c:	f003 0306 	and.w	r3, r3, #6
 800a220:	2b04      	cmp	r3, #4
 800a222:	bf08      	it	eq
 800a224:	1aad      	subeq	r5, r5, r2
 800a226:	68a3      	ldr	r3, [r4, #8]
 800a228:	6922      	ldr	r2, [r4, #16]
 800a22a:	bf0c      	ite	eq
 800a22c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a230:	2500      	movne	r5, #0
 800a232:	4293      	cmp	r3, r2
 800a234:	bfc4      	itt	gt
 800a236:	1a9b      	subgt	r3, r3, r2
 800a238:	18ed      	addgt	r5, r5, r3
 800a23a:	2600      	movs	r6, #0
 800a23c:	341a      	adds	r4, #26
 800a23e:	42b5      	cmp	r5, r6
 800a240:	d11a      	bne.n	800a278 <_printf_common+0xc8>
 800a242:	2000      	movs	r0, #0
 800a244:	e008      	b.n	800a258 <_printf_common+0xa8>
 800a246:	2301      	movs	r3, #1
 800a248:	4652      	mov	r2, sl
 800a24a:	4649      	mov	r1, r9
 800a24c:	4638      	mov	r0, r7
 800a24e:	47c0      	blx	r8
 800a250:	3001      	adds	r0, #1
 800a252:	d103      	bne.n	800a25c <_printf_common+0xac>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25c:	3501      	adds	r5, #1
 800a25e:	e7c6      	b.n	800a1ee <_printf_common+0x3e>
 800a260:	18e1      	adds	r1, r4, r3
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	2030      	movs	r0, #48	; 0x30
 800a266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a26a:	4422      	add	r2, r4
 800a26c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a274:	3302      	adds	r3, #2
 800a276:	e7c7      	b.n	800a208 <_printf_common+0x58>
 800a278:	2301      	movs	r3, #1
 800a27a:	4622      	mov	r2, r4
 800a27c:	4649      	mov	r1, r9
 800a27e:	4638      	mov	r0, r7
 800a280:	47c0      	blx	r8
 800a282:	3001      	adds	r0, #1
 800a284:	d0e6      	beq.n	800a254 <_printf_common+0xa4>
 800a286:	3601      	adds	r6, #1
 800a288:	e7d9      	b.n	800a23e <_printf_common+0x8e>
	...

0800a28c <_printf_i>:
 800a28c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a290:	7e0f      	ldrb	r7, [r1, #24]
 800a292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a294:	2f78      	cmp	r7, #120	; 0x78
 800a296:	4691      	mov	r9, r2
 800a298:	4680      	mov	r8, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	469a      	mov	sl, r3
 800a29e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2a2:	d807      	bhi.n	800a2b4 <_printf_i+0x28>
 800a2a4:	2f62      	cmp	r7, #98	; 0x62
 800a2a6:	d80a      	bhi.n	800a2be <_printf_i+0x32>
 800a2a8:	2f00      	cmp	r7, #0
 800a2aa:	f000 80d8 	beq.w	800a45e <_printf_i+0x1d2>
 800a2ae:	2f58      	cmp	r7, #88	; 0x58
 800a2b0:	f000 80a3 	beq.w	800a3fa <_printf_i+0x16e>
 800a2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2bc:	e03a      	b.n	800a334 <_printf_i+0xa8>
 800a2be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2c2:	2b15      	cmp	r3, #21
 800a2c4:	d8f6      	bhi.n	800a2b4 <_printf_i+0x28>
 800a2c6:	a101      	add	r1, pc, #4	; (adr r1, 800a2cc <_printf_i+0x40>)
 800a2c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2cc:	0800a325 	.word	0x0800a325
 800a2d0:	0800a339 	.word	0x0800a339
 800a2d4:	0800a2b5 	.word	0x0800a2b5
 800a2d8:	0800a2b5 	.word	0x0800a2b5
 800a2dc:	0800a2b5 	.word	0x0800a2b5
 800a2e0:	0800a2b5 	.word	0x0800a2b5
 800a2e4:	0800a339 	.word	0x0800a339
 800a2e8:	0800a2b5 	.word	0x0800a2b5
 800a2ec:	0800a2b5 	.word	0x0800a2b5
 800a2f0:	0800a2b5 	.word	0x0800a2b5
 800a2f4:	0800a2b5 	.word	0x0800a2b5
 800a2f8:	0800a445 	.word	0x0800a445
 800a2fc:	0800a369 	.word	0x0800a369
 800a300:	0800a427 	.word	0x0800a427
 800a304:	0800a2b5 	.word	0x0800a2b5
 800a308:	0800a2b5 	.word	0x0800a2b5
 800a30c:	0800a467 	.word	0x0800a467
 800a310:	0800a2b5 	.word	0x0800a2b5
 800a314:	0800a369 	.word	0x0800a369
 800a318:	0800a2b5 	.word	0x0800a2b5
 800a31c:	0800a2b5 	.word	0x0800a2b5
 800a320:	0800a42f 	.word	0x0800a42f
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	1d1a      	adds	r2, r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	602a      	str	r2, [r5, #0]
 800a32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a334:	2301      	movs	r3, #1
 800a336:	e0a3      	b.n	800a480 <_printf_i+0x1f4>
 800a338:	6820      	ldr	r0, [r4, #0]
 800a33a:	6829      	ldr	r1, [r5, #0]
 800a33c:	0606      	lsls	r6, r0, #24
 800a33e:	f101 0304 	add.w	r3, r1, #4
 800a342:	d50a      	bpl.n	800a35a <_printf_i+0xce>
 800a344:	680e      	ldr	r6, [r1, #0]
 800a346:	602b      	str	r3, [r5, #0]
 800a348:	2e00      	cmp	r6, #0
 800a34a:	da03      	bge.n	800a354 <_printf_i+0xc8>
 800a34c:	232d      	movs	r3, #45	; 0x2d
 800a34e:	4276      	negs	r6, r6
 800a350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a354:	485e      	ldr	r0, [pc, #376]	; (800a4d0 <_printf_i+0x244>)
 800a356:	230a      	movs	r3, #10
 800a358:	e019      	b.n	800a38e <_printf_i+0x102>
 800a35a:	680e      	ldr	r6, [r1, #0]
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a362:	bf18      	it	ne
 800a364:	b236      	sxthne	r6, r6
 800a366:	e7ef      	b.n	800a348 <_printf_i+0xbc>
 800a368:	682b      	ldr	r3, [r5, #0]
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	1d19      	adds	r1, r3, #4
 800a36e:	6029      	str	r1, [r5, #0]
 800a370:	0601      	lsls	r1, r0, #24
 800a372:	d501      	bpl.n	800a378 <_printf_i+0xec>
 800a374:	681e      	ldr	r6, [r3, #0]
 800a376:	e002      	b.n	800a37e <_printf_i+0xf2>
 800a378:	0646      	lsls	r6, r0, #25
 800a37a:	d5fb      	bpl.n	800a374 <_printf_i+0xe8>
 800a37c:	881e      	ldrh	r6, [r3, #0]
 800a37e:	4854      	ldr	r0, [pc, #336]	; (800a4d0 <_printf_i+0x244>)
 800a380:	2f6f      	cmp	r7, #111	; 0x6f
 800a382:	bf0c      	ite	eq
 800a384:	2308      	moveq	r3, #8
 800a386:	230a      	movne	r3, #10
 800a388:	2100      	movs	r1, #0
 800a38a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a38e:	6865      	ldr	r5, [r4, #4]
 800a390:	60a5      	str	r5, [r4, #8]
 800a392:	2d00      	cmp	r5, #0
 800a394:	bfa2      	ittt	ge
 800a396:	6821      	ldrge	r1, [r4, #0]
 800a398:	f021 0104 	bicge.w	r1, r1, #4
 800a39c:	6021      	strge	r1, [r4, #0]
 800a39e:	b90e      	cbnz	r6, 800a3a4 <_printf_i+0x118>
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	d04d      	beq.n	800a440 <_printf_i+0x1b4>
 800a3a4:	4615      	mov	r5, r2
 800a3a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3aa:	fb03 6711 	mls	r7, r3, r1, r6
 800a3ae:	5dc7      	ldrb	r7, [r0, r7]
 800a3b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3b4:	4637      	mov	r7, r6
 800a3b6:	42bb      	cmp	r3, r7
 800a3b8:	460e      	mov	r6, r1
 800a3ba:	d9f4      	bls.n	800a3a6 <_printf_i+0x11a>
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d10b      	bne.n	800a3d8 <_printf_i+0x14c>
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	07de      	lsls	r6, r3, #31
 800a3c4:	d508      	bpl.n	800a3d8 <_printf_i+0x14c>
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	4299      	cmp	r1, r3
 800a3cc:	bfde      	ittt	le
 800a3ce:	2330      	movle	r3, #48	; 0x30
 800a3d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3d8:	1b52      	subs	r2, r2, r5
 800a3da:	6122      	str	r2, [r4, #16]
 800a3dc:	f8cd a000 	str.w	sl, [sp]
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	aa03      	add	r2, sp, #12
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	f7ff fee2 	bl	800a1b0 <_printf_common>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d14c      	bne.n	800a48a <_printf_i+0x1fe>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b004      	add	sp, #16
 800a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fa:	4835      	ldr	r0, [pc, #212]	; (800a4d0 <_printf_i+0x244>)
 800a3fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a400:	6829      	ldr	r1, [r5, #0]
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	f851 6b04 	ldr.w	r6, [r1], #4
 800a408:	6029      	str	r1, [r5, #0]
 800a40a:	061d      	lsls	r5, r3, #24
 800a40c:	d514      	bpl.n	800a438 <_printf_i+0x1ac>
 800a40e:	07df      	lsls	r7, r3, #31
 800a410:	bf44      	itt	mi
 800a412:	f043 0320 	orrmi.w	r3, r3, #32
 800a416:	6023      	strmi	r3, [r4, #0]
 800a418:	b91e      	cbnz	r6, 800a422 <_printf_i+0x196>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f023 0320 	bic.w	r3, r3, #32
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	2310      	movs	r3, #16
 800a424:	e7b0      	b.n	800a388 <_printf_i+0xfc>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	f043 0320 	orr.w	r3, r3, #32
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	2378      	movs	r3, #120	; 0x78
 800a430:	4828      	ldr	r0, [pc, #160]	; (800a4d4 <_printf_i+0x248>)
 800a432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a436:	e7e3      	b.n	800a400 <_printf_i+0x174>
 800a438:	0659      	lsls	r1, r3, #25
 800a43a:	bf48      	it	mi
 800a43c:	b2b6      	uxthmi	r6, r6
 800a43e:	e7e6      	b.n	800a40e <_printf_i+0x182>
 800a440:	4615      	mov	r5, r2
 800a442:	e7bb      	b.n	800a3bc <_printf_i+0x130>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	6826      	ldr	r6, [r4, #0]
 800a448:	6961      	ldr	r1, [r4, #20]
 800a44a:	1d18      	adds	r0, r3, #4
 800a44c:	6028      	str	r0, [r5, #0]
 800a44e:	0635      	lsls	r5, r6, #24
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	d501      	bpl.n	800a458 <_printf_i+0x1cc>
 800a454:	6019      	str	r1, [r3, #0]
 800a456:	e002      	b.n	800a45e <_printf_i+0x1d2>
 800a458:	0670      	lsls	r0, r6, #25
 800a45a:	d5fb      	bpl.n	800a454 <_printf_i+0x1c8>
 800a45c:	8019      	strh	r1, [r3, #0]
 800a45e:	2300      	movs	r3, #0
 800a460:	6123      	str	r3, [r4, #16]
 800a462:	4615      	mov	r5, r2
 800a464:	e7ba      	b.n	800a3dc <_printf_i+0x150>
 800a466:	682b      	ldr	r3, [r5, #0]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	602a      	str	r2, [r5, #0]
 800a46c:	681d      	ldr	r5, [r3, #0]
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	2100      	movs	r1, #0
 800a472:	4628      	mov	r0, r5
 800a474:	f7f5 feb4 	bl	80001e0 <memchr>
 800a478:	b108      	cbz	r0, 800a47e <_printf_i+0x1f2>
 800a47a:	1b40      	subs	r0, r0, r5
 800a47c:	6060      	str	r0, [r4, #4]
 800a47e:	6863      	ldr	r3, [r4, #4]
 800a480:	6123      	str	r3, [r4, #16]
 800a482:	2300      	movs	r3, #0
 800a484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a488:	e7a8      	b.n	800a3dc <_printf_i+0x150>
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	462a      	mov	r2, r5
 800a48e:	4649      	mov	r1, r9
 800a490:	4640      	mov	r0, r8
 800a492:	47d0      	blx	sl
 800a494:	3001      	adds	r0, #1
 800a496:	d0ab      	beq.n	800a3f0 <_printf_i+0x164>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	079b      	lsls	r3, r3, #30
 800a49c:	d413      	bmi.n	800a4c6 <_printf_i+0x23a>
 800a49e:	68e0      	ldr	r0, [r4, #12]
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	4298      	cmp	r0, r3
 800a4a4:	bfb8      	it	lt
 800a4a6:	4618      	movlt	r0, r3
 800a4a8:	e7a4      	b.n	800a3f4 <_printf_i+0x168>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	47d0      	blx	sl
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d09b      	beq.n	800a3f0 <_printf_i+0x164>
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	9903      	ldr	r1, [sp, #12]
 800a4be:	1a5b      	subs	r3, r3, r1
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dcf2      	bgt.n	800a4aa <_printf_i+0x21e>
 800a4c4:	e7eb      	b.n	800a49e <_printf_i+0x212>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	f104 0619 	add.w	r6, r4, #25
 800a4cc:	e7f5      	b.n	800a4ba <_printf_i+0x22e>
 800a4ce:	bf00      	nop
 800a4d0:	0800ceb2 	.word	0x0800ceb2
 800a4d4:	0800cec3 	.word	0x0800cec3

0800a4d8 <siprintf>:
 800a4d8:	b40e      	push	{r1, r2, r3}
 800a4da:	b500      	push	{lr}
 800a4dc:	b09c      	sub	sp, #112	; 0x70
 800a4de:	ab1d      	add	r3, sp, #116	; 0x74
 800a4e0:	9002      	str	r0, [sp, #8]
 800a4e2:	9006      	str	r0, [sp, #24]
 800a4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4e8:	4809      	ldr	r0, [pc, #36]	; (800a510 <siprintf+0x38>)
 800a4ea:	9107      	str	r1, [sp, #28]
 800a4ec:	9104      	str	r1, [sp, #16]
 800a4ee:	4909      	ldr	r1, [pc, #36]	; (800a514 <siprintf+0x3c>)
 800a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	6800      	ldr	r0, [r0, #0]
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	a902      	add	r1, sp, #8
 800a4fc:	f001 fcb8 	bl	800be70 <_svfiprintf_r>
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	2200      	movs	r2, #0
 800a504:	701a      	strb	r2, [r3, #0]
 800a506:	b01c      	add	sp, #112	; 0x70
 800a508:	f85d eb04 	ldr.w	lr, [sp], #4
 800a50c:	b003      	add	sp, #12
 800a50e:	4770      	bx	lr
 800a510:	2000000c 	.word	0x2000000c
 800a514:	ffff0208 	.word	0xffff0208

0800a518 <strcat>:
 800a518:	b510      	push	{r4, lr}
 800a51a:	4602      	mov	r2, r0
 800a51c:	7814      	ldrb	r4, [r2, #0]
 800a51e:	4613      	mov	r3, r2
 800a520:	3201      	adds	r2, #1
 800a522:	2c00      	cmp	r4, #0
 800a524:	d1fa      	bne.n	800a51c <strcat+0x4>
 800a526:	3b01      	subs	r3, #1
 800a528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a52c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a530:	2a00      	cmp	r2, #0
 800a532:	d1f9      	bne.n	800a528 <strcat+0x10>
 800a534:	bd10      	pop	{r4, pc}

0800a536 <strstr>:
 800a536:	780a      	ldrb	r2, [r1, #0]
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	b96a      	cbnz	r2, 800a558 <strstr+0x22>
 800a53c:	bd70      	pop	{r4, r5, r6, pc}
 800a53e:	429a      	cmp	r2, r3
 800a540:	d109      	bne.n	800a556 <strstr+0x20>
 800a542:	460c      	mov	r4, r1
 800a544:	4605      	mov	r5, r0
 800a546:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0f6      	beq.n	800a53c <strstr+0x6>
 800a54e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a552:	429e      	cmp	r6, r3
 800a554:	d0f7      	beq.n	800a546 <strstr+0x10>
 800a556:	3001      	adds	r0, #1
 800a558:	7803      	ldrb	r3, [r0, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1ef      	bne.n	800a53e <strstr+0x8>
 800a55e:	4618      	mov	r0, r3
 800a560:	e7ec      	b.n	800a53c <strstr+0x6>
	...

0800a564 <strtok>:
 800a564:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <strtok+0x5c>)
 800a566:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a568:	681e      	ldr	r6, [r3, #0]
 800a56a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a56c:	4605      	mov	r5, r0
 800a56e:	b9fc      	cbnz	r4, 800a5b0 <strtok+0x4c>
 800a570:	2050      	movs	r0, #80	; 0x50
 800a572:	9101      	str	r1, [sp, #4]
 800a574:	f000 ff8c 	bl	800b490 <malloc>
 800a578:	9901      	ldr	r1, [sp, #4]
 800a57a:	65b0      	str	r0, [r6, #88]	; 0x58
 800a57c:	4602      	mov	r2, r0
 800a57e:	b920      	cbnz	r0, 800a58a <strtok+0x26>
 800a580:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <strtok+0x60>)
 800a582:	4811      	ldr	r0, [pc, #68]	; (800a5c8 <strtok+0x64>)
 800a584:	2157      	movs	r1, #87	; 0x57
 800a586:	f000 f8d5 	bl	800a734 <__assert_func>
 800a58a:	e9c0 4400 	strd	r4, r4, [r0]
 800a58e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a592:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a596:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a59a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a59e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a5a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a5a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a5aa:	6184      	str	r4, [r0, #24]
 800a5ac:	7704      	strb	r4, [r0, #28]
 800a5ae:	6244      	str	r4, [r0, #36]	; 0x24
 800a5b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	b002      	add	sp, #8
 800a5b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a5bc:	f000 b806 	b.w	800a5cc <__strtok_r>
 800a5c0:	2000000c 	.word	0x2000000c
 800a5c4:	0800ced4 	.word	0x0800ced4
 800a5c8:	0800ceeb 	.word	0x0800ceeb

0800a5cc <__strtok_r>:
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	b908      	cbnz	r0, 800a5d4 <__strtok_r+0x8>
 800a5d0:	6810      	ldr	r0, [r2, #0]
 800a5d2:	b188      	cbz	r0, 800a5f8 <__strtok_r+0x2c>
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a5dc:	460f      	mov	r7, r1
 800a5de:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a5e2:	b91e      	cbnz	r6, 800a5ec <__strtok_r+0x20>
 800a5e4:	b965      	cbnz	r5, 800a600 <__strtok_r+0x34>
 800a5e6:	6015      	str	r5, [r2, #0]
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	e005      	b.n	800a5f8 <__strtok_r+0x2c>
 800a5ec:	42b5      	cmp	r5, r6
 800a5ee:	d1f6      	bne.n	800a5de <__strtok_r+0x12>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1f0      	bne.n	800a5d6 <__strtok_r+0xa>
 800a5f4:	6014      	str	r4, [r2, #0]
 800a5f6:	7003      	strb	r3, [r0, #0]
 800a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5fa:	461c      	mov	r4, r3
 800a5fc:	e00c      	b.n	800a618 <__strtok_r+0x4c>
 800a5fe:	b915      	cbnz	r5, 800a606 <__strtok_r+0x3a>
 800a600:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a604:	460e      	mov	r6, r1
 800a606:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a60a:	42ab      	cmp	r3, r5
 800a60c:	d1f7      	bne.n	800a5fe <__strtok_r+0x32>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f3      	beq.n	800a5fa <__strtok_r+0x2e>
 800a612:	2300      	movs	r3, #0
 800a614:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a618:	6014      	str	r4, [r2, #0]
 800a61a:	e7ed      	b.n	800a5f8 <__strtok_r+0x2c>

0800a61c <_strtol_l.constprop.0>:
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a622:	d001      	beq.n	800a628 <_strtol_l.constprop.0+0xc>
 800a624:	2b24      	cmp	r3, #36	; 0x24
 800a626:	d906      	bls.n	800a636 <_strtol_l.constprop.0+0x1a>
 800a628:	f7ff faac 	bl	8009b84 <__errno>
 800a62c:	2316      	movs	r3, #22
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	2000      	movs	r0, #0
 800a632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a636:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a71c <_strtol_l.constprop.0+0x100>
 800a63a:	460d      	mov	r5, r1
 800a63c:	462e      	mov	r6, r5
 800a63e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a642:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a646:	f017 0708 	ands.w	r7, r7, #8
 800a64a:	d1f7      	bne.n	800a63c <_strtol_l.constprop.0+0x20>
 800a64c:	2c2d      	cmp	r4, #45	; 0x2d
 800a64e:	d132      	bne.n	800a6b6 <_strtol_l.constprop.0+0x9a>
 800a650:	782c      	ldrb	r4, [r5, #0]
 800a652:	2701      	movs	r7, #1
 800a654:	1cb5      	adds	r5, r6, #2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d05b      	beq.n	800a712 <_strtol_l.constprop.0+0xf6>
 800a65a:	2b10      	cmp	r3, #16
 800a65c:	d109      	bne.n	800a672 <_strtol_l.constprop.0+0x56>
 800a65e:	2c30      	cmp	r4, #48	; 0x30
 800a660:	d107      	bne.n	800a672 <_strtol_l.constprop.0+0x56>
 800a662:	782c      	ldrb	r4, [r5, #0]
 800a664:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a668:	2c58      	cmp	r4, #88	; 0x58
 800a66a:	d14d      	bne.n	800a708 <_strtol_l.constprop.0+0xec>
 800a66c:	786c      	ldrb	r4, [r5, #1]
 800a66e:	2310      	movs	r3, #16
 800a670:	3502      	adds	r5, #2
 800a672:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a676:	f108 38ff 	add.w	r8, r8, #4294967295
 800a67a:	f04f 0c00 	mov.w	ip, #0
 800a67e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a682:	4666      	mov	r6, ip
 800a684:	fb03 8a19 	mls	sl, r3, r9, r8
 800a688:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a68c:	f1be 0f09 	cmp.w	lr, #9
 800a690:	d816      	bhi.n	800a6c0 <_strtol_l.constprop.0+0xa4>
 800a692:	4674      	mov	r4, lr
 800a694:	42a3      	cmp	r3, r4
 800a696:	dd24      	ble.n	800a6e2 <_strtol_l.constprop.0+0xc6>
 800a698:	f1bc 0f00 	cmp.w	ip, #0
 800a69c:	db1e      	blt.n	800a6dc <_strtol_l.constprop.0+0xc0>
 800a69e:	45b1      	cmp	r9, r6
 800a6a0:	d31c      	bcc.n	800a6dc <_strtol_l.constprop.0+0xc0>
 800a6a2:	d101      	bne.n	800a6a8 <_strtol_l.constprop.0+0x8c>
 800a6a4:	45a2      	cmp	sl, r4
 800a6a6:	db19      	blt.n	800a6dc <_strtol_l.constprop.0+0xc0>
 800a6a8:	fb06 4603 	mla	r6, r6, r3, r4
 800a6ac:	f04f 0c01 	mov.w	ip, #1
 800a6b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6b4:	e7e8      	b.n	800a688 <_strtol_l.constprop.0+0x6c>
 800a6b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a6b8:	bf04      	itt	eq
 800a6ba:	782c      	ldrbeq	r4, [r5, #0]
 800a6bc:	1cb5      	addeq	r5, r6, #2
 800a6be:	e7ca      	b.n	800a656 <_strtol_l.constprop.0+0x3a>
 800a6c0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a6c4:	f1be 0f19 	cmp.w	lr, #25
 800a6c8:	d801      	bhi.n	800a6ce <_strtol_l.constprop.0+0xb2>
 800a6ca:	3c37      	subs	r4, #55	; 0x37
 800a6cc:	e7e2      	b.n	800a694 <_strtol_l.constprop.0+0x78>
 800a6ce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a6d2:	f1be 0f19 	cmp.w	lr, #25
 800a6d6:	d804      	bhi.n	800a6e2 <_strtol_l.constprop.0+0xc6>
 800a6d8:	3c57      	subs	r4, #87	; 0x57
 800a6da:	e7db      	b.n	800a694 <_strtol_l.constprop.0+0x78>
 800a6dc:	f04f 3cff 	mov.w	ip, #4294967295
 800a6e0:	e7e6      	b.n	800a6b0 <_strtol_l.constprop.0+0x94>
 800a6e2:	f1bc 0f00 	cmp.w	ip, #0
 800a6e6:	da05      	bge.n	800a6f4 <_strtol_l.constprop.0+0xd8>
 800a6e8:	2322      	movs	r3, #34	; 0x22
 800a6ea:	6003      	str	r3, [r0, #0]
 800a6ec:	4646      	mov	r6, r8
 800a6ee:	b942      	cbnz	r2, 800a702 <_strtol_l.constprop.0+0xe6>
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	e79e      	b.n	800a632 <_strtol_l.constprop.0+0x16>
 800a6f4:	b107      	cbz	r7, 800a6f8 <_strtol_l.constprop.0+0xdc>
 800a6f6:	4276      	negs	r6, r6
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d0f9      	beq.n	800a6f0 <_strtol_l.constprop.0+0xd4>
 800a6fc:	f1bc 0f00 	cmp.w	ip, #0
 800a700:	d000      	beq.n	800a704 <_strtol_l.constprop.0+0xe8>
 800a702:	1e69      	subs	r1, r5, #1
 800a704:	6011      	str	r1, [r2, #0]
 800a706:	e7f3      	b.n	800a6f0 <_strtol_l.constprop.0+0xd4>
 800a708:	2430      	movs	r4, #48	; 0x30
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1b1      	bne.n	800a672 <_strtol_l.constprop.0+0x56>
 800a70e:	2308      	movs	r3, #8
 800a710:	e7af      	b.n	800a672 <_strtol_l.constprop.0+0x56>
 800a712:	2c30      	cmp	r4, #48	; 0x30
 800a714:	d0a5      	beq.n	800a662 <_strtol_l.constprop.0+0x46>
 800a716:	230a      	movs	r3, #10
 800a718:	e7ab      	b.n	800a672 <_strtol_l.constprop.0+0x56>
 800a71a:	bf00      	nop
 800a71c:	0800cf85 	.word	0x0800cf85

0800a720 <strtol>:
 800a720:	4613      	mov	r3, r2
 800a722:	460a      	mov	r2, r1
 800a724:	4601      	mov	r1, r0
 800a726:	4802      	ldr	r0, [pc, #8]	; (800a730 <strtol+0x10>)
 800a728:	6800      	ldr	r0, [r0, #0]
 800a72a:	f7ff bf77 	b.w	800a61c <_strtol_l.constprop.0>
 800a72e:	bf00      	nop
 800a730:	2000000c 	.word	0x2000000c

0800a734 <__assert_func>:
 800a734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a736:	4614      	mov	r4, r2
 800a738:	461a      	mov	r2, r3
 800a73a:	4b09      	ldr	r3, [pc, #36]	; (800a760 <__assert_func+0x2c>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4605      	mov	r5, r0
 800a740:	68d8      	ldr	r0, [r3, #12]
 800a742:	b14c      	cbz	r4, 800a758 <__assert_func+0x24>
 800a744:	4b07      	ldr	r3, [pc, #28]	; (800a764 <__assert_func+0x30>)
 800a746:	9100      	str	r1, [sp, #0]
 800a748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a74c:	4906      	ldr	r1, [pc, #24]	; (800a768 <__assert_func+0x34>)
 800a74e:	462b      	mov	r3, r5
 800a750:	f000 fe88 	bl	800b464 <fiprintf>
 800a754:	f001 fec4 	bl	800c4e0 <abort>
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <__assert_func+0x38>)
 800a75a:	461c      	mov	r4, r3
 800a75c:	e7f3      	b.n	800a746 <__assert_func+0x12>
 800a75e:	bf00      	nop
 800a760:	2000000c 	.word	0x2000000c
 800a764:	0800cf48 	.word	0x0800cf48
 800a768:	0800cf55 	.word	0x0800cf55
 800a76c:	0800cf83 	.word	0x0800cf83

0800a770 <quorem>:
 800a770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	6903      	ldr	r3, [r0, #16]
 800a776:	690c      	ldr	r4, [r1, #16]
 800a778:	42a3      	cmp	r3, r4
 800a77a:	4607      	mov	r7, r0
 800a77c:	f2c0 8081 	blt.w	800a882 <quorem+0x112>
 800a780:	3c01      	subs	r4, #1
 800a782:	f101 0814 	add.w	r8, r1, #20
 800a786:	f100 0514 	add.w	r5, r0, #20
 800a78a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a798:	3301      	adds	r3, #1
 800a79a:	429a      	cmp	r2, r3
 800a79c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7a8:	d331      	bcc.n	800a80e <quorem+0x9e>
 800a7aa:	f04f 0e00 	mov.w	lr, #0
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	46ac      	mov	ip, r5
 800a7b2:	46f2      	mov	sl, lr
 800a7b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7b8:	b293      	uxth	r3, r2
 800a7ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a7be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a7c8:	f8dc a000 	ldr.w	sl, [ip]
 800a7cc:	0c12      	lsrs	r2, r2, #16
 800a7ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a7d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	9b00      	ldr	r3, [sp, #0]
 800a7da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a7de:	b292      	uxth	r2, r2
 800a7e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a7e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a7ec:	4581      	cmp	r9, r0
 800a7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a7f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7fa:	d2db      	bcs.n	800a7b4 <quorem+0x44>
 800a7fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a800:	b92b      	cbnz	r3, 800a80e <quorem+0x9e>
 800a802:	9b01      	ldr	r3, [sp, #4]
 800a804:	3b04      	subs	r3, #4
 800a806:	429d      	cmp	r5, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	d32e      	bcc.n	800a86a <quorem+0xfa>
 800a80c:	613c      	str	r4, [r7, #16]
 800a80e:	4638      	mov	r0, r7
 800a810:	f001 f8da 	bl	800b9c8 <__mcmp>
 800a814:	2800      	cmp	r0, #0
 800a816:	db24      	blt.n	800a862 <quorem+0xf2>
 800a818:	3601      	adds	r6, #1
 800a81a:	4628      	mov	r0, r5
 800a81c:	f04f 0c00 	mov.w	ip, #0
 800a820:	f858 2b04 	ldr.w	r2, [r8], #4
 800a824:	f8d0 e000 	ldr.w	lr, [r0]
 800a828:	b293      	uxth	r3, r2
 800a82a:	ebac 0303 	sub.w	r3, ip, r3
 800a82e:	0c12      	lsrs	r2, r2, #16
 800a830:	fa13 f38e 	uxtah	r3, r3, lr
 800a834:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a842:	45c1      	cmp	r9, r8
 800a844:	f840 3b04 	str.w	r3, [r0], #4
 800a848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a84c:	d2e8      	bcs.n	800a820 <quorem+0xb0>
 800a84e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a856:	b922      	cbnz	r2, 800a862 <quorem+0xf2>
 800a858:	3b04      	subs	r3, #4
 800a85a:	429d      	cmp	r5, r3
 800a85c:	461a      	mov	r2, r3
 800a85e:	d30a      	bcc.n	800a876 <quorem+0x106>
 800a860:	613c      	str	r4, [r7, #16]
 800a862:	4630      	mov	r0, r6
 800a864:	b003      	add	sp, #12
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	6812      	ldr	r2, [r2, #0]
 800a86c:	3b04      	subs	r3, #4
 800a86e:	2a00      	cmp	r2, #0
 800a870:	d1cc      	bne.n	800a80c <quorem+0x9c>
 800a872:	3c01      	subs	r4, #1
 800a874:	e7c7      	b.n	800a806 <quorem+0x96>
 800a876:	6812      	ldr	r2, [r2, #0]
 800a878:	3b04      	subs	r3, #4
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	d1f0      	bne.n	800a860 <quorem+0xf0>
 800a87e:	3c01      	subs	r4, #1
 800a880:	e7eb      	b.n	800a85a <quorem+0xea>
 800a882:	2000      	movs	r0, #0
 800a884:	e7ee      	b.n	800a864 <quorem+0xf4>
	...

0800a888 <_dtoa_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	ed2d 8b04 	vpush	{d8-d9}
 800a890:	ec57 6b10 	vmov	r6, r7, d0
 800a894:	b093      	sub	sp, #76	; 0x4c
 800a896:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a898:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a89c:	9106      	str	r1, [sp, #24]
 800a89e:	ee10 aa10 	vmov	sl, s0
 800a8a2:	4604      	mov	r4, r0
 800a8a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a8a8:	46bb      	mov	fp, r7
 800a8aa:	b975      	cbnz	r5, 800a8ca <_dtoa_r+0x42>
 800a8ac:	2010      	movs	r0, #16
 800a8ae:	f000 fdef 	bl	800b490 <malloc>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a8b6:	b920      	cbnz	r0, 800a8c2 <_dtoa_r+0x3a>
 800a8b8:	4ba7      	ldr	r3, [pc, #668]	; (800ab58 <_dtoa_r+0x2d0>)
 800a8ba:	21ea      	movs	r1, #234	; 0xea
 800a8bc:	48a7      	ldr	r0, [pc, #668]	; (800ab5c <_dtoa_r+0x2d4>)
 800a8be:	f7ff ff39 	bl	800a734 <__assert_func>
 800a8c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a8c6:	6005      	str	r5, [r0, #0]
 800a8c8:	60c5      	str	r5, [r0, #12]
 800a8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8cc:	6819      	ldr	r1, [r3, #0]
 800a8ce:	b151      	cbz	r1, 800a8e6 <_dtoa_r+0x5e>
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	604a      	str	r2, [r1, #4]
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4093      	lsls	r3, r2
 800a8d8:	608b      	str	r3, [r1, #8]
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fe32 	bl	800b544 <_Bfree>
 800a8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	1e3b      	subs	r3, r7, #0
 800a8e8:	bfaa      	itet	ge
 800a8ea:	2300      	movge	r3, #0
 800a8ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a8f0:	f8c8 3000 	strge.w	r3, [r8]
 800a8f4:	4b9a      	ldr	r3, [pc, #616]	; (800ab60 <_dtoa_r+0x2d8>)
 800a8f6:	bfbc      	itt	lt
 800a8f8:	2201      	movlt	r2, #1
 800a8fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a8fe:	ea33 030b 	bics.w	r3, r3, fp
 800a902:	d11b      	bne.n	800a93c <_dtoa_r+0xb4>
 800a904:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a906:	f242 730f 	movw	r3, #9999	; 0x270f
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a910:	4333      	orrs	r3, r6
 800a912:	f000 8592 	beq.w	800b43a <_dtoa_r+0xbb2>
 800a916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a918:	b963      	cbnz	r3, 800a934 <_dtoa_r+0xac>
 800a91a:	4b92      	ldr	r3, [pc, #584]	; (800ab64 <_dtoa_r+0x2dc>)
 800a91c:	e022      	b.n	800a964 <_dtoa_r+0xdc>
 800a91e:	4b92      	ldr	r3, [pc, #584]	; (800ab68 <_dtoa_r+0x2e0>)
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	3308      	adds	r3, #8
 800a924:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	9801      	ldr	r0, [sp, #4]
 800a92a:	b013      	add	sp, #76	; 0x4c
 800a92c:	ecbd 8b04 	vpop	{d8-d9}
 800a930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	4b8b      	ldr	r3, [pc, #556]	; (800ab64 <_dtoa_r+0x2dc>)
 800a936:	9301      	str	r3, [sp, #4]
 800a938:	3303      	adds	r3, #3
 800a93a:	e7f3      	b.n	800a924 <_dtoa_r+0x9c>
 800a93c:	2200      	movs	r2, #0
 800a93e:	2300      	movs	r3, #0
 800a940:	4650      	mov	r0, sl
 800a942:	4659      	mov	r1, fp
 800a944:	f7f6 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a948:	ec4b ab19 	vmov	d9, sl, fp
 800a94c:	4680      	mov	r8, r0
 800a94e:	b158      	cbz	r0, 800a968 <_dtoa_r+0xe0>
 800a950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a952:	2301      	movs	r3, #1
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 856b 	beq.w	800b434 <_dtoa_r+0xbac>
 800a95e:	4883      	ldr	r0, [pc, #524]	; (800ab6c <_dtoa_r+0x2e4>)
 800a960:	6018      	str	r0, [r3, #0]
 800a962:	1e43      	subs	r3, r0, #1
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	e7df      	b.n	800a928 <_dtoa_r+0xa0>
 800a968:	ec4b ab10 	vmov	d0, sl, fp
 800a96c:	aa10      	add	r2, sp, #64	; 0x40
 800a96e:	a911      	add	r1, sp, #68	; 0x44
 800a970:	4620      	mov	r0, r4
 800a972:	f001 f8cf 	bl	800bb14 <__d2b>
 800a976:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a97a:	ee08 0a10 	vmov	s16, r0
 800a97e:	2d00      	cmp	r5, #0
 800a980:	f000 8084 	beq.w	800aa8c <_dtoa_r+0x204>
 800a984:	ee19 3a90 	vmov	r3, s19
 800a988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a98c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a990:	4656      	mov	r6, sl
 800a992:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a996:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a99a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a99e:	4b74      	ldr	r3, [pc, #464]	; (800ab70 <_dtoa_r+0x2e8>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fc6f 	bl	8000288 <__aeabi_dsub>
 800a9aa:	a365      	add	r3, pc, #404	; (adr r3, 800ab40 <_dtoa_r+0x2b8>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f7f5 fe22 	bl	80005f8 <__aeabi_dmul>
 800a9b4:	a364      	add	r3, pc, #400	; (adr r3, 800ab48 <_dtoa_r+0x2c0>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc67 	bl	800028c <__adddf3>
 800a9be:	4606      	mov	r6, r0
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	f7f5 fdae 	bl	8000524 <__aeabi_i2d>
 800a9c8:	a361      	add	r3, pc, #388	; (adr r3, 800ab50 <_dtoa_r+0x2c8>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe13 	bl	80005f8 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f5 fc57 	bl	800028c <__adddf3>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	f7f6 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	9000      	str	r0, [sp, #0]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f7f6 f874 	bl	8000adc <__aeabi_dcmplt>
 800a9f4:	b150      	cbz	r0, 800aa0c <_dtoa_r+0x184>
 800a9f6:	9800      	ldr	r0, [sp, #0]
 800a9f8:	f7f5 fd94 	bl	8000524 <__aeabi_i2d>
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	463b      	mov	r3, r7
 800aa00:	f7f6 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa04:	b910      	cbnz	r0, 800aa0c <_dtoa_r+0x184>
 800aa06:	9b00      	ldr	r3, [sp, #0]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	9b00      	ldr	r3, [sp, #0]
 800aa0e:	2b16      	cmp	r3, #22
 800aa10:	d85a      	bhi.n	800aac8 <_dtoa_r+0x240>
 800aa12:	9a00      	ldr	r2, [sp, #0]
 800aa14:	4b57      	ldr	r3, [pc, #348]	; (800ab74 <_dtoa_r+0x2ec>)
 800aa16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	ec51 0b19 	vmov	r0, r1, d9
 800aa22:	f7f6 f85b 	bl	8000adc <__aeabi_dcmplt>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d050      	beq.n	800aacc <_dtoa_r+0x244>
 800aa2a:	9b00      	ldr	r3, [sp, #0]
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	2300      	movs	r3, #0
 800aa32:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa36:	1b5d      	subs	r5, r3, r5
 800aa38:	1e6b      	subs	r3, r5, #1
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	bf45      	ittet	mi
 800aa3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800aa42:	9304      	strmi	r3, [sp, #16]
 800aa44:	2300      	movpl	r3, #0
 800aa46:	2300      	movmi	r3, #0
 800aa48:	bf4c      	ite	mi
 800aa4a:	9305      	strmi	r3, [sp, #20]
 800aa4c:	9304      	strpl	r3, [sp, #16]
 800aa4e:	9b00      	ldr	r3, [sp, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	db3d      	blt.n	800aad0 <_dtoa_r+0x248>
 800aa54:	9b05      	ldr	r3, [sp, #20]
 800aa56:	9a00      	ldr	r2, [sp, #0]
 800aa58:	920a      	str	r2, [sp, #40]	; 0x28
 800aa5a:	4413      	add	r3, r2
 800aa5c:	9305      	str	r3, [sp, #20]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	9307      	str	r3, [sp, #28]
 800aa62:	9b06      	ldr	r3, [sp, #24]
 800aa64:	2b09      	cmp	r3, #9
 800aa66:	f200 8089 	bhi.w	800ab7c <_dtoa_r+0x2f4>
 800aa6a:	2b05      	cmp	r3, #5
 800aa6c:	bfc4      	itt	gt
 800aa6e:	3b04      	subgt	r3, #4
 800aa70:	9306      	strgt	r3, [sp, #24]
 800aa72:	9b06      	ldr	r3, [sp, #24]
 800aa74:	f1a3 0302 	sub.w	r3, r3, #2
 800aa78:	bfcc      	ite	gt
 800aa7a:	2500      	movgt	r5, #0
 800aa7c:	2501      	movle	r5, #1
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	f200 8087 	bhi.w	800ab92 <_dtoa_r+0x30a>
 800aa84:	e8df f003 	tbb	[pc, r3]
 800aa88:	59383a2d 	.word	0x59383a2d
 800aa8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa90:	441d      	add	r5, r3
 800aa92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	bfc1      	itttt	gt
 800aa9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aaa2:	fa0b f303 	lslgt.w	r3, fp, r3
 800aaa6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aaaa:	bfda      	itte	le
 800aaac:	f1c3 0320 	rsble	r3, r3, #32
 800aab0:	fa06 f003 	lslle.w	r0, r6, r3
 800aab4:	4318      	orrgt	r0, r3
 800aab6:	f7f5 fd25 	bl	8000504 <__aeabi_ui2d>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4606      	mov	r6, r0
 800aabe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aac2:	3d01      	subs	r5, #1
 800aac4:	930e      	str	r3, [sp, #56]	; 0x38
 800aac6:	e76a      	b.n	800a99e <_dtoa_r+0x116>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e7b2      	b.n	800aa32 <_dtoa_r+0x1aa>
 800aacc:	900b      	str	r0, [sp, #44]	; 0x2c
 800aace:	e7b1      	b.n	800aa34 <_dtoa_r+0x1ac>
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	9a00      	ldr	r2, [sp, #0]
 800aad4:	1a9b      	subs	r3, r3, r2
 800aad6:	9304      	str	r3, [sp, #16]
 800aad8:	4253      	negs	r3, r2
 800aada:	9307      	str	r3, [sp, #28]
 800aadc:	2300      	movs	r3, #0
 800aade:	930a      	str	r3, [sp, #40]	; 0x28
 800aae0:	e7bf      	b.n	800aa62 <_dtoa_r+0x1da>
 800aae2:	2300      	movs	r3, #0
 800aae4:	9308      	str	r3, [sp, #32]
 800aae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	dc55      	bgt.n	800ab98 <_dtoa_r+0x310>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	9209      	str	r2, [sp, #36]	; 0x24
 800aaf6:	e00c      	b.n	800ab12 <_dtoa_r+0x28a>
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e7f3      	b.n	800aae4 <_dtoa_r+0x25c>
 800aafc:	2300      	movs	r3, #0
 800aafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab00:	9308      	str	r3, [sp, #32]
 800ab02:	9b00      	ldr	r3, [sp, #0]
 800ab04:	4413      	add	r3, r2
 800ab06:	9302      	str	r3, [sp, #8]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	bfb8      	it	lt
 800ab10:	2301      	movlt	r3, #1
 800ab12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab14:	2200      	movs	r2, #0
 800ab16:	6042      	str	r2, [r0, #4]
 800ab18:	2204      	movs	r2, #4
 800ab1a:	f102 0614 	add.w	r6, r2, #20
 800ab1e:	429e      	cmp	r6, r3
 800ab20:	6841      	ldr	r1, [r0, #4]
 800ab22:	d93d      	bls.n	800aba0 <_dtoa_r+0x318>
 800ab24:	4620      	mov	r0, r4
 800ab26:	f000 fccd 	bl	800b4c4 <_Balloc>
 800ab2a:	9001      	str	r0, [sp, #4]
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	d13b      	bne.n	800aba8 <_dtoa_r+0x320>
 800ab30:	4b11      	ldr	r3, [pc, #68]	; (800ab78 <_dtoa_r+0x2f0>)
 800ab32:	4602      	mov	r2, r0
 800ab34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab38:	e6c0      	b.n	800a8bc <_dtoa_r+0x34>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e7df      	b.n	800aafe <_dtoa_r+0x276>
 800ab3e:	bf00      	nop
 800ab40:	636f4361 	.word	0x636f4361
 800ab44:	3fd287a7 	.word	0x3fd287a7
 800ab48:	8b60c8b3 	.word	0x8b60c8b3
 800ab4c:	3fc68a28 	.word	0x3fc68a28
 800ab50:	509f79fb 	.word	0x509f79fb
 800ab54:	3fd34413 	.word	0x3fd34413
 800ab58:	0800ced4 	.word	0x0800ced4
 800ab5c:	0800d092 	.word	0x0800d092
 800ab60:	7ff00000 	.word	0x7ff00000
 800ab64:	0800d08e 	.word	0x0800d08e
 800ab68:	0800d085 	.word	0x0800d085
 800ab6c:	0800ceb1 	.word	0x0800ceb1
 800ab70:	3ff80000 	.word	0x3ff80000
 800ab74:	0800d190 	.word	0x0800d190
 800ab78:	0800d0ed 	.word	0x0800d0ed
 800ab7c:	2501      	movs	r5, #1
 800ab7e:	2300      	movs	r3, #0
 800ab80:	9306      	str	r3, [sp, #24]
 800ab82:	9508      	str	r5, [sp, #32]
 800ab84:	f04f 33ff 	mov.w	r3, #4294967295
 800ab88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2312      	movs	r3, #18
 800ab90:	e7b0      	b.n	800aaf4 <_dtoa_r+0x26c>
 800ab92:	2301      	movs	r3, #1
 800ab94:	9308      	str	r3, [sp, #32]
 800ab96:	e7f5      	b.n	800ab84 <_dtoa_r+0x2fc>
 800ab98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab9e:	e7b8      	b.n	800ab12 <_dtoa_r+0x28a>
 800aba0:	3101      	adds	r1, #1
 800aba2:	6041      	str	r1, [r0, #4]
 800aba4:	0052      	lsls	r2, r2, #1
 800aba6:	e7b8      	b.n	800ab1a <_dtoa_r+0x292>
 800aba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abaa:	9a01      	ldr	r2, [sp, #4]
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	2b0e      	cmp	r3, #14
 800abb2:	f200 809d 	bhi.w	800acf0 <_dtoa_r+0x468>
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	f000 809a 	beq.w	800acf0 <_dtoa_r+0x468>
 800abbc:	9b00      	ldr	r3, [sp, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd32      	ble.n	800ac28 <_dtoa_r+0x3a0>
 800abc2:	4ab7      	ldr	r2, [pc, #732]	; (800aea0 <_dtoa_r+0x618>)
 800abc4:	f003 030f 	and.w	r3, r3, #15
 800abc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abd0:	9b00      	ldr	r3, [sp, #0]
 800abd2:	05d8      	lsls	r0, r3, #23
 800abd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800abd8:	d516      	bpl.n	800ac08 <_dtoa_r+0x380>
 800abda:	4bb2      	ldr	r3, [pc, #712]	; (800aea4 <_dtoa_r+0x61c>)
 800abdc:	ec51 0b19 	vmov	r0, r1, d9
 800abe0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abe4:	f7f5 fe32 	bl	800084c <__aeabi_ddiv>
 800abe8:	f007 070f 	and.w	r7, r7, #15
 800abec:	4682      	mov	sl, r0
 800abee:	468b      	mov	fp, r1
 800abf0:	2503      	movs	r5, #3
 800abf2:	4eac      	ldr	r6, [pc, #688]	; (800aea4 <_dtoa_r+0x61c>)
 800abf4:	b957      	cbnz	r7, 800ac0c <_dtoa_r+0x384>
 800abf6:	4642      	mov	r2, r8
 800abf8:	464b      	mov	r3, r9
 800abfa:	4650      	mov	r0, sl
 800abfc:	4659      	mov	r1, fp
 800abfe:	f7f5 fe25 	bl	800084c <__aeabi_ddiv>
 800ac02:	4682      	mov	sl, r0
 800ac04:	468b      	mov	fp, r1
 800ac06:	e028      	b.n	800ac5a <_dtoa_r+0x3d2>
 800ac08:	2502      	movs	r5, #2
 800ac0a:	e7f2      	b.n	800abf2 <_dtoa_r+0x36a>
 800ac0c:	07f9      	lsls	r1, r7, #31
 800ac0e:	d508      	bpl.n	800ac22 <_dtoa_r+0x39a>
 800ac10:	4640      	mov	r0, r8
 800ac12:	4649      	mov	r1, r9
 800ac14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac18:	f7f5 fcee 	bl	80005f8 <__aeabi_dmul>
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	4680      	mov	r8, r0
 800ac20:	4689      	mov	r9, r1
 800ac22:	107f      	asrs	r7, r7, #1
 800ac24:	3608      	adds	r6, #8
 800ac26:	e7e5      	b.n	800abf4 <_dtoa_r+0x36c>
 800ac28:	f000 809b 	beq.w	800ad62 <_dtoa_r+0x4da>
 800ac2c:	9b00      	ldr	r3, [sp, #0]
 800ac2e:	4f9d      	ldr	r7, [pc, #628]	; (800aea4 <_dtoa_r+0x61c>)
 800ac30:	425e      	negs	r6, r3
 800ac32:	4b9b      	ldr	r3, [pc, #620]	; (800aea0 <_dtoa_r+0x618>)
 800ac34:	f006 020f 	and.w	r2, r6, #15
 800ac38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac40:	ec51 0b19 	vmov	r0, r1, d9
 800ac44:	f7f5 fcd8 	bl	80005f8 <__aeabi_dmul>
 800ac48:	1136      	asrs	r6, r6, #4
 800ac4a:	4682      	mov	sl, r0
 800ac4c:	468b      	mov	fp, r1
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2502      	movs	r5, #2
 800ac52:	2e00      	cmp	r6, #0
 800ac54:	d17a      	bne.n	800ad4c <_dtoa_r+0x4c4>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1d3      	bne.n	800ac02 <_dtoa_r+0x37a>
 800ac5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8082 	beq.w	800ad66 <_dtoa_r+0x4de>
 800ac62:	4b91      	ldr	r3, [pc, #580]	; (800aea8 <_dtoa_r+0x620>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	4650      	mov	r0, sl
 800ac68:	4659      	mov	r1, fp
 800ac6a:	f7f5 ff37 	bl	8000adc <__aeabi_dcmplt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d079      	beq.n	800ad66 <_dtoa_r+0x4de>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d076      	beq.n	800ad66 <_dtoa_r+0x4de>
 800ac78:	9b02      	ldr	r3, [sp, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	dd36      	ble.n	800acec <_dtoa_r+0x464>
 800ac7e:	9b00      	ldr	r3, [sp, #0]
 800ac80:	4650      	mov	r0, sl
 800ac82:	4659      	mov	r1, fp
 800ac84:	1e5f      	subs	r7, r3, #1
 800ac86:	2200      	movs	r2, #0
 800ac88:	4b88      	ldr	r3, [pc, #544]	; (800aeac <_dtoa_r+0x624>)
 800ac8a:	f7f5 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ac8e:	9e02      	ldr	r6, [sp, #8]
 800ac90:	4682      	mov	sl, r0
 800ac92:	468b      	mov	fp, r1
 800ac94:	3501      	adds	r5, #1
 800ac96:	4628      	mov	r0, r5
 800ac98:	f7f5 fc44 	bl	8000524 <__aeabi_i2d>
 800ac9c:	4652      	mov	r2, sl
 800ac9e:	465b      	mov	r3, fp
 800aca0:	f7f5 fcaa 	bl	80005f8 <__aeabi_dmul>
 800aca4:	4b82      	ldr	r3, [pc, #520]	; (800aeb0 <_dtoa_r+0x628>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	f7f5 faf0 	bl	800028c <__adddf3>
 800acac:	46d0      	mov	r8, sl
 800acae:	46d9      	mov	r9, fp
 800acb0:	4682      	mov	sl, r0
 800acb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800acb6:	2e00      	cmp	r6, #0
 800acb8:	d158      	bne.n	800ad6c <_dtoa_r+0x4e4>
 800acba:	4b7e      	ldr	r3, [pc, #504]	; (800aeb4 <_dtoa_r+0x62c>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	4640      	mov	r0, r8
 800acc0:	4649      	mov	r1, r9
 800acc2:	f7f5 fae1 	bl	8000288 <__aeabi_dsub>
 800acc6:	4652      	mov	r2, sl
 800acc8:	465b      	mov	r3, fp
 800acca:	4680      	mov	r8, r0
 800accc:	4689      	mov	r9, r1
 800acce:	f7f5 ff23 	bl	8000b18 <__aeabi_dcmpgt>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f040 8295 	bne.w	800b202 <_dtoa_r+0x97a>
 800acd8:	4652      	mov	r2, sl
 800acda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800acde:	4640      	mov	r0, r8
 800ace0:	4649      	mov	r1, r9
 800ace2:	f7f5 fefb 	bl	8000adc <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f040 8289 	bne.w	800b1fe <_dtoa_r+0x976>
 800acec:	ec5b ab19 	vmov	sl, fp, d9
 800acf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f2c0 8148 	blt.w	800af88 <_dtoa_r+0x700>
 800acf8:	9a00      	ldr	r2, [sp, #0]
 800acfa:	2a0e      	cmp	r2, #14
 800acfc:	f300 8144 	bgt.w	800af88 <_dtoa_r+0x700>
 800ad00:	4b67      	ldr	r3, [pc, #412]	; (800aea0 <_dtoa_r+0x618>)
 800ad02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ad0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	f280 80d5 	bge.w	800aebc <_dtoa_r+0x634>
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f300 80d1 	bgt.w	800aebc <_dtoa_r+0x634>
 800ad1a:	f040 826f 	bne.w	800b1fc <_dtoa_r+0x974>
 800ad1e:	4b65      	ldr	r3, [pc, #404]	; (800aeb4 <_dtoa_r+0x62c>)
 800ad20:	2200      	movs	r2, #0
 800ad22:	4640      	mov	r0, r8
 800ad24:	4649      	mov	r1, r9
 800ad26:	f7f5 fc67 	bl	80005f8 <__aeabi_dmul>
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	f7f5 fee9 	bl	8000b04 <__aeabi_dcmpge>
 800ad32:	9e03      	ldr	r6, [sp, #12]
 800ad34:	4637      	mov	r7, r6
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f040 8245 	bne.w	800b1c6 <_dtoa_r+0x93e>
 800ad3c:	9d01      	ldr	r5, [sp, #4]
 800ad3e:	2331      	movs	r3, #49	; 0x31
 800ad40:	f805 3b01 	strb.w	r3, [r5], #1
 800ad44:	9b00      	ldr	r3, [sp, #0]
 800ad46:	3301      	adds	r3, #1
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	e240      	b.n	800b1ce <_dtoa_r+0x946>
 800ad4c:	07f2      	lsls	r2, r6, #31
 800ad4e:	d505      	bpl.n	800ad5c <_dtoa_r+0x4d4>
 800ad50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad54:	f7f5 fc50 	bl	80005f8 <__aeabi_dmul>
 800ad58:	3501      	adds	r5, #1
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	1076      	asrs	r6, r6, #1
 800ad5e:	3708      	adds	r7, #8
 800ad60:	e777      	b.n	800ac52 <_dtoa_r+0x3ca>
 800ad62:	2502      	movs	r5, #2
 800ad64:	e779      	b.n	800ac5a <_dtoa_r+0x3d2>
 800ad66:	9f00      	ldr	r7, [sp, #0]
 800ad68:	9e03      	ldr	r6, [sp, #12]
 800ad6a:	e794      	b.n	800ac96 <_dtoa_r+0x40e>
 800ad6c:	9901      	ldr	r1, [sp, #4]
 800ad6e:	4b4c      	ldr	r3, [pc, #304]	; (800aea0 <_dtoa_r+0x618>)
 800ad70:	4431      	add	r1, r6
 800ad72:	910d      	str	r1, [sp, #52]	; 0x34
 800ad74:	9908      	ldr	r1, [sp, #32]
 800ad76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad7e:	2900      	cmp	r1, #0
 800ad80:	d043      	beq.n	800ae0a <_dtoa_r+0x582>
 800ad82:	494d      	ldr	r1, [pc, #308]	; (800aeb8 <_dtoa_r+0x630>)
 800ad84:	2000      	movs	r0, #0
 800ad86:	f7f5 fd61 	bl	800084c <__aeabi_ddiv>
 800ad8a:	4652      	mov	r2, sl
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	f7f5 fa7b 	bl	8000288 <__aeabi_dsub>
 800ad92:	9d01      	ldr	r5, [sp, #4]
 800ad94:	4682      	mov	sl, r0
 800ad96:	468b      	mov	fp, r1
 800ad98:	4649      	mov	r1, r9
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	f7f5 fedc 	bl	8000b58 <__aeabi_d2iz>
 800ada0:	4606      	mov	r6, r0
 800ada2:	f7f5 fbbf 	bl	8000524 <__aeabi_i2d>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4640      	mov	r0, r8
 800adac:	4649      	mov	r1, r9
 800adae:	f7f5 fa6b 	bl	8000288 <__aeabi_dsub>
 800adb2:	3630      	adds	r6, #48	; 0x30
 800adb4:	f805 6b01 	strb.w	r6, [r5], #1
 800adb8:	4652      	mov	r2, sl
 800adba:	465b      	mov	r3, fp
 800adbc:	4680      	mov	r8, r0
 800adbe:	4689      	mov	r9, r1
 800adc0:	f7f5 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d163      	bne.n	800ae90 <_dtoa_r+0x608>
 800adc8:	4642      	mov	r2, r8
 800adca:	464b      	mov	r3, r9
 800adcc:	4936      	ldr	r1, [pc, #216]	; (800aea8 <_dtoa_r+0x620>)
 800adce:	2000      	movs	r0, #0
 800add0:	f7f5 fa5a 	bl	8000288 <__aeabi_dsub>
 800add4:	4652      	mov	r2, sl
 800add6:	465b      	mov	r3, fp
 800add8:	f7f5 fe80 	bl	8000adc <__aeabi_dcmplt>
 800addc:	2800      	cmp	r0, #0
 800adde:	f040 80b5 	bne.w	800af4c <_dtoa_r+0x6c4>
 800ade2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade4:	429d      	cmp	r5, r3
 800ade6:	d081      	beq.n	800acec <_dtoa_r+0x464>
 800ade8:	4b30      	ldr	r3, [pc, #192]	; (800aeac <_dtoa_r+0x624>)
 800adea:	2200      	movs	r2, #0
 800adec:	4650      	mov	r0, sl
 800adee:	4659      	mov	r1, fp
 800adf0:	f7f5 fc02 	bl	80005f8 <__aeabi_dmul>
 800adf4:	4b2d      	ldr	r3, [pc, #180]	; (800aeac <_dtoa_r+0x624>)
 800adf6:	4682      	mov	sl, r0
 800adf8:	468b      	mov	fp, r1
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	2200      	movs	r2, #0
 800ae00:	f7f5 fbfa 	bl	80005f8 <__aeabi_dmul>
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	e7c6      	b.n	800ad98 <_dtoa_r+0x510>
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae14:	9d01      	ldr	r5, [sp, #4]
 800ae16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae18:	4682      	mov	sl, r0
 800ae1a:	468b      	mov	fp, r1
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	4640      	mov	r0, r8
 800ae20:	f7f5 fe9a 	bl	8000b58 <__aeabi_d2iz>
 800ae24:	4606      	mov	r6, r0
 800ae26:	f7f5 fb7d 	bl	8000524 <__aeabi_i2d>
 800ae2a:	3630      	adds	r6, #48	; 0x30
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	460b      	mov	r3, r1
 800ae30:	4640      	mov	r0, r8
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 fa28 	bl	8000288 <__aeabi_dsub>
 800ae38:	f805 6b01 	strb.w	r6, [r5], #1
 800ae3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae3e:	429d      	cmp	r5, r3
 800ae40:	4680      	mov	r8, r0
 800ae42:	4689      	mov	r9, r1
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	d124      	bne.n	800ae94 <_dtoa_r+0x60c>
 800ae4a:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <_dtoa_r+0x630>)
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	4659      	mov	r1, fp
 800ae50:	f7f5 fa1c 	bl	800028c <__adddf3>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4640      	mov	r0, r8
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	f7f5 fe5c 	bl	8000b18 <__aeabi_dcmpgt>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d173      	bne.n	800af4c <_dtoa_r+0x6c4>
 800ae64:	4652      	mov	r2, sl
 800ae66:	465b      	mov	r3, fp
 800ae68:	4913      	ldr	r1, [pc, #76]	; (800aeb8 <_dtoa_r+0x630>)
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	f7f5 fa0c 	bl	8000288 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4640      	mov	r0, r8
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	f43f af35 	beq.w	800acec <_dtoa_r+0x464>
 800ae82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae84:	1e6b      	subs	r3, r5, #1
 800ae86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae8c:	2b30      	cmp	r3, #48	; 0x30
 800ae8e:	d0f8      	beq.n	800ae82 <_dtoa_r+0x5fa>
 800ae90:	9700      	str	r7, [sp, #0]
 800ae92:	e049      	b.n	800af28 <_dtoa_r+0x6a0>
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <_dtoa_r+0x624>)
 800ae96:	f7f5 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	4689      	mov	r9, r1
 800ae9e:	e7bd      	b.n	800ae1c <_dtoa_r+0x594>
 800aea0:	0800d190 	.word	0x0800d190
 800aea4:	0800d168 	.word	0x0800d168
 800aea8:	3ff00000 	.word	0x3ff00000
 800aeac:	40240000 	.word	0x40240000
 800aeb0:	401c0000 	.word	0x401c0000
 800aeb4:	40140000 	.word	0x40140000
 800aeb8:	3fe00000 	.word	0x3fe00000
 800aebc:	9d01      	ldr	r5, [sp, #4]
 800aebe:	4656      	mov	r6, sl
 800aec0:	465f      	mov	r7, fp
 800aec2:	4642      	mov	r2, r8
 800aec4:	464b      	mov	r3, r9
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fcbf 	bl	800084c <__aeabi_ddiv>
 800aece:	f7f5 fe43 	bl	8000b58 <__aeabi_d2iz>
 800aed2:	4682      	mov	sl, r0
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	4642      	mov	r2, r8
 800aeda:	464b      	mov	r3, r9
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4602      	mov	r2, r0
 800aee2:	460b      	mov	r3, r1
 800aee4:	4630      	mov	r0, r6
 800aee6:	4639      	mov	r1, r7
 800aee8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aeec:	f7f5 f9cc 	bl	8000288 <__aeabi_dsub>
 800aef0:	f805 6b01 	strb.w	r6, [r5], #1
 800aef4:	9e01      	ldr	r6, [sp, #4]
 800aef6:	9f03      	ldr	r7, [sp, #12]
 800aef8:	1bae      	subs	r6, r5, r6
 800aefa:	42b7      	cmp	r7, r6
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	d135      	bne.n	800af6e <_dtoa_r+0x6e6>
 800af02:	f7f5 f9c3 	bl	800028c <__adddf3>
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	4606      	mov	r6, r0
 800af0c:	460f      	mov	r7, r1
 800af0e:	f7f5 fe03 	bl	8000b18 <__aeabi_dcmpgt>
 800af12:	b9d0      	cbnz	r0, 800af4a <_dtoa_r+0x6c2>
 800af14:	4642      	mov	r2, r8
 800af16:	464b      	mov	r3, r9
 800af18:	4630      	mov	r0, r6
 800af1a:	4639      	mov	r1, r7
 800af1c:	f7f5 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800af20:	b110      	cbz	r0, 800af28 <_dtoa_r+0x6a0>
 800af22:	f01a 0f01 	tst.w	sl, #1
 800af26:	d110      	bne.n	800af4a <_dtoa_r+0x6c2>
 800af28:	4620      	mov	r0, r4
 800af2a:	ee18 1a10 	vmov	r1, s16
 800af2e:	f000 fb09 	bl	800b544 <_Bfree>
 800af32:	2300      	movs	r3, #0
 800af34:	9800      	ldr	r0, [sp, #0]
 800af36:	702b      	strb	r3, [r5, #0]
 800af38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af3a:	3001      	adds	r0, #1
 800af3c:	6018      	str	r0, [r3, #0]
 800af3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af40:	2b00      	cmp	r3, #0
 800af42:	f43f acf1 	beq.w	800a928 <_dtoa_r+0xa0>
 800af46:	601d      	str	r5, [r3, #0]
 800af48:	e4ee      	b.n	800a928 <_dtoa_r+0xa0>
 800af4a:	9f00      	ldr	r7, [sp, #0]
 800af4c:	462b      	mov	r3, r5
 800af4e:	461d      	mov	r5, r3
 800af50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af54:	2a39      	cmp	r2, #57	; 0x39
 800af56:	d106      	bne.n	800af66 <_dtoa_r+0x6de>
 800af58:	9a01      	ldr	r2, [sp, #4]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d1f7      	bne.n	800af4e <_dtoa_r+0x6c6>
 800af5e:	9901      	ldr	r1, [sp, #4]
 800af60:	2230      	movs	r2, #48	; 0x30
 800af62:	3701      	adds	r7, #1
 800af64:	700a      	strb	r2, [r1, #0]
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	3201      	adds	r2, #1
 800af6a:	701a      	strb	r2, [r3, #0]
 800af6c:	e790      	b.n	800ae90 <_dtoa_r+0x608>
 800af6e:	4ba6      	ldr	r3, [pc, #664]	; (800b208 <_dtoa_r+0x980>)
 800af70:	2200      	movs	r2, #0
 800af72:	f7f5 fb41 	bl	80005f8 <__aeabi_dmul>
 800af76:	2200      	movs	r2, #0
 800af78:	2300      	movs	r3, #0
 800af7a:	4606      	mov	r6, r0
 800af7c:	460f      	mov	r7, r1
 800af7e:	f7f5 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af82:	2800      	cmp	r0, #0
 800af84:	d09d      	beq.n	800aec2 <_dtoa_r+0x63a>
 800af86:	e7cf      	b.n	800af28 <_dtoa_r+0x6a0>
 800af88:	9a08      	ldr	r2, [sp, #32]
 800af8a:	2a00      	cmp	r2, #0
 800af8c:	f000 80d7 	beq.w	800b13e <_dtoa_r+0x8b6>
 800af90:	9a06      	ldr	r2, [sp, #24]
 800af92:	2a01      	cmp	r2, #1
 800af94:	f300 80ba 	bgt.w	800b10c <_dtoa_r+0x884>
 800af98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af9a:	2a00      	cmp	r2, #0
 800af9c:	f000 80b2 	beq.w	800b104 <_dtoa_r+0x87c>
 800afa0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800afa4:	9e07      	ldr	r6, [sp, #28]
 800afa6:	9d04      	ldr	r5, [sp, #16]
 800afa8:	9a04      	ldr	r2, [sp, #16]
 800afaa:	441a      	add	r2, r3
 800afac:	9204      	str	r2, [sp, #16]
 800afae:	9a05      	ldr	r2, [sp, #20]
 800afb0:	2101      	movs	r1, #1
 800afb2:	441a      	add	r2, r3
 800afb4:	4620      	mov	r0, r4
 800afb6:	9205      	str	r2, [sp, #20]
 800afb8:	f000 fb7c 	bl	800b6b4 <__i2b>
 800afbc:	4607      	mov	r7, r0
 800afbe:	2d00      	cmp	r5, #0
 800afc0:	dd0c      	ble.n	800afdc <_dtoa_r+0x754>
 800afc2:	9b05      	ldr	r3, [sp, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd09      	ble.n	800afdc <_dtoa_r+0x754>
 800afc8:	42ab      	cmp	r3, r5
 800afca:	9a04      	ldr	r2, [sp, #16]
 800afcc:	bfa8      	it	ge
 800afce:	462b      	movge	r3, r5
 800afd0:	1ad2      	subs	r2, r2, r3
 800afd2:	9204      	str	r2, [sp, #16]
 800afd4:	9a05      	ldr	r2, [sp, #20]
 800afd6:	1aed      	subs	r5, r5, r3
 800afd8:	1ad3      	subs	r3, r2, r3
 800afda:	9305      	str	r3, [sp, #20]
 800afdc:	9b07      	ldr	r3, [sp, #28]
 800afde:	b31b      	cbz	r3, 800b028 <_dtoa_r+0x7a0>
 800afe0:	9b08      	ldr	r3, [sp, #32]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f000 80af 	beq.w	800b146 <_dtoa_r+0x8be>
 800afe8:	2e00      	cmp	r6, #0
 800afea:	dd13      	ble.n	800b014 <_dtoa_r+0x78c>
 800afec:	4639      	mov	r1, r7
 800afee:	4632      	mov	r2, r6
 800aff0:	4620      	mov	r0, r4
 800aff2:	f000 fc1f 	bl	800b834 <__pow5mult>
 800aff6:	ee18 2a10 	vmov	r2, s16
 800affa:	4601      	mov	r1, r0
 800affc:	4607      	mov	r7, r0
 800affe:	4620      	mov	r0, r4
 800b000:	f000 fb6e 	bl	800b6e0 <__multiply>
 800b004:	ee18 1a10 	vmov	r1, s16
 800b008:	4680      	mov	r8, r0
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 fa9a 	bl	800b544 <_Bfree>
 800b010:	ee08 8a10 	vmov	s16, r8
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	1b9a      	subs	r2, r3, r6
 800b018:	d006      	beq.n	800b028 <_dtoa_r+0x7a0>
 800b01a:	ee18 1a10 	vmov	r1, s16
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 fc08 	bl	800b834 <__pow5mult>
 800b024:	ee08 0a10 	vmov	s16, r0
 800b028:	2101      	movs	r1, #1
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 fb42 	bl	800b6b4 <__i2b>
 800b030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b032:	2b00      	cmp	r3, #0
 800b034:	4606      	mov	r6, r0
 800b036:	f340 8088 	ble.w	800b14a <_dtoa_r+0x8c2>
 800b03a:	461a      	mov	r2, r3
 800b03c:	4601      	mov	r1, r0
 800b03e:	4620      	mov	r0, r4
 800b040:	f000 fbf8 	bl	800b834 <__pow5mult>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	2b01      	cmp	r3, #1
 800b048:	4606      	mov	r6, r0
 800b04a:	f340 8081 	ble.w	800b150 <_dtoa_r+0x8c8>
 800b04e:	f04f 0800 	mov.w	r8, #0
 800b052:	6933      	ldr	r3, [r6, #16]
 800b054:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b058:	6918      	ldr	r0, [r3, #16]
 800b05a:	f000 fadb 	bl	800b614 <__hi0bits>
 800b05e:	f1c0 0020 	rsb	r0, r0, #32
 800b062:	9b05      	ldr	r3, [sp, #20]
 800b064:	4418      	add	r0, r3
 800b066:	f010 001f 	ands.w	r0, r0, #31
 800b06a:	f000 8092 	beq.w	800b192 <_dtoa_r+0x90a>
 800b06e:	f1c0 0320 	rsb	r3, r0, #32
 800b072:	2b04      	cmp	r3, #4
 800b074:	f340 808a 	ble.w	800b18c <_dtoa_r+0x904>
 800b078:	f1c0 001c 	rsb	r0, r0, #28
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	4403      	add	r3, r0
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	9b05      	ldr	r3, [sp, #20]
 800b084:	4403      	add	r3, r0
 800b086:	4405      	add	r5, r0
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	9b04      	ldr	r3, [sp, #16]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dd07      	ble.n	800b0a0 <_dtoa_r+0x818>
 800b090:	ee18 1a10 	vmov	r1, s16
 800b094:	461a      	mov	r2, r3
 800b096:	4620      	mov	r0, r4
 800b098:	f000 fc26 	bl	800b8e8 <__lshift>
 800b09c:	ee08 0a10 	vmov	s16, r0
 800b0a0:	9b05      	ldr	r3, [sp, #20]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dd05      	ble.n	800b0b2 <_dtoa_r+0x82a>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 fc1c 	bl	800b8e8 <__lshift>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d06e      	beq.n	800b196 <_dtoa_r+0x90e>
 800b0b8:	ee18 0a10 	vmov	r0, s16
 800b0bc:	4631      	mov	r1, r6
 800b0be:	f000 fc83 	bl	800b9c8 <__mcmp>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	da67      	bge.n	800b196 <_dtoa_r+0x90e>
 800b0c6:	9b00      	ldr	r3, [sp, #0]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	220a      	movs	r2, #10
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 fa57 	bl	800b588 <__multadd>
 800b0da:	9b08      	ldr	r3, [sp, #32]
 800b0dc:	ee08 0a10 	vmov	s16, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 81b1 	beq.w	800b448 <_dtoa_r+0xbc0>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	220a      	movs	r2, #10
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f000 fa4b 	bl	800b588 <__multadd>
 800b0f2:	9b02      	ldr	r3, [sp, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	f300 808e 	bgt.w	800b218 <_dtoa_r+0x990>
 800b0fc:	9b06      	ldr	r3, [sp, #24]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	dc51      	bgt.n	800b1a6 <_dtoa_r+0x91e>
 800b102:	e089      	b.n	800b218 <_dtoa_r+0x990>
 800b104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b10a:	e74b      	b.n	800afa4 <_dtoa_r+0x71c>
 800b10c:	9b03      	ldr	r3, [sp, #12]
 800b10e:	1e5e      	subs	r6, r3, #1
 800b110:	9b07      	ldr	r3, [sp, #28]
 800b112:	42b3      	cmp	r3, r6
 800b114:	bfbf      	itttt	lt
 800b116:	9b07      	ldrlt	r3, [sp, #28]
 800b118:	9607      	strlt	r6, [sp, #28]
 800b11a:	1af2      	sublt	r2, r6, r3
 800b11c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b11e:	bfb6      	itet	lt
 800b120:	189b      	addlt	r3, r3, r2
 800b122:	1b9e      	subge	r6, r3, r6
 800b124:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	bfb8      	it	lt
 800b12a:	2600      	movlt	r6, #0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	bfb7      	itett	lt
 800b130:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b134:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b138:	1a9d      	sublt	r5, r3, r2
 800b13a:	2300      	movlt	r3, #0
 800b13c:	e734      	b.n	800afa8 <_dtoa_r+0x720>
 800b13e:	9e07      	ldr	r6, [sp, #28]
 800b140:	9d04      	ldr	r5, [sp, #16]
 800b142:	9f08      	ldr	r7, [sp, #32]
 800b144:	e73b      	b.n	800afbe <_dtoa_r+0x736>
 800b146:	9a07      	ldr	r2, [sp, #28]
 800b148:	e767      	b.n	800b01a <_dtoa_r+0x792>
 800b14a:	9b06      	ldr	r3, [sp, #24]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	dc18      	bgt.n	800b182 <_dtoa_r+0x8fa>
 800b150:	f1ba 0f00 	cmp.w	sl, #0
 800b154:	d115      	bne.n	800b182 <_dtoa_r+0x8fa>
 800b156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b15a:	b993      	cbnz	r3, 800b182 <_dtoa_r+0x8fa>
 800b15c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b160:	0d1b      	lsrs	r3, r3, #20
 800b162:	051b      	lsls	r3, r3, #20
 800b164:	b183      	cbz	r3, 800b188 <_dtoa_r+0x900>
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	3301      	adds	r3, #1
 800b16a:	9304      	str	r3, [sp, #16]
 800b16c:	9b05      	ldr	r3, [sp, #20]
 800b16e:	3301      	adds	r3, #1
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	f04f 0801 	mov.w	r8, #1
 800b176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f47f af6a 	bne.w	800b052 <_dtoa_r+0x7ca>
 800b17e:	2001      	movs	r0, #1
 800b180:	e76f      	b.n	800b062 <_dtoa_r+0x7da>
 800b182:	f04f 0800 	mov.w	r8, #0
 800b186:	e7f6      	b.n	800b176 <_dtoa_r+0x8ee>
 800b188:	4698      	mov	r8, r3
 800b18a:	e7f4      	b.n	800b176 <_dtoa_r+0x8ee>
 800b18c:	f43f af7d 	beq.w	800b08a <_dtoa_r+0x802>
 800b190:	4618      	mov	r0, r3
 800b192:	301c      	adds	r0, #28
 800b194:	e772      	b.n	800b07c <_dtoa_r+0x7f4>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dc37      	bgt.n	800b20c <_dtoa_r+0x984>
 800b19c:	9b06      	ldr	r3, [sp, #24]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	dd34      	ble.n	800b20c <_dtoa_r+0x984>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	9302      	str	r3, [sp, #8]
 800b1a6:	9b02      	ldr	r3, [sp, #8]
 800b1a8:	b96b      	cbnz	r3, 800b1c6 <_dtoa_r+0x93e>
 800b1aa:	4631      	mov	r1, r6
 800b1ac:	2205      	movs	r2, #5
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 f9ea 	bl	800b588 <__multadd>
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	ee18 0a10 	vmov	r0, s16
 800b1bc:	f000 fc04 	bl	800b9c8 <__mcmp>
 800b1c0:	2800      	cmp	r0, #0
 800b1c2:	f73f adbb 	bgt.w	800ad3c <_dtoa_r+0x4b4>
 800b1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c8:	9d01      	ldr	r5, [sp, #4]
 800b1ca:	43db      	mvns	r3, r3
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	f04f 0800 	mov.w	r8, #0
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 f9b5 	bl	800b544 <_Bfree>
 800b1da:	2f00      	cmp	r7, #0
 800b1dc:	f43f aea4 	beq.w	800af28 <_dtoa_r+0x6a0>
 800b1e0:	f1b8 0f00 	cmp.w	r8, #0
 800b1e4:	d005      	beq.n	800b1f2 <_dtoa_r+0x96a>
 800b1e6:	45b8      	cmp	r8, r7
 800b1e8:	d003      	beq.n	800b1f2 <_dtoa_r+0x96a>
 800b1ea:	4641      	mov	r1, r8
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	f000 f9a9 	bl	800b544 <_Bfree>
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	f000 f9a5 	bl	800b544 <_Bfree>
 800b1fa:	e695      	b.n	800af28 <_dtoa_r+0x6a0>
 800b1fc:	2600      	movs	r6, #0
 800b1fe:	4637      	mov	r7, r6
 800b200:	e7e1      	b.n	800b1c6 <_dtoa_r+0x93e>
 800b202:	9700      	str	r7, [sp, #0]
 800b204:	4637      	mov	r7, r6
 800b206:	e599      	b.n	800ad3c <_dtoa_r+0x4b4>
 800b208:	40240000 	.word	0x40240000
 800b20c:	9b08      	ldr	r3, [sp, #32]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f000 80ca 	beq.w	800b3a8 <_dtoa_r+0xb20>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	2d00      	cmp	r5, #0
 800b21a:	dd05      	ble.n	800b228 <_dtoa_r+0x9a0>
 800b21c:	4639      	mov	r1, r7
 800b21e:	462a      	mov	r2, r5
 800b220:	4620      	mov	r0, r4
 800b222:	f000 fb61 	bl	800b8e8 <__lshift>
 800b226:	4607      	mov	r7, r0
 800b228:	f1b8 0f00 	cmp.w	r8, #0
 800b22c:	d05b      	beq.n	800b2e6 <_dtoa_r+0xa5e>
 800b22e:	6879      	ldr	r1, [r7, #4]
 800b230:	4620      	mov	r0, r4
 800b232:	f000 f947 	bl	800b4c4 <_Balloc>
 800b236:	4605      	mov	r5, r0
 800b238:	b928      	cbnz	r0, 800b246 <_dtoa_r+0x9be>
 800b23a:	4b87      	ldr	r3, [pc, #540]	; (800b458 <_dtoa_r+0xbd0>)
 800b23c:	4602      	mov	r2, r0
 800b23e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b242:	f7ff bb3b 	b.w	800a8bc <_dtoa_r+0x34>
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	3202      	adds	r2, #2
 800b24a:	0092      	lsls	r2, r2, #2
 800b24c:	f107 010c 	add.w	r1, r7, #12
 800b250:	300c      	adds	r0, #12
 800b252:	f7fe fcc1 	bl	8009bd8 <memcpy>
 800b256:	2201      	movs	r2, #1
 800b258:	4629      	mov	r1, r5
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 fb44 	bl	800b8e8 <__lshift>
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	f103 0901 	add.w	r9, r3, #1
 800b266:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	f00a 0301 	and.w	r3, sl, #1
 800b272:	46b8      	mov	r8, r7
 800b274:	9304      	str	r3, [sp, #16]
 800b276:	4607      	mov	r7, r0
 800b278:	4631      	mov	r1, r6
 800b27a:	ee18 0a10 	vmov	r0, s16
 800b27e:	f7ff fa77 	bl	800a770 <quorem>
 800b282:	4641      	mov	r1, r8
 800b284:	9002      	str	r0, [sp, #8]
 800b286:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b28a:	ee18 0a10 	vmov	r0, s16
 800b28e:	f000 fb9b 	bl	800b9c8 <__mcmp>
 800b292:	463a      	mov	r2, r7
 800b294:	9003      	str	r0, [sp, #12]
 800b296:	4631      	mov	r1, r6
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fbb1 	bl	800ba00 <__mdiff>
 800b29e:	68c2      	ldr	r2, [r0, #12]
 800b2a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b2a4:	4605      	mov	r5, r0
 800b2a6:	bb02      	cbnz	r2, 800b2ea <_dtoa_r+0xa62>
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	ee18 0a10 	vmov	r0, s16
 800b2ae:	f000 fb8b 	bl	800b9c8 <__mcmp>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	9207      	str	r2, [sp, #28]
 800b2ba:	f000 f943 	bl	800b544 <_Bfree>
 800b2be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b2c2:	ea43 0102 	orr.w	r1, r3, r2
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	464d      	mov	r5, r9
 800b2cc:	d10f      	bne.n	800b2ee <_dtoa_r+0xa66>
 800b2ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2d2:	d02a      	beq.n	800b32a <_dtoa_r+0xaa2>
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	dd02      	ble.n	800b2e0 <_dtoa_r+0xa58>
 800b2da:	9b02      	ldr	r3, [sp, #8]
 800b2dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b2e0:	f88b a000 	strb.w	sl, [fp]
 800b2e4:	e775      	b.n	800b1d2 <_dtoa_r+0x94a>
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	e7ba      	b.n	800b260 <_dtoa_r+0x9d8>
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	e7e2      	b.n	800b2b4 <_dtoa_r+0xa2c>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	db04      	blt.n	800b2fe <_dtoa_r+0xa76>
 800b2f4:	9906      	ldr	r1, [sp, #24]
 800b2f6:	430b      	orrs	r3, r1
 800b2f8:	9904      	ldr	r1, [sp, #16]
 800b2fa:	430b      	orrs	r3, r1
 800b2fc:	d122      	bne.n	800b344 <_dtoa_r+0xabc>
 800b2fe:	2a00      	cmp	r2, #0
 800b300:	ddee      	ble.n	800b2e0 <_dtoa_r+0xa58>
 800b302:	ee18 1a10 	vmov	r1, s16
 800b306:	2201      	movs	r2, #1
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 faed 	bl	800b8e8 <__lshift>
 800b30e:	4631      	mov	r1, r6
 800b310:	ee08 0a10 	vmov	s16, r0
 800b314:	f000 fb58 	bl	800b9c8 <__mcmp>
 800b318:	2800      	cmp	r0, #0
 800b31a:	dc03      	bgt.n	800b324 <_dtoa_r+0xa9c>
 800b31c:	d1e0      	bne.n	800b2e0 <_dtoa_r+0xa58>
 800b31e:	f01a 0f01 	tst.w	sl, #1
 800b322:	d0dd      	beq.n	800b2e0 <_dtoa_r+0xa58>
 800b324:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b328:	d1d7      	bne.n	800b2da <_dtoa_r+0xa52>
 800b32a:	2339      	movs	r3, #57	; 0x39
 800b32c:	f88b 3000 	strb.w	r3, [fp]
 800b330:	462b      	mov	r3, r5
 800b332:	461d      	mov	r5, r3
 800b334:	3b01      	subs	r3, #1
 800b336:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b33a:	2a39      	cmp	r2, #57	; 0x39
 800b33c:	d071      	beq.n	800b422 <_dtoa_r+0xb9a>
 800b33e:	3201      	adds	r2, #1
 800b340:	701a      	strb	r2, [r3, #0]
 800b342:	e746      	b.n	800b1d2 <_dtoa_r+0x94a>
 800b344:	2a00      	cmp	r2, #0
 800b346:	dd07      	ble.n	800b358 <_dtoa_r+0xad0>
 800b348:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b34c:	d0ed      	beq.n	800b32a <_dtoa_r+0xaa2>
 800b34e:	f10a 0301 	add.w	r3, sl, #1
 800b352:	f88b 3000 	strb.w	r3, [fp]
 800b356:	e73c      	b.n	800b1d2 <_dtoa_r+0x94a>
 800b358:	9b05      	ldr	r3, [sp, #20]
 800b35a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b35e:	4599      	cmp	r9, r3
 800b360:	d047      	beq.n	800b3f2 <_dtoa_r+0xb6a>
 800b362:	ee18 1a10 	vmov	r1, s16
 800b366:	2300      	movs	r3, #0
 800b368:	220a      	movs	r2, #10
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f90c 	bl	800b588 <__multadd>
 800b370:	45b8      	cmp	r8, r7
 800b372:	ee08 0a10 	vmov	s16, r0
 800b376:	f04f 0300 	mov.w	r3, #0
 800b37a:	f04f 020a 	mov.w	r2, #10
 800b37e:	4641      	mov	r1, r8
 800b380:	4620      	mov	r0, r4
 800b382:	d106      	bne.n	800b392 <_dtoa_r+0xb0a>
 800b384:	f000 f900 	bl	800b588 <__multadd>
 800b388:	4680      	mov	r8, r0
 800b38a:	4607      	mov	r7, r0
 800b38c:	f109 0901 	add.w	r9, r9, #1
 800b390:	e772      	b.n	800b278 <_dtoa_r+0x9f0>
 800b392:	f000 f8f9 	bl	800b588 <__multadd>
 800b396:	4639      	mov	r1, r7
 800b398:	4680      	mov	r8, r0
 800b39a:	2300      	movs	r3, #0
 800b39c:	220a      	movs	r2, #10
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 f8f2 	bl	800b588 <__multadd>
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	e7f1      	b.n	800b38c <_dtoa_r+0xb04>
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	9302      	str	r3, [sp, #8]
 800b3ac:	9d01      	ldr	r5, [sp, #4]
 800b3ae:	ee18 0a10 	vmov	r0, s16
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	f7ff f9dc 	bl	800a770 <quorem>
 800b3b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b3bc:	9b01      	ldr	r3, [sp, #4]
 800b3be:	f805 ab01 	strb.w	sl, [r5], #1
 800b3c2:	1aea      	subs	r2, r5, r3
 800b3c4:	9b02      	ldr	r3, [sp, #8]
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	dd09      	ble.n	800b3de <_dtoa_r+0xb56>
 800b3ca:	ee18 1a10 	vmov	r1, s16
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 f8d8 	bl	800b588 <__multadd>
 800b3d8:	ee08 0a10 	vmov	s16, r0
 800b3dc:	e7e7      	b.n	800b3ae <_dtoa_r+0xb26>
 800b3de:	9b02      	ldr	r3, [sp, #8]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bfc8      	it	gt
 800b3e4:	461d      	movgt	r5, r3
 800b3e6:	9b01      	ldr	r3, [sp, #4]
 800b3e8:	bfd8      	it	le
 800b3ea:	2501      	movle	r5, #1
 800b3ec:	441d      	add	r5, r3
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	ee18 1a10 	vmov	r1, s16
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 fa75 	bl	800b8e8 <__lshift>
 800b3fe:	4631      	mov	r1, r6
 800b400:	ee08 0a10 	vmov	s16, r0
 800b404:	f000 fae0 	bl	800b9c8 <__mcmp>
 800b408:	2800      	cmp	r0, #0
 800b40a:	dc91      	bgt.n	800b330 <_dtoa_r+0xaa8>
 800b40c:	d102      	bne.n	800b414 <_dtoa_r+0xb8c>
 800b40e:	f01a 0f01 	tst.w	sl, #1
 800b412:	d18d      	bne.n	800b330 <_dtoa_r+0xaa8>
 800b414:	462b      	mov	r3, r5
 800b416:	461d      	mov	r5, r3
 800b418:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b41c:	2a30      	cmp	r2, #48	; 0x30
 800b41e:	d0fa      	beq.n	800b416 <_dtoa_r+0xb8e>
 800b420:	e6d7      	b.n	800b1d2 <_dtoa_r+0x94a>
 800b422:	9a01      	ldr	r2, [sp, #4]
 800b424:	429a      	cmp	r2, r3
 800b426:	d184      	bne.n	800b332 <_dtoa_r+0xaaa>
 800b428:	9b00      	ldr	r3, [sp, #0]
 800b42a:	3301      	adds	r3, #1
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	2331      	movs	r3, #49	; 0x31
 800b430:	7013      	strb	r3, [r2, #0]
 800b432:	e6ce      	b.n	800b1d2 <_dtoa_r+0x94a>
 800b434:	4b09      	ldr	r3, [pc, #36]	; (800b45c <_dtoa_r+0xbd4>)
 800b436:	f7ff ba95 	b.w	800a964 <_dtoa_r+0xdc>
 800b43a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f47f aa6e 	bne.w	800a91e <_dtoa_r+0x96>
 800b442:	4b07      	ldr	r3, [pc, #28]	; (800b460 <_dtoa_r+0xbd8>)
 800b444:	f7ff ba8e 	b.w	800a964 <_dtoa_r+0xdc>
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	dcae      	bgt.n	800b3ac <_dtoa_r+0xb24>
 800b44e:	9b06      	ldr	r3, [sp, #24]
 800b450:	2b02      	cmp	r3, #2
 800b452:	f73f aea8 	bgt.w	800b1a6 <_dtoa_r+0x91e>
 800b456:	e7a9      	b.n	800b3ac <_dtoa_r+0xb24>
 800b458:	0800d0ed 	.word	0x0800d0ed
 800b45c:	0800ceb0 	.word	0x0800ceb0
 800b460:	0800d085 	.word	0x0800d085

0800b464 <fiprintf>:
 800b464:	b40e      	push	{r1, r2, r3}
 800b466:	b503      	push	{r0, r1, lr}
 800b468:	4601      	mov	r1, r0
 800b46a:	ab03      	add	r3, sp, #12
 800b46c:	4805      	ldr	r0, [pc, #20]	; (800b484 <fiprintf+0x20>)
 800b46e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b472:	6800      	ldr	r0, [r0, #0]
 800b474:	9301      	str	r3, [sp, #4]
 800b476:	f000 fe25 	bl	800c0c4 <_vfiprintf_r>
 800b47a:	b002      	add	sp, #8
 800b47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b480:	b003      	add	sp, #12
 800b482:	4770      	bx	lr
 800b484:	2000000c 	.word	0x2000000c

0800b488 <_localeconv_r>:
 800b488:	4800      	ldr	r0, [pc, #0]	; (800b48c <_localeconv_r+0x4>)
 800b48a:	4770      	bx	lr
 800b48c:	20000160 	.word	0x20000160

0800b490 <malloc>:
 800b490:	4b02      	ldr	r3, [pc, #8]	; (800b49c <malloc+0xc>)
 800b492:	4601      	mov	r1, r0
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	f000 bc1b 	b.w	800bcd0 <_malloc_r>
 800b49a:	bf00      	nop
 800b49c:	2000000c 	.word	0x2000000c

0800b4a0 <__ascii_mbtowc>:
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	b901      	cbnz	r1, 800b4a6 <__ascii_mbtowc+0x6>
 800b4a4:	a901      	add	r1, sp, #4
 800b4a6:	b142      	cbz	r2, 800b4ba <__ascii_mbtowc+0x1a>
 800b4a8:	b14b      	cbz	r3, 800b4be <__ascii_mbtowc+0x1e>
 800b4aa:	7813      	ldrb	r3, [r2, #0]
 800b4ac:	600b      	str	r3, [r1, #0]
 800b4ae:	7812      	ldrb	r2, [r2, #0]
 800b4b0:	1e10      	subs	r0, r2, #0
 800b4b2:	bf18      	it	ne
 800b4b4:	2001      	movne	r0, #1
 800b4b6:	b002      	add	sp, #8
 800b4b8:	4770      	bx	lr
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	e7fb      	b.n	800b4b6 <__ascii_mbtowc+0x16>
 800b4be:	f06f 0001 	mvn.w	r0, #1
 800b4c2:	e7f8      	b.n	800b4b6 <__ascii_mbtowc+0x16>

0800b4c4 <_Balloc>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	b976      	cbnz	r6, 800b4ec <_Balloc+0x28>
 800b4ce:	2010      	movs	r0, #16
 800b4d0:	f7ff ffde 	bl	800b490 <malloc>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	6260      	str	r0, [r4, #36]	; 0x24
 800b4d8:	b920      	cbnz	r0, 800b4e4 <_Balloc+0x20>
 800b4da:	4b18      	ldr	r3, [pc, #96]	; (800b53c <_Balloc+0x78>)
 800b4dc:	4818      	ldr	r0, [pc, #96]	; (800b540 <_Balloc+0x7c>)
 800b4de:	2166      	movs	r1, #102	; 0x66
 800b4e0:	f7ff f928 	bl	800a734 <__assert_func>
 800b4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b4e8:	6006      	str	r6, [r0, #0]
 800b4ea:	60c6      	str	r6, [r0, #12]
 800b4ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b4ee:	68f3      	ldr	r3, [r6, #12]
 800b4f0:	b183      	cbz	r3, 800b514 <_Balloc+0x50>
 800b4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4fa:	b9b8      	cbnz	r0, 800b52c <_Balloc+0x68>
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	fa01 f605 	lsl.w	r6, r1, r5
 800b502:	1d72      	adds	r2, r6, #5
 800b504:	0092      	lsls	r2, r2, #2
 800b506:	4620      	mov	r0, r4
 800b508:	f000 fb60 	bl	800bbcc <_calloc_r>
 800b50c:	b160      	cbz	r0, 800b528 <_Balloc+0x64>
 800b50e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b512:	e00e      	b.n	800b532 <_Balloc+0x6e>
 800b514:	2221      	movs	r2, #33	; 0x21
 800b516:	2104      	movs	r1, #4
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fb57 	bl	800bbcc <_calloc_r>
 800b51e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b520:	60f0      	str	r0, [r6, #12]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e4      	bne.n	800b4f2 <_Balloc+0x2e>
 800b528:	2000      	movs	r0, #0
 800b52a:	bd70      	pop	{r4, r5, r6, pc}
 800b52c:	6802      	ldr	r2, [r0, #0]
 800b52e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b532:	2300      	movs	r3, #0
 800b534:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b538:	e7f7      	b.n	800b52a <_Balloc+0x66>
 800b53a:	bf00      	nop
 800b53c:	0800ced4 	.word	0x0800ced4
 800b540:	0800d108 	.word	0x0800d108

0800b544 <_Bfree>:
 800b544:	b570      	push	{r4, r5, r6, lr}
 800b546:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b548:	4605      	mov	r5, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	b976      	cbnz	r6, 800b56c <_Bfree+0x28>
 800b54e:	2010      	movs	r0, #16
 800b550:	f7ff ff9e 	bl	800b490 <malloc>
 800b554:	4602      	mov	r2, r0
 800b556:	6268      	str	r0, [r5, #36]	; 0x24
 800b558:	b920      	cbnz	r0, 800b564 <_Bfree+0x20>
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <_Bfree+0x3c>)
 800b55c:	4809      	ldr	r0, [pc, #36]	; (800b584 <_Bfree+0x40>)
 800b55e:	218a      	movs	r1, #138	; 0x8a
 800b560:	f7ff f8e8 	bl	800a734 <__assert_func>
 800b564:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b568:	6006      	str	r6, [r0, #0]
 800b56a:	60c6      	str	r6, [r0, #12]
 800b56c:	b13c      	cbz	r4, 800b57e <_Bfree+0x3a>
 800b56e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b570:	6862      	ldr	r2, [r4, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b578:	6021      	str	r1, [r4, #0]
 800b57a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b57e:	bd70      	pop	{r4, r5, r6, pc}
 800b580:	0800ced4 	.word	0x0800ced4
 800b584:	0800d108 	.word	0x0800d108

0800b588 <__multadd>:
 800b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	690d      	ldr	r5, [r1, #16]
 800b58e:	4607      	mov	r7, r0
 800b590:	460c      	mov	r4, r1
 800b592:	461e      	mov	r6, r3
 800b594:	f101 0c14 	add.w	ip, r1, #20
 800b598:	2000      	movs	r0, #0
 800b59a:	f8dc 3000 	ldr.w	r3, [ip]
 800b59e:	b299      	uxth	r1, r3
 800b5a0:	fb02 6101 	mla	r1, r2, r1, r6
 800b5a4:	0c1e      	lsrs	r6, r3, #16
 800b5a6:	0c0b      	lsrs	r3, r1, #16
 800b5a8:	fb02 3306 	mla	r3, r2, r6, r3
 800b5ac:	b289      	uxth	r1, r1
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5b4:	4285      	cmp	r5, r0
 800b5b6:	f84c 1b04 	str.w	r1, [ip], #4
 800b5ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5be:	dcec      	bgt.n	800b59a <__multadd+0x12>
 800b5c0:	b30e      	cbz	r6, 800b606 <__multadd+0x7e>
 800b5c2:	68a3      	ldr	r3, [r4, #8]
 800b5c4:	42ab      	cmp	r3, r5
 800b5c6:	dc19      	bgt.n	800b5fc <__multadd+0x74>
 800b5c8:	6861      	ldr	r1, [r4, #4]
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	3101      	adds	r1, #1
 800b5ce:	f7ff ff79 	bl	800b4c4 <_Balloc>
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	b928      	cbnz	r0, 800b5e2 <__multadd+0x5a>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <__multadd+0x84>)
 800b5da:	480d      	ldr	r0, [pc, #52]	; (800b610 <__multadd+0x88>)
 800b5dc:	21b5      	movs	r1, #181	; 0xb5
 800b5de:	f7ff f8a9 	bl	800a734 <__assert_func>
 800b5e2:	6922      	ldr	r2, [r4, #16]
 800b5e4:	3202      	adds	r2, #2
 800b5e6:	f104 010c 	add.w	r1, r4, #12
 800b5ea:	0092      	lsls	r2, r2, #2
 800b5ec:	300c      	adds	r0, #12
 800b5ee:	f7fe faf3 	bl	8009bd8 <memcpy>
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff ffa5 	bl	800b544 <_Bfree>
 800b5fa:	4644      	mov	r4, r8
 800b5fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b600:	3501      	adds	r5, #1
 800b602:	615e      	str	r6, [r3, #20]
 800b604:	6125      	str	r5, [r4, #16]
 800b606:	4620      	mov	r0, r4
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	0800d0ed 	.word	0x0800d0ed
 800b610:	0800d108 	.word	0x0800d108

0800b614 <__hi0bits>:
 800b614:	0c03      	lsrs	r3, r0, #16
 800b616:	041b      	lsls	r3, r3, #16
 800b618:	b9d3      	cbnz	r3, 800b650 <__hi0bits+0x3c>
 800b61a:	0400      	lsls	r0, r0, #16
 800b61c:	2310      	movs	r3, #16
 800b61e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b622:	bf04      	itt	eq
 800b624:	0200      	lsleq	r0, r0, #8
 800b626:	3308      	addeq	r3, #8
 800b628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b62c:	bf04      	itt	eq
 800b62e:	0100      	lsleq	r0, r0, #4
 800b630:	3304      	addeq	r3, #4
 800b632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b636:	bf04      	itt	eq
 800b638:	0080      	lsleq	r0, r0, #2
 800b63a:	3302      	addeq	r3, #2
 800b63c:	2800      	cmp	r0, #0
 800b63e:	db05      	blt.n	800b64c <__hi0bits+0x38>
 800b640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b644:	f103 0301 	add.w	r3, r3, #1
 800b648:	bf08      	it	eq
 800b64a:	2320      	moveq	r3, #32
 800b64c:	4618      	mov	r0, r3
 800b64e:	4770      	bx	lr
 800b650:	2300      	movs	r3, #0
 800b652:	e7e4      	b.n	800b61e <__hi0bits+0xa>

0800b654 <__lo0bits>:
 800b654:	6803      	ldr	r3, [r0, #0]
 800b656:	f013 0207 	ands.w	r2, r3, #7
 800b65a:	4601      	mov	r1, r0
 800b65c:	d00b      	beq.n	800b676 <__lo0bits+0x22>
 800b65e:	07da      	lsls	r2, r3, #31
 800b660:	d423      	bmi.n	800b6aa <__lo0bits+0x56>
 800b662:	0798      	lsls	r0, r3, #30
 800b664:	bf49      	itett	mi
 800b666:	085b      	lsrmi	r3, r3, #1
 800b668:	089b      	lsrpl	r3, r3, #2
 800b66a:	2001      	movmi	r0, #1
 800b66c:	600b      	strmi	r3, [r1, #0]
 800b66e:	bf5c      	itt	pl
 800b670:	600b      	strpl	r3, [r1, #0]
 800b672:	2002      	movpl	r0, #2
 800b674:	4770      	bx	lr
 800b676:	b298      	uxth	r0, r3
 800b678:	b9a8      	cbnz	r0, 800b6a6 <__lo0bits+0x52>
 800b67a:	0c1b      	lsrs	r3, r3, #16
 800b67c:	2010      	movs	r0, #16
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	b90a      	cbnz	r2, 800b686 <__lo0bits+0x32>
 800b682:	3008      	adds	r0, #8
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	071a      	lsls	r2, r3, #28
 800b688:	bf04      	itt	eq
 800b68a:	091b      	lsreq	r3, r3, #4
 800b68c:	3004      	addeq	r0, #4
 800b68e:	079a      	lsls	r2, r3, #30
 800b690:	bf04      	itt	eq
 800b692:	089b      	lsreq	r3, r3, #2
 800b694:	3002      	addeq	r0, #2
 800b696:	07da      	lsls	r2, r3, #31
 800b698:	d403      	bmi.n	800b6a2 <__lo0bits+0x4e>
 800b69a:	085b      	lsrs	r3, r3, #1
 800b69c:	f100 0001 	add.w	r0, r0, #1
 800b6a0:	d005      	beq.n	800b6ae <__lo0bits+0x5a>
 800b6a2:	600b      	str	r3, [r1, #0]
 800b6a4:	4770      	bx	lr
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	e7e9      	b.n	800b67e <__lo0bits+0x2a>
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	4770      	bx	lr
 800b6ae:	2020      	movs	r0, #32
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <__i2b>:
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	f7ff ff03 	bl	800b4c4 <_Balloc>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	b928      	cbnz	r0, 800b6ce <__i2b+0x1a>
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <__i2b+0x24>)
 800b6c4:	4805      	ldr	r0, [pc, #20]	; (800b6dc <__i2b+0x28>)
 800b6c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b6ca:	f7ff f833 	bl	800a734 <__assert_func>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	6144      	str	r4, [r0, #20]
 800b6d2:	6103      	str	r3, [r0, #16]
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	0800d0ed 	.word	0x0800d0ed
 800b6dc:	0800d108 	.word	0x0800d108

0800b6e0 <__multiply>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	4691      	mov	r9, r2
 800b6e6:	690a      	ldr	r2, [r1, #16]
 800b6e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	bfb8      	it	lt
 800b6f0:	460b      	movlt	r3, r1
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	bfbc      	itt	lt
 800b6f6:	464c      	movlt	r4, r9
 800b6f8:	4699      	movlt	r9, r3
 800b6fa:	6927      	ldr	r7, [r4, #16]
 800b6fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b700:	68a3      	ldr	r3, [r4, #8]
 800b702:	6861      	ldr	r1, [r4, #4]
 800b704:	eb07 060a 	add.w	r6, r7, sl
 800b708:	42b3      	cmp	r3, r6
 800b70a:	b085      	sub	sp, #20
 800b70c:	bfb8      	it	lt
 800b70e:	3101      	addlt	r1, #1
 800b710:	f7ff fed8 	bl	800b4c4 <_Balloc>
 800b714:	b930      	cbnz	r0, 800b724 <__multiply+0x44>
 800b716:	4602      	mov	r2, r0
 800b718:	4b44      	ldr	r3, [pc, #272]	; (800b82c <__multiply+0x14c>)
 800b71a:	4845      	ldr	r0, [pc, #276]	; (800b830 <__multiply+0x150>)
 800b71c:	f240 115d 	movw	r1, #349	; 0x15d
 800b720:	f7ff f808 	bl	800a734 <__assert_func>
 800b724:	f100 0514 	add.w	r5, r0, #20
 800b728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b72c:	462b      	mov	r3, r5
 800b72e:	2200      	movs	r2, #0
 800b730:	4543      	cmp	r3, r8
 800b732:	d321      	bcc.n	800b778 <__multiply+0x98>
 800b734:	f104 0314 	add.w	r3, r4, #20
 800b738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b73c:	f109 0314 	add.w	r3, r9, #20
 800b740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b744:	9202      	str	r2, [sp, #8]
 800b746:	1b3a      	subs	r2, r7, r4
 800b748:	3a15      	subs	r2, #21
 800b74a:	f022 0203 	bic.w	r2, r2, #3
 800b74e:	3204      	adds	r2, #4
 800b750:	f104 0115 	add.w	r1, r4, #21
 800b754:	428f      	cmp	r7, r1
 800b756:	bf38      	it	cc
 800b758:	2204      	movcc	r2, #4
 800b75a:	9201      	str	r2, [sp, #4]
 800b75c:	9a02      	ldr	r2, [sp, #8]
 800b75e:	9303      	str	r3, [sp, #12]
 800b760:	429a      	cmp	r2, r3
 800b762:	d80c      	bhi.n	800b77e <__multiply+0x9e>
 800b764:	2e00      	cmp	r6, #0
 800b766:	dd03      	ble.n	800b770 <__multiply+0x90>
 800b768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05a      	beq.n	800b826 <__multiply+0x146>
 800b770:	6106      	str	r6, [r0, #16]
 800b772:	b005      	add	sp, #20
 800b774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b778:	f843 2b04 	str.w	r2, [r3], #4
 800b77c:	e7d8      	b.n	800b730 <__multiply+0x50>
 800b77e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b782:	f1ba 0f00 	cmp.w	sl, #0
 800b786:	d024      	beq.n	800b7d2 <__multiply+0xf2>
 800b788:	f104 0e14 	add.w	lr, r4, #20
 800b78c:	46a9      	mov	r9, r5
 800b78e:	f04f 0c00 	mov.w	ip, #0
 800b792:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b796:	f8d9 1000 	ldr.w	r1, [r9]
 800b79a:	fa1f fb82 	uxth.w	fp, r2
 800b79e:	b289      	uxth	r1, r1
 800b7a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7a8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7ac:	4461      	add	r1, ip
 800b7ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7ba:	b289      	uxth	r1, r1
 800b7bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7c0:	4577      	cmp	r7, lr
 800b7c2:	f849 1b04 	str.w	r1, [r9], #4
 800b7c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7ca:	d8e2      	bhi.n	800b792 <__multiply+0xb2>
 800b7cc:	9a01      	ldr	r2, [sp, #4]
 800b7ce:	f845 c002 	str.w	ip, [r5, r2]
 800b7d2:	9a03      	ldr	r2, [sp, #12]
 800b7d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	f1b9 0f00 	cmp.w	r9, #0
 800b7de:	d020      	beq.n	800b822 <__multiply+0x142>
 800b7e0:	6829      	ldr	r1, [r5, #0]
 800b7e2:	f104 0c14 	add.w	ip, r4, #20
 800b7e6:	46ae      	mov	lr, r5
 800b7e8:	f04f 0a00 	mov.w	sl, #0
 800b7ec:	f8bc b000 	ldrh.w	fp, [ip]
 800b7f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b7f4:	fb09 220b 	mla	r2, r9, fp, r2
 800b7f8:	4492      	add	sl, r2
 800b7fa:	b289      	uxth	r1, r1
 800b7fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b800:	f84e 1b04 	str.w	r1, [lr], #4
 800b804:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b808:	f8be 1000 	ldrh.w	r1, [lr]
 800b80c:	0c12      	lsrs	r2, r2, #16
 800b80e:	fb09 1102 	mla	r1, r9, r2, r1
 800b812:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b816:	4567      	cmp	r7, ip
 800b818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b81c:	d8e6      	bhi.n	800b7ec <__multiply+0x10c>
 800b81e:	9a01      	ldr	r2, [sp, #4]
 800b820:	50a9      	str	r1, [r5, r2]
 800b822:	3504      	adds	r5, #4
 800b824:	e79a      	b.n	800b75c <__multiply+0x7c>
 800b826:	3e01      	subs	r6, #1
 800b828:	e79c      	b.n	800b764 <__multiply+0x84>
 800b82a:	bf00      	nop
 800b82c:	0800d0ed 	.word	0x0800d0ed
 800b830:	0800d108 	.word	0x0800d108

0800b834 <__pow5mult>:
 800b834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b838:	4615      	mov	r5, r2
 800b83a:	f012 0203 	ands.w	r2, r2, #3
 800b83e:	4606      	mov	r6, r0
 800b840:	460f      	mov	r7, r1
 800b842:	d007      	beq.n	800b854 <__pow5mult+0x20>
 800b844:	4c25      	ldr	r4, [pc, #148]	; (800b8dc <__pow5mult+0xa8>)
 800b846:	3a01      	subs	r2, #1
 800b848:	2300      	movs	r3, #0
 800b84a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b84e:	f7ff fe9b 	bl	800b588 <__multadd>
 800b852:	4607      	mov	r7, r0
 800b854:	10ad      	asrs	r5, r5, #2
 800b856:	d03d      	beq.n	800b8d4 <__pow5mult+0xa0>
 800b858:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b85a:	b97c      	cbnz	r4, 800b87c <__pow5mult+0x48>
 800b85c:	2010      	movs	r0, #16
 800b85e:	f7ff fe17 	bl	800b490 <malloc>
 800b862:	4602      	mov	r2, r0
 800b864:	6270      	str	r0, [r6, #36]	; 0x24
 800b866:	b928      	cbnz	r0, 800b874 <__pow5mult+0x40>
 800b868:	4b1d      	ldr	r3, [pc, #116]	; (800b8e0 <__pow5mult+0xac>)
 800b86a:	481e      	ldr	r0, [pc, #120]	; (800b8e4 <__pow5mult+0xb0>)
 800b86c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b870:	f7fe ff60 	bl	800a734 <__assert_func>
 800b874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b878:	6004      	str	r4, [r0, #0]
 800b87a:	60c4      	str	r4, [r0, #12]
 800b87c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b884:	b94c      	cbnz	r4, 800b89a <__pow5mult+0x66>
 800b886:	f240 2171 	movw	r1, #625	; 0x271
 800b88a:	4630      	mov	r0, r6
 800b88c:	f7ff ff12 	bl	800b6b4 <__i2b>
 800b890:	2300      	movs	r3, #0
 800b892:	f8c8 0008 	str.w	r0, [r8, #8]
 800b896:	4604      	mov	r4, r0
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	f04f 0900 	mov.w	r9, #0
 800b89e:	07eb      	lsls	r3, r5, #31
 800b8a0:	d50a      	bpl.n	800b8b8 <__pow5mult+0x84>
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	f7ff ff1a 	bl	800b6e0 <__multiply>
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7ff fe47 	bl	800b544 <_Bfree>
 800b8b6:	4647      	mov	r7, r8
 800b8b8:	106d      	asrs	r5, r5, #1
 800b8ba:	d00b      	beq.n	800b8d4 <__pow5mult+0xa0>
 800b8bc:	6820      	ldr	r0, [r4, #0]
 800b8be:	b938      	cbnz	r0, 800b8d0 <__pow5mult+0x9c>
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff ff0b 	bl	800b6e0 <__multiply>
 800b8ca:	6020      	str	r0, [r4, #0]
 800b8cc:	f8c0 9000 	str.w	r9, [r0]
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	e7e4      	b.n	800b89e <__pow5mult+0x6a>
 800b8d4:	4638      	mov	r0, r7
 800b8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8da:	bf00      	nop
 800b8dc:	0800d258 	.word	0x0800d258
 800b8e0:	0800ced4 	.word	0x0800ced4
 800b8e4:	0800d108 	.word	0x0800d108

0800b8e8 <__lshift>:
 800b8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	6849      	ldr	r1, [r1, #4]
 800b8f0:	6923      	ldr	r3, [r4, #16]
 800b8f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b8f6:	68a3      	ldr	r3, [r4, #8]
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	4691      	mov	r9, r2
 800b8fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b900:	f108 0601 	add.w	r6, r8, #1
 800b904:	42b3      	cmp	r3, r6
 800b906:	db0b      	blt.n	800b920 <__lshift+0x38>
 800b908:	4638      	mov	r0, r7
 800b90a:	f7ff fddb 	bl	800b4c4 <_Balloc>
 800b90e:	4605      	mov	r5, r0
 800b910:	b948      	cbnz	r0, 800b926 <__lshift+0x3e>
 800b912:	4602      	mov	r2, r0
 800b914:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <__lshift+0xd8>)
 800b916:	482b      	ldr	r0, [pc, #172]	; (800b9c4 <__lshift+0xdc>)
 800b918:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b91c:	f7fe ff0a 	bl	800a734 <__assert_func>
 800b920:	3101      	adds	r1, #1
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	e7ee      	b.n	800b904 <__lshift+0x1c>
 800b926:	2300      	movs	r3, #0
 800b928:	f100 0114 	add.w	r1, r0, #20
 800b92c:	f100 0210 	add.w	r2, r0, #16
 800b930:	4618      	mov	r0, r3
 800b932:	4553      	cmp	r3, sl
 800b934:	db37      	blt.n	800b9a6 <__lshift+0xbe>
 800b936:	6920      	ldr	r0, [r4, #16]
 800b938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b93c:	f104 0314 	add.w	r3, r4, #20
 800b940:	f019 091f 	ands.w	r9, r9, #31
 800b944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b948:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b94c:	d02f      	beq.n	800b9ae <__lshift+0xc6>
 800b94e:	f1c9 0e20 	rsb	lr, r9, #32
 800b952:	468a      	mov	sl, r1
 800b954:	f04f 0c00 	mov.w	ip, #0
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	fa02 f209 	lsl.w	r2, r2, r9
 800b95e:	ea42 020c 	orr.w	r2, r2, ip
 800b962:	f84a 2b04 	str.w	r2, [sl], #4
 800b966:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96a:	4298      	cmp	r0, r3
 800b96c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b970:	d8f2      	bhi.n	800b958 <__lshift+0x70>
 800b972:	1b03      	subs	r3, r0, r4
 800b974:	3b15      	subs	r3, #21
 800b976:	f023 0303 	bic.w	r3, r3, #3
 800b97a:	3304      	adds	r3, #4
 800b97c:	f104 0215 	add.w	r2, r4, #21
 800b980:	4290      	cmp	r0, r2
 800b982:	bf38      	it	cc
 800b984:	2304      	movcc	r3, #4
 800b986:	f841 c003 	str.w	ip, [r1, r3]
 800b98a:	f1bc 0f00 	cmp.w	ip, #0
 800b98e:	d001      	beq.n	800b994 <__lshift+0xac>
 800b990:	f108 0602 	add.w	r6, r8, #2
 800b994:	3e01      	subs	r6, #1
 800b996:	4638      	mov	r0, r7
 800b998:	612e      	str	r6, [r5, #16]
 800b99a:	4621      	mov	r1, r4
 800b99c:	f7ff fdd2 	bl	800b544 <_Bfree>
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	e7c1      	b.n	800b932 <__lshift+0x4a>
 800b9ae:	3904      	subs	r1, #4
 800b9b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9b8:	4298      	cmp	r0, r3
 800b9ba:	d8f9      	bhi.n	800b9b0 <__lshift+0xc8>
 800b9bc:	e7ea      	b.n	800b994 <__lshift+0xac>
 800b9be:	bf00      	nop
 800b9c0:	0800d0ed 	.word	0x0800d0ed
 800b9c4:	0800d108 	.word	0x0800d108

0800b9c8 <__mcmp>:
 800b9c8:	b530      	push	{r4, r5, lr}
 800b9ca:	6902      	ldr	r2, [r0, #16]
 800b9cc:	690c      	ldr	r4, [r1, #16]
 800b9ce:	1b12      	subs	r2, r2, r4
 800b9d0:	d10e      	bne.n	800b9f0 <__mcmp+0x28>
 800b9d2:	f100 0314 	add.w	r3, r0, #20
 800b9d6:	3114      	adds	r1, #20
 800b9d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b9dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b9e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b9e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b9e8:	42a5      	cmp	r5, r4
 800b9ea:	d003      	beq.n	800b9f4 <__mcmp+0x2c>
 800b9ec:	d305      	bcc.n	800b9fa <__mcmp+0x32>
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	bd30      	pop	{r4, r5, pc}
 800b9f4:	4283      	cmp	r3, r0
 800b9f6:	d3f3      	bcc.n	800b9e0 <__mcmp+0x18>
 800b9f8:	e7fa      	b.n	800b9f0 <__mcmp+0x28>
 800b9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fe:	e7f7      	b.n	800b9f0 <__mcmp+0x28>

0800ba00 <__mdiff>:
 800ba00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	460c      	mov	r4, r1
 800ba06:	4606      	mov	r6, r0
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4690      	mov	r8, r2
 800ba0e:	f7ff ffdb 	bl	800b9c8 <__mcmp>
 800ba12:	1e05      	subs	r5, r0, #0
 800ba14:	d110      	bne.n	800ba38 <__mdiff+0x38>
 800ba16:	4629      	mov	r1, r5
 800ba18:	4630      	mov	r0, r6
 800ba1a:	f7ff fd53 	bl	800b4c4 <_Balloc>
 800ba1e:	b930      	cbnz	r0, 800ba2e <__mdiff+0x2e>
 800ba20:	4b3a      	ldr	r3, [pc, #232]	; (800bb0c <__mdiff+0x10c>)
 800ba22:	4602      	mov	r2, r0
 800ba24:	f240 2132 	movw	r1, #562	; 0x232
 800ba28:	4839      	ldr	r0, [pc, #228]	; (800bb10 <__mdiff+0x110>)
 800ba2a:	f7fe fe83 	bl	800a734 <__assert_func>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba38:	bfa4      	itt	ge
 800ba3a:	4643      	movge	r3, r8
 800ba3c:	46a0      	movge	r8, r4
 800ba3e:	4630      	mov	r0, r6
 800ba40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba44:	bfa6      	itte	ge
 800ba46:	461c      	movge	r4, r3
 800ba48:	2500      	movge	r5, #0
 800ba4a:	2501      	movlt	r5, #1
 800ba4c:	f7ff fd3a 	bl	800b4c4 <_Balloc>
 800ba50:	b920      	cbnz	r0, 800ba5c <__mdiff+0x5c>
 800ba52:	4b2e      	ldr	r3, [pc, #184]	; (800bb0c <__mdiff+0x10c>)
 800ba54:	4602      	mov	r2, r0
 800ba56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba5a:	e7e5      	b.n	800ba28 <__mdiff+0x28>
 800ba5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba60:	6926      	ldr	r6, [r4, #16]
 800ba62:	60c5      	str	r5, [r0, #12]
 800ba64:	f104 0914 	add.w	r9, r4, #20
 800ba68:	f108 0514 	add.w	r5, r8, #20
 800ba6c:	f100 0e14 	add.w	lr, r0, #20
 800ba70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ba74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba78:	f108 0210 	add.w	r2, r8, #16
 800ba7c:	46f2      	mov	sl, lr
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba88:	fa1f f883 	uxth.w	r8, r3
 800ba8c:	fa11 f18b 	uxtah	r1, r1, fp
 800ba90:	0c1b      	lsrs	r3, r3, #16
 800ba92:	eba1 0808 	sub.w	r8, r1, r8
 800ba96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba9e:	fa1f f888 	uxth.w	r8, r8
 800baa2:	1419      	asrs	r1, r3, #16
 800baa4:	454e      	cmp	r6, r9
 800baa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800baaa:	f84a 3b04 	str.w	r3, [sl], #4
 800baae:	d8e7      	bhi.n	800ba80 <__mdiff+0x80>
 800bab0:	1b33      	subs	r3, r6, r4
 800bab2:	3b15      	subs	r3, #21
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	3304      	adds	r3, #4
 800baba:	3415      	adds	r4, #21
 800babc:	42a6      	cmp	r6, r4
 800babe:	bf38      	it	cc
 800bac0:	2304      	movcc	r3, #4
 800bac2:	441d      	add	r5, r3
 800bac4:	4473      	add	r3, lr
 800bac6:	469e      	mov	lr, r3
 800bac8:	462e      	mov	r6, r5
 800baca:	4566      	cmp	r6, ip
 800bacc:	d30e      	bcc.n	800baec <__mdiff+0xec>
 800bace:	f10c 0203 	add.w	r2, ip, #3
 800bad2:	1b52      	subs	r2, r2, r5
 800bad4:	f022 0203 	bic.w	r2, r2, #3
 800bad8:	3d03      	subs	r5, #3
 800bada:	45ac      	cmp	ip, r5
 800badc:	bf38      	it	cc
 800bade:	2200      	movcc	r2, #0
 800bae0:	441a      	add	r2, r3
 800bae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bae6:	b17b      	cbz	r3, 800bb08 <__mdiff+0x108>
 800bae8:	6107      	str	r7, [r0, #16]
 800baea:	e7a3      	b.n	800ba34 <__mdiff+0x34>
 800baec:	f856 8b04 	ldr.w	r8, [r6], #4
 800baf0:	fa11 f288 	uxtah	r2, r1, r8
 800baf4:	1414      	asrs	r4, r2, #16
 800baf6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bafa:	b292      	uxth	r2, r2
 800bafc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb00:	f84e 2b04 	str.w	r2, [lr], #4
 800bb04:	1421      	asrs	r1, r4, #16
 800bb06:	e7e0      	b.n	800baca <__mdiff+0xca>
 800bb08:	3f01      	subs	r7, #1
 800bb0a:	e7ea      	b.n	800bae2 <__mdiff+0xe2>
 800bb0c:	0800d0ed 	.word	0x0800d0ed
 800bb10:	0800d108 	.word	0x0800d108

0800bb14 <__d2b>:
 800bb14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb18:	4689      	mov	r9, r1
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	ec57 6b10 	vmov	r6, r7, d0
 800bb20:	4690      	mov	r8, r2
 800bb22:	f7ff fccf 	bl	800b4c4 <_Balloc>
 800bb26:	4604      	mov	r4, r0
 800bb28:	b930      	cbnz	r0, 800bb38 <__d2b+0x24>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	4b25      	ldr	r3, [pc, #148]	; (800bbc4 <__d2b+0xb0>)
 800bb2e:	4826      	ldr	r0, [pc, #152]	; (800bbc8 <__d2b+0xb4>)
 800bb30:	f240 310a 	movw	r1, #778	; 0x30a
 800bb34:	f7fe fdfe 	bl	800a734 <__assert_func>
 800bb38:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb3c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb40:	bb35      	cbnz	r5, 800bb90 <__d2b+0x7c>
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	d028      	beq.n	800bb9a <__d2b+0x86>
 800bb48:	4668      	mov	r0, sp
 800bb4a:	9600      	str	r6, [sp, #0]
 800bb4c:	f7ff fd82 	bl	800b654 <__lo0bits>
 800bb50:	9900      	ldr	r1, [sp, #0]
 800bb52:	b300      	cbz	r0, 800bb96 <__d2b+0x82>
 800bb54:	9a01      	ldr	r2, [sp, #4]
 800bb56:	f1c0 0320 	rsb	r3, r0, #32
 800bb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5e:	430b      	orrs	r3, r1
 800bb60:	40c2      	lsrs	r2, r0
 800bb62:	6163      	str	r3, [r4, #20]
 800bb64:	9201      	str	r2, [sp, #4]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	61a3      	str	r3, [r4, #24]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	bf14      	ite	ne
 800bb6e:	2202      	movne	r2, #2
 800bb70:	2201      	moveq	r2, #1
 800bb72:	6122      	str	r2, [r4, #16]
 800bb74:	b1d5      	cbz	r5, 800bbac <__d2b+0x98>
 800bb76:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb7a:	4405      	add	r5, r0
 800bb7c:	f8c9 5000 	str.w	r5, [r9]
 800bb80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb84:	f8c8 0000 	str.w	r0, [r8]
 800bb88:	4620      	mov	r0, r4
 800bb8a:	b003      	add	sp, #12
 800bb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb94:	e7d5      	b.n	800bb42 <__d2b+0x2e>
 800bb96:	6161      	str	r1, [r4, #20]
 800bb98:	e7e5      	b.n	800bb66 <__d2b+0x52>
 800bb9a:	a801      	add	r0, sp, #4
 800bb9c:	f7ff fd5a 	bl	800b654 <__lo0bits>
 800bba0:	9b01      	ldr	r3, [sp, #4]
 800bba2:	6163      	str	r3, [r4, #20]
 800bba4:	2201      	movs	r2, #1
 800bba6:	6122      	str	r2, [r4, #16]
 800bba8:	3020      	adds	r0, #32
 800bbaa:	e7e3      	b.n	800bb74 <__d2b+0x60>
 800bbac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbb4:	f8c9 0000 	str.w	r0, [r9]
 800bbb8:	6918      	ldr	r0, [r3, #16]
 800bbba:	f7ff fd2b 	bl	800b614 <__hi0bits>
 800bbbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbc2:	e7df      	b.n	800bb84 <__d2b+0x70>
 800bbc4:	0800d0ed 	.word	0x0800d0ed
 800bbc8:	0800d108 	.word	0x0800d108

0800bbcc <_calloc_r>:
 800bbcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbce:	fba1 2402 	umull	r2, r4, r1, r2
 800bbd2:	b94c      	cbnz	r4, 800bbe8 <_calloc_r+0x1c>
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	9201      	str	r2, [sp, #4]
 800bbd8:	f000 f87a 	bl	800bcd0 <_malloc_r>
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	4605      	mov	r5, r0
 800bbe0:	b930      	cbnz	r0, 800bbf0 <_calloc_r+0x24>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	b003      	add	sp, #12
 800bbe6:	bd30      	pop	{r4, r5, pc}
 800bbe8:	220c      	movs	r2, #12
 800bbea:	6002      	str	r2, [r0, #0]
 800bbec:	2500      	movs	r5, #0
 800bbee:	e7f8      	b.n	800bbe2 <_calloc_r+0x16>
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	f7fd ffff 	bl	8009bf4 <memset>
 800bbf6:	e7f4      	b.n	800bbe2 <_calloc_r+0x16>

0800bbf8 <_free_r>:
 800bbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbfa:	2900      	cmp	r1, #0
 800bbfc:	d044      	beq.n	800bc88 <_free_r+0x90>
 800bbfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc02:	9001      	str	r0, [sp, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f1a1 0404 	sub.w	r4, r1, #4
 800bc0a:	bfb8      	it	lt
 800bc0c:	18e4      	addlt	r4, r4, r3
 800bc0e:	f000 fea9 	bl	800c964 <__malloc_lock>
 800bc12:	4a1e      	ldr	r2, [pc, #120]	; (800bc8c <_free_r+0x94>)
 800bc14:	9801      	ldr	r0, [sp, #4]
 800bc16:	6813      	ldr	r3, [r2, #0]
 800bc18:	b933      	cbnz	r3, 800bc28 <_free_r+0x30>
 800bc1a:	6063      	str	r3, [r4, #4]
 800bc1c:	6014      	str	r4, [r2, #0]
 800bc1e:	b003      	add	sp, #12
 800bc20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc24:	f000 bea4 	b.w	800c970 <__malloc_unlock>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d908      	bls.n	800bc3e <_free_r+0x46>
 800bc2c:	6825      	ldr	r5, [r4, #0]
 800bc2e:	1961      	adds	r1, r4, r5
 800bc30:	428b      	cmp	r3, r1
 800bc32:	bf01      	itttt	eq
 800bc34:	6819      	ldreq	r1, [r3, #0]
 800bc36:	685b      	ldreq	r3, [r3, #4]
 800bc38:	1949      	addeq	r1, r1, r5
 800bc3a:	6021      	streq	r1, [r4, #0]
 800bc3c:	e7ed      	b.n	800bc1a <_free_r+0x22>
 800bc3e:	461a      	mov	r2, r3
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	b10b      	cbz	r3, 800bc48 <_free_r+0x50>
 800bc44:	42a3      	cmp	r3, r4
 800bc46:	d9fa      	bls.n	800bc3e <_free_r+0x46>
 800bc48:	6811      	ldr	r1, [r2, #0]
 800bc4a:	1855      	adds	r5, r2, r1
 800bc4c:	42a5      	cmp	r5, r4
 800bc4e:	d10b      	bne.n	800bc68 <_free_r+0x70>
 800bc50:	6824      	ldr	r4, [r4, #0]
 800bc52:	4421      	add	r1, r4
 800bc54:	1854      	adds	r4, r2, r1
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	6011      	str	r1, [r2, #0]
 800bc5a:	d1e0      	bne.n	800bc1e <_free_r+0x26>
 800bc5c:	681c      	ldr	r4, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	6053      	str	r3, [r2, #4]
 800bc62:	4421      	add	r1, r4
 800bc64:	6011      	str	r1, [r2, #0]
 800bc66:	e7da      	b.n	800bc1e <_free_r+0x26>
 800bc68:	d902      	bls.n	800bc70 <_free_r+0x78>
 800bc6a:	230c      	movs	r3, #12
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	e7d6      	b.n	800bc1e <_free_r+0x26>
 800bc70:	6825      	ldr	r5, [r4, #0]
 800bc72:	1961      	adds	r1, r4, r5
 800bc74:	428b      	cmp	r3, r1
 800bc76:	bf04      	itt	eq
 800bc78:	6819      	ldreq	r1, [r3, #0]
 800bc7a:	685b      	ldreq	r3, [r3, #4]
 800bc7c:	6063      	str	r3, [r4, #4]
 800bc7e:	bf04      	itt	eq
 800bc80:	1949      	addeq	r1, r1, r5
 800bc82:	6021      	streq	r1, [r4, #0]
 800bc84:	6054      	str	r4, [r2, #4]
 800bc86:	e7ca      	b.n	800bc1e <_free_r+0x26>
 800bc88:	b003      	add	sp, #12
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	20000710 	.word	0x20000710

0800bc90 <sbrk_aligned>:
 800bc90:	b570      	push	{r4, r5, r6, lr}
 800bc92:	4e0e      	ldr	r6, [pc, #56]	; (800bccc <sbrk_aligned+0x3c>)
 800bc94:	460c      	mov	r4, r1
 800bc96:	6831      	ldr	r1, [r6, #0]
 800bc98:	4605      	mov	r5, r0
 800bc9a:	b911      	cbnz	r1, 800bca2 <sbrk_aligned+0x12>
 800bc9c:	f000 fb42 	bl	800c324 <_sbrk_r>
 800bca0:	6030      	str	r0, [r6, #0]
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 fb3d 	bl	800c324 <_sbrk_r>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	d00a      	beq.n	800bcc4 <sbrk_aligned+0x34>
 800bcae:	1cc4      	adds	r4, r0, #3
 800bcb0:	f024 0403 	bic.w	r4, r4, #3
 800bcb4:	42a0      	cmp	r0, r4
 800bcb6:	d007      	beq.n	800bcc8 <sbrk_aligned+0x38>
 800bcb8:	1a21      	subs	r1, r4, r0
 800bcba:	4628      	mov	r0, r5
 800bcbc:	f000 fb32 	bl	800c324 <_sbrk_r>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d101      	bne.n	800bcc8 <sbrk_aligned+0x38>
 800bcc4:	f04f 34ff 	mov.w	r4, #4294967295
 800bcc8:	4620      	mov	r0, r4
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	20000714 	.word	0x20000714

0800bcd0 <_malloc_r>:
 800bcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd4:	1ccd      	adds	r5, r1, #3
 800bcd6:	f025 0503 	bic.w	r5, r5, #3
 800bcda:	3508      	adds	r5, #8
 800bcdc:	2d0c      	cmp	r5, #12
 800bcde:	bf38      	it	cc
 800bce0:	250c      	movcc	r5, #12
 800bce2:	2d00      	cmp	r5, #0
 800bce4:	4607      	mov	r7, r0
 800bce6:	db01      	blt.n	800bcec <_malloc_r+0x1c>
 800bce8:	42a9      	cmp	r1, r5
 800bcea:	d905      	bls.n	800bcf8 <_malloc_r+0x28>
 800bcec:	230c      	movs	r3, #12
 800bcee:	603b      	str	r3, [r7, #0]
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf8:	4e2e      	ldr	r6, [pc, #184]	; (800bdb4 <_malloc_r+0xe4>)
 800bcfa:	f000 fe33 	bl	800c964 <__malloc_lock>
 800bcfe:	6833      	ldr	r3, [r6, #0]
 800bd00:	461c      	mov	r4, r3
 800bd02:	bb34      	cbnz	r4, 800bd52 <_malloc_r+0x82>
 800bd04:	4629      	mov	r1, r5
 800bd06:	4638      	mov	r0, r7
 800bd08:	f7ff ffc2 	bl	800bc90 <sbrk_aligned>
 800bd0c:	1c43      	adds	r3, r0, #1
 800bd0e:	4604      	mov	r4, r0
 800bd10:	d14d      	bne.n	800bdae <_malloc_r+0xde>
 800bd12:	6834      	ldr	r4, [r6, #0]
 800bd14:	4626      	mov	r6, r4
 800bd16:	2e00      	cmp	r6, #0
 800bd18:	d140      	bne.n	800bd9c <_malloc_r+0xcc>
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4638      	mov	r0, r7
 800bd20:	eb04 0803 	add.w	r8, r4, r3
 800bd24:	f000 fafe 	bl	800c324 <_sbrk_r>
 800bd28:	4580      	cmp	r8, r0
 800bd2a:	d13a      	bne.n	800bda2 <_malloc_r+0xd2>
 800bd2c:	6821      	ldr	r1, [r4, #0]
 800bd2e:	3503      	adds	r5, #3
 800bd30:	1a6d      	subs	r5, r5, r1
 800bd32:	f025 0503 	bic.w	r5, r5, #3
 800bd36:	3508      	adds	r5, #8
 800bd38:	2d0c      	cmp	r5, #12
 800bd3a:	bf38      	it	cc
 800bd3c:	250c      	movcc	r5, #12
 800bd3e:	4629      	mov	r1, r5
 800bd40:	4638      	mov	r0, r7
 800bd42:	f7ff ffa5 	bl	800bc90 <sbrk_aligned>
 800bd46:	3001      	adds	r0, #1
 800bd48:	d02b      	beq.n	800bda2 <_malloc_r+0xd2>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	442b      	add	r3, r5
 800bd4e:	6023      	str	r3, [r4, #0]
 800bd50:	e00e      	b.n	800bd70 <_malloc_r+0xa0>
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	1b52      	subs	r2, r2, r5
 800bd56:	d41e      	bmi.n	800bd96 <_malloc_r+0xc6>
 800bd58:	2a0b      	cmp	r2, #11
 800bd5a:	d916      	bls.n	800bd8a <_malloc_r+0xba>
 800bd5c:	1961      	adds	r1, r4, r5
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	6025      	str	r5, [r4, #0]
 800bd62:	bf18      	it	ne
 800bd64:	6059      	strne	r1, [r3, #4]
 800bd66:	6863      	ldr	r3, [r4, #4]
 800bd68:	bf08      	it	eq
 800bd6a:	6031      	streq	r1, [r6, #0]
 800bd6c:	5162      	str	r2, [r4, r5]
 800bd6e:	604b      	str	r3, [r1, #4]
 800bd70:	4638      	mov	r0, r7
 800bd72:	f104 060b 	add.w	r6, r4, #11
 800bd76:	f000 fdfb 	bl	800c970 <__malloc_unlock>
 800bd7a:	f026 0607 	bic.w	r6, r6, #7
 800bd7e:	1d23      	adds	r3, r4, #4
 800bd80:	1af2      	subs	r2, r6, r3
 800bd82:	d0b6      	beq.n	800bcf2 <_malloc_r+0x22>
 800bd84:	1b9b      	subs	r3, r3, r6
 800bd86:	50a3      	str	r3, [r4, r2]
 800bd88:	e7b3      	b.n	800bcf2 <_malloc_r+0x22>
 800bd8a:	6862      	ldr	r2, [r4, #4]
 800bd8c:	42a3      	cmp	r3, r4
 800bd8e:	bf0c      	ite	eq
 800bd90:	6032      	streq	r2, [r6, #0]
 800bd92:	605a      	strne	r2, [r3, #4]
 800bd94:	e7ec      	b.n	800bd70 <_malloc_r+0xa0>
 800bd96:	4623      	mov	r3, r4
 800bd98:	6864      	ldr	r4, [r4, #4]
 800bd9a:	e7b2      	b.n	800bd02 <_malloc_r+0x32>
 800bd9c:	4634      	mov	r4, r6
 800bd9e:	6876      	ldr	r6, [r6, #4]
 800bda0:	e7b9      	b.n	800bd16 <_malloc_r+0x46>
 800bda2:	230c      	movs	r3, #12
 800bda4:	603b      	str	r3, [r7, #0]
 800bda6:	4638      	mov	r0, r7
 800bda8:	f000 fde2 	bl	800c970 <__malloc_unlock>
 800bdac:	e7a1      	b.n	800bcf2 <_malloc_r+0x22>
 800bdae:	6025      	str	r5, [r4, #0]
 800bdb0:	e7de      	b.n	800bd70 <_malloc_r+0xa0>
 800bdb2:	bf00      	nop
 800bdb4:	20000710 	.word	0x20000710

0800bdb8 <__ssputs_r>:
 800bdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdbc:	688e      	ldr	r6, [r1, #8]
 800bdbe:	429e      	cmp	r6, r3
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	4690      	mov	r8, r2
 800bdc6:	461f      	mov	r7, r3
 800bdc8:	d838      	bhi.n	800be3c <__ssputs_r+0x84>
 800bdca:	898a      	ldrh	r2, [r1, #12]
 800bdcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdd0:	d032      	beq.n	800be38 <__ssputs_r+0x80>
 800bdd2:	6825      	ldr	r5, [r4, #0]
 800bdd4:	6909      	ldr	r1, [r1, #16]
 800bdd6:	eba5 0901 	sub.w	r9, r5, r1
 800bdda:	6965      	ldr	r5, [r4, #20]
 800bddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bde4:	3301      	adds	r3, #1
 800bde6:	444b      	add	r3, r9
 800bde8:	106d      	asrs	r5, r5, #1
 800bdea:	429d      	cmp	r5, r3
 800bdec:	bf38      	it	cc
 800bdee:	461d      	movcc	r5, r3
 800bdf0:	0553      	lsls	r3, r2, #21
 800bdf2:	d531      	bpl.n	800be58 <__ssputs_r+0xa0>
 800bdf4:	4629      	mov	r1, r5
 800bdf6:	f7ff ff6b 	bl	800bcd0 <_malloc_r>
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	b950      	cbnz	r0, 800be14 <__ssputs_r+0x5c>
 800bdfe:	230c      	movs	r3, #12
 800be00:	f8ca 3000 	str.w	r3, [sl]
 800be04:	89a3      	ldrh	r3, [r4, #12]
 800be06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	f04f 30ff 	mov.w	r0, #4294967295
 800be10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be14:	6921      	ldr	r1, [r4, #16]
 800be16:	464a      	mov	r2, r9
 800be18:	f7fd fede 	bl	8009bd8 <memcpy>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be26:	81a3      	strh	r3, [r4, #12]
 800be28:	6126      	str	r6, [r4, #16]
 800be2a:	6165      	str	r5, [r4, #20]
 800be2c:	444e      	add	r6, r9
 800be2e:	eba5 0509 	sub.w	r5, r5, r9
 800be32:	6026      	str	r6, [r4, #0]
 800be34:	60a5      	str	r5, [r4, #8]
 800be36:	463e      	mov	r6, r7
 800be38:	42be      	cmp	r6, r7
 800be3a:	d900      	bls.n	800be3e <__ssputs_r+0x86>
 800be3c:	463e      	mov	r6, r7
 800be3e:	6820      	ldr	r0, [r4, #0]
 800be40:	4632      	mov	r2, r6
 800be42:	4641      	mov	r1, r8
 800be44:	f000 fd74 	bl	800c930 <memmove>
 800be48:	68a3      	ldr	r3, [r4, #8]
 800be4a:	1b9b      	subs	r3, r3, r6
 800be4c:	60a3      	str	r3, [r4, #8]
 800be4e:	6823      	ldr	r3, [r4, #0]
 800be50:	4433      	add	r3, r6
 800be52:	6023      	str	r3, [r4, #0]
 800be54:	2000      	movs	r0, #0
 800be56:	e7db      	b.n	800be10 <__ssputs_r+0x58>
 800be58:	462a      	mov	r2, r5
 800be5a:	f000 fd8f 	bl	800c97c <_realloc_r>
 800be5e:	4606      	mov	r6, r0
 800be60:	2800      	cmp	r0, #0
 800be62:	d1e1      	bne.n	800be28 <__ssputs_r+0x70>
 800be64:	6921      	ldr	r1, [r4, #16]
 800be66:	4650      	mov	r0, sl
 800be68:	f7ff fec6 	bl	800bbf8 <_free_r>
 800be6c:	e7c7      	b.n	800bdfe <__ssputs_r+0x46>
	...

0800be70 <_svfiprintf_r>:
 800be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be74:	4698      	mov	r8, r3
 800be76:	898b      	ldrh	r3, [r1, #12]
 800be78:	061b      	lsls	r3, r3, #24
 800be7a:	b09d      	sub	sp, #116	; 0x74
 800be7c:	4607      	mov	r7, r0
 800be7e:	460d      	mov	r5, r1
 800be80:	4614      	mov	r4, r2
 800be82:	d50e      	bpl.n	800bea2 <_svfiprintf_r+0x32>
 800be84:	690b      	ldr	r3, [r1, #16]
 800be86:	b963      	cbnz	r3, 800bea2 <_svfiprintf_r+0x32>
 800be88:	2140      	movs	r1, #64	; 0x40
 800be8a:	f7ff ff21 	bl	800bcd0 <_malloc_r>
 800be8e:	6028      	str	r0, [r5, #0]
 800be90:	6128      	str	r0, [r5, #16]
 800be92:	b920      	cbnz	r0, 800be9e <_svfiprintf_r+0x2e>
 800be94:	230c      	movs	r3, #12
 800be96:	603b      	str	r3, [r7, #0]
 800be98:	f04f 30ff 	mov.w	r0, #4294967295
 800be9c:	e0d1      	b.n	800c042 <_svfiprintf_r+0x1d2>
 800be9e:	2340      	movs	r3, #64	; 0x40
 800bea0:	616b      	str	r3, [r5, #20]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9309      	str	r3, [sp, #36]	; 0x24
 800bea6:	2320      	movs	r3, #32
 800bea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beac:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb0:	2330      	movs	r3, #48	; 0x30
 800beb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c05c <_svfiprintf_r+0x1ec>
 800beb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800beba:	f04f 0901 	mov.w	r9, #1
 800bebe:	4623      	mov	r3, r4
 800bec0:	469a      	mov	sl, r3
 800bec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec6:	b10a      	cbz	r2, 800becc <_svfiprintf_r+0x5c>
 800bec8:	2a25      	cmp	r2, #37	; 0x25
 800beca:	d1f9      	bne.n	800bec0 <_svfiprintf_r+0x50>
 800becc:	ebba 0b04 	subs.w	fp, sl, r4
 800bed0:	d00b      	beq.n	800beea <_svfiprintf_r+0x7a>
 800bed2:	465b      	mov	r3, fp
 800bed4:	4622      	mov	r2, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	4638      	mov	r0, r7
 800beda:	f7ff ff6d 	bl	800bdb8 <__ssputs_r>
 800bede:	3001      	adds	r0, #1
 800bee0:	f000 80aa 	beq.w	800c038 <_svfiprintf_r+0x1c8>
 800bee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bee6:	445a      	add	r2, fp
 800bee8:	9209      	str	r2, [sp, #36]	; 0x24
 800beea:	f89a 3000 	ldrb.w	r3, [sl]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 80a2 	beq.w	800c038 <_svfiprintf_r+0x1c8>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f04f 32ff 	mov.w	r2, #4294967295
 800befa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800befe:	f10a 0a01 	add.w	sl, sl, #1
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	9307      	str	r3, [sp, #28]
 800bf06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf0a:	931a      	str	r3, [sp, #104]	; 0x68
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2205      	movs	r2, #5
 800bf10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf14:	4851      	ldr	r0, [pc, #324]	; (800c05c <_svfiprintf_r+0x1ec>)
 800bf16:	f7f4 f963 	bl	80001e0 <memchr>
 800bf1a:	9a04      	ldr	r2, [sp, #16]
 800bf1c:	b9d8      	cbnz	r0, 800bf56 <_svfiprintf_r+0xe6>
 800bf1e:	06d0      	lsls	r0, r2, #27
 800bf20:	bf44      	itt	mi
 800bf22:	2320      	movmi	r3, #32
 800bf24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf28:	0711      	lsls	r1, r2, #28
 800bf2a:	bf44      	itt	mi
 800bf2c:	232b      	movmi	r3, #43	; 0x2b
 800bf2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf32:	f89a 3000 	ldrb.w	r3, [sl]
 800bf36:	2b2a      	cmp	r3, #42	; 0x2a
 800bf38:	d015      	beq.n	800bf66 <_svfiprintf_r+0xf6>
 800bf3a:	9a07      	ldr	r2, [sp, #28]
 800bf3c:	4654      	mov	r4, sl
 800bf3e:	2000      	movs	r0, #0
 800bf40:	f04f 0c0a 	mov.w	ip, #10
 800bf44:	4621      	mov	r1, r4
 800bf46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf4a:	3b30      	subs	r3, #48	; 0x30
 800bf4c:	2b09      	cmp	r3, #9
 800bf4e:	d94e      	bls.n	800bfee <_svfiprintf_r+0x17e>
 800bf50:	b1b0      	cbz	r0, 800bf80 <_svfiprintf_r+0x110>
 800bf52:	9207      	str	r2, [sp, #28]
 800bf54:	e014      	b.n	800bf80 <_svfiprintf_r+0x110>
 800bf56:	eba0 0308 	sub.w	r3, r0, r8
 800bf5a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	9304      	str	r3, [sp, #16]
 800bf62:	46a2      	mov	sl, r4
 800bf64:	e7d2      	b.n	800bf0c <_svfiprintf_r+0x9c>
 800bf66:	9b03      	ldr	r3, [sp, #12]
 800bf68:	1d19      	adds	r1, r3, #4
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	9103      	str	r1, [sp, #12]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	bfbb      	ittet	lt
 800bf72:	425b      	neglt	r3, r3
 800bf74:	f042 0202 	orrlt.w	r2, r2, #2
 800bf78:	9307      	strge	r3, [sp, #28]
 800bf7a:	9307      	strlt	r3, [sp, #28]
 800bf7c:	bfb8      	it	lt
 800bf7e:	9204      	strlt	r2, [sp, #16]
 800bf80:	7823      	ldrb	r3, [r4, #0]
 800bf82:	2b2e      	cmp	r3, #46	; 0x2e
 800bf84:	d10c      	bne.n	800bfa0 <_svfiprintf_r+0x130>
 800bf86:	7863      	ldrb	r3, [r4, #1]
 800bf88:	2b2a      	cmp	r3, #42	; 0x2a
 800bf8a:	d135      	bne.n	800bff8 <_svfiprintf_r+0x188>
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	1d1a      	adds	r2, r3, #4
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	9203      	str	r2, [sp, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	bfb8      	it	lt
 800bf98:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf9c:	3402      	adds	r4, #2
 800bf9e:	9305      	str	r3, [sp, #20]
 800bfa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c06c <_svfiprintf_r+0x1fc>
 800bfa4:	7821      	ldrb	r1, [r4, #0]
 800bfa6:	2203      	movs	r2, #3
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	f7f4 f919 	bl	80001e0 <memchr>
 800bfae:	b140      	cbz	r0, 800bfc2 <_svfiprintf_r+0x152>
 800bfb0:	2340      	movs	r3, #64	; 0x40
 800bfb2:	eba0 000a 	sub.w	r0, r0, sl
 800bfb6:	fa03 f000 	lsl.w	r0, r3, r0
 800bfba:	9b04      	ldr	r3, [sp, #16]
 800bfbc:	4303      	orrs	r3, r0
 800bfbe:	3401      	adds	r4, #1
 800bfc0:	9304      	str	r3, [sp, #16]
 800bfc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc6:	4826      	ldr	r0, [pc, #152]	; (800c060 <_svfiprintf_r+0x1f0>)
 800bfc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfcc:	2206      	movs	r2, #6
 800bfce:	f7f4 f907 	bl	80001e0 <memchr>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d038      	beq.n	800c048 <_svfiprintf_r+0x1d8>
 800bfd6:	4b23      	ldr	r3, [pc, #140]	; (800c064 <_svfiprintf_r+0x1f4>)
 800bfd8:	bb1b      	cbnz	r3, 800c022 <_svfiprintf_r+0x1b2>
 800bfda:	9b03      	ldr	r3, [sp, #12]
 800bfdc:	3307      	adds	r3, #7
 800bfde:	f023 0307 	bic.w	r3, r3, #7
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe8:	4433      	add	r3, r6
 800bfea:	9309      	str	r3, [sp, #36]	; 0x24
 800bfec:	e767      	b.n	800bebe <_svfiprintf_r+0x4e>
 800bfee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bff2:	460c      	mov	r4, r1
 800bff4:	2001      	movs	r0, #1
 800bff6:	e7a5      	b.n	800bf44 <_svfiprintf_r+0xd4>
 800bff8:	2300      	movs	r3, #0
 800bffa:	3401      	adds	r4, #1
 800bffc:	9305      	str	r3, [sp, #20]
 800bffe:	4619      	mov	r1, r3
 800c000:	f04f 0c0a 	mov.w	ip, #10
 800c004:	4620      	mov	r0, r4
 800c006:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c00a:	3a30      	subs	r2, #48	; 0x30
 800c00c:	2a09      	cmp	r2, #9
 800c00e:	d903      	bls.n	800c018 <_svfiprintf_r+0x1a8>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d0c5      	beq.n	800bfa0 <_svfiprintf_r+0x130>
 800c014:	9105      	str	r1, [sp, #20]
 800c016:	e7c3      	b.n	800bfa0 <_svfiprintf_r+0x130>
 800c018:	fb0c 2101 	mla	r1, ip, r1, r2
 800c01c:	4604      	mov	r4, r0
 800c01e:	2301      	movs	r3, #1
 800c020:	e7f0      	b.n	800c004 <_svfiprintf_r+0x194>
 800c022:	ab03      	add	r3, sp, #12
 800c024:	9300      	str	r3, [sp, #0]
 800c026:	462a      	mov	r2, r5
 800c028:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <_svfiprintf_r+0x1f8>)
 800c02a:	a904      	add	r1, sp, #16
 800c02c:	4638      	mov	r0, r7
 800c02e:	f7fd fe89 	bl	8009d44 <_printf_float>
 800c032:	1c42      	adds	r2, r0, #1
 800c034:	4606      	mov	r6, r0
 800c036:	d1d6      	bne.n	800bfe6 <_svfiprintf_r+0x176>
 800c038:	89ab      	ldrh	r3, [r5, #12]
 800c03a:	065b      	lsls	r3, r3, #25
 800c03c:	f53f af2c 	bmi.w	800be98 <_svfiprintf_r+0x28>
 800c040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c042:	b01d      	add	sp, #116	; 0x74
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	ab03      	add	r3, sp, #12
 800c04a:	9300      	str	r3, [sp, #0]
 800c04c:	462a      	mov	r2, r5
 800c04e:	4b06      	ldr	r3, [pc, #24]	; (800c068 <_svfiprintf_r+0x1f8>)
 800c050:	a904      	add	r1, sp, #16
 800c052:	4638      	mov	r0, r7
 800c054:	f7fe f91a 	bl	800a28c <_printf_i>
 800c058:	e7eb      	b.n	800c032 <_svfiprintf_r+0x1c2>
 800c05a:	bf00      	nop
 800c05c:	0800d264 	.word	0x0800d264
 800c060:	0800d26e 	.word	0x0800d26e
 800c064:	08009d45 	.word	0x08009d45
 800c068:	0800bdb9 	.word	0x0800bdb9
 800c06c:	0800d26a 	.word	0x0800d26a

0800c070 <__sfputc_r>:
 800c070:	6893      	ldr	r3, [r2, #8]
 800c072:	3b01      	subs	r3, #1
 800c074:	2b00      	cmp	r3, #0
 800c076:	b410      	push	{r4}
 800c078:	6093      	str	r3, [r2, #8]
 800c07a:	da08      	bge.n	800c08e <__sfputc_r+0x1e>
 800c07c:	6994      	ldr	r4, [r2, #24]
 800c07e:	42a3      	cmp	r3, r4
 800c080:	db01      	blt.n	800c086 <__sfputc_r+0x16>
 800c082:	290a      	cmp	r1, #10
 800c084:	d103      	bne.n	800c08e <__sfputc_r+0x1e>
 800c086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c08a:	f000 b95b 	b.w	800c344 <__swbuf_r>
 800c08e:	6813      	ldr	r3, [r2, #0]
 800c090:	1c58      	adds	r0, r3, #1
 800c092:	6010      	str	r0, [r2, #0]
 800c094:	7019      	strb	r1, [r3, #0]
 800c096:	4608      	mov	r0, r1
 800c098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <__sfputs_r>:
 800c09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a0:	4606      	mov	r6, r0
 800c0a2:	460f      	mov	r7, r1
 800c0a4:	4614      	mov	r4, r2
 800c0a6:	18d5      	adds	r5, r2, r3
 800c0a8:	42ac      	cmp	r4, r5
 800c0aa:	d101      	bne.n	800c0b0 <__sfputs_r+0x12>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e007      	b.n	800c0c0 <__sfputs_r+0x22>
 800c0b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b4:	463a      	mov	r2, r7
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7ff ffda 	bl	800c070 <__sfputc_r>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	d1f3      	bne.n	800c0a8 <__sfputs_r+0xa>
 800c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0c4 <_vfiprintf_r>:
 800c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	460d      	mov	r5, r1
 800c0ca:	b09d      	sub	sp, #116	; 0x74
 800c0cc:	4614      	mov	r4, r2
 800c0ce:	4698      	mov	r8, r3
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	b118      	cbz	r0, 800c0dc <_vfiprintf_r+0x18>
 800c0d4:	6983      	ldr	r3, [r0, #24]
 800c0d6:	b90b      	cbnz	r3, 800c0dc <_vfiprintf_r+0x18>
 800c0d8:	f000 fb24 	bl	800c724 <__sinit>
 800c0dc:	4b89      	ldr	r3, [pc, #548]	; (800c304 <_vfiprintf_r+0x240>)
 800c0de:	429d      	cmp	r5, r3
 800c0e0:	d11b      	bne.n	800c11a <_vfiprintf_r+0x56>
 800c0e2:	6875      	ldr	r5, [r6, #4]
 800c0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0e6:	07d9      	lsls	r1, r3, #31
 800c0e8:	d405      	bmi.n	800c0f6 <_vfiprintf_r+0x32>
 800c0ea:	89ab      	ldrh	r3, [r5, #12]
 800c0ec:	059a      	lsls	r2, r3, #22
 800c0ee:	d402      	bmi.n	800c0f6 <_vfiprintf_r+0x32>
 800c0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f2:	f000 fbb5 	bl	800c860 <__retarget_lock_acquire_recursive>
 800c0f6:	89ab      	ldrh	r3, [r5, #12]
 800c0f8:	071b      	lsls	r3, r3, #28
 800c0fa:	d501      	bpl.n	800c100 <_vfiprintf_r+0x3c>
 800c0fc:	692b      	ldr	r3, [r5, #16]
 800c0fe:	b9eb      	cbnz	r3, 800c13c <_vfiprintf_r+0x78>
 800c100:	4629      	mov	r1, r5
 800c102:	4630      	mov	r0, r6
 800c104:	f000 f97e 	bl	800c404 <__swsetup_r>
 800c108:	b1c0      	cbz	r0, 800c13c <_vfiprintf_r+0x78>
 800c10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c10c:	07dc      	lsls	r4, r3, #31
 800c10e:	d50e      	bpl.n	800c12e <_vfiprintf_r+0x6a>
 800c110:	f04f 30ff 	mov.w	r0, #4294967295
 800c114:	b01d      	add	sp, #116	; 0x74
 800c116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c11a:	4b7b      	ldr	r3, [pc, #492]	; (800c308 <_vfiprintf_r+0x244>)
 800c11c:	429d      	cmp	r5, r3
 800c11e:	d101      	bne.n	800c124 <_vfiprintf_r+0x60>
 800c120:	68b5      	ldr	r5, [r6, #8]
 800c122:	e7df      	b.n	800c0e4 <_vfiprintf_r+0x20>
 800c124:	4b79      	ldr	r3, [pc, #484]	; (800c30c <_vfiprintf_r+0x248>)
 800c126:	429d      	cmp	r5, r3
 800c128:	bf08      	it	eq
 800c12a:	68f5      	ldreq	r5, [r6, #12]
 800c12c:	e7da      	b.n	800c0e4 <_vfiprintf_r+0x20>
 800c12e:	89ab      	ldrh	r3, [r5, #12]
 800c130:	0598      	lsls	r0, r3, #22
 800c132:	d4ed      	bmi.n	800c110 <_vfiprintf_r+0x4c>
 800c134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c136:	f000 fb94 	bl	800c862 <__retarget_lock_release_recursive>
 800c13a:	e7e9      	b.n	800c110 <_vfiprintf_r+0x4c>
 800c13c:	2300      	movs	r3, #0
 800c13e:	9309      	str	r3, [sp, #36]	; 0x24
 800c140:	2320      	movs	r3, #32
 800c142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c146:	f8cd 800c 	str.w	r8, [sp, #12]
 800c14a:	2330      	movs	r3, #48	; 0x30
 800c14c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c310 <_vfiprintf_r+0x24c>
 800c150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c154:	f04f 0901 	mov.w	r9, #1
 800c158:	4623      	mov	r3, r4
 800c15a:	469a      	mov	sl, r3
 800c15c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c160:	b10a      	cbz	r2, 800c166 <_vfiprintf_r+0xa2>
 800c162:	2a25      	cmp	r2, #37	; 0x25
 800c164:	d1f9      	bne.n	800c15a <_vfiprintf_r+0x96>
 800c166:	ebba 0b04 	subs.w	fp, sl, r4
 800c16a:	d00b      	beq.n	800c184 <_vfiprintf_r+0xc0>
 800c16c:	465b      	mov	r3, fp
 800c16e:	4622      	mov	r2, r4
 800c170:	4629      	mov	r1, r5
 800c172:	4630      	mov	r0, r6
 800c174:	f7ff ff93 	bl	800c09e <__sfputs_r>
 800c178:	3001      	adds	r0, #1
 800c17a:	f000 80aa 	beq.w	800c2d2 <_vfiprintf_r+0x20e>
 800c17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c180:	445a      	add	r2, fp
 800c182:	9209      	str	r2, [sp, #36]	; 0x24
 800c184:	f89a 3000 	ldrb.w	r3, [sl]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 80a2 	beq.w	800c2d2 <_vfiprintf_r+0x20e>
 800c18e:	2300      	movs	r3, #0
 800c190:	f04f 32ff 	mov.w	r2, #4294967295
 800c194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c198:	f10a 0a01 	add.w	sl, sl, #1
 800c19c:	9304      	str	r3, [sp, #16]
 800c19e:	9307      	str	r3, [sp, #28]
 800c1a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1a4:	931a      	str	r3, [sp, #104]	; 0x68
 800c1a6:	4654      	mov	r4, sl
 800c1a8:	2205      	movs	r2, #5
 800c1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ae:	4858      	ldr	r0, [pc, #352]	; (800c310 <_vfiprintf_r+0x24c>)
 800c1b0:	f7f4 f816 	bl	80001e0 <memchr>
 800c1b4:	9a04      	ldr	r2, [sp, #16]
 800c1b6:	b9d8      	cbnz	r0, 800c1f0 <_vfiprintf_r+0x12c>
 800c1b8:	06d1      	lsls	r1, r2, #27
 800c1ba:	bf44      	itt	mi
 800c1bc:	2320      	movmi	r3, #32
 800c1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1c2:	0713      	lsls	r3, r2, #28
 800c1c4:	bf44      	itt	mi
 800c1c6:	232b      	movmi	r3, #43	; 0x2b
 800c1c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c1d2:	d015      	beq.n	800c200 <_vfiprintf_r+0x13c>
 800c1d4:	9a07      	ldr	r2, [sp, #28]
 800c1d6:	4654      	mov	r4, sl
 800c1d8:	2000      	movs	r0, #0
 800c1da:	f04f 0c0a 	mov.w	ip, #10
 800c1de:	4621      	mov	r1, r4
 800c1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1e4:	3b30      	subs	r3, #48	; 0x30
 800c1e6:	2b09      	cmp	r3, #9
 800c1e8:	d94e      	bls.n	800c288 <_vfiprintf_r+0x1c4>
 800c1ea:	b1b0      	cbz	r0, 800c21a <_vfiprintf_r+0x156>
 800c1ec:	9207      	str	r2, [sp, #28]
 800c1ee:	e014      	b.n	800c21a <_vfiprintf_r+0x156>
 800c1f0:	eba0 0308 	sub.w	r3, r0, r8
 800c1f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	46a2      	mov	sl, r4
 800c1fe:	e7d2      	b.n	800c1a6 <_vfiprintf_r+0xe2>
 800c200:	9b03      	ldr	r3, [sp, #12]
 800c202:	1d19      	adds	r1, r3, #4
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	9103      	str	r1, [sp, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	bfbb      	ittet	lt
 800c20c:	425b      	neglt	r3, r3
 800c20e:	f042 0202 	orrlt.w	r2, r2, #2
 800c212:	9307      	strge	r3, [sp, #28]
 800c214:	9307      	strlt	r3, [sp, #28]
 800c216:	bfb8      	it	lt
 800c218:	9204      	strlt	r2, [sp, #16]
 800c21a:	7823      	ldrb	r3, [r4, #0]
 800c21c:	2b2e      	cmp	r3, #46	; 0x2e
 800c21e:	d10c      	bne.n	800c23a <_vfiprintf_r+0x176>
 800c220:	7863      	ldrb	r3, [r4, #1]
 800c222:	2b2a      	cmp	r3, #42	; 0x2a
 800c224:	d135      	bne.n	800c292 <_vfiprintf_r+0x1ce>
 800c226:	9b03      	ldr	r3, [sp, #12]
 800c228:	1d1a      	adds	r2, r3, #4
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	9203      	str	r2, [sp, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bfb8      	it	lt
 800c232:	f04f 33ff 	movlt.w	r3, #4294967295
 800c236:	3402      	adds	r4, #2
 800c238:	9305      	str	r3, [sp, #20]
 800c23a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c320 <_vfiprintf_r+0x25c>
 800c23e:	7821      	ldrb	r1, [r4, #0]
 800c240:	2203      	movs	r2, #3
 800c242:	4650      	mov	r0, sl
 800c244:	f7f3 ffcc 	bl	80001e0 <memchr>
 800c248:	b140      	cbz	r0, 800c25c <_vfiprintf_r+0x198>
 800c24a:	2340      	movs	r3, #64	; 0x40
 800c24c:	eba0 000a 	sub.w	r0, r0, sl
 800c250:	fa03 f000 	lsl.w	r0, r3, r0
 800c254:	9b04      	ldr	r3, [sp, #16]
 800c256:	4303      	orrs	r3, r0
 800c258:	3401      	adds	r4, #1
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c260:	482c      	ldr	r0, [pc, #176]	; (800c314 <_vfiprintf_r+0x250>)
 800c262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c266:	2206      	movs	r2, #6
 800c268:	f7f3 ffba 	bl	80001e0 <memchr>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d03f      	beq.n	800c2f0 <_vfiprintf_r+0x22c>
 800c270:	4b29      	ldr	r3, [pc, #164]	; (800c318 <_vfiprintf_r+0x254>)
 800c272:	bb1b      	cbnz	r3, 800c2bc <_vfiprintf_r+0x1f8>
 800c274:	9b03      	ldr	r3, [sp, #12]
 800c276:	3307      	adds	r3, #7
 800c278:	f023 0307 	bic.w	r3, r3, #7
 800c27c:	3308      	adds	r3, #8
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c282:	443b      	add	r3, r7
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	e767      	b.n	800c158 <_vfiprintf_r+0x94>
 800c288:	fb0c 3202 	mla	r2, ip, r2, r3
 800c28c:	460c      	mov	r4, r1
 800c28e:	2001      	movs	r0, #1
 800c290:	e7a5      	b.n	800c1de <_vfiprintf_r+0x11a>
 800c292:	2300      	movs	r3, #0
 800c294:	3401      	adds	r4, #1
 800c296:	9305      	str	r3, [sp, #20]
 800c298:	4619      	mov	r1, r3
 800c29a:	f04f 0c0a 	mov.w	ip, #10
 800c29e:	4620      	mov	r0, r4
 800c2a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2a4:	3a30      	subs	r2, #48	; 0x30
 800c2a6:	2a09      	cmp	r2, #9
 800c2a8:	d903      	bls.n	800c2b2 <_vfiprintf_r+0x1ee>
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d0c5      	beq.n	800c23a <_vfiprintf_r+0x176>
 800c2ae:	9105      	str	r1, [sp, #20]
 800c2b0:	e7c3      	b.n	800c23a <_vfiprintf_r+0x176>
 800c2b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e7f0      	b.n	800c29e <_vfiprintf_r+0x1da>
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <_vfiprintf_r+0x258>)
 800c2c4:	a904      	add	r1, sp, #16
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fd fd3c 	bl	8009d44 <_printf_float>
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	1c78      	adds	r0, r7, #1
 800c2d0:	d1d6      	bne.n	800c280 <_vfiprintf_r+0x1bc>
 800c2d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2d4:	07d9      	lsls	r1, r3, #31
 800c2d6:	d405      	bmi.n	800c2e4 <_vfiprintf_r+0x220>
 800c2d8:	89ab      	ldrh	r3, [r5, #12]
 800c2da:	059a      	lsls	r2, r3, #22
 800c2dc:	d402      	bmi.n	800c2e4 <_vfiprintf_r+0x220>
 800c2de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e0:	f000 fabf 	bl	800c862 <__retarget_lock_release_recursive>
 800c2e4:	89ab      	ldrh	r3, [r5, #12]
 800c2e6:	065b      	lsls	r3, r3, #25
 800c2e8:	f53f af12 	bmi.w	800c110 <_vfiprintf_r+0x4c>
 800c2ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2ee:	e711      	b.n	800c114 <_vfiprintf_r+0x50>
 800c2f0:	ab03      	add	r3, sp, #12
 800c2f2:	9300      	str	r3, [sp, #0]
 800c2f4:	462a      	mov	r2, r5
 800c2f6:	4b09      	ldr	r3, [pc, #36]	; (800c31c <_vfiprintf_r+0x258>)
 800c2f8:	a904      	add	r1, sp, #16
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f7fd ffc6 	bl	800a28c <_printf_i>
 800c300:	e7e4      	b.n	800c2cc <_vfiprintf_r+0x208>
 800c302:	bf00      	nop
 800c304:	0800d298 	.word	0x0800d298
 800c308:	0800d2b8 	.word	0x0800d2b8
 800c30c:	0800d278 	.word	0x0800d278
 800c310:	0800d264 	.word	0x0800d264
 800c314:	0800d26e 	.word	0x0800d26e
 800c318:	08009d45 	.word	0x08009d45
 800c31c:	0800c09f 	.word	0x0800c09f
 800c320:	0800d26a 	.word	0x0800d26a

0800c324 <_sbrk_r>:
 800c324:	b538      	push	{r3, r4, r5, lr}
 800c326:	4d06      	ldr	r5, [pc, #24]	; (800c340 <_sbrk_r+0x1c>)
 800c328:	2300      	movs	r3, #0
 800c32a:	4604      	mov	r4, r0
 800c32c:	4608      	mov	r0, r1
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	f7f6 fc2e 	bl	8002b90 <_sbrk>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d102      	bne.n	800c33e <_sbrk_r+0x1a>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	b103      	cbz	r3, 800c33e <_sbrk_r+0x1a>
 800c33c:	6023      	str	r3, [r4, #0]
 800c33e:	bd38      	pop	{r3, r4, r5, pc}
 800c340:	2000071c 	.word	0x2000071c

0800c344 <__swbuf_r>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	460e      	mov	r6, r1
 800c348:	4614      	mov	r4, r2
 800c34a:	4605      	mov	r5, r0
 800c34c:	b118      	cbz	r0, 800c356 <__swbuf_r+0x12>
 800c34e:	6983      	ldr	r3, [r0, #24]
 800c350:	b90b      	cbnz	r3, 800c356 <__swbuf_r+0x12>
 800c352:	f000 f9e7 	bl	800c724 <__sinit>
 800c356:	4b21      	ldr	r3, [pc, #132]	; (800c3dc <__swbuf_r+0x98>)
 800c358:	429c      	cmp	r4, r3
 800c35a:	d12b      	bne.n	800c3b4 <__swbuf_r+0x70>
 800c35c:	686c      	ldr	r4, [r5, #4]
 800c35e:	69a3      	ldr	r3, [r4, #24]
 800c360:	60a3      	str	r3, [r4, #8]
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	071a      	lsls	r2, r3, #28
 800c366:	d52f      	bpl.n	800c3c8 <__swbuf_r+0x84>
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	b36b      	cbz	r3, 800c3c8 <__swbuf_r+0x84>
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	6820      	ldr	r0, [r4, #0]
 800c370:	1ac0      	subs	r0, r0, r3
 800c372:	6963      	ldr	r3, [r4, #20]
 800c374:	b2f6      	uxtb	r6, r6
 800c376:	4283      	cmp	r3, r0
 800c378:	4637      	mov	r7, r6
 800c37a:	dc04      	bgt.n	800c386 <__swbuf_r+0x42>
 800c37c:	4621      	mov	r1, r4
 800c37e:	4628      	mov	r0, r5
 800c380:	f000 f93c 	bl	800c5fc <_fflush_r>
 800c384:	bb30      	cbnz	r0, 800c3d4 <__swbuf_r+0x90>
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	3b01      	subs	r3, #1
 800c38a:	60a3      	str	r3, [r4, #8]
 800c38c:	6823      	ldr	r3, [r4, #0]
 800c38e:	1c5a      	adds	r2, r3, #1
 800c390:	6022      	str	r2, [r4, #0]
 800c392:	701e      	strb	r6, [r3, #0]
 800c394:	6963      	ldr	r3, [r4, #20]
 800c396:	3001      	adds	r0, #1
 800c398:	4283      	cmp	r3, r0
 800c39a:	d004      	beq.n	800c3a6 <__swbuf_r+0x62>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	07db      	lsls	r3, r3, #31
 800c3a0:	d506      	bpl.n	800c3b0 <__swbuf_r+0x6c>
 800c3a2:	2e0a      	cmp	r6, #10
 800c3a4:	d104      	bne.n	800c3b0 <__swbuf_r+0x6c>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	f000 f927 	bl	800c5fc <_fflush_r>
 800c3ae:	b988      	cbnz	r0, 800c3d4 <__swbuf_r+0x90>
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <__swbuf_r+0x9c>)
 800c3b6:	429c      	cmp	r4, r3
 800c3b8:	d101      	bne.n	800c3be <__swbuf_r+0x7a>
 800c3ba:	68ac      	ldr	r4, [r5, #8]
 800c3bc:	e7cf      	b.n	800c35e <__swbuf_r+0x1a>
 800c3be:	4b09      	ldr	r3, [pc, #36]	; (800c3e4 <__swbuf_r+0xa0>)
 800c3c0:	429c      	cmp	r4, r3
 800c3c2:	bf08      	it	eq
 800c3c4:	68ec      	ldreq	r4, [r5, #12]
 800c3c6:	e7ca      	b.n	800c35e <__swbuf_r+0x1a>
 800c3c8:	4621      	mov	r1, r4
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 f81a 	bl	800c404 <__swsetup_r>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d0cb      	beq.n	800c36c <__swbuf_r+0x28>
 800c3d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c3d8:	e7ea      	b.n	800c3b0 <__swbuf_r+0x6c>
 800c3da:	bf00      	nop
 800c3dc:	0800d298 	.word	0x0800d298
 800c3e0:	0800d2b8 	.word	0x0800d2b8
 800c3e4:	0800d278 	.word	0x0800d278

0800c3e8 <__ascii_wctomb>:
 800c3e8:	b149      	cbz	r1, 800c3fe <__ascii_wctomb+0x16>
 800c3ea:	2aff      	cmp	r2, #255	; 0xff
 800c3ec:	bf85      	ittet	hi
 800c3ee:	238a      	movhi	r3, #138	; 0x8a
 800c3f0:	6003      	strhi	r3, [r0, #0]
 800c3f2:	700a      	strbls	r2, [r1, #0]
 800c3f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c3f8:	bf98      	it	ls
 800c3fa:	2001      	movls	r0, #1
 800c3fc:	4770      	bx	lr
 800c3fe:	4608      	mov	r0, r1
 800c400:	4770      	bx	lr
	...

0800c404 <__swsetup_r>:
 800c404:	4b32      	ldr	r3, [pc, #200]	; (800c4d0 <__swsetup_r+0xcc>)
 800c406:	b570      	push	{r4, r5, r6, lr}
 800c408:	681d      	ldr	r5, [r3, #0]
 800c40a:	4606      	mov	r6, r0
 800c40c:	460c      	mov	r4, r1
 800c40e:	b125      	cbz	r5, 800c41a <__swsetup_r+0x16>
 800c410:	69ab      	ldr	r3, [r5, #24]
 800c412:	b913      	cbnz	r3, 800c41a <__swsetup_r+0x16>
 800c414:	4628      	mov	r0, r5
 800c416:	f000 f985 	bl	800c724 <__sinit>
 800c41a:	4b2e      	ldr	r3, [pc, #184]	; (800c4d4 <__swsetup_r+0xd0>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	d10f      	bne.n	800c440 <__swsetup_r+0x3c>
 800c420:	686c      	ldr	r4, [r5, #4]
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c428:	0719      	lsls	r1, r3, #28
 800c42a:	d42c      	bmi.n	800c486 <__swsetup_r+0x82>
 800c42c:	06dd      	lsls	r5, r3, #27
 800c42e:	d411      	bmi.n	800c454 <__swsetup_r+0x50>
 800c430:	2309      	movs	r3, #9
 800c432:	6033      	str	r3, [r6, #0]
 800c434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295
 800c43e:	e03e      	b.n	800c4be <__swsetup_r+0xba>
 800c440:	4b25      	ldr	r3, [pc, #148]	; (800c4d8 <__swsetup_r+0xd4>)
 800c442:	429c      	cmp	r4, r3
 800c444:	d101      	bne.n	800c44a <__swsetup_r+0x46>
 800c446:	68ac      	ldr	r4, [r5, #8]
 800c448:	e7eb      	b.n	800c422 <__swsetup_r+0x1e>
 800c44a:	4b24      	ldr	r3, [pc, #144]	; (800c4dc <__swsetup_r+0xd8>)
 800c44c:	429c      	cmp	r4, r3
 800c44e:	bf08      	it	eq
 800c450:	68ec      	ldreq	r4, [r5, #12]
 800c452:	e7e6      	b.n	800c422 <__swsetup_r+0x1e>
 800c454:	0758      	lsls	r0, r3, #29
 800c456:	d512      	bpl.n	800c47e <__swsetup_r+0x7a>
 800c458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c45a:	b141      	cbz	r1, 800c46e <__swsetup_r+0x6a>
 800c45c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c460:	4299      	cmp	r1, r3
 800c462:	d002      	beq.n	800c46a <__swsetup_r+0x66>
 800c464:	4630      	mov	r0, r6
 800c466:	f7ff fbc7 	bl	800bbf8 <_free_r>
 800c46a:	2300      	movs	r3, #0
 800c46c:	6363      	str	r3, [r4, #52]	; 0x34
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	2300      	movs	r3, #0
 800c478:	6063      	str	r3, [r4, #4]
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	89a3      	ldrh	r3, [r4, #12]
 800c480:	f043 0308 	orr.w	r3, r3, #8
 800c484:	81a3      	strh	r3, [r4, #12]
 800c486:	6923      	ldr	r3, [r4, #16]
 800c488:	b94b      	cbnz	r3, 800c49e <__swsetup_r+0x9a>
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c494:	d003      	beq.n	800c49e <__swsetup_r+0x9a>
 800c496:	4621      	mov	r1, r4
 800c498:	4630      	mov	r0, r6
 800c49a:	f000 fa09 	bl	800c8b0 <__smakebuf_r>
 800c49e:	89a0      	ldrh	r0, [r4, #12]
 800c4a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4a4:	f010 0301 	ands.w	r3, r0, #1
 800c4a8:	d00a      	beq.n	800c4c0 <__swsetup_r+0xbc>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	60a3      	str	r3, [r4, #8]
 800c4ae:	6963      	ldr	r3, [r4, #20]
 800c4b0:	425b      	negs	r3, r3
 800c4b2:	61a3      	str	r3, [r4, #24]
 800c4b4:	6923      	ldr	r3, [r4, #16]
 800c4b6:	b943      	cbnz	r3, 800c4ca <__swsetup_r+0xc6>
 800c4b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c4bc:	d1ba      	bne.n	800c434 <__swsetup_r+0x30>
 800c4be:	bd70      	pop	{r4, r5, r6, pc}
 800c4c0:	0781      	lsls	r1, r0, #30
 800c4c2:	bf58      	it	pl
 800c4c4:	6963      	ldrpl	r3, [r4, #20]
 800c4c6:	60a3      	str	r3, [r4, #8]
 800c4c8:	e7f4      	b.n	800c4b4 <__swsetup_r+0xb0>
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	e7f7      	b.n	800c4be <__swsetup_r+0xba>
 800c4ce:	bf00      	nop
 800c4d0:	2000000c 	.word	0x2000000c
 800c4d4:	0800d298 	.word	0x0800d298
 800c4d8:	0800d2b8 	.word	0x0800d2b8
 800c4dc:	0800d278 	.word	0x0800d278

0800c4e0 <abort>:
 800c4e0:	b508      	push	{r3, lr}
 800c4e2:	2006      	movs	r0, #6
 800c4e4:	f000 faa2 	bl	800ca2c <raise>
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f7f6 fad9 	bl	8002aa0 <_exit>
	...

0800c4f0 <__sflush_r>:
 800c4f0:	898a      	ldrh	r2, [r1, #12]
 800c4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4f6:	4605      	mov	r5, r0
 800c4f8:	0710      	lsls	r0, r2, #28
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	d458      	bmi.n	800c5b0 <__sflush_r+0xc0>
 800c4fe:	684b      	ldr	r3, [r1, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	dc05      	bgt.n	800c510 <__sflush_r+0x20>
 800c504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	dc02      	bgt.n	800c510 <__sflush_r+0x20>
 800c50a:	2000      	movs	r0, #0
 800c50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c512:	2e00      	cmp	r6, #0
 800c514:	d0f9      	beq.n	800c50a <__sflush_r+0x1a>
 800c516:	2300      	movs	r3, #0
 800c518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c51c:	682f      	ldr	r7, [r5, #0]
 800c51e:	602b      	str	r3, [r5, #0]
 800c520:	d032      	beq.n	800c588 <__sflush_r+0x98>
 800c522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	075a      	lsls	r2, r3, #29
 800c528:	d505      	bpl.n	800c536 <__sflush_r+0x46>
 800c52a:	6863      	ldr	r3, [r4, #4]
 800c52c:	1ac0      	subs	r0, r0, r3
 800c52e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c530:	b10b      	cbz	r3, 800c536 <__sflush_r+0x46>
 800c532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c534:	1ac0      	subs	r0, r0, r3
 800c536:	2300      	movs	r3, #0
 800c538:	4602      	mov	r2, r0
 800c53a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c53c:	6a21      	ldr	r1, [r4, #32]
 800c53e:	4628      	mov	r0, r5
 800c540:	47b0      	blx	r6
 800c542:	1c43      	adds	r3, r0, #1
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	d106      	bne.n	800c556 <__sflush_r+0x66>
 800c548:	6829      	ldr	r1, [r5, #0]
 800c54a:	291d      	cmp	r1, #29
 800c54c:	d82c      	bhi.n	800c5a8 <__sflush_r+0xb8>
 800c54e:	4a2a      	ldr	r2, [pc, #168]	; (800c5f8 <__sflush_r+0x108>)
 800c550:	40ca      	lsrs	r2, r1
 800c552:	07d6      	lsls	r6, r2, #31
 800c554:	d528      	bpl.n	800c5a8 <__sflush_r+0xb8>
 800c556:	2200      	movs	r2, #0
 800c558:	6062      	str	r2, [r4, #4]
 800c55a:	04d9      	lsls	r1, r3, #19
 800c55c:	6922      	ldr	r2, [r4, #16]
 800c55e:	6022      	str	r2, [r4, #0]
 800c560:	d504      	bpl.n	800c56c <__sflush_r+0x7c>
 800c562:	1c42      	adds	r2, r0, #1
 800c564:	d101      	bne.n	800c56a <__sflush_r+0x7a>
 800c566:	682b      	ldr	r3, [r5, #0]
 800c568:	b903      	cbnz	r3, 800c56c <__sflush_r+0x7c>
 800c56a:	6560      	str	r0, [r4, #84]	; 0x54
 800c56c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c56e:	602f      	str	r7, [r5, #0]
 800c570:	2900      	cmp	r1, #0
 800c572:	d0ca      	beq.n	800c50a <__sflush_r+0x1a>
 800c574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c578:	4299      	cmp	r1, r3
 800c57a:	d002      	beq.n	800c582 <__sflush_r+0x92>
 800c57c:	4628      	mov	r0, r5
 800c57e:	f7ff fb3b 	bl	800bbf8 <_free_r>
 800c582:	2000      	movs	r0, #0
 800c584:	6360      	str	r0, [r4, #52]	; 0x34
 800c586:	e7c1      	b.n	800c50c <__sflush_r+0x1c>
 800c588:	6a21      	ldr	r1, [r4, #32]
 800c58a:	2301      	movs	r3, #1
 800c58c:	4628      	mov	r0, r5
 800c58e:	47b0      	blx	r6
 800c590:	1c41      	adds	r1, r0, #1
 800c592:	d1c7      	bne.n	800c524 <__sflush_r+0x34>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0c4      	beq.n	800c524 <__sflush_r+0x34>
 800c59a:	2b1d      	cmp	r3, #29
 800c59c:	d001      	beq.n	800c5a2 <__sflush_r+0xb2>
 800c59e:	2b16      	cmp	r3, #22
 800c5a0:	d101      	bne.n	800c5a6 <__sflush_r+0xb6>
 800c5a2:	602f      	str	r7, [r5, #0]
 800c5a4:	e7b1      	b.n	800c50a <__sflush_r+0x1a>
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	e7ad      	b.n	800c50c <__sflush_r+0x1c>
 800c5b0:	690f      	ldr	r7, [r1, #16]
 800c5b2:	2f00      	cmp	r7, #0
 800c5b4:	d0a9      	beq.n	800c50a <__sflush_r+0x1a>
 800c5b6:	0793      	lsls	r3, r2, #30
 800c5b8:	680e      	ldr	r6, [r1, #0]
 800c5ba:	bf08      	it	eq
 800c5bc:	694b      	ldreq	r3, [r1, #20]
 800c5be:	600f      	str	r7, [r1, #0]
 800c5c0:	bf18      	it	ne
 800c5c2:	2300      	movne	r3, #0
 800c5c4:	eba6 0807 	sub.w	r8, r6, r7
 800c5c8:	608b      	str	r3, [r1, #8]
 800c5ca:	f1b8 0f00 	cmp.w	r8, #0
 800c5ce:	dd9c      	ble.n	800c50a <__sflush_r+0x1a>
 800c5d0:	6a21      	ldr	r1, [r4, #32]
 800c5d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5d4:	4643      	mov	r3, r8
 800c5d6:	463a      	mov	r2, r7
 800c5d8:	4628      	mov	r0, r5
 800c5da:	47b0      	blx	r6
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	dc06      	bgt.n	800c5ee <__sflush_r+0xfe>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e6:	81a3      	strh	r3, [r4, #12]
 800c5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ec:	e78e      	b.n	800c50c <__sflush_r+0x1c>
 800c5ee:	4407      	add	r7, r0
 800c5f0:	eba8 0800 	sub.w	r8, r8, r0
 800c5f4:	e7e9      	b.n	800c5ca <__sflush_r+0xda>
 800c5f6:	bf00      	nop
 800c5f8:	20400001 	.word	0x20400001

0800c5fc <_fflush_r>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	690b      	ldr	r3, [r1, #16]
 800c600:	4605      	mov	r5, r0
 800c602:	460c      	mov	r4, r1
 800c604:	b913      	cbnz	r3, 800c60c <_fflush_r+0x10>
 800c606:	2500      	movs	r5, #0
 800c608:	4628      	mov	r0, r5
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	b118      	cbz	r0, 800c616 <_fflush_r+0x1a>
 800c60e:	6983      	ldr	r3, [r0, #24]
 800c610:	b90b      	cbnz	r3, 800c616 <_fflush_r+0x1a>
 800c612:	f000 f887 	bl	800c724 <__sinit>
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <_fflush_r+0x6c>)
 800c618:	429c      	cmp	r4, r3
 800c61a:	d11b      	bne.n	800c654 <_fflush_r+0x58>
 800c61c:	686c      	ldr	r4, [r5, #4]
 800c61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0ef      	beq.n	800c606 <_fflush_r+0xa>
 800c626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c628:	07d0      	lsls	r0, r2, #31
 800c62a:	d404      	bmi.n	800c636 <_fflush_r+0x3a>
 800c62c:	0599      	lsls	r1, r3, #22
 800c62e:	d402      	bmi.n	800c636 <_fflush_r+0x3a>
 800c630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c632:	f000 f915 	bl	800c860 <__retarget_lock_acquire_recursive>
 800c636:	4628      	mov	r0, r5
 800c638:	4621      	mov	r1, r4
 800c63a:	f7ff ff59 	bl	800c4f0 <__sflush_r>
 800c63e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c640:	07da      	lsls	r2, r3, #31
 800c642:	4605      	mov	r5, r0
 800c644:	d4e0      	bmi.n	800c608 <_fflush_r+0xc>
 800c646:	89a3      	ldrh	r3, [r4, #12]
 800c648:	059b      	lsls	r3, r3, #22
 800c64a:	d4dd      	bmi.n	800c608 <_fflush_r+0xc>
 800c64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c64e:	f000 f908 	bl	800c862 <__retarget_lock_release_recursive>
 800c652:	e7d9      	b.n	800c608 <_fflush_r+0xc>
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <_fflush_r+0x70>)
 800c656:	429c      	cmp	r4, r3
 800c658:	d101      	bne.n	800c65e <_fflush_r+0x62>
 800c65a:	68ac      	ldr	r4, [r5, #8]
 800c65c:	e7df      	b.n	800c61e <_fflush_r+0x22>
 800c65e:	4b04      	ldr	r3, [pc, #16]	; (800c670 <_fflush_r+0x74>)
 800c660:	429c      	cmp	r4, r3
 800c662:	bf08      	it	eq
 800c664:	68ec      	ldreq	r4, [r5, #12]
 800c666:	e7da      	b.n	800c61e <_fflush_r+0x22>
 800c668:	0800d298 	.word	0x0800d298
 800c66c:	0800d2b8 	.word	0x0800d2b8
 800c670:	0800d278 	.word	0x0800d278

0800c674 <std>:
 800c674:	2300      	movs	r3, #0
 800c676:	b510      	push	{r4, lr}
 800c678:	4604      	mov	r4, r0
 800c67a:	e9c0 3300 	strd	r3, r3, [r0]
 800c67e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c682:	6083      	str	r3, [r0, #8]
 800c684:	8181      	strh	r1, [r0, #12]
 800c686:	6643      	str	r3, [r0, #100]	; 0x64
 800c688:	81c2      	strh	r2, [r0, #14]
 800c68a:	6183      	str	r3, [r0, #24]
 800c68c:	4619      	mov	r1, r3
 800c68e:	2208      	movs	r2, #8
 800c690:	305c      	adds	r0, #92	; 0x5c
 800c692:	f7fd faaf 	bl	8009bf4 <memset>
 800c696:	4b05      	ldr	r3, [pc, #20]	; (800c6ac <std+0x38>)
 800c698:	6263      	str	r3, [r4, #36]	; 0x24
 800c69a:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <std+0x3c>)
 800c69c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c69e:	4b05      	ldr	r3, [pc, #20]	; (800c6b4 <std+0x40>)
 800c6a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6a2:	4b05      	ldr	r3, [pc, #20]	; (800c6b8 <std+0x44>)
 800c6a4:	6224      	str	r4, [r4, #32]
 800c6a6:	6323      	str	r3, [r4, #48]	; 0x30
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop
 800c6ac:	0800ca65 	.word	0x0800ca65
 800c6b0:	0800ca87 	.word	0x0800ca87
 800c6b4:	0800cabf 	.word	0x0800cabf
 800c6b8:	0800cae3 	.word	0x0800cae3

0800c6bc <_cleanup_r>:
 800c6bc:	4901      	ldr	r1, [pc, #4]	; (800c6c4 <_cleanup_r+0x8>)
 800c6be:	f000 b8af 	b.w	800c820 <_fwalk_reent>
 800c6c2:	bf00      	nop
 800c6c4:	0800c5fd 	.word	0x0800c5fd

0800c6c8 <__sfmoreglue>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	2268      	movs	r2, #104	; 0x68
 800c6cc:	1e4d      	subs	r5, r1, #1
 800c6ce:	4355      	muls	r5, r2
 800c6d0:	460e      	mov	r6, r1
 800c6d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c6d6:	f7ff fafb 	bl	800bcd0 <_malloc_r>
 800c6da:	4604      	mov	r4, r0
 800c6dc:	b140      	cbz	r0, 800c6f0 <__sfmoreglue+0x28>
 800c6de:	2100      	movs	r1, #0
 800c6e0:	e9c0 1600 	strd	r1, r6, [r0]
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	60a0      	str	r0, [r4, #8]
 800c6e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c6ec:	f7fd fa82 	bl	8009bf4 <memset>
 800c6f0:	4620      	mov	r0, r4
 800c6f2:	bd70      	pop	{r4, r5, r6, pc}

0800c6f4 <__sfp_lock_acquire>:
 800c6f4:	4801      	ldr	r0, [pc, #4]	; (800c6fc <__sfp_lock_acquire+0x8>)
 800c6f6:	f000 b8b3 	b.w	800c860 <__retarget_lock_acquire_recursive>
 800c6fa:	bf00      	nop
 800c6fc:	20000719 	.word	0x20000719

0800c700 <__sfp_lock_release>:
 800c700:	4801      	ldr	r0, [pc, #4]	; (800c708 <__sfp_lock_release+0x8>)
 800c702:	f000 b8ae 	b.w	800c862 <__retarget_lock_release_recursive>
 800c706:	bf00      	nop
 800c708:	20000719 	.word	0x20000719

0800c70c <__sinit_lock_acquire>:
 800c70c:	4801      	ldr	r0, [pc, #4]	; (800c714 <__sinit_lock_acquire+0x8>)
 800c70e:	f000 b8a7 	b.w	800c860 <__retarget_lock_acquire_recursive>
 800c712:	bf00      	nop
 800c714:	2000071a 	.word	0x2000071a

0800c718 <__sinit_lock_release>:
 800c718:	4801      	ldr	r0, [pc, #4]	; (800c720 <__sinit_lock_release+0x8>)
 800c71a:	f000 b8a2 	b.w	800c862 <__retarget_lock_release_recursive>
 800c71e:	bf00      	nop
 800c720:	2000071a 	.word	0x2000071a

0800c724 <__sinit>:
 800c724:	b510      	push	{r4, lr}
 800c726:	4604      	mov	r4, r0
 800c728:	f7ff fff0 	bl	800c70c <__sinit_lock_acquire>
 800c72c:	69a3      	ldr	r3, [r4, #24]
 800c72e:	b11b      	cbz	r3, 800c738 <__sinit+0x14>
 800c730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c734:	f7ff bff0 	b.w	800c718 <__sinit_lock_release>
 800c738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c73c:	6523      	str	r3, [r4, #80]	; 0x50
 800c73e:	4b13      	ldr	r3, [pc, #76]	; (800c78c <__sinit+0x68>)
 800c740:	4a13      	ldr	r2, [pc, #76]	; (800c790 <__sinit+0x6c>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	62a2      	str	r2, [r4, #40]	; 0x28
 800c746:	42a3      	cmp	r3, r4
 800c748:	bf04      	itt	eq
 800c74a:	2301      	moveq	r3, #1
 800c74c:	61a3      	streq	r3, [r4, #24]
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 f820 	bl	800c794 <__sfp>
 800c754:	6060      	str	r0, [r4, #4]
 800c756:	4620      	mov	r0, r4
 800c758:	f000 f81c 	bl	800c794 <__sfp>
 800c75c:	60a0      	str	r0, [r4, #8]
 800c75e:	4620      	mov	r0, r4
 800c760:	f000 f818 	bl	800c794 <__sfp>
 800c764:	2200      	movs	r2, #0
 800c766:	60e0      	str	r0, [r4, #12]
 800c768:	2104      	movs	r1, #4
 800c76a:	6860      	ldr	r0, [r4, #4]
 800c76c:	f7ff ff82 	bl	800c674 <std>
 800c770:	68a0      	ldr	r0, [r4, #8]
 800c772:	2201      	movs	r2, #1
 800c774:	2109      	movs	r1, #9
 800c776:	f7ff ff7d 	bl	800c674 <std>
 800c77a:	68e0      	ldr	r0, [r4, #12]
 800c77c:	2202      	movs	r2, #2
 800c77e:	2112      	movs	r1, #18
 800c780:	f7ff ff78 	bl	800c674 <std>
 800c784:	2301      	movs	r3, #1
 800c786:	61a3      	str	r3, [r4, #24]
 800c788:	e7d2      	b.n	800c730 <__sinit+0xc>
 800c78a:	bf00      	nop
 800c78c:	0800ce9c 	.word	0x0800ce9c
 800c790:	0800c6bd 	.word	0x0800c6bd

0800c794 <__sfp>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	4607      	mov	r7, r0
 800c798:	f7ff ffac 	bl	800c6f4 <__sfp_lock_acquire>
 800c79c:	4b1e      	ldr	r3, [pc, #120]	; (800c818 <__sfp+0x84>)
 800c79e:	681e      	ldr	r6, [r3, #0]
 800c7a0:	69b3      	ldr	r3, [r6, #24]
 800c7a2:	b913      	cbnz	r3, 800c7aa <__sfp+0x16>
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	f7ff ffbd 	bl	800c724 <__sinit>
 800c7aa:	3648      	adds	r6, #72	; 0x48
 800c7ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7b0:	3b01      	subs	r3, #1
 800c7b2:	d503      	bpl.n	800c7bc <__sfp+0x28>
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	b30b      	cbz	r3, 800c7fc <__sfp+0x68>
 800c7b8:	6836      	ldr	r6, [r6, #0]
 800c7ba:	e7f7      	b.n	800c7ac <__sfp+0x18>
 800c7bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c7c0:	b9d5      	cbnz	r5, 800c7f8 <__sfp+0x64>
 800c7c2:	4b16      	ldr	r3, [pc, #88]	; (800c81c <__sfp+0x88>)
 800c7c4:	60e3      	str	r3, [r4, #12]
 800c7c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c7ca:	6665      	str	r5, [r4, #100]	; 0x64
 800c7cc:	f000 f847 	bl	800c85e <__retarget_lock_init_recursive>
 800c7d0:	f7ff ff96 	bl	800c700 <__sfp_lock_release>
 800c7d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c7d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c7dc:	6025      	str	r5, [r4, #0]
 800c7de:	61a5      	str	r5, [r4, #24]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	4629      	mov	r1, r5
 800c7e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c7e8:	f7fd fa04 	bl	8009bf4 <memset>
 800c7ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c7f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7f8:	3468      	adds	r4, #104	; 0x68
 800c7fa:	e7d9      	b.n	800c7b0 <__sfp+0x1c>
 800c7fc:	2104      	movs	r1, #4
 800c7fe:	4638      	mov	r0, r7
 800c800:	f7ff ff62 	bl	800c6c8 <__sfmoreglue>
 800c804:	4604      	mov	r4, r0
 800c806:	6030      	str	r0, [r6, #0]
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1d5      	bne.n	800c7b8 <__sfp+0x24>
 800c80c:	f7ff ff78 	bl	800c700 <__sfp_lock_release>
 800c810:	230c      	movs	r3, #12
 800c812:	603b      	str	r3, [r7, #0]
 800c814:	e7ee      	b.n	800c7f4 <__sfp+0x60>
 800c816:	bf00      	nop
 800c818:	0800ce9c 	.word	0x0800ce9c
 800c81c:	ffff0001 	.word	0xffff0001

0800c820 <_fwalk_reent>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4606      	mov	r6, r0
 800c826:	4688      	mov	r8, r1
 800c828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c82c:	2700      	movs	r7, #0
 800c82e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c832:	f1b9 0901 	subs.w	r9, r9, #1
 800c836:	d505      	bpl.n	800c844 <_fwalk_reent+0x24>
 800c838:	6824      	ldr	r4, [r4, #0]
 800c83a:	2c00      	cmp	r4, #0
 800c83c:	d1f7      	bne.n	800c82e <_fwalk_reent+0xe>
 800c83e:	4638      	mov	r0, r7
 800c840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c844:	89ab      	ldrh	r3, [r5, #12]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d907      	bls.n	800c85a <_fwalk_reent+0x3a>
 800c84a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c84e:	3301      	adds	r3, #1
 800c850:	d003      	beq.n	800c85a <_fwalk_reent+0x3a>
 800c852:	4629      	mov	r1, r5
 800c854:	4630      	mov	r0, r6
 800c856:	47c0      	blx	r8
 800c858:	4307      	orrs	r7, r0
 800c85a:	3568      	adds	r5, #104	; 0x68
 800c85c:	e7e9      	b.n	800c832 <_fwalk_reent+0x12>

0800c85e <__retarget_lock_init_recursive>:
 800c85e:	4770      	bx	lr

0800c860 <__retarget_lock_acquire_recursive>:
 800c860:	4770      	bx	lr

0800c862 <__retarget_lock_release_recursive>:
 800c862:	4770      	bx	lr

0800c864 <__swhatbuf_r>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	460e      	mov	r6, r1
 800c868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86c:	2900      	cmp	r1, #0
 800c86e:	b096      	sub	sp, #88	; 0x58
 800c870:	4614      	mov	r4, r2
 800c872:	461d      	mov	r5, r3
 800c874:	da08      	bge.n	800c888 <__swhatbuf_r+0x24>
 800c876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	061a      	lsls	r2, r3, #24
 800c880:	d410      	bmi.n	800c8a4 <__swhatbuf_r+0x40>
 800c882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c886:	e00e      	b.n	800c8a6 <__swhatbuf_r+0x42>
 800c888:	466a      	mov	r2, sp
 800c88a:	f000 f951 	bl	800cb30 <_fstat_r>
 800c88e:	2800      	cmp	r0, #0
 800c890:	dbf1      	blt.n	800c876 <__swhatbuf_r+0x12>
 800c892:	9a01      	ldr	r2, [sp, #4]
 800c894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c89c:	425a      	negs	r2, r3
 800c89e:	415a      	adcs	r2, r3
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	e7ee      	b.n	800c882 <__swhatbuf_r+0x1e>
 800c8a4:	2340      	movs	r3, #64	; 0x40
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	b016      	add	sp, #88	; 0x58
 800c8ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c8b0 <__smakebuf_r>:
 800c8b0:	898b      	ldrh	r3, [r1, #12]
 800c8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8b4:	079d      	lsls	r5, r3, #30
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	460c      	mov	r4, r1
 800c8ba:	d507      	bpl.n	800c8cc <__smakebuf_r+0x1c>
 800c8bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	6123      	str	r3, [r4, #16]
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	6163      	str	r3, [r4, #20]
 800c8c8:	b002      	add	sp, #8
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	ab01      	add	r3, sp, #4
 800c8ce:	466a      	mov	r2, sp
 800c8d0:	f7ff ffc8 	bl	800c864 <__swhatbuf_r>
 800c8d4:	9900      	ldr	r1, [sp, #0]
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	4630      	mov	r0, r6
 800c8da:	f7ff f9f9 	bl	800bcd0 <_malloc_r>
 800c8de:	b948      	cbnz	r0, 800c8f4 <__smakebuf_r+0x44>
 800c8e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8e4:	059a      	lsls	r2, r3, #22
 800c8e6:	d4ef      	bmi.n	800c8c8 <__smakebuf_r+0x18>
 800c8e8:	f023 0303 	bic.w	r3, r3, #3
 800c8ec:	f043 0302 	orr.w	r3, r3, #2
 800c8f0:	81a3      	strh	r3, [r4, #12]
 800c8f2:	e7e3      	b.n	800c8bc <__smakebuf_r+0xc>
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <__smakebuf_r+0x7c>)
 800c8f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c8f8:	89a3      	ldrh	r3, [r4, #12]
 800c8fa:	6020      	str	r0, [r4, #0]
 800c8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	9b00      	ldr	r3, [sp, #0]
 800c904:	6163      	str	r3, [r4, #20]
 800c906:	9b01      	ldr	r3, [sp, #4]
 800c908:	6120      	str	r0, [r4, #16]
 800c90a:	b15b      	cbz	r3, 800c924 <__smakebuf_r+0x74>
 800c90c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c910:	4630      	mov	r0, r6
 800c912:	f000 f91f 	bl	800cb54 <_isatty_r>
 800c916:	b128      	cbz	r0, 800c924 <__smakebuf_r+0x74>
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	f023 0303 	bic.w	r3, r3, #3
 800c91e:	f043 0301 	orr.w	r3, r3, #1
 800c922:	81a3      	strh	r3, [r4, #12]
 800c924:	89a0      	ldrh	r0, [r4, #12]
 800c926:	4305      	orrs	r5, r0
 800c928:	81a5      	strh	r5, [r4, #12]
 800c92a:	e7cd      	b.n	800c8c8 <__smakebuf_r+0x18>
 800c92c:	0800c6bd 	.word	0x0800c6bd

0800c930 <memmove>:
 800c930:	4288      	cmp	r0, r1
 800c932:	b510      	push	{r4, lr}
 800c934:	eb01 0402 	add.w	r4, r1, r2
 800c938:	d902      	bls.n	800c940 <memmove+0x10>
 800c93a:	4284      	cmp	r4, r0
 800c93c:	4623      	mov	r3, r4
 800c93e:	d807      	bhi.n	800c950 <memmove+0x20>
 800c940:	1e43      	subs	r3, r0, #1
 800c942:	42a1      	cmp	r1, r4
 800c944:	d008      	beq.n	800c958 <memmove+0x28>
 800c946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c94e:	e7f8      	b.n	800c942 <memmove+0x12>
 800c950:	4402      	add	r2, r0
 800c952:	4601      	mov	r1, r0
 800c954:	428a      	cmp	r2, r1
 800c956:	d100      	bne.n	800c95a <memmove+0x2a>
 800c958:	bd10      	pop	{r4, pc}
 800c95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c962:	e7f7      	b.n	800c954 <memmove+0x24>

0800c964 <__malloc_lock>:
 800c964:	4801      	ldr	r0, [pc, #4]	; (800c96c <__malloc_lock+0x8>)
 800c966:	f7ff bf7b 	b.w	800c860 <__retarget_lock_acquire_recursive>
 800c96a:	bf00      	nop
 800c96c:	20000718 	.word	0x20000718

0800c970 <__malloc_unlock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_unlock+0x8>)
 800c972:	f7ff bf76 	b.w	800c862 <__retarget_lock_release_recursive>
 800c976:	bf00      	nop
 800c978:	20000718 	.word	0x20000718

0800c97c <_realloc_r>:
 800c97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c980:	4680      	mov	r8, r0
 800c982:	4614      	mov	r4, r2
 800c984:	460e      	mov	r6, r1
 800c986:	b921      	cbnz	r1, 800c992 <_realloc_r+0x16>
 800c988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	4611      	mov	r1, r2
 800c98e:	f7ff b99f 	b.w	800bcd0 <_malloc_r>
 800c992:	b92a      	cbnz	r2, 800c9a0 <_realloc_r+0x24>
 800c994:	f7ff f930 	bl	800bbf8 <_free_r>
 800c998:	4625      	mov	r5, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a0:	f000 f8fa 	bl	800cb98 <_malloc_usable_size_r>
 800c9a4:	4284      	cmp	r4, r0
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	d802      	bhi.n	800c9b0 <_realloc_r+0x34>
 800c9aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9ae:	d812      	bhi.n	800c9d6 <_realloc_r+0x5a>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4640      	mov	r0, r8
 800c9b4:	f7ff f98c 	bl	800bcd0 <_malloc_r>
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d0ed      	beq.n	800c99a <_realloc_r+0x1e>
 800c9be:	42bc      	cmp	r4, r7
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	4631      	mov	r1, r6
 800c9c4:	bf28      	it	cs
 800c9c6:	463a      	movcs	r2, r7
 800c9c8:	f7fd f906 	bl	8009bd8 <memcpy>
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	f7ff f912 	bl	800bbf8 <_free_r>
 800c9d4:	e7e1      	b.n	800c99a <_realloc_r+0x1e>
 800c9d6:	4635      	mov	r5, r6
 800c9d8:	e7df      	b.n	800c99a <_realloc_r+0x1e>

0800c9da <_raise_r>:
 800c9da:	291f      	cmp	r1, #31
 800c9dc:	b538      	push	{r3, r4, r5, lr}
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	d904      	bls.n	800c9ee <_raise_r+0x14>
 800c9e4:	2316      	movs	r3, #22
 800c9e6:	6003      	str	r3, [r0, #0]
 800c9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ec:	bd38      	pop	{r3, r4, r5, pc}
 800c9ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c9f0:	b112      	cbz	r2, 800c9f8 <_raise_r+0x1e>
 800c9f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9f6:	b94b      	cbnz	r3, 800ca0c <_raise_r+0x32>
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 f831 	bl	800ca60 <_getpid_r>
 800c9fe:	462a      	mov	r2, r5
 800ca00:	4601      	mov	r1, r0
 800ca02:	4620      	mov	r0, r4
 800ca04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca08:	f000 b818 	b.w	800ca3c <_kill_r>
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d00a      	beq.n	800ca26 <_raise_r+0x4c>
 800ca10:	1c59      	adds	r1, r3, #1
 800ca12:	d103      	bne.n	800ca1c <_raise_r+0x42>
 800ca14:	2316      	movs	r3, #22
 800ca16:	6003      	str	r3, [r0, #0]
 800ca18:	2001      	movs	r0, #1
 800ca1a:	e7e7      	b.n	800c9ec <_raise_r+0x12>
 800ca1c:	2400      	movs	r4, #0
 800ca1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca22:	4628      	mov	r0, r5
 800ca24:	4798      	blx	r3
 800ca26:	2000      	movs	r0, #0
 800ca28:	e7e0      	b.n	800c9ec <_raise_r+0x12>
	...

0800ca2c <raise>:
 800ca2c:	4b02      	ldr	r3, [pc, #8]	; (800ca38 <raise+0xc>)
 800ca2e:	4601      	mov	r1, r0
 800ca30:	6818      	ldr	r0, [r3, #0]
 800ca32:	f7ff bfd2 	b.w	800c9da <_raise_r>
 800ca36:	bf00      	nop
 800ca38:	2000000c 	.word	0x2000000c

0800ca3c <_kill_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	; (800ca5c <_kill_r+0x20>)
 800ca40:	2300      	movs	r3, #0
 800ca42:	4604      	mov	r4, r0
 800ca44:	4608      	mov	r0, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f7f6 f819 	bl	8002a80 <_kill>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d102      	bne.n	800ca58 <_kill_r+0x1c>
 800ca52:	682b      	ldr	r3, [r5, #0]
 800ca54:	b103      	cbz	r3, 800ca58 <_kill_r+0x1c>
 800ca56:	6023      	str	r3, [r4, #0]
 800ca58:	bd38      	pop	{r3, r4, r5, pc}
 800ca5a:	bf00      	nop
 800ca5c:	2000071c 	.word	0x2000071c

0800ca60 <_getpid_r>:
 800ca60:	f7f6 b806 	b.w	8002a70 <_getpid>

0800ca64 <__sread>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	460c      	mov	r4, r1
 800ca68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca6c:	f000 f89c 	bl	800cba8 <_read_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	bfab      	itete	ge
 800ca74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca76:	89a3      	ldrhlt	r3, [r4, #12]
 800ca78:	181b      	addge	r3, r3, r0
 800ca7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca7e:	bfac      	ite	ge
 800ca80:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca82:	81a3      	strhlt	r3, [r4, #12]
 800ca84:	bd10      	pop	{r4, pc}

0800ca86 <__swrite>:
 800ca86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca8a:	461f      	mov	r7, r3
 800ca8c:	898b      	ldrh	r3, [r1, #12]
 800ca8e:	05db      	lsls	r3, r3, #23
 800ca90:	4605      	mov	r5, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	4616      	mov	r6, r2
 800ca96:	d505      	bpl.n	800caa4 <__swrite+0x1e>
 800ca98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f000 f868 	bl	800cb74 <_lseek_r>
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	4632      	mov	r2, r6
 800cab2:	463b      	mov	r3, r7
 800cab4:	4628      	mov	r0, r5
 800cab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caba:	f000 b817 	b.w	800caec <_write_r>

0800cabe <__sseek>:
 800cabe:	b510      	push	{r4, lr}
 800cac0:	460c      	mov	r4, r1
 800cac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac6:	f000 f855 	bl	800cb74 <_lseek_r>
 800caca:	1c43      	adds	r3, r0, #1
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	bf15      	itete	ne
 800cad0:	6560      	strne	r0, [r4, #84]	; 0x54
 800cad2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cad6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cada:	81a3      	strheq	r3, [r4, #12]
 800cadc:	bf18      	it	ne
 800cade:	81a3      	strhne	r3, [r4, #12]
 800cae0:	bd10      	pop	{r4, pc}

0800cae2 <__sclose>:
 800cae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae6:	f000 b813 	b.w	800cb10 <_close_r>
	...

0800caec <_write_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d07      	ldr	r5, [pc, #28]	; (800cb0c <_write_r+0x20>)
 800caf0:	4604      	mov	r4, r0
 800caf2:	4608      	mov	r0, r1
 800caf4:	4611      	mov	r1, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	602a      	str	r2, [r5, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	f7f5 fff7 	bl	8002aee <_write>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_write_r+0x1e>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_write_r+0x1e>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	2000071c 	.word	0x2000071c

0800cb10 <_close_r>:
 800cb10:	b538      	push	{r3, r4, r5, lr}
 800cb12:	4d06      	ldr	r5, [pc, #24]	; (800cb2c <_close_r+0x1c>)
 800cb14:	2300      	movs	r3, #0
 800cb16:	4604      	mov	r4, r0
 800cb18:	4608      	mov	r0, r1
 800cb1a:	602b      	str	r3, [r5, #0]
 800cb1c:	f7f6 f803 	bl	8002b26 <_close>
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	d102      	bne.n	800cb2a <_close_r+0x1a>
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	b103      	cbz	r3, 800cb2a <_close_r+0x1a>
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
 800cb2c:	2000071c 	.word	0x2000071c

0800cb30 <_fstat_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <_fstat_r+0x20>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	f7f5 fffe 	bl	8002b3e <_fstat>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d102      	bne.n	800cb4c <_fstat_r+0x1c>
 800cb46:	682b      	ldr	r3, [r5, #0]
 800cb48:	b103      	cbz	r3, 800cb4c <_fstat_r+0x1c>
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	2000071c 	.word	0x2000071c

0800cb54 <_isatty_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	; (800cb70 <_isatty_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 fffd 	bl	8002b5e <_isatty>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_isatty_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_isatty_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	2000071c 	.word	0x2000071c

0800cb74 <_lseek_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d07      	ldr	r5, [pc, #28]	; (800cb94 <_lseek_r+0x20>)
 800cb78:	4604      	mov	r4, r0
 800cb7a:	4608      	mov	r0, r1
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	2200      	movs	r2, #0
 800cb80:	602a      	str	r2, [r5, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	f7f5 fff6 	bl	8002b74 <_lseek>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_lseek_r+0x1e>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_lseek_r+0x1e>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	2000071c 	.word	0x2000071c

0800cb98 <_malloc_usable_size_r>:
 800cb98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb9c:	1f18      	subs	r0, r3, #4
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	bfbc      	itt	lt
 800cba2:	580b      	ldrlt	r3, [r1, r0]
 800cba4:	18c0      	addlt	r0, r0, r3
 800cba6:	4770      	bx	lr

0800cba8 <_read_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_read_r+0x20>)
 800cbac:	4604      	mov	r4, r0
 800cbae:	4608      	mov	r0, r1
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f7f5 ff7c 	bl	8002ab4 <_read>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_read_r+0x1e>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_read_r+0x1e>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	2000071c 	.word	0x2000071c

0800cbcc <_init>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr

0800cbd8 <_fini>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	bf00      	nop
 800cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbde:	bc08      	pop	{r3}
 800cbe0:	469e      	mov	lr, r3
 800cbe2:	4770      	bx	lr
