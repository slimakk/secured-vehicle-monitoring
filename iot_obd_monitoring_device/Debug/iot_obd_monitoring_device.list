
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008988  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed0  08008ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed0  08008ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ed8  08008ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed8  08008ed8  00018ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000070  08008f50  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08008f50  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac44  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf3  00000000  00000000  0003ace4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b0e  00000000  00000000  000413e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd43  00000000  00000000  00067ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4031  00000000  00000000  00084c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168c6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  00168cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b00 	.word	0x08008b00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b00 	.word	0x08008b00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Verify_Checksum>:

	HAL_Delay(60);
}

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e009      	b.n	8000dea <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4413      	add	r3, r2
 8000de2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d101      	bne.n	8000e08 <Verify_Checksum+0x48>
	{
		return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <Verify_Checksum+0x4a>
	}
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <kline_rx_callback>:

void kline_rx_callback(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <kline_rx_callback+0x94>)
 8000e20:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <kline_rx_callback+0x20>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <kline_rx_callback+0x98>)
 8000e2a:	f004 fecd 	bl	8005bc8 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <kline_rx_callback+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
//			OBD2_ShowOnDisplay(obd_comm.current_value);
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8000e36:	e035      	b.n	8000ea4 <kline_rx_callback+0x8c>
	else if (obd_comm.msg_type == 2)
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <kline_rx_callback+0x94>)
 8000e3a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <kline_rx_callback+0x8c>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3305      	adds	r3, #5
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e4e:	f7ff ffb7 	bl	8000dc0 <Verify_Checksum>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d025      	beq.n	8000ea4 <kline_rx_callback+0x8c>
			uint8_t j = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	e00b      	b.n	8000e7a <kline_rx_callback+0x62>
				rx_frame[j] = kline_rx_buf[i];
 8000e62:	79ba      	ldrb	r2, [r7, #6]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4914      	ldr	r1, [pc, #80]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e68:	5c89      	ldrb	r1, [r1, r2]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
				j++;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3301      	adds	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	3301      	adds	r3, #1
 8000e78:	71bb      	strb	r3, [r7, #6]
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3304      	adds	r3, #4
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dded      	ble.n	8000e62 <kline_rx_callback+0x4a>
			obd_comm.msg_type = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <kline_rx_callback+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e90:	f000 f872 	bl	8000f78 <OBD2_PID_Parse>
 8000e94:	eef0 7a40 	vmov.f32	s15, s0
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <kline_rx_callback+0x94>)
 8000e9a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			HAL_IWDG_Refresh(&hiwdg);
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <kline_rx_callback+0xa8>)
 8000ea0:	f003 fc32 	bl	8004708 <HAL_IWDG_Refresh>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000188 	.word	0x20000188
 8000eb0:	20000868 	.word	0x20000868
 8000eb4:	200000a3 	.word	0x200000a3
 8000eb8:	2000008c 	.word	0x2000008c
 8000ebc:	2000009c 	.word	0x2000009c
 8000ec0:	20000178 	.word	0x20000178

08000ec4 <OBD2_PID_Decode>:
extern uint32_t adc_buffer;

static void OBD2_PID_Decode(uint8_t* rx_frame);

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	061a      	lsls	r2, r3, #24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	041b      	lsls	r3, r3, #16
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3305      	adds	r3, #5
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	3206      	adds	r2, #6
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8000ef6:	231f      	movs	r3, #31
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e030      	b.n	8000f5e <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d108      	bne.n	8000f28 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	b2d9      	uxtb	r1, r3
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	3303      	adds	r3, #3
 8000f22:	460a      	mov	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e014      	b.n	8000f52 <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	d108      	bne.n	8000f42 <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	3323      	adds	r3, #35	; 0x23
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	b2d9      	uxtb	r1, r3
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3343      	adds	r3, #67	; 0x43
 8000f4e:	460a      	mov	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dacb      	bge.n	8000efc <OBD2_PID_Decode+0x38>
	}
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000188 	.word	0x20000188

08000f78 <OBD2_PID_Parse>:
		}
	}
}

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2ba6      	cmp	r3, #166	; 0xa6
 8000f8e:	f200 83b2 	bhi.w	80016f6 <OBD2_PID_Parse+0x77e>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <OBD2_PID_Parse+0x20>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001235 	.word	0x08001235
 8000f9c:	080016f7 	.word	0x080016f7
 8000fa0:	080016f7 	.word	0x080016f7
 8000fa4:	080016f7 	.word	0x080016f7
 8000fa8:	08001243 	.word	0x08001243
 8000fac:	0800124b 	.word	0x0800124b
 8000fb0:	08001261 	.word	0x08001261
 8000fb4:	08001261 	.word	0x08001261
 8000fb8:	08001261 	.word	0x08001261
 8000fbc:	08001261 	.word	0x08001261
 8000fc0:	08001267 	.word	0x08001267
 8000fc4:	08001283 	.word	0x08001283
 8000fc8:	08001297 	.word	0x08001297
 8000fcc:	080012bd 	.word	0x080012bd
 8000fd0:	080012d1 	.word	0x080012d1
 8000fd4:	080012eb 	.word	0x080012eb
 8000fd8:	08001301 	.word	0x08001301
 8000fdc:	0800132b 	.word	0x0800132b
 8000fe0:	080016f7 	.word	0x080016f7
 8000fe4:	080016f7 	.word	0x080016f7
 8000fe8:	08001333 	.word	0x08001333
 8000fec:	08001333 	.word	0x08001333
 8000ff0:	08001333 	.word	0x08001333
 8000ff4:	08001333 	.word	0x08001333
 8000ff8:	08001333 	.word	0x08001333
 8000ffc:	08001333 	.word	0x08001333
 8001000:	08001333 	.word	0x08001333
 8001004:	08001333 	.word	0x08001333
 8001008:	080016f7 	.word	0x080016f7
 800100c:	080016f7 	.word	0x080016f7
 8001010:	080016f7 	.word	0x080016f7
 8001014:	08001351 	.word	0x08001351
 8001018:	0800136f 	.word	0x0800136f
 800101c:	08001351 	.word	0x08001351
 8001020:	0800137d 	.word	0x0800137d
 8001024:	080013ad 	.word	0x080013ad
 8001028:	080013d3 	.word	0x080013d3
 800102c:	080013d3 	.word	0x080013d3
 8001030:	080013d3 	.word	0x080013d3
 8001034:	080013d3 	.word	0x080013d3
 8001038:	080013d3 	.word	0x080013d3
 800103c:	080013d3 	.word	0x080013d3
 8001040:	080013d3 	.word	0x080013d3
 8001044:	080013d3 	.word	0x080013d3
 8001048:	080013db 	.word	0x080013db
 800104c:	080013e3 	.word	0x080013e3
 8001050:	080013e9 	.word	0x080013e9
 8001054:	080013e9 	.word	0x080013e9
 8001058:	080013f1 	.word	0x080013f1
 800105c:	08001405 	.word	0x08001405
 8001060:	08001423 	.word	0x08001423
 8001064:	08001449 	.word	0x08001449
 8001068:	0800145d 	.word	0x0800145d
 800106c:	0800145d 	.word	0x0800145d
 8001070:	0800145d 	.word	0x0800145d
 8001074:	0800145d 	.word	0x0800145d
 8001078:	0800145d 	.word	0x0800145d
 800107c:	0800145d 	.word	0x0800145d
 8001080:	0800145d 	.word	0x0800145d
 8001084:	0800145d 	.word	0x0800145d
 8001088:	08001465 	.word	0x08001465
 800108c:	08001465 	.word	0x08001465
 8001090:	08001465 	.word	0x08001465
 8001094:	08001465 	.word	0x08001465
 8001098:	08001491 	.word	0x08001491
 800109c:	080016f7 	.word	0x080016f7
 80010a0:	0800149f 	.word	0x0800149f
 80010a4:	080014c9 	.word	0x080014c9
 80010a8:	080014d1 	.word	0x080014d1
 80010ac:	080014d9 	.word	0x080014d9
 80010b0:	080014e1 	.word	0x080014e1
 80010b4:	080014f7 	.word	0x080014f7
 80010b8:	080014f7 	.word	0x080014f7
 80010bc:	080014f7 	.word	0x080014f7
 80010c0:	080014f7 	.word	0x080014f7
 80010c4:	080014f7 	.word	0x080014f7
 80010c8:	080014f7 	.word	0x080014f7
 80010cc:	080014ff 	.word	0x080014ff
 80010d0:	080014ff 	.word	0x080014ff
 80010d4:	0800151d 	.word	0x0800151d
 80010d8:	080016f7 	.word	0x080016f7
 80010dc:	080016f7 	.word	0x080016f7
 80010e0:	08001531 	.word	0x08001531
 80010e4:	0800154d 	.word	0x0800154d
 80010e8:	0800157f 	.word	0x0800157f
 80010ec:	080015a3 	.word	0x080015a3
 80010f0:	080015a3 	.word	0x080015a3
 80010f4:	080015a3 	.word	0x080015a3
 80010f8:	080015a3 	.word	0x080015a3
 80010fc:	080015a9 	.word	0x080015a9
 8001100:	080015c7 	.word	0x080015c7
 8001104:	080015c7 	.word	0x080015c7
 8001108:	080015cf 	.word	0x080015cf
 800110c:	080015e5 	.word	0x080015e5
 8001110:	080015eb 	.word	0x080015eb
 8001114:	080016f7 	.word	0x080016f7
 8001118:	080016f7 	.word	0x080016f7
 800111c:	0800161d 	.word	0x0800161d
 8001120:	0800161d 	.word	0x0800161d
 8001124:	08001633 	.word	0x08001633
 8001128:	08001651 	.word	0x08001651
 800112c:	080016f7 	.word	0x080016f7
 8001130:	08001667 	.word	0x08001667
 8001134:	0800166f 	.word	0x0800166f
 8001138:	0800166f 	.word	0x0800166f
 800113c:	080016f7 	.word	0x080016f7
 8001140:	080016f7 	.word	0x080016f7
 8001144:	080016f7 	.word	0x080016f7
 8001148:	080016f7 	.word	0x080016f7
 800114c:	080016f7 	.word	0x080016f7
 8001150:	080016f7 	.word	0x080016f7
 8001154:	080016f7 	.word	0x080016f7
 8001158:	080016f7 	.word	0x080016f7
 800115c:	080016f7 	.word	0x080016f7
 8001160:	080016f7 	.word	0x080016f7
 8001164:	080016f7 	.word	0x080016f7
 8001168:	080016f7 	.word	0x080016f7
 800116c:	080016f7 	.word	0x080016f7
 8001170:	080016f7 	.word	0x080016f7
 8001174:	080016f7 	.word	0x080016f7
 8001178:	080016f7 	.word	0x080016f7
 800117c:	080016f7 	.word	0x080016f7
 8001180:	080016f7 	.word	0x080016f7
 8001184:	080016f7 	.word	0x080016f7
 8001188:	08001685 	.word	0x08001685
 800118c:	080016f7 	.word	0x080016f7
 8001190:	080016f7 	.word	0x080016f7
 8001194:	080016f7 	.word	0x080016f7
 8001198:	080016f7 	.word	0x080016f7
 800119c:	080016f7 	.word	0x080016f7
 80011a0:	080016f7 	.word	0x080016f7
 80011a4:	080016f7 	.word	0x080016f7
 80011a8:	080016f7 	.word	0x080016f7
 80011ac:	080016f7 	.word	0x080016f7
 80011b0:	080016f7 	.word	0x080016f7
 80011b4:	080016f7 	.word	0x080016f7
 80011b8:	080016f7 	.word	0x080016f7
 80011bc:	080016f7 	.word	0x080016f7
 80011c0:	080016f7 	.word	0x080016f7
 80011c4:	080016f7 	.word	0x080016f7
 80011c8:	080016f7 	.word	0x080016f7
 80011cc:	080016f7 	.word	0x080016f7
 80011d0:	080016f7 	.word	0x080016f7
 80011d4:	080016f7 	.word	0x080016f7
 80011d8:	080016f7 	.word	0x080016f7
 80011dc:	080016f7 	.word	0x080016f7
 80011e0:	080016f7 	.word	0x080016f7
 80011e4:	080016f7 	.word	0x080016f7
 80011e8:	080016f7 	.word	0x080016f7
 80011ec:	080016f7 	.word	0x080016f7
 80011f0:	080016f7 	.word	0x080016f7
 80011f4:	080016f7 	.word	0x080016f7
 80011f8:	080016f7 	.word	0x080016f7
 80011fc:	080016f7 	.word	0x080016f7
 8001200:	080016f7 	.word	0x080016f7
 8001204:	080016f7 	.word	0x080016f7
 8001208:	080016f7 	.word	0x080016f7
 800120c:	080016f7 	.word	0x080016f7
 8001210:	080016f7 	.word	0x080016f7
 8001214:	080016f7 	.word	0x080016f7
 8001218:	080016f7 	.word	0x080016f7
 800121c:	080016f7 	.word	0x080016f7
 8001220:	080016f7 	.word	0x080016f7
 8001224:	080016f7 	.word	0x080016f7
 8001228:	080016f7 	.word	0x080016f7
 800122c:	080016f7 	.word	0x080016f7
 8001230:	080016b1 	.word	0x080016b1
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe45 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
		break;
 8001240:	e259      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
		break;
 8001248:	e255      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b28      	subs	r3, #40	; 0x28
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800125e:	e24a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001260:	4bb7      	ldr	r3, [pc, #732]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 8001262:	60fb      	str	r3, [r7, #12]
		break;
 8001264:	e247      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3303      	adds	r3, #3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001280:	e239      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3303      	adds	r3, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001294:	e22f      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3303      	adds	r3, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3204      	adds	r2, #4
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da00      	bge.n	80012ac <OBD2_PID_Parse+0x334>
 80012aa:	3303      	adds	r3, #3
 80012ac:	109b      	asrs	r3, r3, #2
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ba:	e21c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3303      	adds	r3, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ce:	e212      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b40      	subs	r3, #64	; 0x40
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012e8:	e205      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3303      	adds	r3, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b28      	subs	r3, #40	; 0x28
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012fe:	e1fa      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3303      	adds	r3, #3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	3204      	adds	r2, #4
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a8c      	ldr	r2, [pc, #560]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001312:	fb82 1203 	smull	r1, r2, r2, r3
 8001316:	1152      	asrs	r2, r2, #5
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001328:	e1e5      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
		break;
 8001330:	e1e1      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3303      	adds	r3, #3
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4a82      	ldr	r2, [pc, #520]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	b2db      	uxtb	r3, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800134e:	e1d2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	3204      	adds	r2, #4
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800136c:	e1c3      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fda8 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
		break;
 800137a:	e1bc      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	3204      	adds	r2, #4
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8c9 	bl	8000524 <__aeabi_i2d>
 8001392:	a369      	add	r3, pc, #420	; (adr r3, 8001538 <OBD2_PID_Parse+0x5c0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb3a 	bl	8000a1c <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	3204      	adds	r2, #4
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80013d0:	e191      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
		break;
 80013d8:	e18d      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
		break;
 80013e0:	e189      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 80013e4:	60fb      	str	r3, [r7, #12]
		break;
 80013e6:	e186      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
		break;
 80013ee:	e182      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3303      	adds	r3, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001402:	e178      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3303      	adds	r3, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	3204      	adds	r2, #4
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001420:	e169      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3303      	adds	r3, #3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3204      	adds	r2, #4
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <OBD2_PID_Parse+0x4c0>
 8001436:	3303      	adds	r3, #3
 8001438:	109b      	asrs	r3, r3, #2
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001446:	e156      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3303      	adds	r3, #3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001456:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800145a:	e14c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
		break;
 8001462:	e148      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3303      	adds	r3, #3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	3204      	adds	r2, #4
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001476:	fb82 1203 	smull	r1, r2, r2, r3
 800147a:	1152      	asrs	r2, r2, #5
 800147c:	17db      	asrs	r3, r3, #31
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	3b28      	subs	r3, #40	; 0x28
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800148e:	e132      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd17 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
		break;
 800149c:	e12b      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3204      	adds	r2, #4
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <OBD2_PID_Parse+0x5d0>)
 80014b0:	fb82 1203 	smull	r1, r2, r2, r3
 80014b4:	1192      	asrs	r2, r2, #6
 80014b6:	17db      	asrs	r3, r3, #31
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014c6:	e116      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
		break;
 80014ce:	e112      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
		break;
 80014d6:	e10e      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
		break;
 80014de:	e10a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3303      	adds	r3, #3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3b28      	subs	r3, #40	; 0x28
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014f4:	e0ff      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
		break;
 80014fc:	e0fb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3303      	adds	r3, #3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	3204      	adds	r2, #4
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800151a:	e0ec      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800152e:	e0e2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
		break;
 8001536:	e0de      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
 8001538:	10624dd3 	.word	0x10624dd3
 800153c:	3fb43958 	.word	0x3fb43958
 8001540:	c2c80000 	.word	0xc2c80000
 8001544:	51eb851f 	.word	0x51eb851f
 8001548:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3303      	adds	r3, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	3204      	adds	r2, #4
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffe1 	bl	8000524 <__aeabi_i2d>
 8001562:	a370      	add	r3, pc, #448	; (adr r3, 8001724 <OBD2_PID_Parse+0x7ac>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa52 	bl	8000a1c <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
		break;
 800157c:	e0bb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	3204      	adds	r2, #4
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001592:	3b7f      	subs	r3, #127	; 0x7f
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015a0:	e0a9      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <OBD2_PID_Parse+0x7a0>)
 80015a4:	60fb      	str	r3, [r7, #12]
		break;
 80015a6:	e0a6      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3303      	adds	r3, #3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	3204      	adds	r2, #4
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015c4:	e097      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
		break;
 80015cc:	e093      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3303      	adds	r3, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b28      	subs	r3, #40	; 0x28
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015e2:	e088      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <OBD2_PID_Parse+0x7a4>)
 80015e6:	60fb      	str	r3, [r7, #12]
		break;
 80015e8:	e085      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3204      	adds	r2, #4
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	a341      	add	r3, pc, #260	; (adr r3, 8001708 <OBD2_PID_Parse+0x790>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa03 	bl	8000a1c <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]
		break;
 800161a:	e06c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3303      	adds	r3, #3
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3b7d      	subs	r3, #125	; 0x7d
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001630:	e061      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	3204      	adds	r2, #4
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800164e:	e052      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b7d      	subs	r3, #125	; 0x7d
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001664:	e047      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
		break;
 800166c:	e043      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3303      	adds	r3, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3b28      	subs	r3, #40	; 0x28
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001682:	e038      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3303      	adds	r3, #3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	3204      	adds	r2, #4
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <OBD2_PID_Parse+0x7a8>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1152      	asrs	r2, r2, #5
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	3b28      	subs	r3, #40	; 0x28
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016ae:	e022      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3303      	adds	r3, #3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3305      	adds	r3, #5
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	3206      	adds	r2, #6
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff25 	bl	8000524 <__aeabi_i2d>
 80016da:	a30d      	add	r3, pc, #52	; (adr r3, 8001710 <OBD2_PID_Parse+0x798>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f996 	bl	8000a1c <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
		break;
 80016f4:	bf00      	nop
	}
	return value;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	ee07 3a90 	vmov	s15, r3
}
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fa99999 	.word	0x3fa99999
 8001710:	9999999a 	.word	0x9999999a
 8001714:	3fb99999 	.word	0x3fb99999
 8001718:	c2c80000 	.word	0xc2c80000
 800171c:	c3520000 	.word	0xc3520000
 8001720:	51eb851f 	.word	0x51eb851f
 8001724:	47ae147b 	.word	0x47ae147b
 8001728:	3f747ae1 	.word	0x3f747ae1

0800172c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	f107 0214 	add.w	r2, r7, #20
 800173c:	2100      	movs	r1, #0
 800173e:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001740:	f001 ff90 	bl	8003664 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc15 	bl	8000f78 <OBD2_PID_Parse>
 800174e:	eef0 7a40 	vmov.f32	s15, s0
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001754:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	HAL_IWDG_Refresh(&hiwdg);
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800175a:	f002 ffd5 	bl	8004708 <HAL_IWDG_Refresh>
}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000a4 	.word	0x200000a4
 800176c:	20000188 	.word	0x20000188
 8001770:	20000178 	.word	0x20000178

08001774 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <MX_ADC1_Init+0xbc>)
 80017a8:	4a29      	ldr	r2, [pc, #164]	; (8001850 <MX_ADC1_Init+0xc0>)
 80017aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <MX_ADC1_Init+0xbc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <MX_ADC1_Init+0xbc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_ADC1_Init+0xbc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_ADC1_Init+0xbc>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_ADC1_Init+0xbc>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_ADC1_Init+0xbc>)
 80017da:	2201      	movs	r2, #1
 80017dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_ADC1_Init+0xbc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0xbc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_ADC1_Init+0xbc>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_ADC1_Init+0xbc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_ADC1_Init+0xbc>)
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <MX_ADC1_Init+0xbc>)
 800180a:	f001 fa03 	bl	8002c14 <HAL_ADC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001814:	f000 fa2d 	bl	8001c72 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_ADC1_Init+0xc4>)
 800181a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181c:	2306      	movs	r3, #6
 800181e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001824:	237f      	movs	r3, #127	; 0x7f
 8001826:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001828:	2304      	movs	r3, #4
 800182a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_ADC1_Init+0xbc>)
 8001836:	f001 fb35 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001840:	f000 fa17 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000cc 	.word	0x200000cc
 8001850:	50040000 	.word	0x50040000
 8001854:	3ac04000 	.word	0x3ac04000

08001858 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0a0      	sub	sp, #128	; 0x80
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	225c      	movs	r2, #92	; 0x5c
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f006 f841 	bl	8007900 <memset>
  if(adcHandle->Instance==ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3a      	ldr	r2, [pc, #232]	; (800196c <HAL_ADC_MspInit+0x114>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d16d      	bne.n	8001964 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800188e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001892:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001894:	2303      	movs	r3, #3
 8001896:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018a0:	2307      	movs	r3, #7
 80018a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fdd0 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80018c2:	f000 f9d6 	bl	8001c72 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 80018f6:	2320      	movs	r3, #32
 80018f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018fa:	230b      	movs	r3, #11
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001906:	4619      	mov	r1, r3
 8001908:	481a      	ldr	r0, [pc, #104]	; (8001974 <HAL_ADC_MspInit+0x11c>)
 800190a:	f002 fd6b 	bl	80043e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_ADC_MspInit+0x124>)
 8001912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800193e:	2220      	movs	r2, #32
 8001940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800194a:	f002 fad5 	bl	8003ef8 <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001954:	f000 f98d 	bl	8001c72 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800195c:	64da      	str	r2, [r3, #76]	; 0x4c
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001964:	bf00      	nop
 8001966:	3780      	adds	r7, #128	; 0x80
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	50040000 	.word	0x50040000
 8001970:	40021000 	.word	0x40021000
 8001974:	48000800 	.word	0x48000800
 8001978:	20000130 	.word	0x20000130
 800197c:	40020008 	.word	0x40020008

08001980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_DMA_Init+0x48>)
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <MX_DMA_Init+0x48>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6493      	str	r3, [r2, #72]	; 0x48
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_DMA_Init+0x48>)
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	200b      	movs	r0, #11
 80019a4:	f002 fa71 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a8:	200b      	movs	r0, #11
 80019aa:	f002 fa8a 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	200f      	movs	r0, #15
 80019b4:	f002 fa69 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019b8:	200f      	movs	r0, #15
 80019ba:	f002 fa82 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	482d      	ldr	r0, [pc, #180]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a60:	f002 fe3a 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f002 fe33 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2104      	movs	r1, #4
 8001a76:	4828      	ldr	r0, [pc, #160]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001a78:	f002 fe2e 	bl	80046d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4820      	ldr	r0, [pc, #128]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a94:	f002 fca6 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 8001a98:	2350      	movs	r3, #80	; 0x50
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f002 fc99 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 8001ab2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f002 fc89 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001aea:	f002 fc7b 	bl	80043e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001aee:	2308      	movs	r3, #8
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001b02:	f002 fc6f 	bl	80043e4 <HAL_GPIO_Init>

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000c00 	.word	0x48000c00
 8001b1c:	48001c00 	.word	0x48001c00

08001b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	f2ad 6d14 	subw	sp, sp, #1556	; 0x614
 8001b26:	f44f 67c2 	mov.w	r7, #1552	; 0x610
 8001b2a:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2c:	f000 fe4e 	bl	80027cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b30:	f000 f83a 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f7ff ff4a 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b38:	f7ff ff22 	bl	8001980 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b3c:	f7ff fe28 	bl	8001790 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b40:	f000 fb0a 	bl	8002158 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b44:	f000 fb3c 	bl	80021c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b48:	f000 fb6e 	bl	8002228 <MX_USART3_UART_Init>
//  MX_IWDG_Init();
  MX_TIM6_Init();
 8001b4c:	f000 fa5c 	bl	8002008 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001b50:	f000 fa0a 	bl	8001f68 <MX_TIM2_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b54:	f000 f879 	bl	8001c4a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  module.initialized = module_init(module);
 8001b58:	4c12      	ldr	r4, [pc, #72]	; (8001ba4 <main+0x84>)
 8001b5a:	4668      	mov	r0, sp
 8001b5c:	f104 0310 	add.w	r3, r4, #16
 8001b60:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001b64:	4619      	mov	r1, r3
 8001b66:	f005 febd 	bl	80078e4 <memcpy>
 8001b6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b6e:	f000 fd43 	bl	80025f8 <module_init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <main+0x84>)
 8001b78:	f883 25dd 	strb.w	r2, [r3, #1501]	; 0x5dd
  module.rssi = check_signal(module);
 8001b7c:	4c09      	ldr	r4, [pc, #36]	; (8001ba4 <main+0x84>)
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f104 0310 	add.w	r3, r4, #16
 8001b84:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f005 feab 	bl	80078e4 <memcpy>
 8001b8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b92:	f000 fdb7 	bl	8002704 <check_signal>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <main+0x84>)
 8001b9c:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <main+0x80>
 8001ba2:	bf00      	nop
 8001ba4:	200001f8 	.word	0x200001f8

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b096      	sub	sp, #88	; 0x58
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2244      	movs	r2, #68	; 0x44
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fea2 	bl	8007900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bca:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bce:	f002 fdb9 	bl	8004744 <HAL_PWREx_ControlVoltageScaling>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001bd8:	f000 f84b 	bl	8001c72 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bdc:	2309      	movs	r3, #9
 8001bde:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bea:	2302      	movs	r3, #2
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fdf0 	bl	80047f0 <HAL_RCC_OscConfig>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c16:	f000 f82c 	bl	8001c72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2104      	movs	r1, #4
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f9f0 	bl	8005018 <HAL_RCC_ClockConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c3e:	f000 f818 	bl	8001c72 <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	3758      	adds	r7, #88	; 0x58
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	2010      	movs	r0, #16
 8001c54:	f002 f919 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c58:	2010      	movs	r0, #16
 8001c5a:	f002 f932 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2026      	movs	r0, #38	; 0x26
 8001c64:	f002 f911 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c68:	2026      	movs	r0, #38	; 0x26
 8001c6a:	f002 f92a 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c76:	b672      	cpsid	i
}
 8001c78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <Error_Handler+0x8>

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <NMI_Handler+0x4>

08001cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cce:	e7fe      	b.n	8001cce <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cda:	e7fe      	b.n	8001cda <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f000 fdb0 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Channel1_IRQHandler+0x10>)
 8001d1e:	f002 fa82 	bl	8004226 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000130 	.word	0x20000130

08001d2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Channel5_IRQHandler+0x10>)
 8001d32:	f002 fa78 	bl	8004226 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000a40 	.word	0x20000a40

08001d40 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <DMA1_Channel6_IRQHandler+0x10>)
 8001d46:	f002 fa6e 	bl	8004226 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000a88 	.word	0x20000a88

08001d54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <CAN1_RX0_IRQHandler+0x10>)
 8001d5a:	f001 fd95 	bl	8003888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200000a4 	.word	0x200000a4

08001d68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <CAN1_RX1_IRQHandler+0x10>)
 8001d6e:	f001 fd8b 	bl	8003888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200000a4 	.word	0x200000a4

08001d7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <USART1_IRQHandler+0x10>)
 8001d82:	f004 fbc5 	bl	8006510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200008b4 	.word	0x200008b4

08001d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <USART2_IRQHandler+0x10>)
 8001d96:	f004 fbbb 	bl	8006510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000938 	.word	0x20000938

08001da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM6_DAC_IRQHandler+0x10>)
 8001daa:	f003 ff3c 	bl	8005c26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000868 	.word	0x20000868

08001db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_kill>:

int _kill(int pid, int sig)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd2:	f005 fd5d 	bl	8007890 <__errno>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2216      	movs	r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
	return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_exit>:

void _exit (int status)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe7 	bl	8001dc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0x12>

08001dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
	}

return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
	}
	return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f005 fcc2 	bl	8007890 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20010000 	.word	0x20010000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	20000818 	.word	0x20000818
 8001f40:	20000ae8 	.word	0x20000ae8

08001f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <SystemInit+0x20>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <SystemInit+0x20>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_TIM2_Init+0x98>)
 8001f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <MX_TIM2_Init+0x98>)
 8001f90:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <MX_TIM2_Init+0x98>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <MX_TIM2_Init+0x98>)
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <MX_TIM2_Init+0x9c>)
 8001fa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <MX_TIM2_Init+0x98>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <MX_TIM2_Init+0x98>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fae:	4814      	ldr	r0, [pc, #80]	; (8002000 <MX_TIM2_Init+0x98>)
 8001fb0:	f003 fd5e 	bl	8005a70 <HAL_TIM_Base_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fba:	f7ff fe5a 	bl	8001c72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <MX_TIM2_Init+0x98>)
 8001fcc:	f003 ff4a 	bl	8005e64 <HAL_TIM_ConfigClockSource>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fd6:	f7ff fe4c 	bl	8001c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <MX_TIM2_Init+0x98>)
 8001fe8:	f004 f92c 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ff2:	f7ff fe3e 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000081c 	.word	0x2000081c
 8002004:	000f423f 	.word	0x000f423f

08002008 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_TIM6_Init+0x68>)
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <MX_TIM6_Init+0x6c>)
 800201c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_TIM6_Init+0x68>)
 8002020:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002024:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_TIM6_Init+0x68>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_TIM6_Init+0x68>)
 800202e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002032:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_TIM6_Init+0x68>)
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_TIM6_Init+0x68>)
 800203c:	f003 fd18 	bl	8005a70 <HAL_TIM_Base_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002046:	f7ff fe14 	bl	8001c72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <MX_TIM6_Init+0x68>)
 8002058:	f004 f8f4 	bl	8006244 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002062:	f7ff fe06 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000868 	.word	0x20000868
 8002074:	40001000 	.word	0x40001000

08002078 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d10c      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6593      	str	r3, [r2, #88]	; 0x58
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80020a2:	e018      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_TIM_Base_MspInit+0x6c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2036      	movs	r0, #54	; 0x36
 80020cc:	f001 fedd 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020d0:	2036      	movs	r0, #54	; 0x36
 80020d2:	f001 fef6 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40001000 	.word	0x40001000

080020e8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10e      	bne.n	8002118 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(obd_comm.msg_type == 0)
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020fc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 8002104:	bf00      	nop
 8002106:	e003      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
		{
			obd_comm.msg_type = 3;
 8002108:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800210a:	2203      	movs	r2, #3
 800210c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		}
		HAL_TIM_Base_Stop_IT(&htim6);
 8002110:	480f      	ldr	r0, [pc, #60]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002112:	f003 fd59 	bl	8005bc8 <HAL_TIM_Base_Stop_IT>
		{
			module.received = 2;
		}
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 8002116:	e012      	b.n	800213e <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d10d      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x56>
		if(module.received == 1)
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002124:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x48>
			__NOP();
 800212c:	bf00      	nop
 800212e:	e003      	b.n	8002138 <HAL_TIM_PeriodElapsedCallback+0x50>
			module.received = 2;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002132:	2202      	movs	r2, #2
 8002134:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
		HAL_TIM_Base_Stop_IT(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f003 fd45 	bl	8005bc8 <HAL_TIM_Base_Stop_IT>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40001000 	.word	0x40001000
 800214c:	20000188 	.word	0x20000188
 8002150:	20000868 	.word	0x20000868
 8002154:	200001f8 	.word	0x200001f8

08002158 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <MX_USART1_UART_Init+0x64>)
 8002160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002164:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 800217e:	220c      	movs	r2, #12
 8002180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 800218a:	2200      	movs	r2, #0
 800218c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002190:	2200      	movs	r2, #0
 8002192:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 8002196:	2201      	movs	r2, #1
 8002198:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 800219c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a2:	4805      	ldr	r0, [pc, #20]	; (80021b8 <MX_USART1_UART_Init+0x60>)
 80021a4:	f004 f8d2 	bl	800634c <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80021ae:	f7ff fd60 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200008b4 	.word	0x200008b4
 80021bc:	40013800 	.word	0x40013800

080021c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021c6:	4a17      	ldr	r2, [pc, #92]	; (8002224 <MX_USART2_UART_Init+0x64>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021ec:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021f0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART2_UART_Init+0x60>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART2_UART_Init+0x60>)
 8002200:	2208      	movs	r2, #8
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART2_UART_Init+0x60>)
 8002206:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800220a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <MX_USART2_UART_Init+0x60>)
 800220e:	f004 f89d 	bl	800634c <HAL_UART_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002218:	f7ff fd2b 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000938 	.word	0x20000938
 8002224:	40004400 	.word	0x40004400

08002228 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_USART3_UART_Init+0x58>)
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <MX_USART3_UART_Init+0x5c>)
 8002230:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002238:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_USART3_UART_Init+0x58>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_USART3_UART_Init+0x58>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_USART3_UART_Init+0x58>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225e:	4b08      	ldr	r3, [pc, #32]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_USART3_UART_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800226a:	4805      	ldr	r0, [pc, #20]	; (8002280 <MX_USART3_UART_Init+0x58>)
 800226c:	f004 f86e 	bl	800634c <HAL_UART_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002276:	f7ff fcfc 	bl	8001c72 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200009bc 	.word	0x200009bc
 8002284:	40004800 	.word	0x40004800

08002288 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b0a4      	sub	sp, #144	; 0x90
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a0:	f107 0320 	add.w	r3, r7, #32
 80022a4:	225c      	movs	r2, #92	; 0x5c
 80022a6:	2100      	movs	r1, #0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f005 fb29 	bl	8007900 <memset>
  if(uartHandle->Instance==USART1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a99      	ldr	r2, [pc, #612]	; (8002518 <HAL_UART_MspInit+0x290>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d16b      	bne.n	8002390 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c0:	f107 0320 	add.w	r3, r7, #32
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 f8c9 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d0:	f7ff fccf 	bl	8001c72 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d4:	4b91      	ldr	r3, [pc, #580]	; (800251c <HAL_UART_MspInit+0x294>)
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d8:	4a90      	ldr	r2, [pc, #576]	; (800251c <HAL_UART_MspInit+0x294>)
 80022da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022de:	6613      	str	r3, [r2, #96]	; 0x60
 80022e0:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_UART_MspInit+0x294>)
 80022e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ec:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_UART_MspInit+0x294>)
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f0:	4a8a      	ldr	r2, [pc, #552]	; (800251c <HAL_UART_MspInit+0x294>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022f8:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_UART_MspInit+0x294>)
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800231a:	2307      	movs	r3, #7
 800231c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002324:	4619      	mov	r1, r3
 8002326:	487e      	ldr	r0, [pc, #504]	; (8002520 <HAL_UART_MspInit+0x298>)
 8002328:	f002 f85c 	bl	80043e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800232c:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_UART_MspInit+0x29c>)
 800232e:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <HAL_UART_MspInit+0x2a0>)
 8002330:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002332:	4b7c      	ldr	r3, [pc, #496]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002334:	2202      	movs	r2, #2
 8002336:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <HAL_UART_MspInit+0x29c>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233e:	4b79      	ldr	r3, [pc, #484]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002344:	4b77      	ldr	r3, [pc, #476]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_UART_MspInit+0x29c>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002350:	4b74      	ldr	r3, [pc, #464]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002356:	4b73      	ldr	r3, [pc, #460]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800235c:	4b71      	ldr	r3, [pc, #452]	; (8002524 <HAL_UART_MspInit+0x29c>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002362:	4870      	ldr	r0, [pc, #448]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002364:	f001 fdc8 	bl	8003ef8 <HAL_DMA_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800236e:	f7ff fc80 	bl	8001c72 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a6b      	ldr	r2, [pc, #428]	; (8002524 <HAL_UART_MspInit+0x29c>)
 8002376:	671a      	str	r2, [r3, #112]	; 0x70
 8002378:	4a6a      	ldr	r2, [pc, #424]	; (8002524 <HAL_UART_MspInit+0x29c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2101      	movs	r1, #1
 8002382:	2025      	movs	r0, #37	; 0x25
 8002384:	f001 fd81 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002388:	2025      	movs	r0, #37	; 0x25
 800238a:	f001 fd9a 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800238e:	e0bf      	b.n	8002510 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_UART_MspInit+0x2a4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d17a      	bne.n	8002490 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800239a:	2302      	movs	r3, #2
 800239c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800239e:	2300      	movs	r3, #0
 80023a0:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	4618      	mov	r0, r3
 80023a8:	f003 f858 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80023b2:	f7ff fc5e 	bl	8001c72 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b6:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_UART_MspInit+0x294>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ba:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_UART_MspInit+0x294>)
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	6593      	str	r3, [r2, #88]	; 0x58
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_UART_MspInit+0x294>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_UART_MspInit+0x294>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_UART_MspInit+0x294>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023da:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_UART_MspInit+0x294>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 80023e6:	230b      	movs	r3, #11
 80023e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023fc:	2307      	movs	r3, #7
 80023fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002406:	4619      	mov	r1, r3
 8002408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800240c:	f001 ffea 	bl	80043e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 8002410:	2304      	movs	r3, #4
 8002412:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241a:	2301      	movs	r3, #1
 800241c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002426:	2307      	movs	r3, #7
 8002428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f001 ffd5 	bl	80043e4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 800243c:	4a3d      	ldr	r2, [pc, #244]	; (8002534 <HAL_UART_MspInit+0x2ac>)
 800243e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002440:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002442:	2202      	movs	r2, #2
 8002444:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002446:	4b3a      	ldr	r3, [pc, #232]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b37      	ldr	r3, [pc, #220]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245e:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 800246c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002472:	482f      	ldr	r0, [pc, #188]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002474:	f001 fd40 	bl	8003ef8 <HAL_DMA_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 800247e:	f7ff fbf8 	bl	8001c72 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a2a      	ldr	r2, [pc, #168]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 8002486:	671a      	str	r2, [r3, #112]	; 0x70
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_UART_MspInit+0x2a8>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800248e:	e03f      	b.n	8002510 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_UART_MspInit+0x2b0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d13a      	bne.n	8002510 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800249a:	2304      	movs	r3, #4
 800249c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800249e:	2300      	movs	r3, #0
 80024a0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a2:	f107 0320 	add.w	r3, r7, #32
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 ffd8 	bl	800545c <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80024b2:	f7ff fbde 	bl	8001c72 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_UART_MspInit+0x294>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_UART_MspInit+0x294>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6593      	str	r3, [r2, #88]	; 0x58
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_UART_MspInit+0x294>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_UART_MspInit+0x294>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <HAL_UART_MspInit+0x294>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_UART_MspInit+0x294>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 80024e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024fe:	2307      	movs	r3, #7
 8002500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002504:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002508:	4619      	mov	r1, r3
 800250a:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_UART_MspInit+0x2b4>)
 800250c:	f001 ff6a 	bl	80043e4 <HAL_GPIO_Init>
}
 8002510:	bf00      	nop
 8002512:	3790      	adds	r7, #144	; 0x90
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40013800 	.word	0x40013800
 800251c:	40021000 	.word	0x40021000
 8002520:	48000400 	.word	0x48000400
 8002524:	20000a40 	.word	0x20000a40
 8002528:	40020058 	.word	0x40020058
 800252c:	40004400 	.word	0x40004400
 8002530:	20000a88 	.word	0x20000a88
 8002534:	4002006c 	.word	0x4002006c
 8002538:	40004800 	.word	0x40004800
 800253c:	48000800 	.word	0x48000800

08002540 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_UART_RxCpltCallback+0x2c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d102      	bne.n	8002556 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 8002550:	f7fe fc62 	bl	8000e18 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 8002554:	e005      	b.n	8002562 <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a05      	ldr	r2, [pc, #20]	; (8002570 <HAL_UART_RxCpltCallback+0x30>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 800255e:	f000 f8c3 	bl	80026e8 <nb_rx_callback>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200008b4 	.word	0x200008b4
 8002570:	20000938 	.word	0x20000938

08002574 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 8002580:	f000 f8b2 	bl	80026e8 <nb_rx_callback>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	__NOP();
 8002594:	bf00      	nop
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025a8:	f7ff fccc 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	; (80025e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <LoopForever+0xe>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <LoopForever+0x16>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f005 f963 	bl	800789c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025d6:	f7ff faa3 	bl	8001b20 <main>

080025da <LoopForever>:

LoopForever:
    b LoopForever
 80025da:	e7fe      	b.n	80025da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025e8:	08008ee0 	.word	0x08008ee0
  ldr r2, =_sbss
 80025ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025f0:	20000ae4 	.word	0x20000ae4

080025f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC1_IRQHandler>
	...

080025f8 <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	BG77 struct
 */
uint8_t module_init(BG77 module)
{
 80025f8:	b084      	sub	sp, #16
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	f107 0c10 	add.w	ip, r7, #16
 8002604:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t repeat = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	71fb      	strb	r3, [r7, #7]
	power_on();
 800260c:	f000 f8ba 	bl	8002784 <power_on>
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB) != TRUE)
 8002610:	e007      	b.n	8002622 <module_init+0x2a>
	{
		if(repeat > MAX_REPEAT)
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b0a      	cmp	r3, #10
 8002616:	d901      	bls.n	800261c <module_init+0x24>
		{
			return FALSE;
 8002618:	2300      	movs	r3, #0
 800261a:	e014      	b.n	8002646 <module_init+0x4e>
		}
		repeat++;
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	3301      	adds	r3, #1
 8002620:	71fb      	strb	r3, [r7, #7]
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB) != TRUE)
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <module_init+0x5c>)
 8002624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002628:	490b      	ldr	r1, [pc, #44]	; (8002658 <module_init+0x60>)
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <module_init+0x64>)
 800262c:	f000 f81a 	bl	8002664 <send_command>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d1ed      	bne.n	8002612 <module_init+0x1a>
	}
	send_command("ATI\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB);
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <module_init+0x5c>)
 8002638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <module_init+0x60>)
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <module_init+0x68>)
 8002640:	f000 f810 	bl	8002664 <send_command>
	return TRUE;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002650:	b004      	add	sp, #16
 8002652:	4770      	bx	lr
 8002654:	20000938 	.word	0x20000938
 8002658:	08008b18 	.word	0x08008b18
 800265c:	08008b20 	.word	0x08008b20
 8002660:	08008b28 	.word	0x08008b28

08002664 <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval TRUE if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 8002674:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <send_command+0x7c>)
 8002676:	2200      	movs	r2, #0
 8002678:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
	clear_rx_buff();
 800267c:	f000 f896 	bl	80027ac <clear_rx_buff>
	uint8_t length = strlen(command);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7fd fda5 	bl	80001d0 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	75fb      	strb	r3, [r7, #23]
	HAL_UARTEx_ReceiveToIdle_DMA(interface, module.rx_buff, 200);
 800268a:	22c8      	movs	r2, #200	; 0xc8
 800268c:	4914      	ldr	r1, [pc, #80]	; (80026e0 <send_command+0x7c>)
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	f005 f8a3 	bl	80077da <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	b29a      	uxth	r2, r3
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	68f9      	ldr	r1, [r7, #12]
 800269c:	6838      	ldr	r0, [r7, #0]
 800269e:	f003 fea3 	bl	80063e8 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(NB_TIMER);
 80026a2:	4810      	ldr	r0, [pc, #64]	; (80026e4 <send_command+0x80>)
 80026a4:	f003 fa3c 	bl	8005b20 <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 80026a8:	e000      	b.n	80026ac <send_command+0x48>
	{
		__NOP();
 80026aa:	bf00      	nop
	while(module.received == 0)
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <send_command+0x7c>)
 80026ae:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f9      	beq.n	80026aa <send_command+0x46>
	}
	if(module.received == 1)
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <send_command+0x7c>)
 80026b8:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d10a      	bne.n	80026d6 <send_command+0x72>
	{
		if(strstr((char *)module.rx_buff, reply) != NULL)
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <send_command+0x7c>)
 80026c4:	f005 f924 	bl	8007910 <strstr>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <send_command+0x6e>
		{
			return TRUE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e002      	b.n	80026d8 <send_command+0x74>
		}
		else
		{
			return FALSE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <send_command+0x74>
		}
	}
	return FALSE;
 80026d6:	2300      	movs	r3, #0

}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200001f8 	.word	0x200001f8
 80026e4:	2000081c 	.word	0x2000081c

080026e8 <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
	module.received = 1;
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <nb_rx_callback+0x18>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	200001f8 	.word	0x200001f8

08002704 <check_signal>:
 *	@brief	Checks the RSSI for NB signal
 *	@param	module	BG77 struct
 *	@retval	rssi or FALSE if the the is no response
 */
uint8_t check_signal(BG77 module)
{
 8002704:	b084      	sub	sp, #16
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	f107 0c18 	add.w	ip, r7, #24
 8002710:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(send_command("AT+CSQ\r\n","OK\r\n",DEFAULT_TIMEOUT,NB))
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <check_signal+0x6c>)
 8002716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800271a:	4916      	ldr	r1, [pc, #88]	; (8002774 <check_signal+0x70>)
 800271c:	4816      	ldr	r0, [pc, #88]	; (8002778 <check_signal+0x74>)
 800271e:	f7ff ffa1 	bl	8002664 <send_command>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01a      	beq.n	800275e <check_signal+0x5a>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 8002728:	4914      	ldr	r1, [pc, #80]	; (800277c <check_signal+0x78>)
 800272a:	f107 0018 	add.w	r0, r7, #24
 800272e:	f005 f905 	bl	800793c <strtok>
 8002732:	60f8      	str	r0, [r7, #12]
		if(token)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d011      	beq.n	800275e <check_signal+0x5a>
		{
			token = strtok(NULL,",");
 800273a:	4911      	ldr	r1, [pc, #68]	; (8002780 <check_signal+0x7c>)
 800273c:	2000      	movs	r0, #0
 800273e:	f005 f8fd 	bl	800793c <strtok>
 8002742:	60f8      	str	r0, [r7, #12]
			if(token)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <check_signal+0x5a>
			{
				char *ptr;
				uint8_t rssi = strtol(token, &ptr, 10);
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	220a      	movs	r2, #10
 800274e:	4619      	mov	r1, r3
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f005 f9d1 	bl	8007af8 <strtol>
 8002756:	4603      	mov	r3, r0
 8002758:	72fb      	strb	r3, [r7, #11]
				return rssi;
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	e000      	b.n	8002760 <check_signal+0x5c>
			}
		}
	}
	return FALSE;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800276a:	b004      	add	sp, #16
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000938 	.word	0x20000938
 8002774:	08008b18 	.word	0x08008b18
 8002778:	08008b48 	.word	0x08008b48
 800277c:	08008b3c 	.word	0x08008b3c
 8002780:	08008b40 	.word	0x08008b40

08002784 <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	2120      	movs	r1, #32
 800278c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002790:	f001 ffa2 	bl	80046d8 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8002794:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002798:	f000 f88c 	bl	80028b4 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 800279c:	2200      	movs	r2, #0
 800279e:	2120      	movs	r1, #32
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f001 ff98 	bl	80046d8 <HAL_GPIO_WritePin>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <clear_rx_buff+0x1c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
	memset(module.rx_buff, 0, sizeof(module.rx_buff));
 80027b8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80027bc:	2100      	movs	r1, #0
 80027be:	4802      	ldr	r0, [pc, #8]	; (80027c8 <clear_rx_buff+0x1c>)
 80027c0:	f005 f89e 	bl	8007900 <memset>
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200001f8 	.word	0x200001f8

080027cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d6:	2003      	movs	r0, #3
 80027d8:	f001 fb4c 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027dc:	200f      	movs	r0, #15
 80027de:	f000 f80d 	bl	80027fc <HAL_InitTick>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	e001      	b.n	80027f2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027ee:	f7ff fa45 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_InitTick+0x6c>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <HAL_InitTick+0x70>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_InitTick+0x6c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800281e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fb59 	bl	8003ede <HAL_SYSTICK_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b0f      	cmp	r3, #15
 8002836:	d809      	bhi.n	800284c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002838:	2200      	movs	r2, #0
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f001 fb23 	bl	8003e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <HAL_InitTick+0x74>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e007      	b.n	800285c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e004      	b.n	800285c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	e001      	b.n	800285c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000008 	.word	0x20000008
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000008 	.word	0x20000008
 8002898:	20000ad0 	.word	0x20000ad0

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000ad0 	.word	0x20000ad0

080028b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff ffee 	bl	800289c <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d005      	beq.n	80028da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Delay+0x44>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028da:	bf00      	nop
 80028dc:	f7ff ffde 	bl	800289c <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d8f7      	bhi.n	80028dc <HAL_Delay+0x28>
  {
  }
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000008 	.word	0x20000008

080028fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	609a      	str	r2, [r3, #8]
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3360      	adds	r3, #96	; 0x60
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <LL_ADC_SetOffset+0x44>)
 8002986:	4013      	ands	r3, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	4313      	orrs	r3, r2
 8002994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800299c:	bf00      	nop
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	03fff000 	.word	0x03fff000

080029ac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	461a      	mov	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3360      	adds	r3, #96	; 0x60
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	431a      	orrs	r2, r3
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b087      	sub	sp, #28
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3330      	adds	r3, #48	; 0x30
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	4413      	add	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	211f      	movs	r1, #31
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	401a      	ands	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0e9b      	lsrs	r3, r3, #26
 8002a46:	f003 011f 	and.w	r1, r3, #31
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	431a      	orrs	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b087      	sub	sp, #28
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3314      	adds	r3, #20
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	0e5b      	lsrs	r3, r3, #25
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	4413      	add	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0d1b      	lsrs	r3, r3, #20
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2107      	movs	r1, #7
 8002a94:	fa01 f303 	lsl.w	r3, r1, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0d1b      	lsrs	r3, r3, #20
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f003 0318 	and.w	r3, r3, #24
 8002ade:	4908      	ldr	r1, [pc, #32]	; (8002b00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ae0:	40d9      	lsrs	r1, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	400b      	ands	r3, r1
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	0007ffff 	.word	0x0007ffff

08002b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6093      	str	r3, [r2, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b3c:	d101      	bne.n	8002b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e000      	b.n	8002b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <LL_ADC_IsEnabled+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_ADC_IsEnabled+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d101      	bne.n	8002bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d101      	bne.n	8002c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e12c      	b.n	8002e88 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7fe fe0b 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff67 	bl	8002b28 <LL_ADC_IsDeepPowerDownEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d004      	beq.n	8002c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff4d 	bl	8002b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ff82 	bl	8002b78 <LL_ADC_IsInternalRegulatorEnabled>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d115      	bne.n	8002ca6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff66 	bl	8002b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c84:	4b82      	ldr	r3, [pc, #520]	; (8002e90 <HAL_ADC_Init+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	4a82      	ldr	r2, [pc, #520]	; (8002e94 <HAL_ADC_Init+0x280>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c98:	e002      	b.n	8002ca0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f9      	bne.n	8002c9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff64 	bl	8002b78 <LL_ADC_IsInternalRegulatorEnabled>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff75 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002cdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80c5 	bne.w	8002e76 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 80c1 	bne.w	8002e76 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cfc:	f043 0202 	orr.w	r2, r3, #2
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff49 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d14:	4860      	ldr	r0, [pc, #384]	; (8002e98 <HAL_ADC_Init+0x284>)
 8002d16:	f7ff ff43 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4619      	mov	r1, r3
 8002d26:	485d      	ldr	r0, [pc, #372]	; (8002e9c <HAL_ADC_Init+0x288>)
 8002d28:	f7ff fde8 	bl	80028fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e5b      	ldrb	r3, [r3, #25]
 8002d30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d106      	bne.n	8002d68 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	045b      	lsls	r3, r3, #17
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <HAL_ADC_Init+0x28c>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6812      	ldr	r2, [r2, #0]
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	430b      	orrs	r3, r1
 8002d96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff12 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002da2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff1f 	bl	8002bec <LL_ADC_INJ_IsConversionOngoing>
 8002dae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d13d      	bne.n	8002e32 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13a      	bne.n	8002e32 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dc8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd8:	f023 0302 	bic.w	r3, r3, #2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	69b9      	ldr	r1, [r7, #24]
 8002de2:	430b      	orrs	r3, r1
 8002de4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d118      	bne.n	8002e22 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e12:	430a      	orrs	r2, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	611a      	str	r2, [r3, #16]
 8002e20:	e007      	b.n	8002e32 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d10c      	bne.n	8002e54 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f023 010f 	bic.w	r1, r3, #15
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
 8002e52:	e007      	b.n	8002e64 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 020f 	bic.w	r2, r2, #15
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f023 0303 	bic.w	r3, r3, #3
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
 8002e74:	e007      	b.n	8002e86 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f043 0210 	orr.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000000 	.word	0x20000000
 8002e94:	053e2d63 	.word	0x053e2d63
 8002e98:	50040000 	.word	0x50040000
 8002e9c:	50040300 	.word	0x50040300
 8002ea0:	fff0c007 	.word	0xfff0c007

08002ea4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b0b6      	sub	sp, #216	; 0xd8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x22>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e3b9      	b.n	800363a <HAL_ADC_ConfigChannel+0x796>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fe77 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 839e 	bne.w	800361c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d824      	bhi.n	8002f32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	3b02      	subs	r3, #2
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d81b      	bhi.n	8002f2a <HAL_ADC_ConfigChannel+0x86>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_ADC_ConfigChannel+0x54>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f09 	.word	0x08002f09
 8002efc:	08002f11 	.word	0x08002f11
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f21 	.word	0x08002f21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	605a      	str	r2, [r3, #4]
          break;
 8002f0e:	e011      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2212      	movs	r2, #18
 8002f14:	605a      	str	r2, [r3, #4]
          break;
 8002f16:	e00d      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2218      	movs	r2, #24
 8002f1c:	605a      	str	r2, [r3, #4]
          break;
 8002f1e:	e009      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f26:	605a      	str	r2, [r3, #4]
          break;
 8002f28:	e004      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	605a      	str	r2, [r3, #4]
          break;
 8002f30:	e000      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	461a      	mov	r2, r3
 8002f42:	f7ff fd64 	bl	8002a0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fe3b 	bl	8002bc6 <LL_ADC_REG_IsConversionOngoing>
 8002f50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fe47 	bl	8002bec <LL_ADC_INJ_IsConversionOngoing>
 8002f5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 81a6 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f040 81a1 	bne.w	80032b8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7ff fd6f 	bl	8002a66 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6919      	ldr	r1, [r3, #16]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fba:	f7ff fcd3 	bl	8002964 <LL_ADC_SetOffset>
 8002fbe:	e17b      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fcf0 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x148>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fce5 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	f003 021f 	and.w	r2, r3, #31
 8002fea:	e01e      	b.n	800302a <HAL_ADC_ConfigChannel+0x186>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fcda 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800300e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800301a:	2320      	movs	r3, #32
 800301c:	e004      	b.n	8003028 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800301e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003032:	2b00      	cmp	r3, #0
 8003034:	d105      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x19e>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0e9b      	lsrs	r3, r3, #26
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	e018      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d0>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800305e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003066:	2320      	movs	r3, #32
 8003068:	e004      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800306a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fca9 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fc8d 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x20e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fc82 	bl	80029ac <LL_ADC_GetOffsetChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	e01e      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x24c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fc77 	bl	80029ac <LL_ADC_GetOffsetChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e004      	b.n	80030ee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80030e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e8:	fab3 f383 	clz	r3, r3
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x264>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	0e9b      	lsrs	r3, r3, #26
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	e018      	b.n	800313a <HAL_ADC_ConfigChannel+0x296>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800311c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e004      	b.n	800313a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800313a:	429a      	cmp	r2, r3
 800313c:	d106      	bne.n	800314c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fc46 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2102      	movs	r1, #2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fc2a 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003158:	4603      	mov	r3, r0
 800315a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x2d4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2102      	movs	r1, #2
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fc1f 	bl	80029ac <LL_ADC_GetOffsetChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	0e9b      	lsrs	r3, r3, #26
 8003172:	f003 021f 	and.w	r2, r3, #31
 8003176:	e01e      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x312>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fc14 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800318e:	fa93 f3a3 	rbit	r3, r3
 8003192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800319a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800319e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e004      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80031aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x32a>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	0e9b      	lsrs	r3, r3, #26
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	e016      	b.n	80031fc <HAL_ADC_ConfigChannel+0x358>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80031ee:	2320      	movs	r3, #32
 80031f0:	e004      	b.n	80031fc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80031f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d106      	bne.n	800320e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	2102      	movs	r1, #2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fbe5 	bl	80029d8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2103      	movs	r1, #3
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fbc9 	bl	80029ac <LL_ADC_GetOffsetChannel>
 800321a:	4603      	mov	r3, r0
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <HAL_ADC_ConfigChannel+0x396>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2103      	movs	r1, #3
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fbbe 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003230:	4603      	mov	r3, r0
 8003232:	0e9b      	lsrs	r3, r3, #26
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	e017      	b.n	800326a <HAL_ADC_ConfigChannel+0x3c6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2103      	movs	r1, #3
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fbb3 	bl	80029ac <LL_ADC_GetOffsetChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003254:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e003      	b.n	8003268 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x3de>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	0e9b      	lsrs	r3, r3, #26
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	e011      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x402>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003292:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e003      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800329e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a0:	fab3 f383 	clz	r3, r3
 80032a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d106      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2103      	movs	r1, #3
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fb90 	bl	80029d8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fc6f 	bl	8002ba0 <LL_ADC_IsEnabled>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 813f 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f7ff fbf0 	bl	8002abc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a8e      	ldr	r2, [pc, #568]	; (800351c <HAL_ADC_ConfigChannel+0x678>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f040 8130 	bne.w	8003548 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x46c>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e9b      	lsrs	r3, r3, #26
 80032fe:	3301      	adds	r3, #1
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	2b09      	cmp	r3, #9
 8003306:	bf94      	ite	ls
 8003308:	2301      	movls	r3, #1
 800330a:	2300      	movhi	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	e019      	b.n	8003344 <HAL_ADC_ConfigChannel+0x4a0>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800331e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003320:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003328:	2320      	movs	r3, #32
 800332a:	e003      	b.n	8003334 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800332c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	3301      	adds	r3, #1
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	2b09      	cmp	r3, #9
 800333c:	bf94      	ite	ls
 800333e:	2301      	movls	r3, #1
 8003340:	2300      	movhi	r3, #0
 8003342:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003344:	2b00      	cmp	r3, #0
 8003346:	d079      	beq.n	800343c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x4c0>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	0e9b      	lsrs	r3, r3, #26
 800335a:	3301      	adds	r3, #1
 800335c:	069b      	lsls	r3, r3, #26
 800335e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003362:	e015      	b.n	8003390 <HAL_ADC_ConfigChannel+0x4ec>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x50c>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	3301      	adds	r3, #1
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	e017      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x53c>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e003      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2101      	movs	r1, #1
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	ea42 0103 	orr.w	r1, r2, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10a      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x562>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	051b      	lsls	r3, r3, #20
 8003404:	e018      	b.n	8003438 <HAL_ADC_ConfigChannel+0x594>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e003      	b.n	800342a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	430b      	orrs	r3, r1
 800343a:	e080      	b.n	800353e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x5b4>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	069b      	lsls	r3, r3, #26
 8003452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003456:	e015      	b.n	8003484 <HAL_ADC_ConfigChannel+0x5e0>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	069b      	lsls	r3, r3, #26
 8003480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x600>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	e017      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x630>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	61fb      	str	r3, [r7, #28]
  return result;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x65c>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4613      	mov	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4413      	add	r3, r2
 80034f6:	3b1e      	subs	r3, #30
 80034f8:	051b      	lsls	r3, r3, #20
 80034fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034fe:	e01d      	b.n	800353c <HAL_ADC_ConfigChannel+0x698>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	613b      	str	r3, [r7, #16]
  return result;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e005      	b.n	8003528 <HAL_ADC_ConfigChannel+0x684>
 800351c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	051b      	lsls	r3, r3, #20
 8003538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800353c:	430b      	orrs	r3, r1
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	6892      	ldr	r2, [r2, #8]
 8003542:	4619      	mov	r1, r3
 8003544:	f7ff fa8f 	bl	8002a66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_ADC_ConfigChannel+0x7a0>)
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d06c      	beq.n	800362e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003554:	483c      	ldr	r0, [pc, #240]	; (8003648 <HAL_ADC_ConfigChannel+0x7a4>)
 8003556:	f7ff f9f7 	bl	8002948 <LL_ADC_GetCommonPathInternalCh>
 800355a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <HAL_ADC_ConfigChannel+0x7a8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d127      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800356c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d121      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <HAL_ADC_ConfigChannel+0x7ac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d157      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003586:	4619      	mov	r1, r3
 8003588:	482f      	ldr	r0, [pc, #188]	; (8003648 <HAL_ADC_ConfigChannel+0x7a4>)
 800358a:	f7ff f9ca 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_ADC_ConfigChannel+0x7b0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <HAL_ADC_ConfigChannel+0x7b4>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f9      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b6:	e03a      	b.n	800362e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <HAL_ADC_ConfigChannel+0x7b8>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d113      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x746>
 80035c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_ADC_ConfigChannel+0x7ac>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d12a      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e0:	4619      	mov	r1, r3
 80035e2:	4819      	ldr	r0, [pc, #100]	; (8003648 <HAL_ADC_ConfigChannel+0x7a4>)
 80035e4:	f7ff f99d 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035e8:	e021      	b.n	800362e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_ADC_ConfigChannel+0x7bc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d11c      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d116      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a12      	ldr	r2, [pc, #72]	; (8003650 <HAL_ADC_ConfigChannel+0x7ac>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d111      	bne.n	800362e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800360e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <HAL_ADC_ConfigChannel+0x7a4>)
 8003616:	f7ff f984 	bl	8002922 <LL_ADC_SetCommonPathInternalCh>
 800361a:	e008      	b.n	800362e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003636:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800363a:	4618      	mov	r0, r3
 800363c:	37d8      	adds	r7, #216	; 0xd8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	80080000 	.word	0x80080000
 8003648:	50040300 	.word	0x50040300
 800364c:	c7520000 	.word	0xc7520000
 8003650:	50040000 	.word	0x50040000
 8003654:	20000000 	.word	0x20000000
 8003658:	053e2d63 	.word	0x053e2d63
 800365c:	cb840000 	.word	0xcb840000
 8003660:	80000001 	.word	0x80000001

08003664 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d003      	beq.n	8003688 <HAL_CAN_GetRxMessage+0x24>
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b02      	cmp	r3, #2
 8003684:	f040 80f3 	bne.w	800386e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d116      	bne.n	80036ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0e7      	b.n	800387c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0d8      	b.n	800387c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	331b      	adds	r3, #27
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	4413      	add	r3, r2
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0204 	and.w	r2, r3, #4
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	331b      	adds	r3, #27
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4413      	add	r3, r2
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0d5b      	lsrs	r3, r3, #21
 80036f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e00b      	b.n	800371a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	331b      	adds	r3, #27
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4413      	add	r3, r2
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	331b      	adds	r3, #27
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0202 	and.w	r2, r3, #2
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	331b      	adds	r3, #27
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	331b      	adds	r3, #27
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	4413      	add	r3, r2
 8003754:	3304      	adds	r3, #4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	b2da      	uxtb	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	331b      	adds	r3, #27
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	4413      	add	r3, r2
 8003782:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	4413      	add	r3, r2
 8003798:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0a1a      	lsrs	r2, r3, #8
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	3301      	adds	r3, #1
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0c1a      	lsrs	r2, r3, #16
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	3302      	adds	r3, #2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	0e1a      	lsrs	r2, r3, #24
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	3303      	adds	r3, #3
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	3304      	adds	r3, #4
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0a1a      	lsrs	r2, r3, #8
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	3305      	adds	r3, #5
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	4413      	add	r3, r2
 8003818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	0c1a      	lsrs	r2, r3, #16
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	3306      	adds	r3, #6
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4413      	add	r3, r2
 8003832:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e1a      	lsrs	r2, r3, #24
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3307      	adds	r3, #7
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d108      	bne.n	800385a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	60da      	str	r2, [r3, #12]
 8003858:	e007      	b.n	800386a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e006      	b.n	800387c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07c      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2201      	movs	r2, #1
 80038de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f983 	bl	8003bf6 <HAL_CAN_TxMailbox0CompleteCallback>
 80038f0:	e016      	b.n	8003920 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d004      	beq.n	8003906 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	e00c      	b.n	8003920 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d004      	beq.n	800391a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	e002      	b.n	8003920 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f989 	bl	8003c32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d024      	beq.n	8003974 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003932:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f963 	bl	8003c0a <HAL_CAN_TxMailbox1CompleteCallback>
 8003944:	e016      	b.n	8003974 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e00c      	b.n	8003974 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
 800396c:	e002      	b.n	8003974 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f969 	bl	8003c46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d024      	beq.n	80039c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003986:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f943 	bl	8003c1e <HAL_CAN_TxMailbox2CompleteCallback>
 8003998:	e016      	b.n	80039c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	e00c      	b.n	80039c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	e002      	b.n	80039c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f949 	bl	8003c5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2210      	movs	r2, #16
 80039ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f930 	bl	8003c6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d002      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd fe80 	bl	800172c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00b      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f912 	bl	8003c96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8f9 	bl	8003c82 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8fc 	bl	8003caa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00b      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2208      	movs	r2, #8
 8003acc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8f5 	bl	8003cbe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d07b      	beq.n	8003bd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d072      	beq.n	8003bce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d043      	beq.n	8003bce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03e      	beq.n	8003bce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b56:	2b60      	cmp	r3, #96	; 0x60
 8003b58:	d02b      	beq.n	8003bb2 <HAL_CAN_IRQHandler+0x32a>
 8003b5a:	2b60      	cmp	r3, #96	; 0x60
 8003b5c:	d82e      	bhi.n	8003bbc <HAL_CAN_IRQHandler+0x334>
 8003b5e:	2b50      	cmp	r3, #80	; 0x50
 8003b60:	d022      	beq.n	8003ba8 <HAL_CAN_IRQHandler+0x320>
 8003b62:	2b50      	cmp	r3, #80	; 0x50
 8003b64:	d82a      	bhi.n	8003bbc <HAL_CAN_IRQHandler+0x334>
 8003b66:	2b40      	cmp	r3, #64	; 0x40
 8003b68:	d019      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x316>
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d826      	bhi.n	8003bbc <HAL_CAN_IRQHandler+0x334>
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	d010      	beq.n	8003b94 <HAL_CAN_IRQHandler+0x30c>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d822      	bhi.n	8003bbc <HAL_CAN_IRQHandler+0x334>
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d002      	beq.n	8003b80 <HAL_CAN_IRQHandler+0x2f8>
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d005      	beq.n	8003b8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b7e:	e01d      	b.n	8003bbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	f043 0308 	orr.w	r3, r3, #8
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b88:	e019      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f043 0310 	orr.w	r3, r3, #16
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b92:	e014      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b9c:	e00f      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba6:	e00a      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bb0:	e005      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bba:	e000      	b.n	8003bbe <HAL_CAN_IRQHandler+0x336>
            break;
 8003bbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fdc3 	bl	8001774 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr

08003c1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b083      	sub	sp, #12
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db0a      	blt.n	8003d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <__NVIC_SetPriority+0x4c>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d9c:	e00a      	b.n	8003db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <__NVIC_SetPriority+0x50>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3b04      	subs	r3, #4
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	440b      	add	r3, r1
 8003db2:	761a      	strb	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000e100 	.word	0xe000e100
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f1c3 0307 	rsb	r3, r3, #7
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	bf28      	it	cs
 8003de6:	2304      	movcs	r3, #4
 8003de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d902      	bls.n	8003df8 <NVIC_EncodePriority+0x30>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3b03      	subs	r3, #3
 8003df6:	e000      	b.n	8003dfa <NVIC_EncodePriority+0x32>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	4313      	orrs	r3, r2
         );
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e40:	d301      	bcc.n	8003e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <SysTick_Config+0x40>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4e:	210f      	movs	r1, #15
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f7ff ff8e 	bl	8003d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SysTick_Config+0x40>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <SysTick_Config+0x40>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010

08003e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff29 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff3e 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff8e 	bl	8003dc8 <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5d 	bl	8003d74 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff31 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa2 	bl	8003e30 <SysTick_Config>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e098      	b.n	800403c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b4d      	ldr	r3, [pc, #308]	; (8004048 <HAL_DMA_Init+0x150>)
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d80f      	bhi.n	8003f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <HAL_DMA_Init+0x154>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a4b      	ldr	r2, [pc, #300]	; (8004050 <HAL_DMA_Init+0x158>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	009a      	lsls	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a48      	ldr	r2, [pc, #288]	; (8004054 <HAL_DMA_Init+0x15c>)
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
 8003f34:	e00e      	b.n	8003f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <HAL_DMA_Init+0x160>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a43      	ldr	r2, [pc, #268]	; (8004050 <HAL_DMA_Init+0x158>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	091b      	lsrs	r3, r3, #4
 8003f48:	009a      	lsls	r2, r3, #2
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a42      	ldr	r2, [pc, #264]	; (800405c <HAL_DMA_Init+0x164>)
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fae:	d039      	beq.n	8004024 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	4a27      	ldr	r2, [pc, #156]	; (8004054 <HAL_DMA_Init+0x15c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d11a      	bne.n	8003ff0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_DMA_Init+0x168>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 031c 	and.w	r3, r3, #28
 8003fc6:	210f      	movs	r1, #15
 8003fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4924      	ldr	r1, [pc, #144]	; (8004060 <HAL_DMA_Init+0x168>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <HAL_DMA_Init+0x168>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	f003 031c 	and.w	r3, r3, #28
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	491d      	ldr	r1, [pc, #116]	; (8004060 <HAL_DMA_Init+0x168>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
 8003fee:	e019      	b.n	8004024 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ff0:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <HAL_DMA_Init+0x16c>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	f003 031c 	and.w	r3, r3, #28
 8003ffc:	210f      	movs	r1, #15
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	4917      	ldr	r1, [pc, #92]	; (8004064 <HAL_DMA_Init+0x16c>)
 8004006:	4013      	ands	r3, r2
 8004008:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <HAL_DMA_Init+0x16c>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6859      	ldr	r1, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	f003 031c 	and.w	r3, r3, #28
 800401a:	fa01 f303 	lsl.w	r3, r1, r3
 800401e:	4911      	ldr	r1, [pc, #68]	; (8004064 <HAL_DMA_Init+0x16c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40020407 	.word	0x40020407
 800404c:	bffdfff8 	.word	0xbffdfff8
 8004050:	cccccccd 	.word	0xcccccccd
 8004054:	40020000 	.word	0x40020000
 8004058:	bffdfbf8 	.word	0xbffdfbf8
 800405c:	40020400 	.word	0x40020400
 8004060:	400200a8 	.word	0x400200a8
 8004064:	400204a8 	.word	0x400204a8

08004068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_DMA_Start_IT+0x20>
 8004084:	2302      	movs	r3, #2
 8004086:	e04b      	b.n	8004120 <HAL_DMA_Start_IT+0xb8>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b01      	cmp	r3, #1
 800409a:	d13a      	bne.n	8004112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f95f 	bl	8004384 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d008      	beq.n	80040e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 020e 	orr.w	r2, r2, #14
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e00f      	b.n	8004100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0204 	bic.w	r2, r2, #4
 80040ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 020a 	orr.w	r2, r2, #10
 80040fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e005      	b.n	800411e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800411a:	2302      	movs	r3, #2
 800411c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d008      	beq.n	8004152 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2204      	movs	r2, #4
 8004144:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e022      	b.n	8004198 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 020e 	bic.w	r2, r2, #14
 8004160:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	f003 021c 	and.w	r2, r3, #28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d005      	beq.n	80041c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2204      	movs	r2, #4
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e029      	b.n	800421c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 020e 	bic.w	r2, r2, #14
 80041d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f003 021c 	and.w	r2, r3, #28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
    }
  }
  return status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f003 031c 	and.w	r3, r3, #28
 8004246:	2204      	movs	r2, #4
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d026      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x7a>
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d021      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0204 	bic.w	r2, r2, #4
 8004278:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f003 021c 	and.w	r2, r3, #28
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2104      	movs	r1, #4
 8004288:	fa01 f202 	lsl.w	r2, r1, r2
 800428c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	2b00      	cmp	r3, #0
 8004294:	d071      	beq.n	800437a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800429e:	e06c      	b.n	800437a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a4:	f003 031c 	and.w	r3, r3, #28
 80042a8:	2202      	movs	r2, #2
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4013      	ands	r3, r2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02e      	beq.n	8004312 <HAL_DMA_IRQHandler+0xec>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d029      	beq.n	8004312 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020a 	bic.w	r2, r2, #10
 80042da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e8:	f003 021c 	and.w	r2, r3, #28
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2102      	movs	r1, #2
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d038      	beq.n	800437a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004310:	e033      	b.n	800437a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f003 031c 	and.w	r3, r3, #28
 800431a:	2208      	movs	r2, #8
 800431c:	409a      	lsls	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02a      	beq.n	800437c <HAL_DMA_IRQHandler+0x156>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b00      	cmp	r3, #0
 800432e:	d025      	beq.n	800437c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 020e 	bic.w	r2, r2, #14
 800433e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800437a:	bf00      	nop
 800437c:	bf00      	nop
}
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f003 021c 	and.w	r2, r3, #28
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2101      	movs	r1, #1
 80043a0:	fa01 f202 	lsl.w	r2, r1, r2
 80043a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b10      	cmp	r3, #16
 80043b4:	d108      	bne.n	80043c8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043c6:	e007      	b.n	80043d8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f2:	e154      	b.n	800469e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8146 	beq.w	8004698 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d005      	beq.n	8004424 <HAL_GPIO_Init+0x40>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d130      	bne.n	8004486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4013      	ands	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445a:	2201      	movs	r2, #1
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0201 	and.w	r2, r3, #1
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	4313      	orrs	r3, r2
 800447e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b03      	cmp	r3, #3
 8004490:	d017      	beq.n	80044c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	fa02 f303 	lsl.w	r3, r2, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d123      	bne.n	8004516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	08da      	lsrs	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3208      	adds	r2, #8
 80044d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3208      	adds	r2, #8
 8004510:	6939      	ldr	r1, [r7, #16]
 8004512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f003 0203 	and.w	r2, r3, #3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a0 	beq.w	8004698 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004558:	4b58      	ldr	r3, [pc, #352]	; (80046bc <HAL_GPIO_Init+0x2d8>)
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	4a57      	ldr	r2, [pc, #348]	; (80046bc <HAL_GPIO_Init+0x2d8>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6613      	str	r3, [r2, #96]	; 0x60
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <HAL_GPIO_Init+0x2d8>)
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004570:	4a53      	ldr	r2, [pc, #332]	; (80046c0 <HAL_GPIO_Init+0x2dc>)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	089b      	lsrs	r3, r3, #2
 8004576:	3302      	adds	r3, #2
 8004578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	220f      	movs	r2, #15
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800459a:	d019      	beq.n	80045d0 <HAL_GPIO_Init+0x1ec>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a49      	ldr	r2, [pc, #292]	; (80046c4 <HAL_GPIO_Init+0x2e0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_GPIO_Init+0x1e8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a48      	ldr	r2, [pc, #288]	; (80046c8 <HAL_GPIO_Init+0x2e4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d00d      	beq.n	80045c8 <HAL_GPIO_Init+0x1e4>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a47      	ldr	r2, [pc, #284]	; (80046cc <HAL_GPIO_Init+0x2e8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <HAL_GPIO_Init+0x1e0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a46      	ldr	r2, [pc, #280]	; (80046d0 <HAL_GPIO_Init+0x2ec>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <HAL_GPIO_Init+0x1dc>
 80045bc:	2304      	movs	r3, #4
 80045be:	e008      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045c0:	2307      	movs	r3, #7
 80045c2:	e006      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045c4:	2303      	movs	r3, #3
 80045c6:	e004      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e002      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_GPIO_Init+0x1ee>
 80045d0:	2300      	movs	r3, #0
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	f002 0203 	and.w	r2, r2, #3
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	4093      	lsls	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045e2:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_GPIO_Init+0x2dc>)
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	3302      	adds	r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f0:	4b38      	ldr	r3, [pc, #224]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004614:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800461a:	4b2e      	ldr	r3, [pc, #184]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463e:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004668:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800466e:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <HAL_GPIO_Init+0x2f0>)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	3301      	adds	r3, #1
 800469c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f aea3 	bne.w	80043f4 <HAL_GPIO_Init+0x10>
  }
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40010000 	.word	0x40010000
 80046c4:	48000400 	.word	0x48000400
 80046c8:	48000800 	.word	0x48000800
 80046cc:	48000c00 	.word	0x48000c00
 80046d0:	48001000 	.word	0x48001000
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	807b      	strh	r3, [r7, #2]
 80046e4:	4613      	mov	r3, r2
 80046e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e8:	787b      	ldrb	r3, [r7, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f4:	e002      	b.n	80046fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046f6:	887a      	ldrh	r2, [r7, #2]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004718:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_PWREx_GetVoltageRange+0x18>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40007000 	.word	0x40007000

08004744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004752:	d130      	bne.n	80047b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d038      	beq.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004772:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2232      	movs	r2, #50	; 0x32
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0c9b      	lsrs	r3, r3, #18
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004788:	e002      	b.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b01      	subs	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479c:	d102      	bne.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f2      	bne.n	800478a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a4:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d110      	bne.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e00f      	b.n	80047d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c2:	d007      	beq.n	80047d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047cc:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40007000 	.word	0x40007000
 80047e8:	20000000 	.word	0x20000000
 80047ec:	431bde83 	.word	0x431bde83

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f000 bc02 	b.w	8005008 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004804:	4b96      	ldr	r3, [pc, #600]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800480e:	4b94      	ldr	r3, [pc, #592]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80e4 	beq.w	80049ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_RCC_OscConfig+0x4c>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b0c      	cmp	r3, #12
 8004830:	f040 808b 	bne.w	800494a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b01      	cmp	r3, #1
 8004838:	f040 8087 	bne.w	800494a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800483c:	4b88      	ldr	r3, [pc, #544]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_RCC_OscConfig+0x64>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e3d9      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1a      	ldr	r2, [r3, #32]
 8004858:	4b81      	ldr	r3, [pc, #516]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_RCC_OscConfig+0x7e>
 8004864:	4b7e      	ldr	r3, [pc, #504]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486c:	e005      	b.n	800487a <HAL_RCC_OscConfig+0x8a>
 800486e:	4b7c      	ldr	r3, [pc, #496]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487a:	4293      	cmp	r3, r2
 800487c:	d223      	bcs.n	80048c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fd8a 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e3ba      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004892:	4b73      	ldr	r3, [pc, #460]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a72      	ldr	r2, [pc, #456]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004898:	f043 0308 	orr.w	r3, r3, #8
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b70      	ldr	r3, [pc, #448]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	496d      	ldr	r1, [pc, #436]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b0:	4b6b      	ldr	r3, [pc, #428]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	4968      	ldr	r1, [pc, #416]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]
 80048c4:	e025      	b.n	8004912 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c6:	4b66      	ldr	r3, [pc, #408]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a65      	ldr	r2, [pc, #404]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048cc:	f043 0308 	orr.w	r3, r3, #8
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b63      	ldr	r3, [pc, #396]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	4960      	ldr	r1, [pc, #384]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e4:	4b5e      	ldr	r3, [pc, #376]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	69db      	ldr	r3, [r3, #28]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	495b      	ldr	r1, [pc, #364]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fd4a 	bl	800539c <RCC_SetFlashLatencyFromMSIRange>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e37a      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004912:	f000 fc81 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b51      	ldr	r3, [pc, #324]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	4950      	ldr	r1, [pc, #320]	; (8004a64 <HAL_RCC_OscConfig+0x274>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a4e      	ldr	r2, [pc, #312]	; (8004a68 <HAL_RCC_OscConfig+0x278>)
 8004930:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004932:	4b4e      	ldr	r3, [pc, #312]	; (8004a6c <HAL_RCC_OscConfig+0x27c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fd ff60 	bl	80027fc <HAL_InitTick>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d052      	beq.n	80049ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	e35e      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d032      	beq.n	80049b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a42      	ldr	r2, [pc, #264]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800495e:	f7fd ff9d 	bl	800289c <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004966:	f7fd ff99 	bl	800289c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e347      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004978:	4b39      	ldr	r3, [pc, #228]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004984:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a35      	ldr	r2, [pc, #212]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800498a:	f043 0308 	orr.w	r3, r3, #8
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	4b33      	ldr	r3, [pc, #204]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4930      	ldr	r1, [pc, #192]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	492b      	ldr	r1, [pc, #172]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
 80049b6:	e01a      	b.n	80049ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049b8:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c4:	f7fd ff6a 	bl	800289c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049cc:	f7fd ff66 	bl	800289c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e314      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049de:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1dc>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d073      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_OscConfig+0x21c>
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b0c      	cmp	r3, #12
 8004a04:	d10e      	bne.n	8004a24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d063      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x2f0>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d15f      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e2f1      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x24c>
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e025      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a44:	d114      	bne.n	8004a70 <HAL_RCC_OscConfig+0x280>
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a02      	ldr	r2, [pc, #8]	; (8004a60 <HAL_RCC_OscConfig+0x270>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e013      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
 8004a60:	40021000 	.word	0x40021000
 8004a64:	08008c40 	.word	0x08008c40
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	20000004 	.word	0x20000004
 8004a70:	4ba0      	ldr	r3, [pc, #640]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a9f      	ldr	r2, [pc, #636]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b9d      	ldr	r3, [pc, #628]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a9c      	ldr	r2, [pc, #624]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d013      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fd ff04 	bl	800289c <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fd ff00 	bl	800289c <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e2ae      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aaa:	4b92      	ldr	r3, [pc, #584]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x2a8>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd fef0 	bl	800289c <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac0:	f7fd feec 	bl	800289c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e29a      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad2:	4b88      	ldr	r3, [pc, #544]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x2d0>
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d060      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x310>
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d119      	bne.n	8004b2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d116      	bne.n	8004b2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b00:	4b7c      	ldr	r3, [pc, #496]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d005      	beq.n	8004b18 <HAL_RCC_OscConfig+0x328>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d101      	bne.n	8004b18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e277      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b18:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	4973      	ldr	r1, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2c:	e040      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d023      	beq.n	8004b7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b36:	4b6f      	ldr	r3, [pc, #444]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6e      	ldr	r2, [pc, #440]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd feab 	bl	800289c <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4a:	f7fd fea7 	bl	800289c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e255      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b68:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	061b      	lsls	r3, r3, #24
 8004b76:	495f      	ldr	r1, [pc, #380]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	e018      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7e:	4b5d      	ldr	r3, [pc, #372]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a5c      	ldr	r2, [pc, #368]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fe87 	bl	800289c <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fd fe83 	bl	800289c <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e231      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba4:	4b53      	ldr	r3, [pc, #332]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01c      	beq.n	8004bfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	4a4a      	ldr	r2, [pc, #296]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fd fe62 	bl	800289c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bdc:	f7fd fe5e 	bl	800289c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e20c      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bee:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ef      	beq.n	8004bdc <HAL_RCC_OscConfig+0x3ec>
 8004bfc:	e01b      	b.n	8004c36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd fe45 	bl	800289c <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fd fe41 	bl	800289c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1ef      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c28:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ef      	bne.n	8004c16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80a6 	beq.w	8004d90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c44:	2300      	movs	r3, #0
 8004c46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c54:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	4a26      	ldr	r2, [pc, #152]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <HAL_RCC_OscConfig+0x508>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d118      	bne.n	8004cae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c7c:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_RCC_OscConfig+0x508>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <HAL_RCC_OscConfig+0x508>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c88:	f7fd fe08 	bl	800289c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fd fe04 	bl	800289c <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e1b2      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <HAL_RCC_OscConfig+0x508>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d108      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4d8>
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc6:	e029      	b.n	8004d1c <HAL_RCC_OscConfig+0x52c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d115      	bne.n	8004cfc <HAL_RCC_OscConfig+0x50c>
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	f043 0304 	orr.w	r3, r3, #4
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	4a03      	ldr	r2, [pc, #12]	; (8004cf4 <HAL_RCC_OscConfig+0x504>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf0:	e014      	b.n	8004d1c <HAL_RCC_OscConfig+0x52c>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	4b9a      	ldr	r3, [pc, #616]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	4a99      	ldr	r2, [pc, #612]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d04:	f023 0301 	bic.w	r3, r3, #1
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	4a95      	ldr	r2, [pc, #596]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d016      	beq.n	8004d52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fd fdba 	bl	800289c <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2c:	f7fd fdb6 	bl	800289c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e162      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d42:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ed      	beq.n	8004d2c <HAL_RCC_OscConfig+0x53c>
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd fda3 	bl	800289c <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fd fd9f 	bl	800289c <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e14b      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d70:	4b7d      	ldr	r3, [pc, #500]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ed      	bne.n	8004d5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d105      	bne.n	8004d90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d84:	4b78      	ldr	r3, [pc, #480]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	4a77      	ldr	r2, [pc, #476]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0320 	and.w	r3, r3, #32
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03c      	beq.n	8004e16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01c      	beq.n	8004dde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004da4:	4b70      	ldr	r3, [pc, #448]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004daa:	4a6f      	ldr	r2, [pc, #444]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fd fd72 	bl	800289c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dbc:	f7fd fd6e 	bl	800289c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e11c      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dce:	4b66      	ldr	r3, [pc, #408]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0ef      	beq.n	8004dbc <HAL_RCC_OscConfig+0x5cc>
 8004ddc:	e01b      	b.n	8004e16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dde:	4b62      	ldr	r3, [pc, #392]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de4:	4a60      	ldr	r2, [pc, #384]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fd fd55 	bl	800289c <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df6:	f7fd fd51 	bl	800289c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0ff      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e08:	4b57      	ldr	r3, [pc, #348]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ef      	bne.n	8004df6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80f3 	beq.w	8005006 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	f040 80c9 	bne.w	8004fbc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 0203 	and.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d12c      	bne.n	8004e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d123      	bne.n	8004e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d11b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d113      	bne.n	8004e98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d109      	bne.n	8004e98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	3b01      	subs	r3, #1
 8004e92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d06b      	beq.n	8004f70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d062      	beq.n	8004f64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e9e:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0ac      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004eb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eba:	f7fd fcef 	bl	800289c <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec2:	f7fd fceb 	bl	800289c <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e099      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed4:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee0:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_RCC_OscConfig+0x77c>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0112      	lsls	r2, r2, #4
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004efa:	0212      	lsls	r2, r2, #8
 8004efc:	4311      	orrs	r1, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f02:	0852      	lsrs	r2, r2, #1
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0552      	lsls	r2, r2, #21
 8004f08:	4311      	orrs	r1, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f0e:	0852      	lsrs	r2, r2, #1
 8004f10:	3a01      	subs	r2, #1
 8004f12:	0652      	lsls	r2, r2, #25
 8004f14:	4311      	orrs	r1, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f1a:	06d2      	lsls	r2, r2, #27
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	4912      	ldr	r1, [pc, #72]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f24:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f30:	4b0d      	ldr	r3, [pc, #52]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f3c:	f7fd fcae 	bl	800289c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fcaa 	bl	800289c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e058      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCC_OscConfig+0x778>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f62:	e050      	b.n	8005006 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e04f      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d144      	bne.n	8005006 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a23      	ldr	r2, [pc, #140]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f88:	4b21      	ldr	r3, [pc, #132]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a20      	ldr	r2, [pc, #128]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f94:	f7fd fc82 	bl	800289c <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fd fc7e 	bl	800289c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e02c      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x7ac>
 8004fba:	e024      	b.n	8005006 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d01f      	beq.n	8005002 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a12      	ldr	r2, [pc, #72]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fd fc65 	bl	800289c <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd6:	f7fd fc61 	bl	800289c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e00f      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe8:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4905      	ldr	r1, [pc, #20]	; (8005010 <HAL_RCC_OscConfig+0x820>)
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x824>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60cb      	str	r3, [r1, #12]
 8005000:	e001      	b.n	8005006 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	feeefffc 	.word	0xfeeefffc

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0e7      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b75      	ldr	r3, [pc, #468]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d910      	bls.n	800505c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 0207 	bic.w	r2, r3, #7
 8005042:	4970      	ldr	r1, [pc, #448]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b6e      	ldr	r3, [pc, #440]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0cf      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d010      	beq.n	800508a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	4b66      	ldr	r3, [pc, #408]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005074:	429a      	cmp	r2, r3
 8005076:	d908      	bls.n	800508a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005078:	4b63      	ldr	r3, [pc, #396]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4960      	ldr	r1, [pc, #384]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d04c      	beq.n	8005130 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509e:	4b5a      	ldr	r3, [pc, #360]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d121      	bne.n	80050ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0a6      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b6:	4b54      	ldr	r3, [pc, #336]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d115      	bne.n	80050ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e09a      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050ce:	4b4e      	ldr	r3, [pc, #312]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e08e      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050de:	4b4a      	ldr	r3, [pc, #296]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e086      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ee:	4b46      	ldr	r3, [pc, #280]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 0203 	bic.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4943      	ldr	r1, [pc, #268]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005100:	f7fd fbcc 	bl	800289c <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005106:	e00a      	b.n	800511e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005108:	f7fd fbc8 	bl	800289c <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	4293      	cmp	r3, r2
 8005118:	d901      	bls.n	800511e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e06e      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	4b3a      	ldr	r3, [pc, #232]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 020c 	and.w	r2, r3, #12
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	429a      	cmp	r2, r3
 800512e:	d1eb      	bne.n	8005108 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005148:	429a      	cmp	r2, r3
 800514a:	d208      	bcs.n	800515e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	492b      	ldr	r1, [pc, #172]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d210      	bcs.n	800518e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516c:	4b25      	ldr	r3, [pc, #148]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f023 0207 	bic.w	r2, r3, #7
 8005174:	4923      	ldr	r1, [pc, #140]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4313      	orrs	r3, r2
 800517a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517c:	4b21      	ldr	r3, [pc, #132]	; (8005204 <HAL_RCC_ClockConfig+0x1ec>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e036      	b.n	80051fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519a:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	4918      	ldr	r1, [pc, #96]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4910      	ldr	r1, [pc, #64]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051cc:	f000 f824 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <HAL_RCC_ClockConfig+0x1f0>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	091b      	lsrs	r3, r3, #4
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	490b      	ldr	r1, [pc, #44]	; (800520c <HAL_RCC_ClockConfig+0x1f4>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1f8>)
 80051ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1fc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fd fb03 	bl	80027fc <HAL_InitTick>
 80051f6:	4603      	mov	r3, r0
 80051f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80051fa:	7afb      	ldrb	r3, [r7, #11]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40022000 	.word	0x40022000
 8005208:	40021000 	.word	0x40021000
 800520c:	08008c40 	.word	0x08008c40
 8005210:	20000000 	.word	0x20000000
 8005214:	20000004 	.word	0x20000004

08005218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005230:	4b3b      	ldr	r3, [pc, #236]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x34>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d121      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d11e      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800524c:	4b34      	ldr	r3, [pc, #208]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d107      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e005      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005268:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b04      	cmp	r3, #4
 800528e:	d102      	bne.n	8005296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	e004      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d101      	bne.n	80052a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800529c:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 800529e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b0c      	cmp	r3, #12
 80052a4:	d134      	bne.n	8005310 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052a6:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_GetSysClockFreq+0xa6>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d003      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0xac>
 80052bc:	e005      	b.n	80052ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c0:	617b      	str	r3, [r7, #20]
      break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052c4:	4b18      	ldr	r3, [pc, #96]	; (8005328 <HAL_RCC_GetSysClockFreq+0x110>)
 80052c6:	617b      	str	r3, [r7, #20]
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	617b      	str	r3, [r7, #20]
      break;
 80052ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	3301      	adds	r3, #1
 80052dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	fb03 f202 	mul.w	r2, r3, r2
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052f6:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0e5b      	lsrs	r3, r3, #25
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	3301      	adds	r3, #1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	fbb2 f3f3 	udiv	r3, r2, r3
 800530e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005310:	69bb      	ldr	r3, [r7, #24]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3724      	adds	r7, #36	; 0x24
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	08008c58 	.word	0x08008c58
 8005328:	00f42400 	.word	0x00f42400

0800532c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_GetHCLKFreq+0x14>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000000 	.word	0x20000000

08005344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005348:	f7ff fff0 	bl	800532c <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b06      	ldr	r3, [pc, #24]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4904      	ldr	r1, [pc, #16]	; (800536c <HAL_RCC_GetPCLK1Freq+0x28>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40021000 	.word	0x40021000
 800536c:	08008c50 	.word	0x08008c50

08005370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005374:	f7ff ffda 	bl	800532c <HAL_RCC_GetHCLKFreq>
 8005378:	4602      	mov	r2, r0
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	0adb      	lsrs	r3, r3, #11
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	4904      	ldr	r1, [pc, #16]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005386:	5ccb      	ldrb	r3, [r1, r3]
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40021000 	.word	0x40021000
 8005398:	08008c50 	.word	0x08008c50

0800539c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053a8:	4b2a      	ldr	r3, [pc, #168]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b4:	f7ff f9b8 	bl	8004728 <HAL_PWREx_GetVoltageRange>
 80053b8:	6178      	str	r0, [r7, #20]
 80053ba:	e014      	b.n	80053e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053bc:	4b25      	ldr	r3, [pc, #148]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c6:	6593      	str	r3, [r2, #88]	; 0x58
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d4:	f7ff f9a8 	bl	8004728 <HAL_PWREx_GetVoltageRange>
 80053d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053da:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	d10b      	bne.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d919      	bls.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2ba0      	cmp	r3, #160	; 0xa0
 80053f8:	d902      	bls.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053fa:	2302      	movs	r3, #2
 80053fc:	613b      	str	r3, [r7, #16]
 80053fe:	e013      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005400:	2301      	movs	r3, #1
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e010      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d902      	bls.n	8005412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800540c:	2303      	movs	r3, #3
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e00a      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d102      	bne.n	800541e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005418:	2302      	movs	r3, #2
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e004      	b.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b70      	cmp	r3, #112	; 0x70
 8005422:	d101      	bne.n	8005428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005424:	2301      	movs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 0207 	bic.w	r2, r3, #7
 8005430:	4909      	ldr	r1, [pc, #36]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000
 8005458:	40022000 	.word	0x40022000

0800545c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005464:	2300      	movs	r3, #0
 8005466:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005468:	2300      	movs	r3, #0
 800546a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	2b00      	cmp	r3, #0
 8005476:	d031      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005480:	d01a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005482:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005486:	d814      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800548c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005490:	d10f      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005492:	4b5d      	ldr	r3, [pc, #372]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	4a5c      	ldr	r2, [pc, #368]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800549e:	e00c      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f9f0 	bl	800588c <RCCEx_PLLSAI1_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054b0:	e003      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	74fb      	strb	r3, [r7, #19]
      break;
 80054b6:	e000      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ba:	7cfb      	ldrb	r3, [r7, #19]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c0:	4b51      	ldr	r3, [pc, #324]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	494e      	ldr	r1, [pc, #312]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054d6:	e001      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 809e 	beq.w	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054ee:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00d      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4b40      	ldr	r3, [pc, #256]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	4a3f      	ldr	r2, [pc, #252]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550e:	6593      	str	r3, [r2, #88]	; 0x58
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551c:	2301      	movs	r3, #1
 800551e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005520:	4b3a      	ldr	r3, [pc, #232]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a39      	ldr	r2, [pc, #228]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800552c:	f7fd f9b6 	bl	800289c <HAL_GetTick>
 8005530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005532:	e009      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005534:	f7fd f9b2 	bl	800289c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	74fb      	strb	r3, [r7, #19]
        break;
 8005546:	e005      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005554:	7cfb      	ldrb	r3, [r7, #19]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d15a      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800555a:	4b2b      	ldr	r3, [pc, #172]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01e      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d019      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005580:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800558a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	4a1b      	ldr	r2, [pc, #108]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800559a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a2:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d016      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fd f972 	bl	800289c <HAL_GetTick>
 80055b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ba:	e00b      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fd f96e 	bl	800289c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d902      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	74fb      	strb	r3, [r7, #19]
            break;
 80055d2:	e006      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ec      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80055e2:	7cfb      	ldrb	r3, [r7, #19]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	4904      	ldr	r1, [pc, #16]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055fe:	e009      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005614:	7c7b      	ldrb	r3, [r7, #17]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561a:	4b9b      	ldr	r3, [pc, #620]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	4a9a      	ldr	r2, [pc, #616]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005624:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005632:	4b95      	ldr	r3, [pc, #596]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f023 0203 	bic.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4991      	ldr	r1, [pc, #580]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f023 020c 	bic.w	r2, r3, #12
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	4989      	ldr	r1, [pc, #548]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005676:	4b84      	ldr	r3, [pc, #528]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	4980      	ldr	r1, [pc, #512]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005698:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4978      	ldr	r1, [pc, #480]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ba:	4b73      	ldr	r3, [pc, #460]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	496f      	ldr	r1, [pc, #444]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056dc:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	4967      	ldr	r1, [pc, #412]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056fe:	4b62      	ldr	r3, [pc, #392]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	495e      	ldr	r1, [pc, #376]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005720:	4b59      	ldr	r3, [pc, #356]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572e:	4956      	ldr	r1, [pc, #344]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005742:	4b51      	ldr	r3, [pc, #324]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	494d      	ldr	r1, [pc, #308]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d028      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005764:	4b48      	ldr	r3, [pc, #288]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005772:	4945      	ldr	r1, [pc, #276]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005782:	d106      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005784:	4b40      	ldr	r3, [pc, #256]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a3f      	ldr	r2, [pc, #252]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800578a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800578e:	60d3      	str	r3, [r2, #12]
 8005790:	e011      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800579a:	d10c      	bne.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	2101      	movs	r1, #1
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f872 	bl	800588c <RCCEx_PLLSAI1_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057ac:	7cfb      	ldrb	r3, [r7, #19]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80057b2:	7cfb      	ldrb	r3, [r7, #19]
 80057b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d028      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d0:	492d      	ldr	r1, [pc, #180]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e0:	d106      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e2:	4b29      	ldr	r3, [pc, #164]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4a28      	ldr	r2, [pc, #160]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ec:	60d3      	str	r3, [r2, #12]
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f843 	bl	800588c <RCCEx_PLLSAI1_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01c      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005820:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	4916      	ldr	r1, [pc, #88]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583e:	d10c      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	2102      	movs	r1, #2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f820 	bl	800588c <RCCEx_PLLSAI1_Config>
 800584c:	4603      	mov	r3, r0
 800584e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005850:	7cfb      	ldrb	r3, [r7, #19]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800587c:	7cbb      	ldrb	r3, [r7, #18]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000

0800588c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589a:	4b74      	ldr	r3, [pc, #464]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d018      	beq.n	80058d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058a6:	4b71      	ldr	r3, [pc, #452]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0203 	and.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10d      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
       ||
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d009      	beq.n	80058d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058be:	4b6b      	ldr	r3, [pc, #428]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	091b      	lsrs	r3, r3, #4
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
       ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d047      	beq.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
 80058d6:	e044      	b.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d018      	beq.n	8005912 <RCCEx_PLLSAI1_Config+0x86>
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d825      	bhi.n	8005930 <RCCEx_PLLSAI1_Config+0xa4>
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d002      	beq.n	80058ee <RCCEx_PLLSAI1_Config+0x62>
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d009      	beq.n	8005900 <RCCEx_PLLSAI1_Config+0x74>
 80058ec:	e020      	b.n	8005930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d11d      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fe:	e01a      	b.n	8005936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005900:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d116      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005910:	e013      	b.n	800593a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10f      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800591e:	4b53      	ldr	r3, [pc, #332]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d109      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800592e:	e006      	b.n	800593e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
      break;
 8005934:	e004      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10d      	bne.n	8005962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005946:	4b49      	ldr	r3, [pc, #292]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	430b      	orrs	r3, r1
 800595c:	4943      	ldr	r1, [pc, #268]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d17c      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005968:	4b40      	ldr	r3, [pc, #256]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3f      	ldr	r2, [pc, #252]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800596e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005974:	f7fc ff92 	bl	800289c <HAL_GetTick>
 8005978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800597a:	e009      	b.n	8005990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800597c:	f7fc ff8e 	bl	800289c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d902      	bls.n	8005990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	73fb      	strb	r3, [r7, #15]
        break;
 800598e:	e005      	b.n	800599c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005990:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1ef      	bne.n	800597c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d15f      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d110      	bne.n	80059ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a8:	4b30      	ldr	r3, [pc, #192]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6892      	ldr	r2, [r2, #8]
 80059b8:	0211      	lsls	r1, r2, #8
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	06d2      	lsls	r2, r2, #27
 80059c0:	430a      	orrs	r2, r1
 80059c2:	492a      	ldr	r1, [pc, #168]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	610b      	str	r3, [r1, #16]
 80059c8:	e027      	b.n	8005a1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d112      	bne.n	80059f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6892      	ldr	r2, [r2, #8]
 80059e0:	0211      	lsls	r1, r2, #8
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6912      	ldr	r2, [r2, #16]
 80059e6:	0852      	lsrs	r2, r2, #1
 80059e8:	3a01      	subs	r2, #1
 80059ea:	0552      	lsls	r2, r2, #21
 80059ec:	430a      	orrs	r2, r1
 80059ee:	491f      	ldr	r1, [pc, #124]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	610b      	str	r3, [r1, #16]
 80059f4:	e011      	b.n	8005a1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6892      	ldr	r2, [r2, #8]
 8005a06:	0211      	lsls	r1, r2, #8
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6952      	ldr	r2, [r2, #20]
 8005a0c:	0852      	lsrs	r2, r2, #1
 8005a0e:	3a01      	subs	r2, #1
 8005a10:	0652      	lsls	r2, r2, #25
 8005a12:	430a      	orrs	r2, r1
 8005a14:	4915      	ldr	r1, [pc, #84]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a26:	f7fc ff39 	bl	800289c <HAL_GetTick>
 8005a2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a2c:	e009      	b.n	8005a42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a2e:	f7fc ff35 	bl	800289c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d902      	bls.n	8005a42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a40:	e005      	b.n	8005a4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0ef      	beq.n	8005a2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d106      	bne.n	8005a62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	4903      	ldr	r1, [pc, #12]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40021000 	.word	0x40021000

08005a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e049      	b.n	8005b16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc faee 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	4619      	mov	r1, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	f000 faca 	bl	8006048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d001      	beq.n	8005b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e03b      	b.n	8005bb0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a19      	ldr	r2, [pc, #100]	; (8005bbc <HAL_TIM_Base_Start_IT+0x9c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_TIM_Base_Start_IT+0x4e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b62:	d004      	beq.n	8005b6e <HAL_TIM_Base_Start_IT+0x4e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d115      	bne.n	8005b9a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d015      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x8c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b86:	d011      	beq.n	8005bac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	e008      	b.n	8005bac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e000      	b.n	8005bae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	00010007 	.word	0x00010007

08005bc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1a      	ldr	r2, [r3, #32]
 8005be6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10f      	bne.n	8005c10 <HAL_TIM_Base_Stop_IT+0x48>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	f240 4344 	movw	r3, #1092	; 0x444
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d107      	bne.n	8005c10 <HAL_TIM_Base_Stop_IT+0x48>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d122      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d11b      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0202 	mvn.w	r2, #2
 8005c52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f9ce 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9c0 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9d1 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d122      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0204 	mvn.w	r2, #4
 8005ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f9a4 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005cc2:	e005      	b.n	8005cd0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f996 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9a7 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d122      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f003 0308 	and.w	r3, r3, #8
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d11b      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f06f 0208 	mvn.w	r2, #8
 8005cfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f97a 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005d16:	e005      	b.n	8005d24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f96c 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f97d 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d122      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b10      	cmp	r3, #16
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f06f 0210 	mvn.w	r2, #16
 8005d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2208      	movs	r2, #8
 8005d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f950 	bl	800600a <HAL_TIM_IC_CaptureCallback>
 8005d6a:	e005      	b.n	8005d78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f942 	bl	8005ff6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f953 	bl	800601e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10e      	bne.n	8005daa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0201 	mvn.w	r2, #1
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fc f99f 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b80      	cmp	r3, #128	; 0x80
 8005db6:	d10e      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b80      	cmp	r3, #128	; 0x80
 8005dc4:	d107      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 faa7 	bl	8006324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de4:	d10e      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d107      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa9a 	bl	8006338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d10e      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d107      	bne.n	8005e30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f901 	bl	8006032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b20      	cmp	r3, #32
 8005e3c:	d10e      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d107      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f06f 0220 	mvn.w	r2, #32
 8005e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa5a 	bl	8006310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIM_ConfigClockSource+0x1c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0b6      	b.n	8005fee <HAL_TIM_ConfigClockSource+0x18a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d03e      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0xd8>
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	f200 8087 	bhi.w	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	f000 8086 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x176>
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed2:	d87f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ed4:	2b70      	cmp	r3, #112	; 0x70
 8005ed6:	d01a      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0xaa>
 8005ed8:	2b70      	cmp	r3, #112	; 0x70
 8005eda:	d87b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d050      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x11e>
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d877      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ee4:	2b50      	cmp	r3, #80	; 0x50
 8005ee6:	d03c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0xfe>
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d873      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d058      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x13e>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d86f      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d064      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005ef8:	2b30      	cmp	r3, #48	; 0x30
 8005efa:	d86b      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d060      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d867      	bhi.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d05c      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x15e>
 8005f0c:	e062      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6899      	ldr	r1, [r3, #8]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f000 f971 	bl	8006204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
      break;
 8005f3a:	e04f      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6818      	ldr	r0, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6899      	ldr	r1, [r3, #8]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f000 f95a 	bl	8006204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5e:	609a      	str	r2, [r3, #8]
      break;
 8005f60:	e03c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f000 f8ce 	bl	8006110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2150      	movs	r1, #80	; 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f927 	bl	80061ce <TIM_ITRx_SetConfig>
      break;
 8005f80:	e02c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 f8ed 	bl	800616e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2160      	movs	r1, #96	; 0x60
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f917 	bl	80061ce <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e01c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 f8ae 	bl	8006110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2140      	movs	r1, #64	; 0x40
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 f907 	bl	80061ce <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e00c      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4610      	mov	r0, r2
 8005fce:	f000 f8fe 	bl	80061ce <TIM_ITRx_SetConfig>
      break;
 8005fd2:	e003      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd8:	e000      	b.n	8005fdc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006012:	bf00      	nop
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a2a      	ldr	r2, [pc, #168]	; (8006104 <TIM_Base_SetConfig+0xbc>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0x20>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006066:	d108      	bne.n	800607a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a21      	ldr	r2, [pc, #132]	; (8006104 <TIM_Base_SetConfig+0xbc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_Base_SetConfig+0x52>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d007      	beq.n	800609a <TIM_Base_SetConfig+0x52>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <TIM_Base_SetConfig+0xc0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_Base_SetConfig+0x52>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1d      	ldr	r2, [pc, #116]	; (800610c <TIM_Base_SetConfig+0xc4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d108      	bne.n	80060ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a0c      	ldr	r2, [pc, #48]	; (8006104 <TIM_Base_SetConfig+0xbc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d007      	beq.n	80060e8 <TIM_Base_SetConfig+0xa0>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <TIM_Base_SetConfig+0xc0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xa0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0a      	ldr	r2, [pc, #40]	; (800610c <TIM_Base_SetConfig+0xc4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400

08006110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 030a 	bic.w	r3, r3, #10
 800614c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800616e:	b480      	push	{r7}
 8006170:	b087      	sub	sp, #28
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0210 	bic.w	r2, r3, #16
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	031b      	lsls	r3, r3, #12
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	f043 0307 	orr.w	r3, r3, #7
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800621e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	021a      	lsls	r2, r3, #8
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	431a      	orrs	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4313      	orrs	r3, r2
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	4313      	orrs	r3, r2
 8006230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006258:	2302      	movs	r3, #2
 800625a:	e04f      	b.n	80062fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a21      	ldr	r2, [pc, #132]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800628c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c4:	d004      	beq.n	80062d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a10      	ldr	r2, [pc, #64]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10c      	bne.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40014000 	.word	0x40014000

08006310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e040      	b.n	80063e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb ff8a 	bl	8002288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2224      	movs	r2, #36	; 0x24
 8006378:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fbb6 	bl	8006afc <UART_SetConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fe04 	bl	8006fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fe8b 	bl	80070f4 <UART_CheckIdleState>
 80063de:	4603      	mov	r3, r0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	f040 8082 	bne.w	8006506 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_UART_Transmit+0x26>
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07a      	b.n	8006508 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_UART_Transmit+0x38>
 800641c:	2302      	movs	r3, #2
 800641e:	e073      	b.n	8006508 <HAL_UART_Transmit+0x120>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2221      	movs	r2, #33	; 0x21
 8006434:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006436:	f7fc fa31 	bl	800289c <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d108      	bne.n	8006468 <HAL_UART_Transmit+0x80>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e003      	b.n	8006470 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006478:	e02d      	b.n	80064d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2180      	movs	r1, #128	; 0x80
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fe7e 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e039      	b.n	8006508 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	881a      	ldrh	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a6:	b292      	uxth	r2, r2
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	3302      	adds	r3, #2
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	e008      	b.n	80064c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	b292      	uxth	r2, r2
 80064bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1cb      	bne.n	800647a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2140      	movs	r1, #64	; 0x40
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fe4a 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e005      	b.n	8006508 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
 8006504:	e000      	b.n	8006508 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006506:	2302      	movs	r3, #2
  }
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b0ba      	sub	sp, #232	; 0xe8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800653a:	f640 030f 	movw	r3, #2063	; 0x80f
 800653e:	4013      	ands	r3, r2
 8006540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d115      	bne.n	8006578 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00f      	beq.n	8006578 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d009      	beq.n	8006578 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 82a6 	beq.w	8006aba <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
      }
      return;
 8006576:	e2a0      	b.n	8006aba <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8117 	beq.w	80067b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d106      	bne.n	800659c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800658e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006592:	4b85      	ldr	r3, [pc, #532]	; (80067a8 <HAL_UART_IRQHandler+0x298>)
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 810a 	beq.w	80067b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d011      	beq.n	80065cc <HAL_UART_IRQHandler+0xbc>
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2201      	movs	r2, #1
 80065ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065c2:	f043 0201 	orr.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d011      	beq.n	80065fc <HAL_UART_IRQHandler+0xec>
 80065d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2202      	movs	r2, #2
 80065ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f2:	f043 0204 	orr.w	r2, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d011      	beq.n	800662c <HAL_UART_IRQHandler+0x11c>
 8006608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00b      	beq.n	800662c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2204      	movs	r2, #4
 800661a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006622:	f043 0202 	orr.w	r2, r3, #2
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800662c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d017      	beq.n	8006668 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006648:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2208      	movs	r2, #8
 8006656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665e:	f043 0208 	orr.w	r2, r3, #8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006670:	2b00      	cmp	r3, #0
 8006672:	d012      	beq.n	800669a <HAL_UART_IRQHandler+0x18a>
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00c      	beq.n	800669a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006690:	f043 0220 	orr.w	r2, r3, #32
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 820c 	beq.w	8006abe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d04f      	beq.n	8006792 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 fed8 	bl	80074a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d141      	bne.n	800678a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800671c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3308      	adds	r3, #8
 800672e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006732:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800673e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800674a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1d9      	bne.n	8006706 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	2b00      	cmp	r3, #0
 8006758:	d013      	beq.n	8006782 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	4a13      	ldr	r2, [pc, #76]	; (80067ac <HAL_UART_IRQHandler+0x29c>)
 8006760:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd fd1c 	bl	80041a4 <HAL_DMA_Abort_IT>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d017      	beq.n	80067a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e00f      	b.n	80067a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9b0 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006788:	e00b      	b.n	80067a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f9ac 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e007      	b.n	80067a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9a8 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067a0:	e18d      	b.n	8006abe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	bf00      	nop
    return;
 80067a4:	e18b      	b.n	8006abe <HAL_UART_IRQHandler+0x5ae>
 80067a6:	bf00      	nop
 80067a8:	04000120 	.word	0x04000120
 80067ac:	08007747 	.word	0x08007747

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	f040 8146 	bne.w	8006a46 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 813f 	beq.w	8006a46 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8138 	beq.w	8006a46 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2210      	movs	r2, #16
 80067dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b40      	cmp	r3, #64	; 0x40
 80067ea:	f040 80b4 	bne.w	8006956 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f000 815f 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800680a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800680e:	429a      	cmp	r2, r3
 8006810:	f080 8157 	bcs.w	8006ac2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800681a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 8085 	bne.w	800693a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800684c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800685a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800685e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006866:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1da      	bne.n	8006830 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3308      	adds	r3, #8
 8006880:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800688a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3308      	adds	r3, #8
 800689a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800689e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e1      	bne.n	800687a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3308      	adds	r3, #8
 80068d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e3      	bne.n	80068b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	f023 0310 	bic.w	r3, r3, #16
 800690e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800691c:	65bb      	str	r3, [r7, #88]	; 0x58
 800691e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e4      	bne.n	80068fa <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4618      	mov	r0, r3
 8006936:	f7fd fbf7 	bl	8004128 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006946:	b29b      	uxth	r3, r3
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	b29b      	uxth	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fb fe10 	bl	8002574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006954:	e0b5      	b.n	8006ac2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006962:	b29b      	uxth	r3, r3
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 80a7 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a2 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069a4:	647b      	str	r3, [r7, #68]	; 0x44
 80069a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e4      	bne.n	8006982 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	623b      	str	r3, [r7, #32]
   return(result);
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069dc:	633a      	str	r2, [r7, #48]	; 0x30
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e3      	bne.n	80069b8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 0310 	bic.w	r3, r3, #16
 8006a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	69b9      	ldr	r1, [r7, #24]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	617b      	str	r3, [r7, #20]
   return(result);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e4      	bne.n	8006a02 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fb fd98 	bl	8002574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a44:	e03f      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <HAL_UART_IRQHandler+0x560>
 8006a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d008      	beq.n	8006a70 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 feac 	bl	80077c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a6e:	e02d      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01c      	beq.n	8006aca <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
    }
    return;
 8006a98:	e017      	b.n	8006aca <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d012      	beq.n	8006acc <HAL_UART_IRQHandler+0x5bc>
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fe5d 	bl	8007772 <UART_EndTransmit_IT>
    return;
 8006ab8:	e008      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006aba:	bf00      	nop
 8006abc:	e006      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006abe:	bf00      	nop
 8006ac0:	e004      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <HAL_UART_IRQHandler+0x5bc>
    return;
 8006aca:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006acc:	37e8      	adds	r7, #232	; 0xe8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop

08006ad4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b00:	b08a      	sub	sp, #40	; 0x28
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4b9e      	ldr	r3, [pc, #632]	; (8006da4 <UART_SetConfig+0x2a8>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	6812      	ldr	r2, [r2, #0]
 8006b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b34:	430b      	orrs	r3, r1
 8006b36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a93      	ldr	r2, [pc, #588]	; (8006da8 <UART_SetConfig+0x2ac>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	4313      	orrs	r3, r2
 8006b66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a8a      	ldr	r2, [pc, #552]	; (8006dac <UART_SetConfig+0x2b0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d126      	bne.n	8006bd4 <UART_SetConfig+0xd8>
 8006b86:	4b8a      	ldr	r3, [pc, #552]	; (8006db0 <UART_SetConfig+0x2b4>)
 8006b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d81b      	bhi.n	8006bcc <UART_SetConfig+0xd0>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0xa0>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bbd 	.word	0x08006bbd
 8006ba4:	08006bb5 	.word	0x08006bb5
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb2:	e0ab      	b.n	8006d0c <UART_SetConfig+0x210>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bba:	e0a7      	b.n	8006d0c <UART_SetConfig+0x210>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bc2:	e0a3      	b.n	8006d0c <UART_SetConfig+0x210>
 8006bc4:	2308      	movs	r3, #8
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bca:	e09f      	b.n	8006d0c <UART_SetConfig+0x210>
 8006bcc:	2310      	movs	r3, #16
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bd2:	e09b      	b.n	8006d0c <UART_SetConfig+0x210>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a76      	ldr	r2, [pc, #472]	; (8006db4 <UART_SetConfig+0x2b8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d138      	bne.n	8006c50 <UART_SetConfig+0x154>
 8006bde:	4b74      	ldr	r3, [pc, #464]	; (8006db0 <UART_SetConfig+0x2b4>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f003 030c 	and.w	r3, r3, #12
 8006be8:	2b0c      	cmp	r3, #12
 8006bea:	d82d      	bhi.n	8006c48 <UART_SetConfig+0x14c>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0xf8>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c29 	.word	0x08006c29
 8006bf8:	08006c49 	.word	0x08006c49
 8006bfc:	08006c49 	.word	0x08006c49
 8006c00:	08006c49 	.word	0x08006c49
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c49 	.word	0x08006c49
 8006c0c:	08006c49 	.word	0x08006c49
 8006c10:	08006c49 	.word	0x08006c49
 8006c14:	08006c31 	.word	0x08006c31
 8006c18:	08006c49 	.word	0x08006c49
 8006c1c:	08006c49 	.word	0x08006c49
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2e:	e06d      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c36:	e069      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3e:	e065      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c46:	e061      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4e:	e05d      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a58      	ldr	r2, [pc, #352]	; (8006db8 <UART_SetConfig+0x2bc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d125      	bne.n	8006ca6 <UART_SetConfig+0x1aa>
 8006c5a:	4b55      	ldr	r3, [pc, #340]	; (8006db0 <UART_SetConfig+0x2b4>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c64:	2b30      	cmp	r3, #48	; 0x30
 8006c66:	d016      	beq.n	8006c96 <UART_SetConfig+0x19a>
 8006c68:	2b30      	cmp	r3, #48	; 0x30
 8006c6a:	d818      	bhi.n	8006c9e <UART_SetConfig+0x1a2>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d00a      	beq.n	8006c86 <UART_SetConfig+0x18a>
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d814      	bhi.n	8006c9e <UART_SetConfig+0x1a2>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <UART_SetConfig+0x182>
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d008      	beq.n	8006c8e <UART_SetConfig+0x192>
 8006c7c:	e00f      	b.n	8006c9e <UART_SetConfig+0x1a2>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c84:	e042      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c86:	2302      	movs	r3, #2
 8006c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8c:	e03e      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c8e:	2304      	movs	r3, #4
 8006c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c94:	e03a      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c96:	2308      	movs	r3, #8
 8006c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9c:	e036      	b.n	8006d0c <UART_SetConfig+0x210>
 8006c9e:	2310      	movs	r3, #16
 8006ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca4:	e032      	b.n	8006d0c <UART_SetConfig+0x210>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3f      	ldr	r2, [pc, #252]	; (8006da8 <UART_SetConfig+0x2ac>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d12a      	bne.n	8006d06 <UART_SetConfig+0x20a>
 8006cb0:	4b3f      	ldr	r3, [pc, #252]	; (8006db0 <UART_SetConfig+0x2b4>)
 8006cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cbe:	d01a      	beq.n	8006cf6 <UART_SetConfig+0x1fa>
 8006cc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc4:	d81b      	bhi.n	8006cfe <UART_SetConfig+0x202>
 8006cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cca:	d00c      	beq.n	8006ce6 <UART_SetConfig+0x1ea>
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d815      	bhi.n	8006cfe <UART_SetConfig+0x202>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <UART_SetConfig+0x1e2>
 8006cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cda:	d008      	beq.n	8006cee <UART_SetConfig+0x1f2>
 8006cdc:	e00f      	b.n	8006cfe <UART_SetConfig+0x202>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce4:	e012      	b.n	8006d0c <UART_SetConfig+0x210>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cec:	e00e      	b.n	8006d0c <UART_SetConfig+0x210>
 8006cee:	2304      	movs	r3, #4
 8006cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf4:	e00a      	b.n	8006d0c <UART_SetConfig+0x210>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfc:	e006      	b.n	8006d0c <UART_SetConfig+0x210>
 8006cfe:	2310      	movs	r3, #16
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d04:	e002      	b.n	8006d0c <UART_SetConfig+0x210>
 8006d06:	2310      	movs	r3, #16
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a25      	ldr	r2, [pc, #148]	; (8006da8 <UART_SetConfig+0x2ac>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	f040 808a 	bne.w	8006e2c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d824      	bhi.n	8006d6a <UART_SetConfig+0x26e>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x22c>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d6b 	.word	0x08006d6b
 8006d30:	08006d55 	.word	0x08006d55
 8006d34:	08006d6b 	.word	0x08006d6b
 8006d38:	08006d5b 	.word	0x08006d5b
 8006d3c:	08006d6b 	.word	0x08006d6b
 8006d40:	08006d6b 	.word	0x08006d6b
 8006d44:	08006d6b 	.word	0x08006d6b
 8006d48:	08006d63 	.word	0x08006d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d4c:	f7fe fafa 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006d50:	61f8      	str	r0, [r7, #28]
        break;
 8006d52:	e010      	b.n	8006d76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d54:	4b19      	ldr	r3, [pc, #100]	; (8006dbc <UART_SetConfig+0x2c0>)
 8006d56:	61fb      	str	r3, [r7, #28]
        break;
 8006d58:	e00d      	b.n	8006d76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5a:	f7fe fa5d 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006d5e:	61f8      	str	r0, [r7, #28]
        break;
 8006d60:	e009      	b.n	8006d76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d66:	61fb      	str	r3, [r7, #28]
        break;
 8006d68:	e005      	b.n	8006d76 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8109 	beq.w	8006f90 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d305      	bcc.n	8006d9a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d912      	bls.n	8006dc0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006da0:	e0f6      	b.n	8006f90 <UART_SetConfig+0x494>
 8006da2:	bf00      	nop
 8006da4:	efff69f3 	.word	0xefff69f3
 8006da8:	40008000 	.word	0x40008000
 8006dac:	40013800 	.word	0x40013800
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40004400 	.word	0x40004400
 8006db8:	40004800 	.word	0x40004800
 8006dbc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	4615      	mov	r5, r2
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	022b      	lsls	r3, r5, #8
 8006dd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dd6:	0222      	lsls	r2, r4, #8
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	0849      	lsrs	r1, r1, #1
 8006dde:	2000      	movs	r0, #0
 8006de0:	4688      	mov	r8, r1
 8006de2:	4681      	mov	r9, r0
 8006de4:	eb12 0a08 	adds.w	sl, r2, r8
 8006de8:	eb43 0b09 	adc.w	fp, r3, r9
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	607a      	str	r2, [r7, #4]
 8006df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	f7f9 fe5d 	bl	8000abc <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4613      	mov	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e10:	d308      	bcc.n	8006e24 <UART_SetConfig+0x328>
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e18:	d204      	bcs.n	8006e24 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	e0b5      	b.n	8006f90 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e2a:	e0b1      	b.n	8006f90 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e34:	d15d      	bne.n	8006ef2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d827      	bhi.n	8006e8e <UART_SetConfig+0x392>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x348>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e79 	.word	0x08006e79
 8006e50:	08006e8f 	.word	0x08006e8f
 8006e54:	08006e7f 	.word	0x08006e7f
 8006e58:	08006e8f 	.word	0x08006e8f
 8006e5c:	08006e8f 	.word	0x08006e8f
 8006e60:	08006e8f 	.word	0x08006e8f
 8006e64:	08006e87 	.word	0x08006e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe fa6c 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	61f8      	str	r0, [r7, #28]
        break;
 8006e6e:	e014      	b.n	8006e9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fe fa7e 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 8006e74:	61f8      	str	r0, [r7, #28]
        break;
 8006e76:	e010      	b.n	8006e9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <UART_SetConfig+0x4b0>)
 8006e7a:	61fb      	str	r3, [r7, #28]
        break;
 8006e7c:	e00d      	b.n	8006e9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fe f9cb 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006e82:	61f8      	str	r0, [r7, #28]
        break;
 8006e84:	e009      	b.n	8006e9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8a:	61fb      	str	r3, [r7, #28]
        break;
 8006e8c:	e005      	b.n	8006e9a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d077      	beq.n	8006f90 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	005a      	lsls	r2, r3, #1
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	085b      	lsrs	r3, r3, #1
 8006eaa:	441a      	add	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b0f      	cmp	r3, #15
 8006eba:	d916      	bls.n	8006eea <UART_SetConfig+0x3ee>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec2:	d212      	bcs.n	8006eea <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	f023 030f 	bic.w	r3, r3, #15
 8006ecc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	8afb      	ldrh	r3, [r7, #22]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	8afa      	ldrh	r2, [r7, #22]
 8006ee6:	60da      	str	r2, [r3, #12]
 8006ee8:	e052      	b.n	8006f90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ef0:	e04e      	b.n	8006f90 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d827      	bhi.n	8006f4a <UART_SetConfig+0x44e>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x404>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4b 	.word	0x08006f4b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f4b 	.word	0x08006f4b
 8006f1c:	08006f4b 	.word	0x08006f4b
 8006f20:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fe fa0e 	bl	8005344 <HAL_RCC_GetPCLK1Freq>
 8006f28:	61f8      	str	r0, [r7, #28]
        break;
 8006f2a:	e014      	b.n	8006f56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fe fa20 	bl	8005370 <HAL_RCC_GetPCLK2Freq>
 8006f30:	61f8      	str	r0, [r7, #28]
        break;
 8006f32:	e010      	b.n	8006f56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b1d      	ldr	r3, [pc, #116]	; (8006fac <UART_SetConfig+0x4b0>)
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e00d      	b.n	8006f56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fe f96d 	bl	8005218 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61f8      	str	r0, [r7, #28]
        break;
 8006f40:	e009      	b.n	8006f56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	61fb      	str	r3, [r7, #28]
        break;
 8006f48:	e005      	b.n	8006f56 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f54:	bf00      	nop
    }

    if (pclk != 0U)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d019      	beq.n	8006f90 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	085a      	lsrs	r2, r3, #1
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	d909      	bls.n	8006f8a <UART_SetConfig+0x48e>
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7c:	d205      	bcs.n	8006f8a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
 8006f88:	e002      	b.n	8006f90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006faa:	bf00      	nop
 8006fac:	00f42400 	.word	0x00f42400

08006fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00a      	beq.n	8006ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00a      	beq.n	8007062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ae:	d10a      	bne.n	80070c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007104:	f7fb fbca 	bl	800289c <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b08      	cmp	r3, #8
 8007116:	d10e      	bne.n	8007136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f82d 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e023      	b.n	800717e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d10e      	bne.n	8007162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f817 	bl	8007186 <UART_WaitOnFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e00d      	b.n	800717e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b09c      	sub	sp, #112	; 0x70
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007196:	e0a5      	b.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	f000 80a1 	beq.w	80072e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071a2:	f7fb fb7b 	bl	800289c <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d302      	bcc.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80071b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d13e      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071cc:	667b      	str	r3, [r7, #100]	; 0x64
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3308      	adds	r3, #8
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	663b      	str	r3, [r7, #96]	; 0x60
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800720a:	64ba      	str	r2, [r7, #72]	; 0x48
 800720c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e5      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2220      	movs	r2, #32
 8007228:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e067      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d04f      	beq.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800724e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007252:	d147      	bne.n	80072e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800725c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	461a      	mov	r2, r3
 800727a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
 800727e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e6      	bne.n	800725e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	613b      	str	r3, [r7, #16]
   return(result);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072b0:	623a      	str	r2, [r7, #32]
 80072b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b4:	69f9      	ldr	r1, [r7, #28]
 80072b6:	6a3a      	ldr	r2, [r7, #32]
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e5      	bne.n	8007290 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e010      	b.n	8007306 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69da      	ldr	r2, [r3, #28]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	4013      	ands	r3, r2
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	bf0c      	ite	eq
 80072f4:	2301      	moveq	r3, #1
 80072f6:	2300      	movne	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	461a      	mov	r2, r3
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	429a      	cmp	r2, r3
 8007300:	f43f af4a 	beq.w	8007198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3770      	adds	r7, #112	; 0x70
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b096      	sub	sp, #88	; 0x58
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2222      	movs	r2, #34	; 0x22
 8007338:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	2b00      	cmp	r3, #0
 8007340:	d02b      	beq.n	800739a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	4a42      	ldr	r2, [pc, #264]	; (8007450 <UART_Start_Receive_DMA+0x140>)
 8007348:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a41      	ldr	r2, [pc, #260]	; (8007454 <UART_Start_Receive_DMA+0x144>)
 8007350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007356:	4a40      	ldr	r2, [pc, #256]	; (8007458 <UART_Start_Receive_DMA+0x148>)
 8007358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	2200      	movs	r2, #0
 8007360:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	4619      	mov	r1, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	461a      	mov	r2, r3
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	f7fc fe77 	bl	8004068 <HAL_DMA_Start_IT>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2210      	movs	r2, #16
 8007384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2220      	movs	r2, #32
 8007394:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e055      	b.n	8007446 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d018      	beq.n	80073dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073be:	657b      	str	r3, [r7, #84]	; 0x54
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	653b      	str	r3, [r7, #80]	; 0x50
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80073fc:	637a      	str	r2, [r7, #52]	; 0x34
 80073fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3308      	adds	r3, #8
 8007416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	613b      	str	r3, [r7, #16]
   return(result);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007430:	623a      	str	r2, [r7, #32]
 8007432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007434:	69f9      	ldr	r1, [r7, #28]
 8007436:	6a3a      	ldr	r2, [r7, #32]
 8007438:	e841 2300 	strex	r3, r2, [r1]
 800743c:	61bb      	str	r3, [r7, #24]
   return(result);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1e5      	bne.n	8007410 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3758      	adds	r7, #88	; 0x58
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	0800756f 	.word	0x0800756f
 8007454:	08007693 	.word	0x08007693
 8007458:	080076cb 	.word	0x080076cb

0800745c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	60bb      	str	r3, [r7, #8]
   return(result);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	61bb      	str	r3, [r7, #24]
 8007484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	6979      	ldr	r1, [r7, #20]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	679a      	str	r2, [r3, #120]	; 0x78
}
 800749c:	bf00      	nop
 800749e:	3724      	adds	r7, #36	; 0x24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b095      	sub	sp, #84	; 0x54
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	643b      	str	r3, [r7, #64]	; 0x40
 80074d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e6      	bne.n	80074b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3308      	adds	r3, #8
 8007500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007502:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007504:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e5      	bne.n	80074e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751a:	2b01      	cmp	r3, #1
 800751c:	d118      	bne.n	8007550 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	60bb      	str	r3, [r7, #8]
   return(result);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f023 0310 	bic.w	r3, r3, #16
 8007532:	647b      	str	r3, [r7, #68]	; 0x44
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	613b      	str	r3, [r7, #16]
   return(result);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007562:	bf00      	nop
 8007564:	3754      	adds	r7, #84	; 0x54
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b09c      	sub	sp, #112	; 0x70
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d170      	bne.n	800766c <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800758a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758c:	2200      	movs	r2, #0
 800758e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80075b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	667b      	str	r3, [r7, #100]	; 0x64
 80075dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80075e4:	647a      	str	r2, [r7, #68]	; 0x44
 80075e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	623b      	str	r3, [r7, #32]
   return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760e:	663b      	str	r3, [r7, #96]	; 0x60
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3308      	adds	r3, #8
 8007616:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007618:	633a      	str	r2, [r7, #48]	; 0x30
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800762c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762e:	2220      	movs	r2, #32
 8007630:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007636:	2b01      	cmp	r3, #1
 8007638:	d118      	bne.n	800766c <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	60fb      	str	r3, [r7, #12]
   return(result);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	617b      	str	r3, [r7, #20]
   return(result);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007670:	2b01      	cmp	r3, #1
 8007672:	d107      	bne.n	8007684 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007676:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800767a:	4619      	mov	r1, r3
 800767c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800767e:	f7fa ff79 	bl	8002574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007682:	e002      	b.n	800768a <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8007684:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007686:	f7fa ff5b 	bl	8002540 <HAL_UART_RxCpltCallback>
}
 800768a:	bf00      	nop
 800768c:	3770      	adds	r7, #112	; 0x70
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b084      	sub	sp, #16
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d109      	bne.n	80076bc <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7fa ff5d 	bl	8002574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ba:	e002      	b.n	80076c2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fa09 	bl	8006ad4 <HAL_UART_RxHalfCpltCallback>
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076dc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ee:	2b80      	cmp	r3, #128	; 0x80
 80076f0:	d109      	bne.n	8007706 <UART_DMAError+0x3c>
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b21      	cmp	r3, #33	; 0x21
 80076f6:	d106      	bne.n	8007706 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007700:	6978      	ldr	r0, [r7, #20]
 8007702:	f7ff feab 	bl	800745c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d109      	bne.n	8007728 <UART_DMAError+0x5e>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b22      	cmp	r3, #34	; 0x22
 8007718:	d106      	bne.n	8007728 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7ff fec0 	bl	80074a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772e:	f043 0210 	orr.w	r2, r3, #16
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007738:	6978      	ldr	r0, [r7, #20]
 800773a:	f7ff f9d5 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773e:	bf00      	nop
 8007740:	3718      	adds	r7, #24
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff f9bf 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b088      	sub	sp, #32
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	60bb      	str	r3, [r7, #8]
   return(result);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	61bb      	str	r3, [r7, #24]
 800779a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6979      	ldr	r1, [r7, #20]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	613b      	str	r3, [r7, #16]
   return(result);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e6      	bne.n	800777a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2220      	movs	r2, #32
 80077b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7fa fee7 	bl	800258c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077be:	bf00      	nop
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b08c      	sub	sp, #48	; 0x30
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	4613      	mov	r3, r2
 80077e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d14a      	bne.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e043      	b.n	8007888 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800780a:	2302      	movs	r3, #2
 800780c:	e03c      	b.n	8007888 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	461a      	mov	r2, r3
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fd74 	bl	8007310 <UART_Start_Receive_DMA>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800782e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007832:	2b00      	cmp	r3, #0
 8007834:	d124      	bne.n	8007880 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800783a:	2b01      	cmp	r3, #1
 800783c:	d11d      	bne.n	800787a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	617b      	str	r3, [r7, #20]
   return(result);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f043 0310 	orr.w	r3, r3, #16
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	461a      	mov	r2, r3
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
 8007866:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6a39      	ldr	r1, [r7, #32]
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	61fb      	str	r3, [r7, #28]
   return(result);
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e6      	bne.n	8007846 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8007878:	e002      	b.n	8007880 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007884:	e000      	b.n	8007888 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8007886:	2302      	movs	r3, #2
  }
}
 8007888:	4618      	mov	r0, r3
 800788a:	3730      	adds	r7, #48	; 0x30
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <__errno>:
 8007890:	4b01      	ldr	r3, [pc, #4]	; (8007898 <__errno+0x8>)
 8007892:	6818      	ldr	r0, [r3, #0]
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	2000000c 	.word	0x2000000c

0800789c <__libc_init_array>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4d0d      	ldr	r5, [pc, #52]	; (80078d4 <__libc_init_array+0x38>)
 80078a0:	4c0d      	ldr	r4, [pc, #52]	; (80078d8 <__libc_init_array+0x3c>)
 80078a2:	1b64      	subs	r4, r4, r5
 80078a4:	10a4      	asrs	r4, r4, #2
 80078a6:	2600      	movs	r6, #0
 80078a8:	42a6      	cmp	r6, r4
 80078aa:	d109      	bne.n	80078c0 <__libc_init_array+0x24>
 80078ac:	4d0b      	ldr	r5, [pc, #44]	; (80078dc <__libc_init_array+0x40>)
 80078ae:	4c0c      	ldr	r4, [pc, #48]	; (80078e0 <__libc_init_array+0x44>)
 80078b0:	f001 f926 	bl	8008b00 <_init>
 80078b4:	1b64      	subs	r4, r4, r5
 80078b6:	10a4      	asrs	r4, r4, #2
 80078b8:	2600      	movs	r6, #0
 80078ba:	42a6      	cmp	r6, r4
 80078bc:	d105      	bne.n	80078ca <__libc_init_array+0x2e>
 80078be:	bd70      	pop	{r4, r5, r6, pc}
 80078c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c4:	4798      	blx	r3
 80078c6:	3601      	adds	r6, #1
 80078c8:	e7ee      	b.n	80078a8 <__libc_init_array+0xc>
 80078ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ce:	4798      	blx	r3
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7f2      	b.n	80078ba <__libc_init_array+0x1e>
 80078d4:	08008ed8 	.word	0x08008ed8
 80078d8:	08008ed8 	.word	0x08008ed8
 80078dc:	08008ed8 	.word	0x08008ed8
 80078e0:	08008edc 	.word	0x08008edc

080078e4 <memcpy>:
 80078e4:	440a      	add	r2, r1
 80078e6:	4291      	cmp	r1, r2
 80078e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078ec:	d100      	bne.n	80078f0 <memcpy+0xc>
 80078ee:	4770      	bx	lr
 80078f0:	b510      	push	{r4, lr}
 80078f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078fa:	4291      	cmp	r1, r2
 80078fc:	d1f9      	bne.n	80078f2 <memcpy+0xe>
 80078fe:	bd10      	pop	{r4, pc}

08007900 <memset>:
 8007900:	4402      	add	r2, r0
 8007902:	4603      	mov	r3, r0
 8007904:	4293      	cmp	r3, r2
 8007906:	d100      	bne.n	800790a <memset+0xa>
 8007908:	4770      	bx	lr
 800790a:	f803 1b01 	strb.w	r1, [r3], #1
 800790e:	e7f9      	b.n	8007904 <memset+0x4>

08007910 <strstr>:
 8007910:	780a      	ldrb	r2, [r1, #0]
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	b96a      	cbnz	r2, 8007932 <strstr+0x22>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	429a      	cmp	r2, r3
 800791a:	d109      	bne.n	8007930 <strstr+0x20>
 800791c:	460c      	mov	r4, r1
 800791e:	4605      	mov	r5, r0
 8007920:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f6      	beq.n	8007916 <strstr+0x6>
 8007928:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800792c:	429e      	cmp	r6, r3
 800792e:	d0f7      	beq.n	8007920 <strstr+0x10>
 8007930:	3001      	adds	r0, #1
 8007932:	7803      	ldrb	r3, [r0, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1ef      	bne.n	8007918 <strstr+0x8>
 8007938:	4618      	mov	r0, r3
 800793a:	e7ec      	b.n	8007916 <strstr+0x6>

0800793c <strtok>:
 800793c:	4b16      	ldr	r3, [pc, #88]	; (8007998 <strtok+0x5c>)
 800793e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007940:	681e      	ldr	r6, [r3, #0]
 8007942:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007944:	4605      	mov	r5, r0
 8007946:	b9fc      	cbnz	r4, 8007988 <strtok+0x4c>
 8007948:	2050      	movs	r0, #80	; 0x50
 800794a:	9101      	str	r1, [sp, #4]
 800794c:	f000 f90e 	bl	8007b6c <malloc>
 8007950:	9901      	ldr	r1, [sp, #4]
 8007952:	65b0      	str	r0, [r6, #88]	; 0x58
 8007954:	4602      	mov	r2, r0
 8007956:	b920      	cbnz	r0, 8007962 <strtok+0x26>
 8007958:	4b10      	ldr	r3, [pc, #64]	; (800799c <strtok+0x60>)
 800795a:	4811      	ldr	r0, [pc, #68]	; (80079a0 <strtok+0x64>)
 800795c:	2157      	movs	r1, #87	; 0x57
 800795e:	f000 f8d5 	bl	8007b0c <__assert_func>
 8007962:	e9c0 4400 	strd	r4, r4, [r0]
 8007966:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800796a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800796e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007972:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007976:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800797a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800797e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007982:	6184      	str	r4, [r0, #24]
 8007984:	7704      	strb	r4, [r0, #28]
 8007986:	6244      	str	r4, [r0, #36]	; 0x24
 8007988:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800798a:	2301      	movs	r3, #1
 800798c:	4628      	mov	r0, r5
 800798e:	b002      	add	sp, #8
 8007990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007994:	f000 b806 	b.w	80079a4 <__strtok_r>
 8007998:	2000000c 	.word	0x2000000c
 800799c:	08008c8c 	.word	0x08008c8c
 80079a0:	08008ca3 	.word	0x08008ca3

080079a4 <__strtok_r>:
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a6:	b908      	cbnz	r0, 80079ac <__strtok_r+0x8>
 80079a8:	6810      	ldr	r0, [r2, #0]
 80079aa:	b188      	cbz	r0, 80079d0 <__strtok_r+0x2c>
 80079ac:	4604      	mov	r4, r0
 80079ae:	4620      	mov	r0, r4
 80079b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079b4:	460f      	mov	r7, r1
 80079b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079ba:	b91e      	cbnz	r6, 80079c4 <__strtok_r+0x20>
 80079bc:	b965      	cbnz	r5, 80079d8 <__strtok_r+0x34>
 80079be:	6015      	str	r5, [r2, #0]
 80079c0:	4628      	mov	r0, r5
 80079c2:	e005      	b.n	80079d0 <__strtok_r+0x2c>
 80079c4:	42b5      	cmp	r5, r6
 80079c6:	d1f6      	bne.n	80079b6 <__strtok_r+0x12>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f0      	bne.n	80079ae <__strtok_r+0xa>
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	7003      	strb	r3, [r0, #0]
 80079d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d2:	461c      	mov	r4, r3
 80079d4:	e00c      	b.n	80079f0 <__strtok_r+0x4c>
 80079d6:	b915      	cbnz	r5, 80079de <__strtok_r+0x3a>
 80079d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079dc:	460e      	mov	r6, r1
 80079de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079e2:	42ab      	cmp	r3, r5
 80079e4:	d1f7      	bne.n	80079d6 <__strtok_r+0x32>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f3      	beq.n	80079d2 <__strtok_r+0x2e>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80079f0:	6014      	str	r4, [r2, #0]
 80079f2:	e7ed      	b.n	80079d0 <__strtok_r+0x2c>

080079f4 <_strtol_l.constprop.0>:
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fa:	d001      	beq.n	8007a00 <_strtol_l.constprop.0+0xc>
 80079fc:	2b24      	cmp	r3, #36	; 0x24
 80079fe:	d906      	bls.n	8007a0e <_strtol_l.constprop.0+0x1a>
 8007a00:	f7ff ff46 	bl	8007890 <__errno>
 8007a04:	2316      	movs	r3, #22
 8007a06:	6003      	str	r3, [r0, #0]
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007af4 <_strtol_l.constprop.0+0x100>
 8007a12:	460d      	mov	r5, r1
 8007a14:	462e      	mov	r6, r5
 8007a16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007a1e:	f017 0708 	ands.w	r7, r7, #8
 8007a22:	d1f7      	bne.n	8007a14 <_strtol_l.constprop.0+0x20>
 8007a24:	2c2d      	cmp	r4, #45	; 0x2d
 8007a26:	d132      	bne.n	8007a8e <_strtol_l.constprop.0+0x9a>
 8007a28:	782c      	ldrb	r4, [r5, #0]
 8007a2a:	2701      	movs	r7, #1
 8007a2c:	1cb5      	adds	r5, r6, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d05b      	beq.n	8007aea <_strtol_l.constprop.0+0xf6>
 8007a32:	2b10      	cmp	r3, #16
 8007a34:	d109      	bne.n	8007a4a <_strtol_l.constprop.0+0x56>
 8007a36:	2c30      	cmp	r4, #48	; 0x30
 8007a38:	d107      	bne.n	8007a4a <_strtol_l.constprop.0+0x56>
 8007a3a:	782c      	ldrb	r4, [r5, #0]
 8007a3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a40:	2c58      	cmp	r4, #88	; 0x58
 8007a42:	d14d      	bne.n	8007ae0 <_strtol_l.constprop.0+0xec>
 8007a44:	786c      	ldrb	r4, [r5, #1]
 8007a46:	2310      	movs	r3, #16
 8007a48:	3502      	adds	r5, #2
 8007a4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007a4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a52:	f04f 0c00 	mov.w	ip, #0
 8007a56:	fbb8 f9f3 	udiv	r9, r8, r3
 8007a5a:	4666      	mov	r6, ip
 8007a5c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007a64:	f1be 0f09 	cmp.w	lr, #9
 8007a68:	d816      	bhi.n	8007a98 <_strtol_l.constprop.0+0xa4>
 8007a6a:	4674      	mov	r4, lr
 8007a6c:	42a3      	cmp	r3, r4
 8007a6e:	dd24      	ble.n	8007aba <_strtol_l.constprop.0+0xc6>
 8007a70:	f1bc 0f00 	cmp.w	ip, #0
 8007a74:	db1e      	blt.n	8007ab4 <_strtol_l.constprop.0+0xc0>
 8007a76:	45b1      	cmp	r9, r6
 8007a78:	d31c      	bcc.n	8007ab4 <_strtol_l.constprop.0+0xc0>
 8007a7a:	d101      	bne.n	8007a80 <_strtol_l.constprop.0+0x8c>
 8007a7c:	45a2      	cmp	sl, r4
 8007a7e:	db19      	blt.n	8007ab4 <_strtol_l.constprop.0+0xc0>
 8007a80:	fb06 4603 	mla	r6, r6, r3, r4
 8007a84:	f04f 0c01 	mov.w	ip, #1
 8007a88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a8c:	e7e8      	b.n	8007a60 <_strtol_l.constprop.0+0x6c>
 8007a8e:	2c2b      	cmp	r4, #43	; 0x2b
 8007a90:	bf04      	itt	eq
 8007a92:	782c      	ldrbeq	r4, [r5, #0]
 8007a94:	1cb5      	addeq	r5, r6, #2
 8007a96:	e7ca      	b.n	8007a2e <_strtol_l.constprop.0+0x3a>
 8007a98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007a9c:	f1be 0f19 	cmp.w	lr, #25
 8007aa0:	d801      	bhi.n	8007aa6 <_strtol_l.constprop.0+0xb2>
 8007aa2:	3c37      	subs	r4, #55	; 0x37
 8007aa4:	e7e2      	b.n	8007a6c <_strtol_l.constprop.0+0x78>
 8007aa6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007aaa:	f1be 0f19 	cmp.w	lr, #25
 8007aae:	d804      	bhi.n	8007aba <_strtol_l.constprop.0+0xc6>
 8007ab0:	3c57      	subs	r4, #87	; 0x57
 8007ab2:	e7db      	b.n	8007a6c <_strtol_l.constprop.0+0x78>
 8007ab4:	f04f 3cff 	mov.w	ip, #4294967295
 8007ab8:	e7e6      	b.n	8007a88 <_strtol_l.constprop.0+0x94>
 8007aba:	f1bc 0f00 	cmp.w	ip, #0
 8007abe:	da05      	bge.n	8007acc <_strtol_l.constprop.0+0xd8>
 8007ac0:	2322      	movs	r3, #34	; 0x22
 8007ac2:	6003      	str	r3, [r0, #0]
 8007ac4:	4646      	mov	r6, r8
 8007ac6:	b942      	cbnz	r2, 8007ada <_strtol_l.constprop.0+0xe6>
 8007ac8:	4630      	mov	r0, r6
 8007aca:	e79e      	b.n	8007a0a <_strtol_l.constprop.0+0x16>
 8007acc:	b107      	cbz	r7, 8007ad0 <_strtol_l.constprop.0+0xdc>
 8007ace:	4276      	negs	r6, r6
 8007ad0:	2a00      	cmp	r2, #0
 8007ad2:	d0f9      	beq.n	8007ac8 <_strtol_l.constprop.0+0xd4>
 8007ad4:	f1bc 0f00 	cmp.w	ip, #0
 8007ad8:	d000      	beq.n	8007adc <_strtol_l.constprop.0+0xe8>
 8007ada:	1e69      	subs	r1, r5, #1
 8007adc:	6011      	str	r1, [r2, #0]
 8007ade:	e7f3      	b.n	8007ac8 <_strtol_l.constprop.0+0xd4>
 8007ae0:	2430      	movs	r4, #48	; 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1b1      	bne.n	8007a4a <_strtol_l.constprop.0+0x56>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	e7af      	b.n	8007a4a <_strtol_l.constprop.0+0x56>
 8007aea:	2c30      	cmp	r4, #48	; 0x30
 8007aec:	d0a5      	beq.n	8007a3a <_strtol_l.constprop.0+0x46>
 8007aee:	230a      	movs	r3, #10
 8007af0:	e7ab      	b.n	8007a4a <_strtol_l.constprop.0+0x56>
 8007af2:	bf00      	nop
 8007af4:	08008d3d 	.word	0x08008d3d

08007af8 <strtol>:
 8007af8:	4613      	mov	r3, r2
 8007afa:	460a      	mov	r2, r1
 8007afc:	4601      	mov	r1, r0
 8007afe:	4802      	ldr	r0, [pc, #8]	; (8007b08 <strtol+0x10>)
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f7ff bf77 	b.w	80079f4 <_strtol_l.constprop.0>
 8007b06:	bf00      	nop
 8007b08:	2000000c 	.word	0x2000000c

08007b0c <__assert_func>:
 8007b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <__assert_func+0x2c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4605      	mov	r5, r0
 8007b18:	68d8      	ldr	r0, [r3, #12]
 8007b1a:	b14c      	cbz	r4, 8007b30 <__assert_func+0x24>
 8007b1c:	4b07      	ldr	r3, [pc, #28]	; (8007b3c <__assert_func+0x30>)
 8007b1e:	9100      	str	r1, [sp, #0]
 8007b20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b24:	4906      	ldr	r1, [pc, #24]	; (8007b40 <__assert_func+0x34>)
 8007b26:	462b      	mov	r3, r5
 8007b28:	f000 f80e 	bl	8007b48 <fiprintf>
 8007b2c:	f000 fcc4 	bl	80084b8 <abort>
 8007b30:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <__assert_func+0x38>)
 8007b32:	461c      	mov	r4, r3
 8007b34:	e7f3      	b.n	8007b1e <__assert_func+0x12>
 8007b36:	bf00      	nop
 8007b38:	2000000c 	.word	0x2000000c
 8007b3c:	08008d00 	.word	0x08008d00
 8007b40:	08008d0d 	.word	0x08008d0d
 8007b44:	08008d3b 	.word	0x08008d3b

08007b48 <fiprintf>:
 8007b48:	b40e      	push	{r1, r2, r3}
 8007b4a:	b503      	push	{r0, r1, lr}
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	ab03      	add	r3, sp, #12
 8007b50:	4805      	ldr	r0, [pc, #20]	; (8007b68 <fiprintf+0x20>)
 8007b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b56:	6800      	ldr	r0, [r0, #0]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	f000 f919 	bl	8007d90 <_vfiprintf_r>
 8007b5e:	b002      	add	sp, #8
 8007b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b64:	b003      	add	sp, #12
 8007b66:	4770      	bx	lr
 8007b68:	2000000c 	.word	0x2000000c

08007b6c <malloc>:
 8007b6c:	4b02      	ldr	r3, [pc, #8]	; (8007b78 <malloc+0xc>)
 8007b6e:	4601      	mov	r1, r0
 8007b70:	6818      	ldr	r0, [r3, #0]
 8007b72:	f000 b86f 	b.w	8007c54 <_malloc_r>
 8007b76:	bf00      	nop
 8007b78:	2000000c 	.word	0x2000000c

08007b7c <_free_r>:
 8007b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d044      	beq.n	8007c0c <_free_r+0x90>
 8007b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b86:	9001      	str	r0, [sp, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b8e:	bfb8      	it	lt
 8007b90:	18e4      	addlt	r4, r4, r3
 8007b92:	f000 feb9 	bl	8008908 <__malloc_lock>
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <_free_r+0x94>)
 8007b98:	9801      	ldr	r0, [sp, #4]
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	b933      	cbnz	r3, 8007bac <_free_r+0x30>
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	6014      	str	r4, [r2, #0]
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba8:	f000 beb4 	b.w	8008914 <__malloc_unlock>
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d908      	bls.n	8007bc2 <_free_r+0x46>
 8007bb0:	6825      	ldr	r5, [r4, #0]
 8007bb2:	1961      	adds	r1, r4, r5
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf01      	itttt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	1949      	addeq	r1, r1, r5
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	e7ed      	b.n	8007b9e <_free_r+0x22>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x50>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x46>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1855      	adds	r5, r2, r1
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x70>
 8007bd4:	6824      	ldr	r4, [r4, #0]
 8007bd6:	4421      	add	r1, r4
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1e0      	bne.n	8007ba2 <_free_r+0x26>
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	4421      	add	r1, r4
 8007be8:	6011      	str	r1, [r2, #0]
 8007bea:	e7da      	b.n	8007ba2 <_free_r+0x26>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x78>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	e7d6      	b.n	8007ba2 <_free_r+0x26>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7ca      	b.n	8007ba2 <_free_r+0x26>
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	20000ad4 	.word	0x20000ad4

08007c14 <sbrk_aligned>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4e0e      	ldr	r6, [pc, #56]	; (8007c50 <sbrk_aligned+0x3c>)
 8007c18:	460c      	mov	r4, r1
 8007c1a:	6831      	ldr	r1, [r6, #0]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b911      	cbnz	r1, 8007c26 <sbrk_aligned+0x12>
 8007c20:	f000 fb7a 	bl	8008318 <_sbrk_r>
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fb75 	bl	8008318 <_sbrk_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	d00a      	beq.n	8007c48 <sbrk_aligned+0x34>
 8007c32:	1cc4      	adds	r4, r0, #3
 8007c34:	f024 0403 	bic.w	r4, r4, #3
 8007c38:	42a0      	cmp	r0, r4
 8007c3a:	d007      	beq.n	8007c4c <sbrk_aligned+0x38>
 8007c3c:	1a21      	subs	r1, r4, r0
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 fb6a 	bl	8008318 <_sbrk_r>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d101      	bne.n	8007c4c <sbrk_aligned+0x38>
 8007c48:	f04f 34ff 	mov.w	r4, #4294967295
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	20000ad8 	.word	0x20000ad8

08007c54 <_malloc_r>:
 8007c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c58:	1ccd      	adds	r5, r1, #3
 8007c5a:	f025 0503 	bic.w	r5, r5, #3
 8007c5e:	3508      	adds	r5, #8
 8007c60:	2d0c      	cmp	r5, #12
 8007c62:	bf38      	it	cc
 8007c64:	250c      	movcc	r5, #12
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	4607      	mov	r7, r0
 8007c6a:	db01      	blt.n	8007c70 <_malloc_r+0x1c>
 8007c6c:	42a9      	cmp	r1, r5
 8007c6e:	d905      	bls.n	8007c7c <_malloc_r+0x28>
 8007c70:	230c      	movs	r3, #12
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	2600      	movs	r6, #0
 8007c76:	4630      	mov	r0, r6
 8007c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c7c:	4e2e      	ldr	r6, [pc, #184]	; (8007d38 <_malloc_r+0xe4>)
 8007c7e:	f000 fe43 	bl	8008908 <__malloc_lock>
 8007c82:	6833      	ldr	r3, [r6, #0]
 8007c84:	461c      	mov	r4, r3
 8007c86:	bb34      	cbnz	r4, 8007cd6 <_malloc_r+0x82>
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ffc2 	bl	8007c14 <sbrk_aligned>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	4604      	mov	r4, r0
 8007c94:	d14d      	bne.n	8007d32 <_malloc_r+0xde>
 8007c96:	6834      	ldr	r4, [r6, #0]
 8007c98:	4626      	mov	r6, r4
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	d140      	bne.n	8007d20 <_malloc_r+0xcc>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4638      	mov	r0, r7
 8007ca4:	eb04 0803 	add.w	r8, r4, r3
 8007ca8:	f000 fb36 	bl	8008318 <_sbrk_r>
 8007cac:	4580      	cmp	r8, r0
 8007cae:	d13a      	bne.n	8007d26 <_malloc_r+0xd2>
 8007cb0:	6821      	ldr	r1, [r4, #0]
 8007cb2:	3503      	adds	r5, #3
 8007cb4:	1a6d      	subs	r5, r5, r1
 8007cb6:	f025 0503 	bic.w	r5, r5, #3
 8007cba:	3508      	adds	r5, #8
 8007cbc:	2d0c      	cmp	r5, #12
 8007cbe:	bf38      	it	cc
 8007cc0:	250c      	movcc	r5, #12
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ffa5 	bl	8007c14 <sbrk_aligned>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d02b      	beq.n	8007d26 <_malloc_r+0xd2>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	442b      	add	r3, r5
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	e00e      	b.n	8007cf4 <_malloc_r+0xa0>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	1b52      	subs	r2, r2, r5
 8007cda:	d41e      	bmi.n	8007d1a <_malloc_r+0xc6>
 8007cdc:	2a0b      	cmp	r2, #11
 8007cde:	d916      	bls.n	8007d0e <_malloc_r+0xba>
 8007ce0:	1961      	adds	r1, r4, r5
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	6025      	str	r5, [r4, #0]
 8007ce6:	bf18      	it	ne
 8007ce8:	6059      	strne	r1, [r3, #4]
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	bf08      	it	eq
 8007cee:	6031      	streq	r1, [r6, #0]
 8007cf0:	5162      	str	r2, [r4, r5]
 8007cf2:	604b      	str	r3, [r1, #4]
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f104 060b 	add.w	r6, r4, #11
 8007cfa:	f000 fe0b 	bl	8008914 <__malloc_unlock>
 8007cfe:	f026 0607 	bic.w	r6, r6, #7
 8007d02:	1d23      	adds	r3, r4, #4
 8007d04:	1af2      	subs	r2, r6, r3
 8007d06:	d0b6      	beq.n	8007c76 <_malloc_r+0x22>
 8007d08:	1b9b      	subs	r3, r3, r6
 8007d0a:	50a3      	str	r3, [r4, r2]
 8007d0c:	e7b3      	b.n	8007c76 <_malloc_r+0x22>
 8007d0e:	6862      	ldr	r2, [r4, #4]
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	bf0c      	ite	eq
 8007d14:	6032      	streq	r2, [r6, #0]
 8007d16:	605a      	strne	r2, [r3, #4]
 8007d18:	e7ec      	b.n	8007cf4 <_malloc_r+0xa0>
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	6864      	ldr	r4, [r4, #4]
 8007d1e:	e7b2      	b.n	8007c86 <_malloc_r+0x32>
 8007d20:	4634      	mov	r4, r6
 8007d22:	6876      	ldr	r6, [r6, #4]
 8007d24:	e7b9      	b.n	8007c9a <_malloc_r+0x46>
 8007d26:	230c      	movs	r3, #12
 8007d28:	603b      	str	r3, [r7, #0]
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f000 fdf2 	bl	8008914 <__malloc_unlock>
 8007d30:	e7a1      	b.n	8007c76 <_malloc_r+0x22>
 8007d32:	6025      	str	r5, [r4, #0]
 8007d34:	e7de      	b.n	8007cf4 <_malloc_r+0xa0>
 8007d36:	bf00      	nop
 8007d38:	20000ad4 	.word	0x20000ad4

08007d3c <__sfputc_r>:
 8007d3c:	6893      	ldr	r3, [r2, #8]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	b410      	push	{r4}
 8007d44:	6093      	str	r3, [r2, #8]
 8007d46:	da08      	bge.n	8007d5a <__sfputc_r+0x1e>
 8007d48:	6994      	ldr	r4, [r2, #24]
 8007d4a:	42a3      	cmp	r3, r4
 8007d4c:	db01      	blt.n	8007d52 <__sfputc_r+0x16>
 8007d4e:	290a      	cmp	r1, #10
 8007d50:	d103      	bne.n	8007d5a <__sfputc_r+0x1e>
 8007d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d56:	f000 baef 	b.w	8008338 <__swbuf_r>
 8007d5a:	6813      	ldr	r3, [r2, #0]
 8007d5c:	1c58      	adds	r0, r3, #1
 8007d5e:	6010      	str	r0, [r2, #0]
 8007d60:	7019      	strb	r1, [r3, #0]
 8007d62:	4608      	mov	r0, r1
 8007d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <__sfputs_r>:
 8007d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	460f      	mov	r7, r1
 8007d70:	4614      	mov	r4, r2
 8007d72:	18d5      	adds	r5, r2, r3
 8007d74:	42ac      	cmp	r4, r5
 8007d76:	d101      	bne.n	8007d7c <__sfputs_r+0x12>
 8007d78:	2000      	movs	r0, #0
 8007d7a:	e007      	b.n	8007d8c <__sfputs_r+0x22>
 8007d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d80:	463a      	mov	r2, r7
 8007d82:	4630      	mov	r0, r6
 8007d84:	f7ff ffda 	bl	8007d3c <__sfputc_r>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d1f3      	bne.n	8007d74 <__sfputs_r+0xa>
 8007d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d90 <_vfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	460d      	mov	r5, r1
 8007d96:	b09d      	sub	sp, #116	; 0x74
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	b118      	cbz	r0, 8007da8 <_vfiprintf_r+0x18>
 8007da0:	6983      	ldr	r3, [r0, #24]
 8007da2:	b90b      	cbnz	r3, 8007da8 <_vfiprintf_r+0x18>
 8007da4:	f000 fcaa 	bl	80086fc <__sinit>
 8007da8:	4b89      	ldr	r3, [pc, #548]	; (8007fd0 <_vfiprintf_r+0x240>)
 8007daa:	429d      	cmp	r5, r3
 8007dac:	d11b      	bne.n	8007de6 <_vfiprintf_r+0x56>
 8007dae:	6875      	ldr	r5, [r6, #4]
 8007db0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d405      	bmi.n	8007dc2 <_vfiprintf_r+0x32>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	059a      	lsls	r2, r3, #22
 8007dba:	d402      	bmi.n	8007dc2 <_vfiprintf_r+0x32>
 8007dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbe:	f000 fd3b 	bl	8008838 <__retarget_lock_acquire_recursive>
 8007dc2:	89ab      	ldrh	r3, [r5, #12]
 8007dc4:	071b      	lsls	r3, r3, #28
 8007dc6:	d501      	bpl.n	8007dcc <_vfiprintf_r+0x3c>
 8007dc8:	692b      	ldr	r3, [r5, #16]
 8007dca:	b9eb      	cbnz	r3, 8007e08 <_vfiprintf_r+0x78>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fb04 	bl	80083dc <__swsetup_r>
 8007dd4:	b1c0      	cbz	r0, 8007e08 <_vfiprintf_r+0x78>
 8007dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd8:	07dc      	lsls	r4, r3, #31
 8007dda:	d50e      	bpl.n	8007dfa <_vfiprintf_r+0x6a>
 8007ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8007de0:	b01d      	add	sp, #116	; 0x74
 8007de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de6:	4b7b      	ldr	r3, [pc, #492]	; (8007fd4 <_vfiprintf_r+0x244>)
 8007de8:	429d      	cmp	r5, r3
 8007dea:	d101      	bne.n	8007df0 <_vfiprintf_r+0x60>
 8007dec:	68b5      	ldr	r5, [r6, #8]
 8007dee:	e7df      	b.n	8007db0 <_vfiprintf_r+0x20>
 8007df0:	4b79      	ldr	r3, [pc, #484]	; (8007fd8 <_vfiprintf_r+0x248>)
 8007df2:	429d      	cmp	r5, r3
 8007df4:	bf08      	it	eq
 8007df6:	68f5      	ldreq	r5, [r6, #12]
 8007df8:	e7da      	b.n	8007db0 <_vfiprintf_r+0x20>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	0598      	lsls	r0, r3, #22
 8007dfe:	d4ed      	bmi.n	8007ddc <_vfiprintf_r+0x4c>
 8007e00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e02:	f000 fd1a 	bl	800883a <__retarget_lock_release_recursive>
 8007e06:	e7e9      	b.n	8007ddc <_vfiprintf_r+0x4c>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e16:	2330      	movs	r3, #48	; 0x30
 8007e18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fdc <_vfiprintf_r+0x24c>
 8007e1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e20:	f04f 0901 	mov.w	r9, #1
 8007e24:	4623      	mov	r3, r4
 8007e26:	469a      	mov	sl, r3
 8007e28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e2c:	b10a      	cbz	r2, 8007e32 <_vfiprintf_r+0xa2>
 8007e2e:	2a25      	cmp	r2, #37	; 0x25
 8007e30:	d1f9      	bne.n	8007e26 <_vfiprintf_r+0x96>
 8007e32:	ebba 0b04 	subs.w	fp, sl, r4
 8007e36:	d00b      	beq.n	8007e50 <_vfiprintf_r+0xc0>
 8007e38:	465b      	mov	r3, fp
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f7ff ff93 	bl	8007d6a <__sfputs_r>
 8007e44:	3001      	adds	r0, #1
 8007e46:	f000 80aa 	beq.w	8007f9e <_vfiprintf_r+0x20e>
 8007e4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e4c:	445a      	add	r2, fp
 8007e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007e50:	f89a 3000 	ldrb.w	r3, [sl]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80a2 	beq.w	8007f9e <_vfiprintf_r+0x20e>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e64:	f10a 0a01 	add.w	sl, sl, #1
 8007e68:	9304      	str	r3, [sp, #16]
 8007e6a:	9307      	str	r3, [sp, #28]
 8007e6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e70:	931a      	str	r3, [sp, #104]	; 0x68
 8007e72:	4654      	mov	r4, sl
 8007e74:	2205      	movs	r2, #5
 8007e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e7a:	4858      	ldr	r0, [pc, #352]	; (8007fdc <_vfiprintf_r+0x24c>)
 8007e7c:	f7f8 f9b0 	bl	80001e0 <memchr>
 8007e80:	9a04      	ldr	r2, [sp, #16]
 8007e82:	b9d8      	cbnz	r0, 8007ebc <_vfiprintf_r+0x12c>
 8007e84:	06d1      	lsls	r1, r2, #27
 8007e86:	bf44      	itt	mi
 8007e88:	2320      	movmi	r3, #32
 8007e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e8e:	0713      	lsls	r3, r2, #28
 8007e90:	bf44      	itt	mi
 8007e92:	232b      	movmi	r3, #43	; 0x2b
 8007e94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e98:	f89a 3000 	ldrb.w	r3, [sl]
 8007e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007e9e:	d015      	beq.n	8007ecc <_vfiprintf_r+0x13c>
 8007ea0:	9a07      	ldr	r2, [sp, #28]
 8007ea2:	4654      	mov	r4, sl
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	f04f 0c0a 	mov.w	ip, #10
 8007eaa:	4621      	mov	r1, r4
 8007eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb0:	3b30      	subs	r3, #48	; 0x30
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d94e      	bls.n	8007f54 <_vfiprintf_r+0x1c4>
 8007eb6:	b1b0      	cbz	r0, 8007ee6 <_vfiprintf_r+0x156>
 8007eb8:	9207      	str	r2, [sp, #28]
 8007eba:	e014      	b.n	8007ee6 <_vfiprintf_r+0x156>
 8007ebc:	eba0 0308 	sub.w	r3, r0, r8
 8007ec0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	46a2      	mov	sl, r4
 8007eca:	e7d2      	b.n	8007e72 <_vfiprintf_r+0xe2>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	1d19      	adds	r1, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	9103      	str	r1, [sp, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bfbb      	ittet	lt
 8007ed8:	425b      	neglt	r3, r3
 8007eda:	f042 0202 	orrlt.w	r2, r2, #2
 8007ede:	9307      	strge	r3, [sp, #28]
 8007ee0:	9307      	strlt	r3, [sp, #28]
 8007ee2:	bfb8      	it	lt
 8007ee4:	9204      	strlt	r2, [sp, #16]
 8007ee6:	7823      	ldrb	r3, [r4, #0]
 8007ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eea:	d10c      	bne.n	8007f06 <_vfiprintf_r+0x176>
 8007eec:	7863      	ldrb	r3, [r4, #1]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d135      	bne.n	8007f5e <_vfiprintf_r+0x1ce>
 8007ef2:	9b03      	ldr	r3, [sp, #12]
 8007ef4:	1d1a      	adds	r2, r3, #4
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	9203      	str	r2, [sp, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bfb8      	it	lt
 8007efe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f02:	3402      	adds	r4, #2
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fec <_vfiprintf_r+0x25c>
 8007f0a:	7821      	ldrb	r1, [r4, #0]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	4650      	mov	r0, sl
 8007f10:	f7f8 f966 	bl	80001e0 <memchr>
 8007f14:	b140      	cbz	r0, 8007f28 <_vfiprintf_r+0x198>
 8007f16:	2340      	movs	r3, #64	; 0x40
 8007f18:	eba0 000a 	sub.w	r0, r0, sl
 8007f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8007f20:	9b04      	ldr	r3, [sp, #16]
 8007f22:	4303      	orrs	r3, r0
 8007f24:	3401      	adds	r4, #1
 8007f26:	9304      	str	r3, [sp, #16]
 8007f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2c:	482c      	ldr	r0, [pc, #176]	; (8007fe0 <_vfiprintf_r+0x250>)
 8007f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f32:	2206      	movs	r2, #6
 8007f34:	f7f8 f954 	bl	80001e0 <memchr>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d03f      	beq.n	8007fbc <_vfiprintf_r+0x22c>
 8007f3c:	4b29      	ldr	r3, [pc, #164]	; (8007fe4 <_vfiprintf_r+0x254>)
 8007f3e:	bb1b      	cbnz	r3, 8007f88 <_vfiprintf_r+0x1f8>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	3307      	adds	r3, #7
 8007f44:	f023 0307 	bic.w	r3, r3, #7
 8007f48:	3308      	adds	r3, #8
 8007f4a:	9303      	str	r3, [sp, #12]
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	443b      	add	r3, r7
 8007f50:	9309      	str	r3, [sp, #36]	; 0x24
 8007f52:	e767      	b.n	8007e24 <_vfiprintf_r+0x94>
 8007f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f58:	460c      	mov	r4, r1
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	e7a5      	b.n	8007eaa <_vfiprintf_r+0x11a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	3401      	adds	r4, #1
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	4619      	mov	r1, r3
 8007f66:	f04f 0c0a 	mov.w	ip, #10
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f70:	3a30      	subs	r2, #48	; 0x30
 8007f72:	2a09      	cmp	r2, #9
 8007f74:	d903      	bls.n	8007f7e <_vfiprintf_r+0x1ee>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c5      	beq.n	8007f06 <_vfiprintf_r+0x176>
 8007f7a:	9105      	str	r1, [sp, #20]
 8007f7c:	e7c3      	b.n	8007f06 <_vfiprintf_r+0x176>
 8007f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f82:	4604      	mov	r4, r0
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7f0      	b.n	8007f6a <_vfiprintf_r+0x1da>
 8007f88:	ab03      	add	r3, sp, #12
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	4b16      	ldr	r3, [pc, #88]	; (8007fe8 <_vfiprintf_r+0x258>)
 8007f90:	a904      	add	r1, sp, #16
 8007f92:	4630      	mov	r0, r6
 8007f94:	f3af 8000 	nop.w
 8007f98:	4607      	mov	r7, r0
 8007f9a:	1c78      	adds	r0, r7, #1
 8007f9c:	d1d6      	bne.n	8007f4c <_vfiprintf_r+0x1bc>
 8007f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa0:	07d9      	lsls	r1, r3, #31
 8007fa2:	d405      	bmi.n	8007fb0 <_vfiprintf_r+0x220>
 8007fa4:	89ab      	ldrh	r3, [r5, #12]
 8007fa6:	059a      	lsls	r2, r3, #22
 8007fa8:	d402      	bmi.n	8007fb0 <_vfiprintf_r+0x220>
 8007faa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fac:	f000 fc45 	bl	800883a <__retarget_lock_release_recursive>
 8007fb0:	89ab      	ldrh	r3, [r5, #12]
 8007fb2:	065b      	lsls	r3, r3, #25
 8007fb4:	f53f af12 	bmi.w	8007ddc <_vfiprintf_r+0x4c>
 8007fb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fba:	e711      	b.n	8007de0 <_vfiprintf_r+0x50>
 8007fbc:	ab03      	add	r3, sp, #12
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	462a      	mov	r2, r5
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <_vfiprintf_r+0x258>)
 8007fc4:	a904      	add	r1, sp, #16
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f000 f880 	bl	80080cc <_printf_i>
 8007fcc:	e7e4      	b.n	8007f98 <_vfiprintf_r+0x208>
 8007fce:	bf00      	nop
 8007fd0:	08008e90 	.word	0x08008e90
 8007fd4:	08008eb0 	.word	0x08008eb0
 8007fd8:	08008e70 	.word	0x08008e70
 8007fdc:	08008e3d 	.word	0x08008e3d
 8007fe0:	08008e47 	.word	0x08008e47
 8007fe4:	00000000 	.word	0x00000000
 8007fe8:	08007d6b 	.word	0x08007d6b
 8007fec:	08008e43 	.word	0x08008e43

08007ff0 <_printf_common>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	4616      	mov	r6, r2
 8007ff6:	4699      	mov	r9, r3
 8007ff8:	688a      	ldr	r2, [r1, #8]
 8007ffa:	690b      	ldr	r3, [r1, #16]
 8007ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008000:	4293      	cmp	r3, r2
 8008002:	bfb8      	it	lt
 8008004:	4613      	movlt	r3, r2
 8008006:	6033      	str	r3, [r6, #0]
 8008008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800800c:	4607      	mov	r7, r0
 800800e:	460c      	mov	r4, r1
 8008010:	b10a      	cbz	r2, 8008016 <_printf_common+0x26>
 8008012:	3301      	adds	r3, #1
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	0699      	lsls	r1, r3, #26
 800801a:	bf42      	ittt	mi
 800801c:	6833      	ldrmi	r3, [r6, #0]
 800801e:	3302      	addmi	r3, #2
 8008020:	6033      	strmi	r3, [r6, #0]
 8008022:	6825      	ldr	r5, [r4, #0]
 8008024:	f015 0506 	ands.w	r5, r5, #6
 8008028:	d106      	bne.n	8008038 <_printf_common+0x48>
 800802a:	f104 0a19 	add.w	sl, r4, #25
 800802e:	68e3      	ldr	r3, [r4, #12]
 8008030:	6832      	ldr	r2, [r6, #0]
 8008032:	1a9b      	subs	r3, r3, r2
 8008034:	42ab      	cmp	r3, r5
 8008036:	dc26      	bgt.n	8008086 <_printf_common+0x96>
 8008038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800803c:	1e13      	subs	r3, r2, #0
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	bf18      	it	ne
 8008042:	2301      	movne	r3, #1
 8008044:	0692      	lsls	r2, r2, #26
 8008046:	d42b      	bmi.n	80080a0 <_printf_common+0xb0>
 8008048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800804c:	4649      	mov	r1, r9
 800804e:	4638      	mov	r0, r7
 8008050:	47c0      	blx	r8
 8008052:	3001      	adds	r0, #1
 8008054:	d01e      	beq.n	8008094 <_printf_common+0xa4>
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	68e5      	ldr	r5, [r4, #12]
 800805a:	6832      	ldr	r2, [r6, #0]
 800805c:	f003 0306 	and.w	r3, r3, #6
 8008060:	2b04      	cmp	r3, #4
 8008062:	bf08      	it	eq
 8008064:	1aad      	subeq	r5, r5, r2
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	bf0c      	ite	eq
 800806c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008070:	2500      	movne	r5, #0
 8008072:	4293      	cmp	r3, r2
 8008074:	bfc4      	itt	gt
 8008076:	1a9b      	subgt	r3, r3, r2
 8008078:	18ed      	addgt	r5, r5, r3
 800807a:	2600      	movs	r6, #0
 800807c:	341a      	adds	r4, #26
 800807e:	42b5      	cmp	r5, r6
 8008080:	d11a      	bne.n	80080b8 <_printf_common+0xc8>
 8008082:	2000      	movs	r0, #0
 8008084:	e008      	b.n	8008098 <_printf_common+0xa8>
 8008086:	2301      	movs	r3, #1
 8008088:	4652      	mov	r2, sl
 800808a:	4649      	mov	r1, r9
 800808c:	4638      	mov	r0, r7
 800808e:	47c0      	blx	r8
 8008090:	3001      	adds	r0, #1
 8008092:	d103      	bne.n	800809c <_printf_common+0xac>
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809c:	3501      	adds	r5, #1
 800809e:	e7c6      	b.n	800802e <_printf_common+0x3e>
 80080a0:	18e1      	adds	r1, r4, r3
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	2030      	movs	r0, #48	; 0x30
 80080a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080aa:	4422      	add	r2, r4
 80080ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080b4:	3302      	adds	r3, #2
 80080b6:	e7c7      	b.n	8008048 <_printf_common+0x58>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4622      	mov	r2, r4
 80080bc:	4649      	mov	r1, r9
 80080be:	4638      	mov	r0, r7
 80080c0:	47c0      	blx	r8
 80080c2:	3001      	adds	r0, #1
 80080c4:	d0e6      	beq.n	8008094 <_printf_common+0xa4>
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7d9      	b.n	800807e <_printf_common+0x8e>
	...

080080cc <_printf_i>:
 80080cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	7e0f      	ldrb	r7, [r1, #24]
 80080d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080d4:	2f78      	cmp	r7, #120	; 0x78
 80080d6:	4691      	mov	r9, r2
 80080d8:	4680      	mov	r8, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	469a      	mov	sl, r3
 80080de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80080e2:	d807      	bhi.n	80080f4 <_printf_i+0x28>
 80080e4:	2f62      	cmp	r7, #98	; 0x62
 80080e6:	d80a      	bhi.n	80080fe <_printf_i+0x32>
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	f000 80d8 	beq.w	800829e <_printf_i+0x1d2>
 80080ee:	2f58      	cmp	r7, #88	; 0x58
 80080f0:	f000 80a3 	beq.w	800823a <_printf_i+0x16e>
 80080f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80080fc:	e03a      	b.n	8008174 <_printf_i+0xa8>
 80080fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008102:	2b15      	cmp	r3, #21
 8008104:	d8f6      	bhi.n	80080f4 <_printf_i+0x28>
 8008106:	a101      	add	r1, pc, #4	; (adr r1, 800810c <_printf_i+0x40>)
 8008108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800810c:	08008165 	.word	0x08008165
 8008110:	08008179 	.word	0x08008179
 8008114:	080080f5 	.word	0x080080f5
 8008118:	080080f5 	.word	0x080080f5
 800811c:	080080f5 	.word	0x080080f5
 8008120:	080080f5 	.word	0x080080f5
 8008124:	08008179 	.word	0x08008179
 8008128:	080080f5 	.word	0x080080f5
 800812c:	080080f5 	.word	0x080080f5
 8008130:	080080f5 	.word	0x080080f5
 8008134:	080080f5 	.word	0x080080f5
 8008138:	08008285 	.word	0x08008285
 800813c:	080081a9 	.word	0x080081a9
 8008140:	08008267 	.word	0x08008267
 8008144:	080080f5 	.word	0x080080f5
 8008148:	080080f5 	.word	0x080080f5
 800814c:	080082a7 	.word	0x080082a7
 8008150:	080080f5 	.word	0x080080f5
 8008154:	080081a9 	.word	0x080081a9
 8008158:	080080f5 	.word	0x080080f5
 800815c:	080080f5 	.word	0x080080f5
 8008160:	0800826f 	.word	0x0800826f
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	602a      	str	r2, [r5, #0]
 800816c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008174:	2301      	movs	r3, #1
 8008176:	e0a3      	b.n	80082c0 <_printf_i+0x1f4>
 8008178:	6820      	ldr	r0, [r4, #0]
 800817a:	6829      	ldr	r1, [r5, #0]
 800817c:	0606      	lsls	r6, r0, #24
 800817e:	f101 0304 	add.w	r3, r1, #4
 8008182:	d50a      	bpl.n	800819a <_printf_i+0xce>
 8008184:	680e      	ldr	r6, [r1, #0]
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	2e00      	cmp	r6, #0
 800818a:	da03      	bge.n	8008194 <_printf_i+0xc8>
 800818c:	232d      	movs	r3, #45	; 0x2d
 800818e:	4276      	negs	r6, r6
 8008190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008194:	485e      	ldr	r0, [pc, #376]	; (8008310 <_printf_i+0x244>)
 8008196:	230a      	movs	r3, #10
 8008198:	e019      	b.n	80081ce <_printf_i+0x102>
 800819a:	680e      	ldr	r6, [r1, #0]
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081a2:	bf18      	it	ne
 80081a4:	b236      	sxthne	r6, r6
 80081a6:	e7ef      	b.n	8008188 <_printf_i+0xbc>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	6820      	ldr	r0, [r4, #0]
 80081ac:	1d19      	adds	r1, r3, #4
 80081ae:	6029      	str	r1, [r5, #0]
 80081b0:	0601      	lsls	r1, r0, #24
 80081b2:	d501      	bpl.n	80081b8 <_printf_i+0xec>
 80081b4:	681e      	ldr	r6, [r3, #0]
 80081b6:	e002      	b.n	80081be <_printf_i+0xf2>
 80081b8:	0646      	lsls	r6, r0, #25
 80081ba:	d5fb      	bpl.n	80081b4 <_printf_i+0xe8>
 80081bc:	881e      	ldrh	r6, [r3, #0]
 80081be:	4854      	ldr	r0, [pc, #336]	; (8008310 <_printf_i+0x244>)
 80081c0:	2f6f      	cmp	r7, #111	; 0x6f
 80081c2:	bf0c      	ite	eq
 80081c4:	2308      	moveq	r3, #8
 80081c6:	230a      	movne	r3, #10
 80081c8:	2100      	movs	r1, #0
 80081ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081ce:	6865      	ldr	r5, [r4, #4]
 80081d0:	60a5      	str	r5, [r4, #8]
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	bfa2      	ittt	ge
 80081d6:	6821      	ldrge	r1, [r4, #0]
 80081d8:	f021 0104 	bicge.w	r1, r1, #4
 80081dc:	6021      	strge	r1, [r4, #0]
 80081de:	b90e      	cbnz	r6, 80081e4 <_printf_i+0x118>
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	d04d      	beq.n	8008280 <_printf_i+0x1b4>
 80081e4:	4615      	mov	r5, r2
 80081e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80081ea:	fb03 6711 	mls	r7, r3, r1, r6
 80081ee:	5dc7      	ldrb	r7, [r0, r7]
 80081f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80081f4:	4637      	mov	r7, r6
 80081f6:	42bb      	cmp	r3, r7
 80081f8:	460e      	mov	r6, r1
 80081fa:	d9f4      	bls.n	80081e6 <_printf_i+0x11a>
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d10b      	bne.n	8008218 <_printf_i+0x14c>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	07de      	lsls	r6, r3, #31
 8008204:	d508      	bpl.n	8008218 <_printf_i+0x14c>
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	6861      	ldr	r1, [r4, #4]
 800820a:	4299      	cmp	r1, r3
 800820c:	bfde      	ittt	le
 800820e:	2330      	movle	r3, #48	; 0x30
 8008210:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008214:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008218:	1b52      	subs	r2, r2, r5
 800821a:	6122      	str	r2, [r4, #16]
 800821c:	f8cd a000 	str.w	sl, [sp]
 8008220:	464b      	mov	r3, r9
 8008222:	aa03      	add	r2, sp, #12
 8008224:	4621      	mov	r1, r4
 8008226:	4640      	mov	r0, r8
 8008228:	f7ff fee2 	bl	8007ff0 <_printf_common>
 800822c:	3001      	adds	r0, #1
 800822e:	d14c      	bne.n	80082ca <_printf_i+0x1fe>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b004      	add	sp, #16
 8008236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800823a:	4835      	ldr	r0, [pc, #212]	; (8008310 <_printf_i+0x244>)
 800823c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008240:	6829      	ldr	r1, [r5, #0]
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	f851 6b04 	ldr.w	r6, [r1], #4
 8008248:	6029      	str	r1, [r5, #0]
 800824a:	061d      	lsls	r5, r3, #24
 800824c:	d514      	bpl.n	8008278 <_printf_i+0x1ac>
 800824e:	07df      	lsls	r7, r3, #31
 8008250:	bf44      	itt	mi
 8008252:	f043 0320 	orrmi.w	r3, r3, #32
 8008256:	6023      	strmi	r3, [r4, #0]
 8008258:	b91e      	cbnz	r6, 8008262 <_printf_i+0x196>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	f023 0320 	bic.w	r3, r3, #32
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	2310      	movs	r3, #16
 8008264:	e7b0      	b.n	80081c8 <_printf_i+0xfc>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	f043 0320 	orr.w	r3, r3, #32
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	2378      	movs	r3, #120	; 0x78
 8008270:	4828      	ldr	r0, [pc, #160]	; (8008314 <_printf_i+0x248>)
 8008272:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008276:	e7e3      	b.n	8008240 <_printf_i+0x174>
 8008278:	0659      	lsls	r1, r3, #25
 800827a:	bf48      	it	mi
 800827c:	b2b6      	uxthmi	r6, r6
 800827e:	e7e6      	b.n	800824e <_printf_i+0x182>
 8008280:	4615      	mov	r5, r2
 8008282:	e7bb      	b.n	80081fc <_printf_i+0x130>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	6826      	ldr	r6, [r4, #0]
 8008288:	6961      	ldr	r1, [r4, #20]
 800828a:	1d18      	adds	r0, r3, #4
 800828c:	6028      	str	r0, [r5, #0]
 800828e:	0635      	lsls	r5, r6, #24
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	d501      	bpl.n	8008298 <_printf_i+0x1cc>
 8008294:	6019      	str	r1, [r3, #0]
 8008296:	e002      	b.n	800829e <_printf_i+0x1d2>
 8008298:	0670      	lsls	r0, r6, #25
 800829a:	d5fb      	bpl.n	8008294 <_printf_i+0x1c8>
 800829c:	8019      	strh	r1, [r3, #0]
 800829e:	2300      	movs	r3, #0
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	4615      	mov	r5, r2
 80082a4:	e7ba      	b.n	800821c <_printf_i+0x150>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	602a      	str	r2, [r5, #0]
 80082ac:	681d      	ldr	r5, [r3, #0]
 80082ae:	6862      	ldr	r2, [r4, #4]
 80082b0:	2100      	movs	r1, #0
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7f7 ff94 	bl	80001e0 <memchr>
 80082b8:	b108      	cbz	r0, 80082be <_printf_i+0x1f2>
 80082ba:	1b40      	subs	r0, r0, r5
 80082bc:	6060      	str	r0, [r4, #4]
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	2300      	movs	r3, #0
 80082c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082c8:	e7a8      	b.n	800821c <_printf_i+0x150>
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	462a      	mov	r2, r5
 80082ce:	4649      	mov	r1, r9
 80082d0:	4640      	mov	r0, r8
 80082d2:	47d0      	blx	sl
 80082d4:	3001      	adds	r0, #1
 80082d6:	d0ab      	beq.n	8008230 <_printf_i+0x164>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	d413      	bmi.n	8008306 <_printf_i+0x23a>
 80082de:	68e0      	ldr	r0, [r4, #12]
 80082e0:	9b03      	ldr	r3, [sp, #12]
 80082e2:	4298      	cmp	r0, r3
 80082e4:	bfb8      	it	lt
 80082e6:	4618      	movlt	r0, r3
 80082e8:	e7a4      	b.n	8008234 <_printf_i+0x168>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4632      	mov	r2, r6
 80082ee:	4649      	mov	r1, r9
 80082f0:	4640      	mov	r0, r8
 80082f2:	47d0      	blx	sl
 80082f4:	3001      	adds	r0, #1
 80082f6:	d09b      	beq.n	8008230 <_printf_i+0x164>
 80082f8:	3501      	adds	r5, #1
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	9903      	ldr	r1, [sp, #12]
 80082fe:	1a5b      	subs	r3, r3, r1
 8008300:	42ab      	cmp	r3, r5
 8008302:	dcf2      	bgt.n	80082ea <_printf_i+0x21e>
 8008304:	e7eb      	b.n	80082de <_printf_i+0x212>
 8008306:	2500      	movs	r5, #0
 8008308:	f104 0619 	add.w	r6, r4, #25
 800830c:	e7f5      	b.n	80082fa <_printf_i+0x22e>
 800830e:	bf00      	nop
 8008310:	08008e4e 	.word	0x08008e4e
 8008314:	08008e5f 	.word	0x08008e5f

08008318 <_sbrk_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d06      	ldr	r5, [pc, #24]	; (8008334 <_sbrk_r+0x1c>)
 800831c:	2300      	movs	r3, #0
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	f7f9 fdd8 	bl	8001ed8 <_sbrk>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_sbrk_r+0x1a>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_sbrk_r+0x1a>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20000ae0 	.word	0x20000ae0

08008338 <__swbuf_r>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	460e      	mov	r6, r1
 800833c:	4614      	mov	r4, r2
 800833e:	4605      	mov	r5, r0
 8008340:	b118      	cbz	r0, 800834a <__swbuf_r+0x12>
 8008342:	6983      	ldr	r3, [r0, #24]
 8008344:	b90b      	cbnz	r3, 800834a <__swbuf_r+0x12>
 8008346:	f000 f9d9 	bl	80086fc <__sinit>
 800834a:	4b21      	ldr	r3, [pc, #132]	; (80083d0 <__swbuf_r+0x98>)
 800834c:	429c      	cmp	r4, r3
 800834e:	d12b      	bne.n	80083a8 <__swbuf_r+0x70>
 8008350:	686c      	ldr	r4, [r5, #4]
 8008352:	69a3      	ldr	r3, [r4, #24]
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	071a      	lsls	r2, r3, #28
 800835a:	d52f      	bpl.n	80083bc <__swbuf_r+0x84>
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b36b      	cbz	r3, 80083bc <__swbuf_r+0x84>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	6820      	ldr	r0, [r4, #0]
 8008364:	1ac0      	subs	r0, r0, r3
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	b2f6      	uxtb	r6, r6
 800836a:	4283      	cmp	r3, r0
 800836c:	4637      	mov	r7, r6
 800836e:	dc04      	bgt.n	800837a <__swbuf_r+0x42>
 8008370:	4621      	mov	r1, r4
 8008372:	4628      	mov	r0, r5
 8008374:	f000 f92e 	bl	80085d4 <_fflush_r>
 8008378:	bb30      	cbnz	r0, 80083c8 <__swbuf_r+0x90>
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	3b01      	subs	r3, #1
 800837e:	60a3      	str	r3, [r4, #8]
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	6022      	str	r2, [r4, #0]
 8008386:	701e      	strb	r6, [r3, #0]
 8008388:	6963      	ldr	r3, [r4, #20]
 800838a:	3001      	adds	r0, #1
 800838c:	4283      	cmp	r3, r0
 800838e:	d004      	beq.n	800839a <__swbuf_r+0x62>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	07db      	lsls	r3, r3, #31
 8008394:	d506      	bpl.n	80083a4 <__swbuf_r+0x6c>
 8008396:	2e0a      	cmp	r6, #10
 8008398:	d104      	bne.n	80083a4 <__swbuf_r+0x6c>
 800839a:	4621      	mov	r1, r4
 800839c:	4628      	mov	r0, r5
 800839e:	f000 f919 	bl	80085d4 <_fflush_r>
 80083a2:	b988      	cbnz	r0, 80083c8 <__swbuf_r+0x90>
 80083a4:	4638      	mov	r0, r7
 80083a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a8:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <__swbuf_r+0x9c>)
 80083aa:	429c      	cmp	r4, r3
 80083ac:	d101      	bne.n	80083b2 <__swbuf_r+0x7a>
 80083ae:	68ac      	ldr	r4, [r5, #8]
 80083b0:	e7cf      	b.n	8008352 <__swbuf_r+0x1a>
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <__swbuf_r+0xa0>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	bf08      	it	eq
 80083b8:	68ec      	ldreq	r4, [r5, #12]
 80083ba:	e7ca      	b.n	8008352 <__swbuf_r+0x1a>
 80083bc:	4621      	mov	r1, r4
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 f80c 	bl	80083dc <__swsetup_r>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d0cb      	beq.n	8008360 <__swbuf_r+0x28>
 80083c8:	f04f 37ff 	mov.w	r7, #4294967295
 80083cc:	e7ea      	b.n	80083a4 <__swbuf_r+0x6c>
 80083ce:	bf00      	nop
 80083d0:	08008e90 	.word	0x08008e90
 80083d4:	08008eb0 	.word	0x08008eb0
 80083d8:	08008e70 	.word	0x08008e70

080083dc <__swsetup_r>:
 80083dc:	4b32      	ldr	r3, [pc, #200]	; (80084a8 <__swsetup_r+0xcc>)
 80083de:	b570      	push	{r4, r5, r6, lr}
 80083e0:	681d      	ldr	r5, [r3, #0]
 80083e2:	4606      	mov	r6, r0
 80083e4:	460c      	mov	r4, r1
 80083e6:	b125      	cbz	r5, 80083f2 <__swsetup_r+0x16>
 80083e8:	69ab      	ldr	r3, [r5, #24]
 80083ea:	b913      	cbnz	r3, 80083f2 <__swsetup_r+0x16>
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 f985 	bl	80086fc <__sinit>
 80083f2:	4b2e      	ldr	r3, [pc, #184]	; (80084ac <__swsetup_r+0xd0>)
 80083f4:	429c      	cmp	r4, r3
 80083f6:	d10f      	bne.n	8008418 <__swsetup_r+0x3c>
 80083f8:	686c      	ldr	r4, [r5, #4]
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008400:	0719      	lsls	r1, r3, #28
 8008402:	d42c      	bmi.n	800845e <__swsetup_r+0x82>
 8008404:	06dd      	lsls	r5, r3, #27
 8008406:	d411      	bmi.n	800842c <__swsetup_r+0x50>
 8008408:	2309      	movs	r3, #9
 800840a:	6033      	str	r3, [r6, #0]
 800840c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	f04f 30ff 	mov.w	r0, #4294967295
 8008416:	e03e      	b.n	8008496 <__swsetup_r+0xba>
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <__swsetup_r+0xd4>)
 800841a:	429c      	cmp	r4, r3
 800841c:	d101      	bne.n	8008422 <__swsetup_r+0x46>
 800841e:	68ac      	ldr	r4, [r5, #8]
 8008420:	e7eb      	b.n	80083fa <__swsetup_r+0x1e>
 8008422:	4b24      	ldr	r3, [pc, #144]	; (80084b4 <__swsetup_r+0xd8>)
 8008424:	429c      	cmp	r4, r3
 8008426:	bf08      	it	eq
 8008428:	68ec      	ldreq	r4, [r5, #12]
 800842a:	e7e6      	b.n	80083fa <__swsetup_r+0x1e>
 800842c:	0758      	lsls	r0, r3, #29
 800842e:	d512      	bpl.n	8008456 <__swsetup_r+0x7a>
 8008430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008432:	b141      	cbz	r1, 8008446 <__swsetup_r+0x6a>
 8008434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008438:	4299      	cmp	r1, r3
 800843a:	d002      	beq.n	8008442 <__swsetup_r+0x66>
 800843c:	4630      	mov	r0, r6
 800843e:	f7ff fb9d 	bl	8007b7c <_free_r>
 8008442:	2300      	movs	r3, #0
 8008444:	6363      	str	r3, [r4, #52]	; 0x34
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800844c:	81a3      	strh	r3, [r4, #12]
 800844e:	2300      	movs	r3, #0
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f043 0308 	orr.w	r3, r3, #8
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	b94b      	cbnz	r3, 8008476 <__swsetup_r+0x9a>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d003      	beq.n	8008476 <__swsetup_r+0x9a>
 800846e:	4621      	mov	r1, r4
 8008470:	4630      	mov	r0, r6
 8008472:	f000 fa09 	bl	8008888 <__smakebuf_r>
 8008476:	89a0      	ldrh	r0, [r4, #12]
 8008478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800847c:	f010 0301 	ands.w	r3, r0, #1
 8008480:	d00a      	beq.n	8008498 <__swsetup_r+0xbc>
 8008482:	2300      	movs	r3, #0
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6963      	ldr	r3, [r4, #20]
 8008488:	425b      	negs	r3, r3
 800848a:	61a3      	str	r3, [r4, #24]
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	b943      	cbnz	r3, 80084a2 <__swsetup_r+0xc6>
 8008490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008494:	d1ba      	bne.n	800840c <__swsetup_r+0x30>
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	0781      	lsls	r1, r0, #30
 800849a:	bf58      	it	pl
 800849c:	6963      	ldrpl	r3, [r4, #20]
 800849e:	60a3      	str	r3, [r4, #8]
 80084a0:	e7f4      	b.n	800848c <__swsetup_r+0xb0>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7f7      	b.n	8008496 <__swsetup_r+0xba>
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	08008e90 	.word	0x08008e90
 80084b0:	08008eb0 	.word	0x08008eb0
 80084b4:	08008e70 	.word	0x08008e70

080084b8 <abort>:
 80084b8:	b508      	push	{r3, lr}
 80084ba:	2006      	movs	r0, #6
 80084bc:	f000 fa58 	bl	8008970 <raise>
 80084c0:	2001      	movs	r0, #1
 80084c2:	f7f9 fc91 	bl	8001de8 <_exit>
	...

080084c8 <__sflush_r>:
 80084c8:	898a      	ldrh	r2, [r1, #12]
 80084ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ce:	4605      	mov	r5, r0
 80084d0:	0710      	lsls	r0, r2, #28
 80084d2:	460c      	mov	r4, r1
 80084d4:	d458      	bmi.n	8008588 <__sflush_r+0xc0>
 80084d6:	684b      	ldr	r3, [r1, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dc05      	bgt.n	80084e8 <__sflush_r+0x20>
 80084dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	dc02      	bgt.n	80084e8 <__sflush_r+0x20>
 80084e2:	2000      	movs	r0, #0
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	d0f9      	beq.n	80084e2 <__sflush_r+0x1a>
 80084ee:	2300      	movs	r3, #0
 80084f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084f4:	682f      	ldr	r7, [r5, #0]
 80084f6:	602b      	str	r3, [r5, #0]
 80084f8:	d032      	beq.n	8008560 <__sflush_r+0x98>
 80084fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	075a      	lsls	r2, r3, #29
 8008500:	d505      	bpl.n	800850e <__sflush_r+0x46>
 8008502:	6863      	ldr	r3, [r4, #4]
 8008504:	1ac0      	subs	r0, r0, r3
 8008506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008508:	b10b      	cbz	r3, 800850e <__sflush_r+0x46>
 800850a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800850c:	1ac0      	subs	r0, r0, r3
 800850e:	2300      	movs	r3, #0
 8008510:	4602      	mov	r2, r0
 8008512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008514:	6a21      	ldr	r1, [r4, #32]
 8008516:	4628      	mov	r0, r5
 8008518:	47b0      	blx	r6
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	89a3      	ldrh	r3, [r4, #12]
 800851e:	d106      	bne.n	800852e <__sflush_r+0x66>
 8008520:	6829      	ldr	r1, [r5, #0]
 8008522:	291d      	cmp	r1, #29
 8008524:	d82c      	bhi.n	8008580 <__sflush_r+0xb8>
 8008526:	4a2a      	ldr	r2, [pc, #168]	; (80085d0 <__sflush_r+0x108>)
 8008528:	40ca      	lsrs	r2, r1
 800852a:	07d6      	lsls	r6, r2, #31
 800852c:	d528      	bpl.n	8008580 <__sflush_r+0xb8>
 800852e:	2200      	movs	r2, #0
 8008530:	6062      	str	r2, [r4, #4]
 8008532:	04d9      	lsls	r1, r3, #19
 8008534:	6922      	ldr	r2, [r4, #16]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	d504      	bpl.n	8008544 <__sflush_r+0x7c>
 800853a:	1c42      	adds	r2, r0, #1
 800853c:	d101      	bne.n	8008542 <__sflush_r+0x7a>
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	b903      	cbnz	r3, 8008544 <__sflush_r+0x7c>
 8008542:	6560      	str	r0, [r4, #84]	; 0x54
 8008544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008546:	602f      	str	r7, [r5, #0]
 8008548:	2900      	cmp	r1, #0
 800854a:	d0ca      	beq.n	80084e2 <__sflush_r+0x1a>
 800854c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008550:	4299      	cmp	r1, r3
 8008552:	d002      	beq.n	800855a <__sflush_r+0x92>
 8008554:	4628      	mov	r0, r5
 8008556:	f7ff fb11 	bl	8007b7c <_free_r>
 800855a:	2000      	movs	r0, #0
 800855c:	6360      	str	r0, [r4, #52]	; 0x34
 800855e:	e7c1      	b.n	80084e4 <__sflush_r+0x1c>
 8008560:	6a21      	ldr	r1, [r4, #32]
 8008562:	2301      	movs	r3, #1
 8008564:	4628      	mov	r0, r5
 8008566:	47b0      	blx	r6
 8008568:	1c41      	adds	r1, r0, #1
 800856a:	d1c7      	bne.n	80084fc <__sflush_r+0x34>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0c4      	beq.n	80084fc <__sflush_r+0x34>
 8008572:	2b1d      	cmp	r3, #29
 8008574:	d001      	beq.n	800857a <__sflush_r+0xb2>
 8008576:	2b16      	cmp	r3, #22
 8008578:	d101      	bne.n	800857e <__sflush_r+0xb6>
 800857a:	602f      	str	r7, [r5, #0]
 800857c:	e7b1      	b.n	80084e2 <__sflush_r+0x1a>
 800857e:	89a3      	ldrh	r3, [r4, #12]
 8008580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008584:	81a3      	strh	r3, [r4, #12]
 8008586:	e7ad      	b.n	80084e4 <__sflush_r+0x1c>
 8008588:	690f      	ldr	r7, [r1, #16]
 800858a:	2f00      	cmp	r7, #0
 800858c:	d0a9      	beq.n	80084e2 <__sflush_r+0x1a>
 800858e:	0793      	lsls	r3, r2, #30
 8008590:	680e      	ldr	r6, [r1, #0]
 8008592:	bf08      	it	eq
 8008594:	694b      	ldreq	r3, [r1, #20]
 8008596:	600f      	str	r7, [r1, #0]
 8008598:	bf18      	it	ne
 800859a:	2300      	movne	r3, #0
 800859c:	eba6 0807 	sub.w	r8, r6, r7
 80085a0:	608b      	str	r3, [r1, #8]
 80085a2:	f1b8 0f00 	cmp.w	r8, #0
 80085a6:	dd9c      	ble.n	80084e2 <__sflush_r+0x1a>
 80085a8:	6a21      	ldr	r1, [r4, #32]
 80085aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085ac:	4643      	mov	r3, r8
 80085ae:	463a      	mov	r2, r7
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b0      	blx	r6
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dc06      	bgt.n	80085c6 <__sflush_r+0xfe>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	f04f 30ff 	mov.w	r0, #4294967295
 80085c4:	e78e      	b.n	80084e4 <__sflush_r+0x1c>
 80085c6:	4407      	add	r7, r0
 80085c8:	eba8 0800 	sub.w	r8, r8, r0
 80085cc:	e7e9      	b.n	80085a2 <__sflush_r+0xda>
 80085ce:	bf00      	nop
 80085d0:	20400001 	.word	0x20400001

080085d4 <_fflush_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	690b      	ldr	r3, [r1, #16]
 80085d8:	4605      	mov	r5, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b913      	cbnz	r3, 80085e4 <_fflush_r+0x10>
 80085de:	2500      	movs	r5, #0
 80085e0:	4628      	mov	r0, r5
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	b118      	cbz	r0, 80085ee <_fflush_r+0x1a>
 80085e6:	6983      	ldr	r3, [r0, #24]
 80085e8:	b90b      	cbnz	r3, 80085ee <_fflush_r+0x1a>
 80085ea:	f000 f887 	bl	80086fc <__sinit>
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <_fflush_r+0x6c>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	d11b      	bne.n	800862c <_fflush_r+0x58>
 80085f4:	686c      	ldr	r4, [r5, #4]
 80085f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0ef      	beq.n	80085de <_fflush_r+0xa>
 80085fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008600:	07d0      	lsls	r0, r2, #31
 8008602:	d404      	bmi.n	800860e <_fflush_r+0x3a>
 8008604:	0599      	lsls	r1, r3, #22
 8008606:	d402      	bmi.n	800860e <_fflush_r+0x3a>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f000 f915 	bl	8008838 <__retarget_lock_acquire_recursive>
 800860e:	4628      	mov	r0, r5
 8008610:	4621      	mov	r1, r4
 8008612:	f7ff ff59 	bl	80084c8 <__sflush_r>
 8008616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008618:	07da      	lsls	r2, r3, #31
 800861a:	4605      	mov	r5, r0
 800861c:	d4e0      	bmi.n	80085e0 <_fflush_r+0xc>
 800861e:	89a3      	ldrh	r3, [r4, #12]
 8008620:	059b      	lsls	r3, r3, #22
 8008622:	d4dd      	bmi.n	80085e0 <_fflush_r+0xc>
 8008624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008626:	f000 f908 	bl	800883a <__retarget_lock_release_recursive>
 800862a:	e7d9      	b.n	80085e0 <_fflush_r+0xc>
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <_fflush_r+0x70>)
 800862e:	429c      	cmp	r4, r3
 8008630:	d101      	bne.n	8008636 <_fflush_r+0x62>
 8008632:	68ac      	ldr	r4, [r5, #8]
 8008634:	e7df      	b.n	80085f6 <_fflush_r+0x22>
 8008636:	4b04      	ldr	r3, [pc, #16]	; (8008648 <_fflush_r+0x74>)
 8008638:	429c      	cmp	r4, r3
 800863a:	bf08      	it	eq
 800863c:	68ec      	ldreq	r4, [r5, #12]
 800863e:	e7da      	b.n	80085f6 <_fflush_r+0x22>
 8008640:	08008e90 	.word	0x08008e90
 8008644:	08008eb0 	.word	0x08008eb0
 8008648:	08008e70 	.word	0x08008e70

0800864c <std>:
 800864c:	2300      	movs	r3, #0
 800864e:	b510      	push	{r4, lr}
 8008650:	4604      	mov	r4, r0
 8008652:	e9c0 3300 	strd	r3, r3, [r0]
 8008656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800865a:	6083      	str	r3, [r0, #8]
 800865c:	8181      	strh	r1, [r0, #12]
 800865e:	6643      	str	r3, [r0, #100]	; 0x64
 8008660:	81c2      	strh	r2, [r0, #14]
 8008662:	6183      	str	r3, [r0, #24]
 8008664:	4619      	mov	r1, r3
 8008666:	2208      	movs	r2, #8
 8008668:	305c      	adds	r0, #92	; 0x5c
 800866a:	f7ff f949 	bl	8007900 <memset>
 800866e:	4b05      	ldr	r3, [pc, #20]	; (8008684 <std+0x38>)
 8008670:	6263      	str	r3, [r4, #36]	; 0x24
 8008672:	4b05      	ldr	r3, [pc, #20]	; (8008688 <std+0x3c>)
 8008674:	62a3      	str	r3, [r4, #40]	; 0x28
 8008676:	4b05      	ldr	r3, [pc, #20]	; (800868c <std+0x40>)
 8008678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800867a:	4b05      	ldr	r3, [pc, #20]	; (8008690 <std+0x44>)
 800867c:	6224      	str	r4, [r4, #32]
 800867e:	6323      	str	r3, [r4, #48]	; 0x30
 8008680:	bd10      	pop	{r4, pc}
 8008682:	bf00      	nop
 8008684:	080089a9 	.word	0x080089a9
 8008688:	080089cb 	.word	0x080089cb
 800868c:	08008a03 	.word	0x08008a03
 8008690:	08008a27 	.word	0x08008a27

08008694 <_cleanup_r>:
 8008694:	4901      	ldr	r1, [pc, #4]	; (800869c <_cleanup_r+0x8>)
 8008696:	f000 b8af 	b.w	80087f8 <_fwalk_reent>
 800869a:	bf00      	nop
 800869c:	080085d5 	.word	0x080085d5

080086a0 <__sfmoreglue>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	2268      	movs	r2, #104	; 0x68
 80086a4:	1e4d      	subs	r5, r1, #1
 80086a6:	4355      	muls	r5, r2
 80086a8:	460e      	mov	r6, r1
 80086aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086ae:	f7ff fad1 	bl	8007c54 <_malloc_r>
 80086b2:	4604      	mov	r4, r0
 80086b4:	b140      	cbz	r0, 80086c8 <__sfmoreglue+0x28>
 80086b6:	2100      	movs	r1, #0
 80086b8:	e9c0 1600 	strd	r1, r6, [r0]
 80086bc:	300c      	adds	r0, #12
 80086be:	60a0      	str	r0, [r4, #8]
 80086c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086c4:	f7ff f91c 	bl	8007900 <memset>
 80086c8:	4620      	mov	r0, r4
 80086ca:	bd70      	pop	{r4, r5, r6, pc}

080086cc <__sfp_lock_acquire>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__sfp_lock_acquire+0x8>)
 80086ce:	f000 b8b3 	b.w	8008838 <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	20000add 	.word	0x20000add

080086d8 <__sfp_lock_release>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__sfp_lock_release+0x8>)
 80086da:	f000 b8ae 	b.w	800883a <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	20000add 	.word	0x20000add

080086e4 <__sinit_lock_acquire>:
 80086e4:	4801      	ldr	r0, [pc, #4]	; (80086ec <__sinit_lock_acquire+0x8>)
 80086e6:	f000 b8a7 	b.w	8008838 <__retarget_lock_acquire_recursive>
 80086ea:	bf00      	nop
 80086ec:	20000ade 	.word	0x20000ade

080086f0 <__sinit_lock_release>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__sinit_lock_release+0x8>)
 80086f2:	f000 b8a2 	b.w	800883a <__retarget_lock_release_recursive>
 80086f6:	bf00      	nop
 80086f8:	20000ade 	.word	0x20000ade

080086fc <__sinit>:
 80086fc:	b510      	push	{r4, lr}
 80086fe:	4604      	mov	r4, r0
 8008700:	f7ff fff0 	bl	80086e4 <__sinit_lock_acquire>
 8008704:	69a3      	ldr	r3, [r4, #24]
 8008706:	b11b      	cbz	r3, 8008710 <__sinit+0x14>
 8008708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800870c:	f7ff bff0 	b.w	80086f0 <__sinit_lock_release>
 8008710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008714:	6523      	str	r3, [r4, #80]	; 0x50
 8008716:	4b13      	ldr	r3, [pc, #76]	; (8008764 <__sinit+0x68>)
 8008718:	4a13      	ldr	r2, [pc, #76]	; (8008768 <__sinit+0x6c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	62a2      	str	r2, [r4, #40]	; 0x28
 800871e:	42a3      	cmp	r3, r4
 8008720:	bf04      	itt	eq
 8008722:	2301      	moveq	r3, #1
 8008724:	61a3      	streq	r3, [r4, #24]
 8008726:	4620      	mov	r0, r4
 8008728:	f000 f820 	bl	800876c <__sfp>
 800872c:	6060      	str	r0, [r4, #4]
 800872e:	4620      	mov	r0, r4
 8008730:	f000 f81c 	bl	800876c <__sfp>
 8008734:	60a0      	str	r0, [r4, #8]
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f818 	bl	800876c <__sfp>
 800873c:	2200      	movs	r2, #0
 800873e:	60e0      	str	r0, [r4, #12]
 8008740:	2104      	movs	r1, #4
 8008742:	6860      	ldr	r0, [r4, #4]
 8008744:	f7ff ff82 	bl	800864c <std>
 8008748:	68a0      	ldr	r0, [r4, #8]
 800874a:	2201      	movs	r2, #1
 800874c:	2109      	movs	r1, #9
 800874e:	f7ff ff7d 	bl	800864c <std>
 8008752:	68e0      	ldr	r0, [r4, #12]
 8008754:	2202      	movs	r2, #2
 8008756:	2112      	movs	r1, #18
 8008758:	f7ff ff78 	bl	800864c <std>
 800875c:	2301      	movs	r3, #1
 800875e:	61a3      	str	r3, [r4, #24]
 8008760:	e7d2      	b.n	8008708 <__sinit+0xc>
 8008762:	bf00      	nop
 8008764:	08008c88 	.word	0x08008c88
 8008768:	08008695 	.word	0x08008695

0800876c <__sfp>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	4607      	mov	r7, r0
 8008770:	f7ff ffac 	bl	80086cc <__sfp_lock_acquire>
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <__sfp+0x84>)
 8008776:	681e      	ldr	r6, [r3, #0]
 8008778:	69b3      	ldr	r3, [r6, #24]
 800877a:	b913      	cbnz	r3, 8008782 <__sfp+0x16>
 800877c:	4630      	mov	r0, r6
 800877e:	f7ff ffbd 	bl	80086fc <__sinit>
 8008782:	3648      	adds	r6, #72	; 0x48
 8008784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008788:	3b01      	subs	r3, #1
 800878a:	d503      	bpl.n	8008794 <__sfp+0x28>
 800878c:	6833      	ldr	r3, [r6, #0]
 800878e:	b30b      	cbz	r3, 80087d4 <__sfp+0x68>
 8008790:	6836      	ldr	r6, [r6, #0]
 8008792:	e7f7      	b.n	8008784 <__sfp+0x18>
 8008794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008798:	b9d5      	cbnz	r5, 80087d0 <__sfp+0x64>
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <__sfp+0x88>)
 800879c:	60e3      	str	r3, [r4, #12]
 800879e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087a2:	6665      	str	r5, [r4, #100]	; 0x64
 80087a4:	f000 f847 	bl	8008836 <__retarget_lock_init_recursive>
 80087a8:	f7ff ff96 	bl	80086d8 <__sfp_lock_release>
 80087ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087b4:	6025      	str	r5, [r4, #0]
 80087b6:	61a5      	str	r5, [r4, #24]
 80087b8:	2208      	movs	r2, #8
 80087ba:	4629      	mov	r1, r5
 80087bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087c0:	f7ff f89e 	bl	8007900 <memset>
 80087c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087cc:	4620      	mov	r0, r4
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d0:	3468      	adds	r4, #104	; 0x68
 80087d2:	e7d9      	b.n	8008788 <__sfp+0x1c>
 80087d4:	2104      	movs	r1, #4
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7ff ff62 	bl	80086a0 <__sfmoreglue>
 80087dc:	4604      	mov	r4, r0
 80087de:	6030      	str	r0, [r6, #0]
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d1d5      	bne.n	8008790 <__sfp+0x24>
 80087e4:	f7ff ff78 	bl	80086d8 <__sfp_lock_release>
 80087e8:	230c      	movs	r3, #12
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	e7ee      	b.n	80087cc <__sfp+0x60>
 80087ee:	bf00      	nop
 80087f0:	08008c88 	.word	0x08008c88
 80087f4:	ffff0001 	.word	0xffff0001

080087f8 <_fwalk_reent>:
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	4606      	mov	r6, r0
 80087fe:	4688      	mov	r8, r1
 8008800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008804:	2700      	movs	r7, #0
 8008806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800880a:	f1b9 0901 	subs.w	r9, r9, #1
 800880e:	d505      	bpl.n	800881c <_fwalk_reent+0x24>
 8008810:	6824      	ldr	r4, [r4, #0]
 8008812:	2c00      	cmp	r4, #0
 8008814:	d1f7      	bne.n	8008806 <_fwalk_reent+0xe>
 8008816:	4638      	mov	r0, r7
 8008818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881c:	89ab      	ldrh	r3, [r5, #12]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d907      	bls.n	8008832 <_fwalk_reent+0x3a>
 8008822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008826:	3301      	adds	r3, #1
 8008828:	d003      	beq.n	8008832 <_fwalk_reent+0x3a>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	47c0      	blx	r8
 8008830:	4307      	orrs	r7, r0
 8008832:	3568      	adds	r5, #104	; 0x68
 8008834:	e7e9      	b.n	800880a <_fwalk_reent+0x12>

08008836 <__retarget_lock_init_recursive>:
 8008836:	4770      	bx	lr

08008838 <__retarget_lock_acquire_recursive>:
 8008838:	4770      	bx	lr

0800883a <__retarget_lock_release_recursive>:
 800883a:	4770      	bx	lr

0800883c <__swhatbuf_r>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	460e      	mov	r6, r1
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	2900      	cmp	r1, #0
 8008846:	b096      	sub	sp, #88	; 0x58
 8008848:	4614      	mov	r4, r2
 800884a:	461d      	mov	r5, r3
 800884c:	da08      	bge.n	8008860 <__swhatbuf_r+0x24>
 800884e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	602a      	str	r2, [r5, #0]
 8008856:	061a      	lsls	r2, r3, #24
 8008858:	d410      	bmi.n	800887c <__swhatbuf_r+0x40>
 800885a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800885e:	e00e      	b.n	800887e <__swhatbuf_r+0x42>
 8008860:	466a      	mov	r2, sp
 8008862:	f000 f907 	bl	8008a74 <_fstat_r>
 8008866:	2800      	cmp	r0, #0
 8008868:	dbf1      	blt.n	800884e <__swhatbuf_r+0x12>
 800886a:	9a01      	ldr	r2, [sp, #4]
 800886c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008874:	425a      	negs	r2, r3
 8008876:	415a      	adcs	r2, r3
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	e7ee      	b.n	800885a <__swhatbuf_r+0x1e>
 800887c:	2340      	movs	r3, #64	; 0x40
 800887e:	2000      	movs	r0, #0
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	b016      	add	sp, #88	; 0x58
 8008884:	bd70      	pop	{r4, r5, r6, pc}
	...

08008888 <__smakebuf_r>:
 8008888:	898b      	ldrh	r3, [r1, #12]
 800888a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800888c:	079d      	lsls	r5, r3, #30
 800888e:	4606      	mov	r6, r0
 8008890:	460c      	mov	r4, r1
 8008892:	d507      	bpl.n	80088a4 <__smakebuf_r+0x1c>
 8008894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008898:	6023      	str	r3, [r4, #0]
 800889a:	6123      	str	r3, [r4, #16]
 800889c:	2301      	movs	r3, #1
 800889e:	6163      	str	r3, [r4, #20]
 80088a0:	b002      	add	sp, #8
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	ab01      	add	r3, sp, #4
 80088a6:	466a      	mov	r2, sp
 80088a8:	f7ff ffc8 	bl	800883c <__swhatbuf_r>
 80088ac:	9900      	ldr	r1, [sp, #0]
 80088ae:	4605      	mov	r5, r0
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff f9cf 	bl	8007c54 <_malloc_r>
 80088b6:	b948      	cbnz	r0, 80088cc <__smakebuf_r+0x44>
 80088b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088bc:	059a      	lsls	r2, r3, #22
 80088be:	d4ef      	bmi.n	80088a0 <__smakebuf_r+0x18>
 80088c0:	f023 0303 	bic.w	r3, r3, #3
 80088c4:	f043 0302 	orr.w	r3, r3, #2
 80088c8:	81a3      	strh	r3, [r4, #12]
 80088ca:	e7e3      	b.n	8008894 <__smakebuf_r+0xc>
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <__smakebuf_r+0x7c>)
 80088ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	81a3      	strh	r3, [r4, #12]
 80088da:	9b00      	ldr	r3, [sp, #0]
 80088dc:	6163      	str	r3, [r4, #20]
 80088de:	9b01      	ldr	r3, [sp, #4]
 80088e0:	6120      	str	r0, [r4, #16]
 80088e2:	b15b      	cbz	r3, 80088fc <__smakebuf_r+0x74>
 80088e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088e8:	4630      	mov	r0, r6
 80088ea:	f000 f8d5 	bl	8008a98 <_isatty_r>
 80088ee:	b128      	cbz	r0, 80088fc <__smakebuf_r+0x74>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	89a0      	ldrh	r0, [r4, #12]
 80088fe:	4305      	orrs	r5, r0
 8008900:	81a5      	strh	r5, [r4, #12]
 8008902:	e7cd      	b.n	80088a0 <__smakebuf_r+0x18>
 8008904:	08008695 	.word	0x08008695

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f7ff bf95 	b.w	8008838 <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	20000adc 	.word	0x20000adc

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f7ff bf90 	b.w	800883a <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	20000adc 	.word	0x20000adc

08008920 <_raise_r>:
 8008920:	291f      	cmp	r1, #31
 8008922:	b538      	push	{r3, r4, r5, lr}
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	d904      	bls.n	8008934 <_raise_r+0x14>
 800892a:	2316      	movs	r3, #22
 800892c:	6003      	str	r3, [r0, #0]
 800892e:	f04f 30ff 	mov.w	r0, #4294967295
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008936:	b112      	cbz	r2, 800893e <_raise_r+0x1e>
 8008938:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800893c:	b94b      	cbnz	r3, 8008952 <_raise_r+0x32>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 f830 	bl	80089a4 <_getpid_r>
 8008944:	462a      	mov	r2, r5
 8008946:	4601      	mov	r1, r0
 8008948:	4620      	mov	r0, r4
 800894a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800894e:	f000 b817 	b.w	8008980 <_kill_r>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d00a      	beq.n	800896c <_raise_r+0x4c>
 8008956:	1c59      	adds	r1, r3, #1
 8008958:	d103      	bne.n	8008962 <_raise_r+0x42>
 800895a:	2316      	movs	r3, #22
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	2001      	movs	r0, #1
 8008960:	e7e7      	b.n	8008932 <_raise_r+0x12>
 8008962:	2400      	movs	r4, #0
 8008964:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008968:	4628      	mov	r0, r5
 800896a:	4798      	blx	r3
 800896c:	2000      	movs	r0, #0
 800896e:	e7e0      	b.n	8008932 <_raise_r+0x12>

08008970 <raise>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <raise+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bfd3 	b.w	8008920 <_raise_r>
 800897a:	bf00      	nop
 800897c:	2000000c 	.word	0x2000000c

08008980 <_kill_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4d07      	ldr	r5, [pc, #28]	; (80089a0 <_kill_r+0x20>)
 8008984:	2300      	movs	r3, #0
 8008986:	4604      	mov	r4, r0
 8008988:	4608      	mov	r0, r1
 800898a:	4611      	mov	r1, r2
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	f7f9 fa1b 	bl	8001dc8 <_kill>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d102      	bne.n	800899c <_kill_r+0x1c>
 8008996:	682b      	ldr	r3, [r5, #0]
 8008998:	b103      	cbz	r3, 800899c <_kill_r+0x1c>
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	bd38      	pop	{r3, r4, r5, pc}
 800899e:	bf00      	nop
 80089a0:	20000ae0 	.word	0x20000ae0

080089a4 <_getpid_r>:
 80089a4:	f7f9 ba08 	b.w	8001db8 <_getpid>

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f894 	bl	8008adc <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	05db      	lsls	r3, r3, #23
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e0:	2302      	movs	r3, #2
 80089e2:	2200      	movs	r2, #0
 80089e4:	f000 f868 	bl	8008ab8 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strh	r3, [r4, #12]
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	4628      	mov	r0, r5
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f855 	bl	8008ab8 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b813 	b.w	8008a54 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4d07      	ldr	r5, [pc, #28]	; (8008a50 <_write_r+0x20>)
 8008a34:	4604      	mov	r4, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f9 f9f9 	bl	8001e36 <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20000ae0 	.word	0x20000ae0

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4d06      	ldr	r5, [pc, #24]	; (8008a70 <_close_r+0x1c>)
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7f9 fa05 	bl	8001e6e <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	20000ae0 	.word	0x20000ae0

08008a74 <_fstat_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	; (8008a94 <_fstat_r+0x20>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7f9 fa00 	bl	8001e86 <_fstat>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_fstat_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_fstat_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	20000ae0 	.word	0x20000ae0

08008a98 <_isatty_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	4d06      	ldr	r5, [pc, #24]	; (8008ab4 <_isatty_r+0x1c>)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7f9 f9ff 	bl	8001ea6 <_isatty>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_isatty_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_isatty_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	20000ae0 	.word	0x20000ae0

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4d07      	ldr	r5, [pc, #28]	; (8008ad8 <_lseek_r+0x20>)
 8008abc:	4604      	mov	r4, r0
 8008abe:	4608      	mov	r0, r1
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f9 f9f8 	bl	8001ebc <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	20000ae0 	.word	0x20000ae0

08008adc <_read_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	4d07      	ldr	r5, [pc, #28]	; (8008afc <_read_r+0x20>)
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	602a      	str	r2, [r5, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	f7f9 f986 	bl	8001dfc <_read>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_read_r+0x1e>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_read_r+0x1e>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	20000ae0 	.word	0x20000ae0

08008b00 <_init>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr

08008b0c <_fini>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr
