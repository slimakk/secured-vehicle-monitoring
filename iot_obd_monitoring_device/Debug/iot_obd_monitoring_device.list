
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b40  08005b40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000000c  08005b54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005b54  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ee9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000356b  00000000  00000000  00037f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003c8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004926  00000000  00000000  0003db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b39f  00000000  00000000  00042476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e43e5  00000000  00000000  0005d815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141bfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  00141c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ae8 	.word	0x08005ae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08005ae8 	.word	0x08005ae8

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	; 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2f>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007a4:	bf24      	itt	cs
 80007a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ae:	d90d      	bls.n	80007cc <__aeabi_d2f+0x30>
 80007b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007c4:	bf08      	it	eq
 80007c6:	f020 0001 	biceq.w	r0, r0, #1
 80007ca:	4770      	bx	lr
 80007cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d0:	d121      	bne.n	8000816 <__aeabi_d2f+0x7a>
 80007d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007d6:	bfbc      	itt	lt
 80007d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007dc:	4770      	bxlt	lr
 80007de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007e6:	f1c2 0218 	rsb	r2, r2, #24
 80007ea:	f1c2 0c20 	rsb	ip, r2, #32
 80007ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80007f2:	fa20 f002 	lsr.w	r0, r0, r2
 80007f6:	bf18      	it	ne
 80007f8:	f040 0001 	orrne.w	r0, r0, #1
 80007fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000800:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000804:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000808:	ea40 000c 	orr.w	r0, r0, ip
 800080c:	fa23 f302 	lsr.w	r3, r3, r2
 8000810:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000814:	e7cc      	b.n	80007b0 <__aeabi_d2f+0x14>
 8000816:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800081a:	d107      	bne.n	800082c <__aeabi_d2f+0x90>
 800081c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000820:	bf1e      	ittt	ne
 8000822:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000826:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800082a:	4770      	bxne	lr
 800082c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <OBD2_PID_Decode>:
extern uint32_t adc_buffer;

static void OBD2_PID_Decode(uint8_t* rx_frame);

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 800083c:	b480      	push	{r7}
 800083e:	b087      	sub	sp, #28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3303      	adds	r3, #3
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	061a      	lsls	r2, r3, #24
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3304      	adds	r3, #4
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	041b      	lsls	r3, r3, #16
 8000854:	431a      	orrs	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3305      	adds	r3, #5
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	4313      	orrs	r3, r2
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	3206      	adds	r2, #6
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	4313      	orrs	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 800086e:	231f      	movs	r3, #31
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	e030      	b.n	80008d6 <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	fa42 f303 	asr.w	r3, r2, r3
 800087c:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <OBD2_PID_Decode+0xb0>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	b2d9      	uxtb	r1, r3
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <OBD2_PID_Decode+0xb0>)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	4413      	add	r3, r2
 8000898:	3303      	adds	r3, #3
 800089a:	460a      	mov	r2, r1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e014      	b.n	80008ca <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <OBD2_PID_Decode+0xb0>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	2b20      	cmp	r3, #32
 80008a6:	d108      	bne.n	80008ba <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	b2d9      	uxtb	r1, r3
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <OBD2_PID_Decode+0xb0>)
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	4413      	add	r3, r2
 80008b2:	3323      	adds	r3, #35	; 0x23
 80008b4:	460a      	mov	r2, r1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e007      	b.n	80008ca <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	b2d9      	uxtb	r1, r3
 80008be:	4a0b      	ldr	r2, [pc, #44]	; (80008ec <OBD2_PID_Decode+0xb0>)
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	4413      	add	r3, r2
 80008c4:	3343      	adds	r3, #67	; 0x43
 80008c6:	460a      	mov	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dacb      	bge.n	8000874 <OBD2_PID_Decode+0x38>
	}
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	371c      	adds	r7, #28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000010c 	.word	0x2000010c

080008f0 <OBD2_PID_Parse>:
		}
	}
}

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	float value = 0;
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3302      	adds	r3, #2
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2ba6      	cmp	r3, #166	; 0xa6
 8000906:	f200 83b2 	bhi.w	800106e <OBD2_PID_Parse+0x77e>
 800090a:	a201      	add	r2, pc, #4	; (adr r2, 8000910 <OBD2_PID_Parse+0x20>)
 800090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000910:	08000bad 	.word	0x08000bad
 8000914:	0800106f 	.word	0x0800106f
 8000918:	0800106f 	.word	0x0800106f
 800091c:	0800106f 	.word	0x0800106f
 8000920:	08000bbb 	.word	0x08000bbb
 8000924:	08000bc3 	.word	0x08000bc3
 8000928:	08000bd9 	.word	0x08000bd9
 800092c:	08000bd9 	.word	0x08000bd9
 8000930:	08000bd9 	.word	0x08000bd9
 8000934:	08000bd9 	.word	0x08000bd9
 8000938:	08000bdf 	.word	0x08000bdf
 800093c:	08000bfb 	.word	0x08000bfb
 8000940:	08000c0f 	.word	0x08000c0f
 8000944:	08000c35 	.word	0x08000c35
 8000948:	08000c49 	.word	0x08000c49
 800094c:	08000c63 	.word	0x08000c63
 8000950:	08000c79 	.word	0x08000c79
 8000954:	08000ca3 	.word	0x08000ca3
 8000958:	0800106f 	.word	0x0800106f
 800095c:	0800106f 	.word	0x0800106f
 8000960:	08000cab 	.word	0x08000cab
 8000964:	08000cab 	.word	0x08000cab
 8000968:	08000cab 	.word	0x08000cab
 800096c:	08000cab 	.word	0x08000cab
 8000970:	08000cab 	.word	0x08000cab
 8000974:	08000cab 	.word	0x08000cab
 8000978:	08000cab 	.word	0x08000cab
 800097c:	08000cab 	.word	0x08000cab
 8000980:	0800106f 	.word	0x0800106f
 8000984:	0800106f 	.word	0x0800106f
 8000988:	0800106f 	.word	0x0800106f
 800098c:	08000cc9 	.word	0x08000cc9
 8000990:	08000ce7 	.word	0x08000ce7
 8000994:	08000cc9 	.word	0x08000cc9
 8000998:	08000cf5 	.word	0x08000cf5
 800099c:	08000d25 	.word	0x08000d25
 80009a0:	08000d4b 	.word	0x08000d4b
 80009a4:	08000d4b 	.word	0x08000d4b
 80009a8:	08000d4b 	.word	0x08000d4b
 80009ac:	08000d4b 	.word	0x08000d4b
 80009b0:	08000d4b 	.word	0x08000d4b
 80009b4:	08000d4b 	.word	0x08000d4b
 80009b8:	08000d4b 	.word	0x08000d4b
 80009bc:	08000d4b 	.word	0x08000d4b
 80009c0:	08000d53 	.word	0x08000d53
 80009c4:	08000d5b 	.word	0x08000d5b
 80009c8:	08000d61 	.word	0x08000d61
 80009cc:	08000d61 	.word	0x08000d61
 80009d0:	08000d69 	.word	0x08000d69
 80009d4:	08000d7d 	.word	0x08000d7d
 80009d8:	08000d9b 	.word	0x08000d9b
 80009dc:	08000dc1 	.word	0x08000dc1
 80009e0:	08000dd5 	.word	0x08000dd5
 80009e4:	08000dd5 	.word	0x08000dd5
 80009e8:	08000dd5 	.word	0x08000dd5
 80009ec:	08000dd5 	.word	0x08000dd5
 80009f0:	08000dd5 	.word	0x08000dd5
 80009f4:	08000dd5 	.word	0x08000dd5
 80009f8:	08000dd5 	.word	0x08000dd5
 80009fc:	08000dd5 	.word	0x08000dd5
 8000a00:	08000ddd 	.word	0x08000ddd
 8000a04:	08000ddd 	.word	0x08000ddd
 8000a08:	08000ddd 	.word	0x08000ddd
 8000a0c:	08000ddd 	.word	0x08000ddd
 8000a10:	08000e09 	.word	0x08000e09
 8000a14:	0800106f 	.word	0x0800106f
 8000a18:	08000e17 	.word	0x08000e17
 8000a1c:	08000e41 	.word	0x08000e41
 8000a20:	08000e49 	.word	0x08000e49
 8000a24:	08000e51 	.word	0x08000e51
 8000a28:	08000e59 	.word	0x08000e59
 8000a2c:	08000e6f 	.word	0x08000e6f
 8000a30:	08000e6f 	.word	0x08000e6f
 8000a34:	08000e6f 	.word	0x08000e6f
 8000a38:	08000e6f 	.word	0x08000e6f
 8000a3c:	08000e6f 	.word	0x08000e6f
 8000a40:	08000e6f 	.word	0x08000e6f
 8000a44:	08000e77 	.word	0x08000e77
 8000a48:	08000e77 	.word	0x08000e77
 8000a4c:	08000e95 	.word	0x08000e95
 8000a50:	0800106f 	.word	0x0800106f
 8000a54:	0800106f 	.word	0x0800106f
 8000a58:	08000ea9 	.word	0x08000ea9
 8000a5c:	08000ec5 	.word	0x08000ec5
 8000a60:	08000ef7 	.word	0x08000ef7
 8000a64:	08000f1b 	.word	0x08000f1b
 8000a68:	08000f1b 	.word	0x08000f1b
 8000a6c:	08000f1b 	.word	0x08000f1b
 8000a70:	08000f1b 	.word	0x08000f1b
 8000a74:	08000f21 	.word	0x08000f21
 8000a78:	08000f3f 	.word	0x08000f3f
 8000a7c:	08000f3f 	.word	0x08000f3f
 8000a80:	08000f47 	.word	0x08000f47
 8000a84:	08000f5d 	.word	0x08000f5d
 8000a88:	08000f63 	.word	0x08000f63
 8000a8c:	0800106f 	.word	0x0800106f
 8000a90:	0800106f 	.word	0x0800106f
 8000a94:	08000f95 	.word	0x08000f95
 8000a98:	08000f95 	.word	0x08000f95
 8000a9c:	08000fab 	.word	0x08000fab
 8000aa0:	08000fc9 	.word	0x08000fc9
 8000aa4:	0800106f 	.word	0x0800106f
 8000aa8:	08000fdf 	.word	0x08000fdf
 8000aac:	08000fe7 	.word	0x08000fe7
 8000ab0:	08000fe7 	.word	0x08000fe7
 8000ab4:	0800106f 	.word	0x0800106f
 8000ab8:	0800106f 	.word	0x0800106f
 8000abc:	0800106f 	.word	0x0800106f
 8000ac0:	0800106f 	.word	0x0800106f
 8000ac4:	0800106f 	.word	0x0800106f
 8000ac8:	0800106f 	.word	0x0800106f
 8000acc:	0800106f 	.word	0x0800106f
 8000ad0:	0800106f 	.word	0x0800106f
 8000ad4:	0800106f 	.word	0x0800106f
 8000ad8:	0800106f 	.word	0x0800106f
 8000adc:	0800106f 	.word	0x0800106f
 8000ae0:	0800106f 	.word	0x0800106f
 8000ae4:	0800106f 	.word	0x0800106f
 8000ae8:	0800106f 	.word	0x0800106f
 8000aec:	0800106f 	.word	0x0800106f
 8000af0:	0800106f 	.word	0x0800106f
 8000af4:	0800106f 	.word	0x0800106f
 8000af8:	0800106f 	.word	0x0800106f
 8000afc:	0800106f 	.word	0x0800106f
 8000b00:	08000ffd 	.word	0x08000ffd
 8000b04:	0800106f 	.word	0x0800106f
 8000b08:	0800106f 	.word	0x0800106f
 8000b0c:	0800106f 	.word	0x0800106f
 8000b10:	0800106f 	.word	0x0800106f
 8000b14:	0800106f 	.word	0x0800106f
 8000b18:	0800106f 	.word	0x0800106f
 8000b1c:	0800106f 	.word	0x0800106f
 8000b20:	0800106f 	.word	0x0800106f
 8000b24:	0800106f 	.word	0x0800106f
 8000b28:	0800106f 	.word	0x0800106f
 8000b2c:	0800106f 	.word	0x0800106f
 8000b30:	0800106f 	.word	0x0800106f
 8000b34:	0800106f 	.word	0x0800106f
 8000b38:	0800106f 	.word	0x0800106f
 8000b3c:	0800106f 	.word	0x0800106f
 8000b40:	0800106f 	.word	0x0800106f
 8000b44:	0800106f 	.word	0x0800106f
 8000b48:	0800106f 	.word	0x0800106f
 8000b4c:	0800106f 	.word	0x0800106f
 8000b50:	0800106f 	.word	0x0800106f
 8000b54:	0800106f 	.word	0x0800106f
 8000b58:	0800106f 	.word	0x0800106f
 8000b5c:	0800106f 	.word	0x0800106f
 8000b60:	0800106f 	.word	0x0800106f
 8000b64:	0800106f 	.word	0x0800106f
 8000b68:	0800106f 	.word	0x0800106f
 8000b6c:	0800106f 	.word	0x0800106f
 8000b70:	0800106f 	.word	0x0800106f
 8000b74:	0800106f 	.word	0x0800106f
 8000b78:	0800106f 	.word	0x0800106f
 8000b7c:	0800106f 	.word	0x0800106f
 8000b80:	0800106f 	.word	0x0800106f
 8000b84:	0800106f 	.word	0x0800106f
 8000b88:	0800106f 	.word	0x0800106f
 8000b8c:	0800106f 	.word	0x0800106f
 8000b90:	0800106f 	.word	0x0800106f
 8000b94:	0800106f 	.word	0x0800106f
 8000b98:	0800106f 	.word	0x0800106f
 8000b9c:	0800106f 	.word	0x0800106f
 8000ba0:	0800106f 	.word	0x0800106f
 8000ba4:	0800106f 	.word	0x0800106f
 8000ba8:	08001029 	.word	0x08001029
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fe45 	bl	800083c <OBD2_PID_Decode>
		value = 0;
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
		break;
 8000bb8:	e259      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
		break;
 8000bc0:	e255      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3303      	adds	r3, #3
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	3b28      	subs	r3, #40	; 0x28
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000bd6:	e24a      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8000bd8:	4bb7      	ldr	r3, [pc, #732]	; (8000eb8 <OBD2_PID_Parse+0x5c8>)
 8000bda:	60fb      	str	r3, [r7, #12]
		break;
 8000bdc:	e247      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3303      	adds	r3, #3
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000bf8:	e239      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	3303      	adds	r3, #3
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	ee07 3a90 	vmov	s15, r3
 8000c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c08:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000c0c:	e22f      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3303      	adds	r3, #3
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	3204      	adds	r2, #4
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	da00      	bge.n	8000c24 <OBD2_PID_Parse+0x334>
 8000c22:	3303      	adds	r3, #3
 8000c24:	109b      	asrs	r3, r3, #2
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000c32:	e21c      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3303      	adds	r3, #3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	ee07 3a90 	vmov	s15, r3
 8000c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c42:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000c46:	e212      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3303      	adds	r3, #3
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	085b      	lsrs	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	3b40      	subs	r3, #64	; 0x40
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c5c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000c60:	e205      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3303      	adds	r3, #3
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3b28      	subs	r3, #40	; 0x28
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000c76:	e1fa      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3303      	adds	r3, #3
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	3204      	adds	r2, #4
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	4a8c      	ldr	r2, [pc, #560]	; (8000ebc <OBD2_PID_Parse+0x5cc>)
 8000c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8e:	1152      	asrs	r2, r2, #5
 8000c90:	17db      	asrs	r3, r3, #31
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000ca0:	e1e5      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 8000ca2:	f04f 0300 	mov.w	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
		break;
 8000ca8:	e1e1      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3303      	adds	r3, #3
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4a82      	ldr	r2, [pc, #520]	; (8000ebc <OBD2_PID_Parse+0x5cc>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	099b      	lsrs	r3, r3, #6
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000cc6:	e1d2      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3303      	adds	r3, #3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	3204      	adds	r2, #4
 8000cd4:	7812      	ldrb	r2, [r2, #0]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	ee07 3a90 	vmov	s15, r3
 8000cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000ce4:	e1c3      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fda8 	bl	800083c <OBD2_PID_Decode>
		value = 0;
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
		break;
 8000cf2:	e1bc      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3303      	adds	r3, #3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	3204      	adds	r2, #4
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcdf 	bl	80006c8 <__aeabi_i2d>
 8000d0a:	a369      	add	r3, pc, #420	; (adr r3, 8000eb0 <OBD2_PID_Parse+0x5c0>)
 8000d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d10:	f7ff fa5e 	bl	80001d0 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f7ff fd3e 	bl	800079c <__aeabi_d2f>
 8000d20:	4603      	mov	r3, r0
 8000d22:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3303      	adds	r3, #3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	3204      	adds	r2, #4
 8000d30:	7812      	ldrb	r2, [r2, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d44:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000d48:	e191      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
		break;
 8000d50:	e18d      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
		break;
 8000d58:	e189      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 8000d5a:	4b57      	ldr	r3, [pc, #348]	; (8000eb8 <OBD2_PID_Parse+0x5c8>)
 8000d5c:	60fb      	str	r3, [r7, #12]
		break;
 8000d5e:	e186      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
		break;
 8000d66:	e182      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d76:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000d7a:	e178      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3303      	adds	r3, #3
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	3204      	adds	r2, #4
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d94:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000d98:	e169      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	3204      	adds	r2, #4
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	da00      	bge.n	8000db0 <OBD2_PID_Parse+0x4c0>
 8000dae:	3303      	adds	r3, #3
 8000db0:	109b      	asrs	r3, r3, #2
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dba:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000dbe:	e156      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3303      	adds	r3, #3
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dce:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000dd2:	e14c      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
		break;
 8000dda:	e148      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3303      	adds	r3, #3
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	021b      	lsls	r3, r3, #8
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	3204      	adds	r2, #4
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <OBD2_PID_Parse+0x5cc>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1152      	asrs	r2, r2, #5
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	3b28      	subs	r3, #40	; 0x28
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e02:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000e06:	e132      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fd17 	bl	800083c <OBD2_PID_Decode>
		value = 0;
 8000e0e:	f04f 0300 	mov.w	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
		break;
 8000e14:	e12b      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3303      	adds	r3, #3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	3204      	adds	r2, #4
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <OBD2_PID_Parse+0x5d0>)
 8000e28:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2c:	1192      	asrs	r2, r2, #6
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e3a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000e3e:	e116      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
		break;
 8000e46:	e112      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
		break;
 8000e4e:	e10e      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
		break;
 8000e56:	e10a      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3303      	adds	r3, #3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3b28      	subs	r3, #40	; 0x28
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000e6c:	e0ff      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
		break;
 8000e74:	e0fb      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3303      	adds	r3, #3
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	3204      	adds	r2, #4
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000e92:	e0ec      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3303      	adds	r3, #3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000ea6:	e0e2      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
		break;
 8000eae:	e0de      	b.n	800106e <OBD2_PID_Parse+0x77e>
 8000eb0:	10624dd3 	.word	0x10624dd3
 8000eb4:	3fb43958 	.word	0x3fb43958
 8000eb8:	c2c80000 	.word	0xc2c80000
 8000ebc:	51eb851f 	.word	0x51eb851f
 8000ec0:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3303      	adds	r3, #3
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	3204      	adds	r2, #4
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fbf7 	bl	80006c8 <__aeabi_i2d>
 8000eda:	a370      	add	r3, pc, #448	; (adr r3, 800109c <OBD2_PID_Parse+0x7ac>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff f976 	bl	80001d0 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f7ff fc56 	bl	800079c <__aeabi_d2f>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60fb      	str	r3, [r7, #12]
		break;
 8000ef4:	e0bb      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3303      	adds	r3, #3
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	3204      	adds	r2, #4
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8000f0a:	3b7f      	subs	r3, #127	; 0x7f
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f14:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000f18:	e0a9      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <OBD2_PID_Parse+0x7a0>)
 8000f1c:	60fb      	str	r3, [r7, #12]
		break;
 8000f1e:	e0a6      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3303      	adds	r3, #3
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	3204      	adds	r2, #4
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f38:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000f3c:	e097      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
		break;
 8000f44:	e093      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3303      	adds	r3, #3
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3b28      	subs	r3, #40	; 0x28
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000f5a:	e088      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8000f5c:	4b4d      	ldr	r3, [pc, #308]	; (8001094 <OBD2_PID_Parse+0x7a4>)
 8000f5e:	60fb      	str	r3, [r7, #12]
		break;
 8000f60:	e085      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3303      	adds	r3, #3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	3204      	adds	r2, #4
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fba8 	bl	80006c8 <__aeabi_i2d>
 8000f78:	a341      	add	r3, pc, #260	; (adr r3, 8001080 <OBD2_PID_Parse+0x790>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff f927 	bl	80001d0 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fc07 	bl	800079c <__aeabi_d2f>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60fb      	str	r3, [r7, #12]
		break;
 8000f92:	e06c      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3303      	adds	r3, #3
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	3b7d      	subs	r3, #125	; 0x7d
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000fa8:	e061      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3303      	adds	r3, #3
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3204      	adds	r2, #4
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000fc6:	e052      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3303      	adds	r3, #3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3b7d      	subs	r3, #125	; 0x7d
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000fdc:	e047      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
		break;
 8000fe4:	e043      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3303      	adds	r3, #3
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b28      	subs	r3, #40	; 0x28
 8000fee:	ee07 3a90 	vmov	s15, r3
 8000ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8000ffa:	e038      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3303      	adds	r3, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	3204      	adds	r2, #4
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4313      	orrs	r3, r2
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <OBD2_PID_Parse+0x7a8>)
 800100e:	fb82 1203 	smull	r1, r2, r2, r3
 8001012:	1152      	asrs	r2, r2, #5
 8001014:	17db      	asrs	r3, r3, #31
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	3b28      	subs	r3, #40	; 0x28
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001022:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001026:	e022      	b.n	800106e <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	061a      	lsls	r2, r3, #24
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3304      	adds	r3, #4
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	041b      	lsls	r3, r3, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3305      	adds	r3, #5
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	4313      	orrs	r3, r2
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	3206      	adds	r2, #6
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	4313      	orrs	r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fb3b 	bl	80006c8 <__aeabi_i2d>
 8001052:	a30d      	add	r3, pc, #52	; (adr r3, 8001088 <OBD2_PID_Parse+0x798>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff f8ba 	bl	80001d0 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fb9a 	bl	800079c <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	60fb      	str	r3, [r7, #12]
		break;
 800106c:	bf00      	nop
	}
	return value;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	ee07 3a90 	vmov	s15, r3
}
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fa99999 	.word	0x3fa99999
 8001088:	9999999a 	.word	0x9999999a
 800108c:	3fb99999 	.word	0x3fb99999
 8001090:	c2c80000 	.word	0xc2c80000
 8001094:	c3520000 	.word	0xc3520000
 8001098:	51eb851f 	.word	0x51eb851f
 800109c:	47ae147b 	.word	0x47ae147b
 80010a0:	3f747ae1 	.word	0x3f747ae1

080010a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	f107 0214 	add.w	r2, r7, #20
 80010b4:	2100      	movs	r1, #0
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010b8:	f001 fb94 	bl	80027e4 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fc15 	bl	80008f0 <OBD2_PID_Parse>
 80010c6:	eef0 7a40 	vmov.f32	s15, s0
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80010cc:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	HAL_IWDG_Refresh(&hiwdg);
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80010d2:	f002 fb98 	bl	8003806 <HAL_IWDG_Refresh>
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000028 	.word	0x20000028
 80010e4:	2000010c 	.word	0x2000010c
 80010e8:	200000fc 	.word	0x200000fc

080010ec <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2210      	movs	r2, #16
 80010fa:	60da      	str	r2, [r3, #12]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <MX_ADC1_Init+0xc0>)
 8001122:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001126:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800112a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <MX_ADC1_Init+0xbc>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_ADC1_Init+0xbc>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001140:	2204      	movs	r2, #4
 8001142:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <MX_ADC1_Init+0xbc>)
 800114c:	2201      	movs	r2, #1
 800114e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001152:	2201      	movs	r2, #1
 8001154:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <MX_ADC1_Init+0xbc>)
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001174:	2200      	movs	r2, #0
 8001176:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_ADC1_Init+0xbc>)
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <MX_ADC1_Init+0xbc>)
 8001182:	f000 fe07 	bl	8001d94 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800118c:	f000 fa28 	bl	80015e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_ADC1_Init+0xc4>)
 8001192:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001194:	2306      	movs	r3, #6
 8001196:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119c:	237f      	movs	r3, #127	; 0x7f
 800119e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a0:	2304      	movs	r3, #4
 80011a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_ADC1_Init+0xbc>)
 80011ae:	f000 ff39 	bl	8002024 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011b8:	f000 fa12 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000050 	.word	0x20000050
 80011c8:	50040000 	.word	0x50040000
 80011cc:	3ac04000 	.word	0x3ac04000

080011d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a0      	sub	sp, #128	; 0x80
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	225c      	movs	r2, #92	; 0x5c
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fc71 	bl	8005ad8 <memset>
  if(adcHandle->Instance==ADC1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a3a      	ldr	r2, [pc, #232]	; (80012e4 <HAL_ADC_MspInit+0x114>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d16d      	bne.n	80012dc <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001204:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001206:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800120a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800120c:	2303      	movs	r3, #3
 800120e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001214:	2308      	movs	r3, #8
 8001216:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001218:	2307      	movs	r3, #7
 800121a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f95c 	bl	80044ec <HAL_RCCEx_PeriphCLKConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800123a:	f000 f9d1 	bl	80015e0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a29      	ldr	r2, [pc, #164]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 8001244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b27      	ldr	r3, [pc, #156]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_ADC_MspInit+0x118>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 800126e:	2320      	movs	r3, #32
 8001270:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001272:	230b      	movs	r3, #11
 8001274:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800127e:	4619      	mov	r1, r3
 8001280:	481a      	ldr	r0, [pc, #104]	; (80012ec <HAL_ADC_MspInit+0x11c>)
 8001282:	f002 f8df 	bl	8003444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001286:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 8001288:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_ADC_MspInit+0x124>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012a0:	2280      	movs	r2, #128	; 0x80
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012aa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012b6:	2220      	movs	r2, #32
 80012b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c0:	480b      	ldr	r0, [pc, #44]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012c2:	f001 fed9 	bl	8003078 <HAL_DMA_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80012cc:	f000 f988 	bl	80015e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80012d6:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <HAL_ADC_MspInit+0x120>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	3780      	adds	r7, #128	; 0x80
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	50040000 	.word	0x50040000
 80012e8:	40021000 	.word	0x40021000
 80012ec:	48000800 	.word	0x48000800
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	40020008 	.word	0x40020008

080012f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_DMA_Init+0x48>)
 8001300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <MX_DMA_Init+0x48>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6493      	str	r3, [r2, #72]	; 0x48
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_DMA_Init+0x48>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	200b      	movs	r0, #11
 800131c:	f001 fe75 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001320:	200b      	movs	r0, #11
 8001322:	f001 fe8e 	bl	8003042 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	200f      	movs	r0, #15
 800132c:	f001 fe6d 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001330:	200f      	movs	r0, #15
 8001332:	f001 fe86 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <MX_GPIO_Init+0x144>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <MX_GPIO_Init+0x144>)
 8001360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b48      	ldr	r3, [pc, #288]	; (8001488 <MX_GPIO_Init+0x144>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MX_GPIO_Init+0x144>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	4a44      	ldr	r2, [pc, #272]	; (8001488 <MX_GPIO_Init+0x144>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <MX_GPIO_Init+0x144>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <MX_GPIO_Init+0x144>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	4a3e      	ldr	r2, [pc, #248]	; (8001488 <MX_GPIO_Init+0x144>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_GPIO_Init+0x144>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_GPIO_Init+0x144>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a38      	ldr	r2, [pc, #224]	; (8001488 <MX_GPIO_Init+0x144>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_GPIO_Init+0x144>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MX_GPIO_Init+0x144>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <MX_GPIO_Init+0x144>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_GPIO_Init+0x144>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210c      	movs	r1, #12
 80013d6:	482d      	ldr	r0, [pc, #180]	; (800148c <MX_GPIO_Init+0x148>)
 80013d8:	f002 f9ae 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f002 f9a7 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2104      	movs	r1, #4
 80013ee:	4828      	ldr	r0, [pc, #160]	; (8001490 <MX_GPIO_Init+0x14c>)
 80013f0:	f002 f9a2 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 80013f4:	230c      	movs	r3, #12
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4820      	ldr	r0, [pc, #128]	; (800148c <MX_GPIO_Init+0x148>)
 800140c:	f002 f81a 	bl	8003444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 8001410:	2350      	movs	r3, #80	; 0x50
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f002 f80d 	bl	8003444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 800142a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001446:	f001 fffd 	bl	8003444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 800144a:	2304      	movs	r3, #4
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0x14c>)
 8001462:	f001 ffef 	bl	8003444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001466:	2308      	movs	r3, #8
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_GPIO_Init+0x150>)
 800147a:	f001 ffe3 	bl	8003444 <HAL_GPIO_Init>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	48000800 	.word	0x48000800
 8001490:	48000c00 	.word	0x48000c00
 8001494:	48001c00 	.word	0x48001c00

08001498 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim6;
extern OBD obd_comm;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10d      	bne.n	80014c6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		if(obd_comm.msg_type == 0)
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014ac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 80014b4:	bf00      	nop
 80014b6:	e003      	b.n	80014c0 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
			obd_comm.msg_type = 3;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		HAL_TIM_Base_Stop_IT(&htim6);
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80014c2:	f003 fb74 	bl	8004bae <HAL_TIM_Base_Stop_IT>
	}
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40001000 	.word	0x40001000
 80014d4:	2000010c 	.word	0x2000010c
 80014d8:	200001c8 	.word	0x200001c8

080014dc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_IWDG_Init+0x34>)
 80014e2:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <MX_IWDG_Init+0x38>)
 80014e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_IWDG_Init+0x34>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_IWDG_Init+0x34>)
 80014ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014f2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_IWDG_Init+0x34>)
 80014f6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80014fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_IWDG_Init+0x34>)
 80014fe:	f002 f933 	bl	8003768 <HAL_IWDG_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001508:	f000 f86a 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000fc 	.word	0x200000fc
 8001514:	40003000 	.word	0x40003000

08001518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800151c:	f000 fa39 	bl	8001992 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001520:	f000 f80d 	bl	800153e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001524:	f7ff ff0e 	bl	8001344 <MX_GPIO_Init>
  MX_DMA_Init();
 8001528:	f7ff fee6 	bl	80012f8 <MX_DMA_Init>
  MX_ADC1_Init();
 800152c:	f7ff fdec 	bl	8001108 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001530:	f7ff ffd4 	bl	80014dc <MX_IWDG_Init>
  MX_TIM1_Init();
 8001534:	f000 f91e 	bl	8001774 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001538:	f000 f970 	bl	800181c <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0x24>

0800153e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b096      	sub	sp, #88	; 0x58
 8001542:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2244      	movs	r2, #68	; 0x44
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f004 fac3 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001552:	463b      	mov	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001560:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001564:	f002 f96e 	bl	8003844 <HAL_PWREx_ControlVoltageScaling>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800156e:	f000 f837 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001572:	2309      	movs	r3, #9
 8001574:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800157a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001580:	2302      	movs	r3, #2
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001584:	2303      	movs	r3, #3
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800158c:	230a      	movs	r3, #10
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001590:	2307      	movs	r3, #7
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001594:	2302      	movs	r3, #2
 8001596:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f9a5 	bl	80038f0 <HAL_RCC_OscConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015ac:	f000 f818 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b0:	230f      	movs	r3, #15
 80015b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b4:	2303      	movs	r3, #3
 80015b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2104      	movs	r1, #4
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 fda5 	bl	8004118 <HAL_RCC_ClockConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015d4:	f000 f804 	bl	80015e0 <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	3758      	adds	r7, #88	; 0x58
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>
	...

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_MspInit+0x44>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_MspInit+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x44>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_MspInit+0x44>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_MspInit+0x44>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_MspInit+0x44>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler+0x4>

0800163a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <MemManage_Handler+0x4>

08001646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <UsageFault_Handler+0x4>

08001652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001680:	f000 f9dc 	bl	8001a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}

08001688 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Channel1_IRQHandler+0x10>)
 800168e:	f001 fe2a 	bl	80032e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000b4 	.word	0x200000b4

0800169c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA1_Channel5_IRQHandler+0x10>)
 80016a2:	f001 fe20 	bl	80032e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000298 	.word	0x20000298

080016b0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <CAN1_RX0_IRQHandler+0x10>)
 80016b6:	f001 f9a7 	bl	8002a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000028 	.word	0x20000028

080016c4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <CAN1_RX1_IRQHandler+0x10>)
 80016ca:	f001 f99d 	bl	8002a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000028 	.word	0x20000028

080016d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80016de:	f003 fa95 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000017c 	.word	0x2000017c

080016ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80016f2:	f003 fa8b 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000017c 	.word	0x2000017c

08001700 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001706:	f003 fa81 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000017c 	.word	0x2000017c

08001714 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM1_CC_IRQHandler+0x10>)
 800171a:	f003 fa77 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000017c 	.word	0x2000017c

08001728 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <USART1_IRQHandler+0x10>)
 800172e:	f003 fdff 	bl	8005330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000214 	.word	0x20000214

0800173c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM6_DAC_IRQHandler+0x10>)
 8001742:	f003 fa63 	bl	8004c0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001c8 	.word	0x200001c8

08001750 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_TIM1_Init+0xa0>)
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <MX_TIM1_Init+0xa4>)
 8001796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_TIM1_Init+0xa0>)
 800179a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800179e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017c0:	4814      	ldr	r0, [pc, #80]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017c2:	f003 f99d 	bl	8004b00 <HAL_TIM_Base_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80017cc:	f7ff ff08 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017de:	f003 fb34 	bl	8004e4a <HAL_TIM_ConfigClockSource>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80017e8:	f7ff fefa 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM1_Init+0xa0>)
 80017fe:	f003 fd13 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001808:	f7ff feea 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	2000017c 	.word	0x2000017c
 8001818:	40012c00 	.word	0x40012c00

0800181c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_TIM6_Init+0x68>)
 800182e:	4a16      	ldr	r2, [pc, #88]	; (8001888 <MX_TIM6_Init+0x6c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <MX_TIM6_Init+0x68>)
 8001834:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001838:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <MX_TIM6_Init+0x68>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8001840:	4b10      	ldr	r3, [pc, #64]	; (8001884 <MX_TIM6_Init+0x68>)
 8001842:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001846:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <MX_TIM6_Init+0x68>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800184e:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_TIM6_Init+0x68>)
 8001850:	f003 f956 	bl	8004b00 <HAL_TIM_Base_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800185a:	f7ff fec1 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	; (8001884 <MX_TIM6_Init+0x68>)
 800186c:	f003 fcdc 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001876:	f7ff feb3 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200001c8 	.word	0x200001c8
 8001888:	40001000 	.word	0x40001000

0800188c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_TIM_Base_MspInit+0xa8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 80018a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a8:	6613      	str	r3, [r2, #96]	; 0x60
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2018      	movs	r0, #24
 80018bc:	f001 fba5 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018c0:	2018      	movs	r0, #24
 80018c2:	f001 fbbe 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2019      	movs	r0, #25
 80018cc:	f001 fb9d 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018d0:	2019      	movs	r0, #25
 80018d2:	f001 fbb6 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	201a      	movs	r0, #26
 80018dc:	f001 fb95 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80018e0:	201a      	movs	r0, #26
 80018e2:	f001 fbae 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201b      	movs	r0, #27
 80018ec:	f001 fb8d 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018f0:	201b      	movs	r0, #27
 80018f2:	f001 fba6 	bl	8003042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80018f6:	e018      	b.n	800192a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_TIM_Base_MspInit+0xb0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d113      	bne.n	800192a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_TIM_Base_MspInit+0xac>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2036      	movs	r0, #54	; 0x36
 8001920:	f001 fb73 	bl	800300a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001924:	2036      	movs	r0, #54	; 0x36
 8001926:	f001 fb8c 	bl	8003042 <HAL_NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012c00 	.word	0x40012c00
 8001938:	40021000 	.word	0x40021000
 800193c:	40001000 	.word	0x40001000

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff ff04 	bl	8001750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f004 f88f 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fdd1 	bl	8001518 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001978:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001984:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 8001988:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800198c:	200002e4 	.word	0x200002e4

08001990 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_IRQHandler>

08001992 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f001 fb29 	bl	8002ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	200f      	movs	r0, #15
 80019a4:	f000 f80e 	bl	80019c4 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	e001      	b.n	80019b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019b4:	f7ff fe1a 	bl	80015ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_InitTick+0x6c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_InitTick+0x70>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_InitTick+0x6c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fb35 	bl	800305e <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d809      	bhi.n	8001a14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f001 faff 	bl	800300a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_InitTick+0x74>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e007      	b.n	8001a24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e004      	b.n	8001a24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e001      	b.n	8001a24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_IncTick+0x20>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x24>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_IncTick+0x24>)
 8001a4e:	6013      	str	r3, [r2, #0]
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	200002e0 	.word	0x200002e0

08001a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_GetTick+0x14>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200002e0 	.word	0x200002e0

08001a7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3360      	adds	r3, #96	; 0x60
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <LL_ADC_SetOffset+0x44>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b1c:	bf00      	nop
 8001b1e:	371c      	adds	r7, #28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	03fff000 	.word	0x03fff000

08001b2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3360      	adds	r3, #96	; 0x60
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3360      	adds	r3, #96	; 0x60
 8001b68:	461a      	mov	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b087      	sub	sp, #28
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3330      	adds	r3, #48	; 0x30
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	4413      	add	r3, r2
 8001bac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	211f      	movs	r1, #31
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0e9b      	lsrs	r3, r3, #26
 8001bc6:	f003 011f 	and.w	r1, r3, #31
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bda:	bf00      	nop
 8001bdc:	371c      	adds	r7, #28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b087      	sub	sp, #28
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3314      	adds	r3, #20
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0e5b      	lsrs	r3, r3, #25
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	0d1b      	lsrs	r3, r3, #20
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2107      	movs	r1, #7
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	0d1b      	lsrs	r3, r3, #20
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c54:	43db      	mvns	r3, r3
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0318 	and.w	r3, r3, #24
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	400b      	ands	r3, r1
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0007ffff 	.word	0x0007ffff

08001c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6093      	str	r3, [r2, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <LL_ADC_IsEnabled+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_ADC_IsEnabled+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d101      	bne.n	8001d84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e12c      	b.n	8002008 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fa07 	bl	80011d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff67 	bl	8001ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff4d 	bl	8001c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff82 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff66 	bl	8001cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_ADC_Init+0x27c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a82      	ldr	r2, [pc, #520]	; (8002014 <HAL_ADC_Init+0x280>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff64 	bl	8001cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff75 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80c5 	bne.w	8001ff6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 80c1 	bne.w	8001ff6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff49 	bl	8001d20 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e94:	4860      	ldr	r0, [pc, #384]	; (8002018 <HAL_ADC_Init+0x284>)
 8001e96:	f7ff ff43 	bl	8001d20 <LL_ADC_IsEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	485d      	ldr	r0, [pc, #372]	; (800201c <HAL_ADC_Init+0x288>)
 8001ea8:	f7ff fde8 	bl	8001a7c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e5b      	ldrb	r3, [r3, #25]
 8001eb0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ebc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ec2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	045b      	lsls	r3, r3, #17
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4b45      	ldr	r3, [pc, #276]	; (8002020 <HAL_ADC_Init+0x28c>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	69b9      	ldr	r1, [r7, #24]
 8001f14:	430b      	orrs	r3, r1
 8001f16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff12 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8001f22:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff1f 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 8001f2e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d13d      	bne.n	8001fb2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d13a      	bne.n	8001fb2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f40:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f58:	f023 0302 	bic.w	r3, r3, #2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	69b9      	ldr	r1, [r7, #24]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d118      	bne.n	8001fa2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f86:	4311      	orrs	r1, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f92:	430a      	orrs	r2, r1
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	611a      	str	r2, [r3, #16]
 8001fa0:	e007      	b.n	8001fb2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f023 010f 	bic.w	r1, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd2:	e007      	b.n	8001fe4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020f 	bic.w	r2, r2, #15
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f023 0303 	bic.w	r3, r3, #3
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002006:	7ffb      	ldrb	r3, [r7, #31]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20000000 	.word	0x20000000
 8002014:	053e2d63 	.word	0x053e2d63
 8002018:	50040000 	.word	0x50040000
 800201c:	50040300 	.word	0x50040300
 8002020:	fff0c007 	.word	0xfff0c007

08002024 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0b6      	sub	sp, #216	; 0xd8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x22>
 8002042:	2302      	movs	r3, #2
 8002044:	e3b9      	b.n	80027ba <HAL_ADC_ConfigChannel+0x796>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe77 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 839e 	bne.w	800279c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	3b02      	subs	r3, #2
 800206e:	2b03      	cmp	r3, #3
 8002070:	d81b      	bhi.n	80020aa <HAL_ADC_ConfigChannel+0x86>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_ADC_ConfigChannel+0x54>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	08002089 	.word	0x08002089
 800207c:	08002091 	.word	0x08002091
 8002080:	08002099 	.word	0x08002099
 8002084:	080020a1 	.word	0x080020a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	220c      	movs	r2, #12
 800208c:	605a      	str	r2, [r3, #4]
          break;
 800208e:	e011      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2212      	movs	r2, #18
 8002094:	605a      	str	r2, [r3, #4]
          break;
 8002096:	e00d      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2218      	movs	r2, #24
 800209c:	605a      	str	r2, [r3, #4]
          break;
 800209e:	e009      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a6:	605a      	str	r2, [r3, #4]
          break;
 80020a8:	e004      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2206      	movs	r2, #6
 80020ae:	605a      	str	r2, [r3, #4]
          break;
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	f7ff fd64 	bl	8001b8e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fe3b 	bl	8001d46 <LL_ADC_REG_IsConversionOngoing>
 80020d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff fe47 	bl	8001d6c <LL_ADC_INJ_IsConversionOngoing>
 80020de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 81a6 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 81a1 	bne.w	8002438 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff fd6f 	bl	8001be6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	08db      	lsrs	r3, r3, #3
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00a      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800213a:	f7ff fcd3 	bl	8001ae4 <LL_ADC_SetOffset>
 800213e:	e17b      	b.n	8002438 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2100      	movs	r1, #0
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fcf0 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x148>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fce5 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	0e9b      	lsrs	r3, r3, #26
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	e01e      	b.n	80021aa <HAL_ADC_ConfigChannel+0x186>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fcda 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800218e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002192:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800219a:	2320      	movs	r3, #32
 800219c:	e004      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800219e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x19e>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	f003 031f 	and.w	r3, r3, #31
 80021c0:	e018      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80021e6:	2320      	movs	r3, #32
 80021e8:	e004      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80021ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ee:	fab3 f383 	clz	r3, r3
 80021f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d106      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fca9 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc8d 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002212:	4603      	mov	r3, r0
 8002214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x20e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fc82 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	e01e      	b.n	8002270 <HAL_ADC_ConfigChannel+0x24c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fc77 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e004      	b.n	800226e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002264:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002268:	fab3 f383 	clz	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x264>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0e9b      	lsrs	r3, r3, #26
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	e018      	b.n	80022ba <HAL_ADC_ConfigChannel+0x296>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800229c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e004      	b.n	80022ba <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80022b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b4:	fab3 f383 	clz	r3, r3
 80022b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d106      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fc46 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2102      	movs	r1, #2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fc2a 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x2d4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2102      	movs	r1, #2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fc1f 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	f003 021f 	and.w	r2, r3, #31
 80022f6:	e01e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x312>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fc14 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800231e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e004      	b.n	8002334 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800232a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_ADC_ConfigChannel+0x32a>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0e9b      	lsrs	r3, r3, #26
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	e016      	b.n	800237c <HAL_ADC_ConfigChannel+0x358>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800236e:	2320      	movs	r3, #32
 8002370:	e004      	b.n	800237c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002372:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800237c:	429a      	cmp	r2, r3
 800237e:	d106      	bne.n	800238e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	2102      	movs	r1, #2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fbe5 	bl	8001b58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2103      	movs	r1, #3
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fbc9 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x396>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2103      	movs	r1, #3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fbbe 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	e017      	b.n	80023ea <HAL_ADC_ConfigChannel+0x3c6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2103      	movs	r1, #3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fbb3 	bl	8001b2c <LL_ADC_GetOffsetChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80023dc:	2320      	movs	r3, #32
 80023de:	e003      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80023e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x3de>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e9b      	lsrs	r3, r3, #26
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	e011      	b.n	8002426 <HAL_ADC_ConfigChannel+0x402>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002412:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002426:	429a      	cmp	r2, r3
 8002428:	d106      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fb90 	bl	8001b58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fc6f 	bl	8001d20 <LL_ADC_IsEnabled>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 813f 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	461a      	mov	r2, r3
 8002458:	f7ff fbf0 	bl	8001c3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a8e      	ldr	r2, [pc, #568]	; (800269c <HAL_ADC_ConfigChannel+0x678>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 8130 	bne.w	80026c8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10b      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x46c>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0e9b      	lsrs	r3, r3, #26
 800247e:	3301      	adds	r3, #1
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2b09      	cmp	r3, #9
 8002486:	bf94      	ite	ls
 8002488:	2301      	movls	r3, #1
 800248a:	2300      	movhi	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e019      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x4a0>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80024ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2b09      	cmp	r3, #9
 80024bc:	bf94      	ite	ls
 80024be:	2301      	movls	r3, #1
 80024c0:	2300      	movhi	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d079      	beq.n	80025bc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x4c0>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e2:	e015      	b.n	8002510 <HAL_ADC_ConfigChannel+0x4ec>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	069b      	lsls	r3, r3, #26
 800250c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x50c>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	0e9b      	lsrs	r3, r3, #26
 8002522:	3301      	adds	r3, #1
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	e017      	b.n	8002560 <HAL_ADC_ConfigChannel+0x53c>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002548:	2320      	movs	r3, #32
 800254a:	e003      	b.n	8002554 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	ea42 0103 	orr.w	r1, r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x562>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	051b      	lsls	r3, r3, #20
 8002584:	e018      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x594>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800259e:	2320      	movs	r3, #32
 80025a0:	e003      	b.n	80025aa <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80025a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3301      	adds	r3, #1
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	430b      	orrs	r3, r1
 80025ba:	e080      	b.n	80026be <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x5b4>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	069b      	lsls	r3, r3, #26
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d6:	e015      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5e0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x600>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	0e9b      	lsrs	r3, r3, #26
 8002616:	3301      	adds	r3, #1
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f303 	lsl.w	r3, r1, r3
 8002622:	e017      	b.n	8002654 <HAL_ADC_ConfigChannel+0x630>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	61fb      	str	r3, [r7, #28]
  return result;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	ea42 0103 	orr.w	r1, r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10d      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x65c>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	3b1e      	subs	r3, #30
 8002678:	051b      	lsls	r3, r3, #20
 800267a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800267e:	e01d      	b.n	80026bc <HAL_ADC_ConfigChannel+0x698>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	613b      	str	r3, [r7, #16]
  return result;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d103      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e005      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x684>
 800269c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 021f 	and.w	r2, r3, #31
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	3b1e      	subs	r3, #30
 80026b6:	051b      	lsls	r3, r3, #20
 80026b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026bc:	430b      	orrs	r3, r1
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	6892      	ldr	r2, [r2, #8]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7ff fa8f 	bl	8001be6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_ADC_ConfigChannel+0x7a0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d06c      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026d4:	483c      	ldr	r0, [pc, #240]	; (80027c8 <HAL_ADC_ConfigChannel+0x7a4>)
 80026d6:	f7ff f9f7 	bl	8001ac8 <LL_ADC_GetCommonPathInternalCh>
 80026da:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_ADC_ConfigChannel+0x7a8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d127      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d121      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a35      	ldr	r2, [pc, #212]	; (80027d0 <HAL_ADC_ConfigChannel+0x7ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d157      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002702:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002706:	4619      	mov	r1, r3
 8002708:	482f      	ldr	r0, [pc, #188]	; (80027c8 <HAL_ADC_ConfigChannel+0x7a4>)
 800270a:	f7ff f9ca 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002728:	e002      	b.n	8002730 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3b01      	subs	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f9      	bne.n	800272a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002736:	e03a      	b.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_ADC_ConfigChannel+0x7b8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d113      	bne.n	800276a <HAL_ADC_ConfigChannel+0x746>
 8002742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d12a      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002758:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800275c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002760:	4619      	mov	r1, r3
 8002762:	4819      	ldr	r0, [pc, #100]	; (80027c8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002764:	f7ff f99d 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002768:	e021      	b.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1c      	ldr	r2, [pc, #112]	; (80027e0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d11c      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d116      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800278e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002792:	4619      	mov	r1, r3
 8002794:	480c      	ldr	r0, [pc, #48]	; (80027c8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002796:	f7ff f984 	bl	8001aa2 <LL_ADC_SetCommonPathInternalCh>
 800279a:	e008      	b.n	80027ae <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	37d8      	adds	r7, #216	; 0xd8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	80080000 	.word	0x80080000
 80027c8:	50040300 	.word	0x50040300
 80027cc:	c7520000 	.word	0xc7520000
 80027d0:	50040000 	.word	0x50040000
 80027d4:	20000000 	.word	0x20000000
 80027d8:	053e2d63 	.word	0x053e2d63
 80027dc:	cb840000 	.word	0xcb840000
 80027e0:	80000001 	.word	0x80000001

080027e4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027fa:	7dfb      	ldrb	r3, [r7, #23]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d003      	beq.n	8002808 <HAL_CAN_GetRxMessage+0x24>
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b02      	cmp	r3, #2
 8002804:	f040 80f3 	bne.w	80029ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0e7      	b.n	80029fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0d8      	b.n	80029fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	331b      	adds	r3, #27
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	4413      	add	r3, r2
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0204 	and.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	331b      	adds	r3, #27
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0d5b      	lsrs	r3, r3, #21
 8002878:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e00b      	b.n	800289a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	331b      	adds	r3, #27
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	331b      	adds	r3, #27
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	4413      	add	r3, r2
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0202 	and.w	r2, r3, #2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	331b      	adds	r3, #27
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	331b      	adds	r3, #27
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	331b      	adds	r3, #27
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b2da      	uxtb	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0a1a      	lsrs	r2, r3, #8
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	4413      	add	r3, r2
 8002932:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0c1a      	lsrs	r2, r3, #16
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	3302      	adds	r3, #2
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	4413      	add	r3, r2
 800294c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	0e1a      	lsrs	r2, r3, #24
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	3303      	adds	r3, #3
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	4413      	add	r3, r2
 8002966:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3304      	adds	r3, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4413      	add	r3, r2
 800297e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0a1a      	lsrs	r2, r3, #8
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3305      	adds	r3, #5
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	4413      	add	r3, r2
 8002998:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	0c1a      	lsrs	r2, r3, #16
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	3306      	adds	r3, #6
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	0e1a      	lsrs	r2, r3, #24
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3307      	adds	r3, #7
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d108      	bne.n	80029da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0220 	orr.w	r2, r2, #32
 80029d6:	60da      	str	r2, [r3, #12]
 80029d8:	e007      	b.n	80029ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0220 	orr.w	r2, r2, #32
 80029e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e006      	b.n	80029fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07c      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d023      	beq.n	8002aa0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f983 	bl	8002d76 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a70:	e016      	b.n	8002aa0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
 8002a84:	e00c      	b.n	8002aa0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
 8002a98:	e002      	b.n	8002aa0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f989 	bl	8002db2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d024      	beq.n	8002af4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f963 	bl	8002d8a <HAL_CAN_TxMailbox1CompleteCallback>
 8002ac4:	e016      	b.n	8002af4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad8:	e00c      	b.n	8002af4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d004      	beq.n	8002aee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	e002      	b.n	8002af4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f969 	bl	8002dc6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d024      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f943 	bl	8002d9e <HAL_CAN_TxMailbox2CompleteCallback>
 8002b18:	e016      	b.n	8002b48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2c:	e00c      	b.n	8002b48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d004      	beq.n	8002b42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b40:	e002      	b.n	8002b48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f949 	bl	8002dda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00c      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2208      	movs	r2, #8
 8002b86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f930 	bl	8002dee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe fa7c 	bl	80010a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d006      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2208      	movs	r2, #8
 8002bea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f912 	bl	8002e16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8f9 	bl	8002e02 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8fc 	bl	8002e2a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f8f5 	bl	8002e3e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d07b      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d072      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d008      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d043      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d03e      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd6:	2b60      	cmp	r3, #96	; 0x60
 8002cd8:	d02b      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x32a>
 8002cda:	2b60      	cmp	r3, #96	; 0x60
 8002cdc:	d82e      	bhi.n	8002d3c <HAL_CAN_IRQHandler+0x334>
 8002cde:	2b50      	cmp	r3, #80	; 0x50
 8002ce0:	d022      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x320>
 8002ce2:	2b50      	cmp	r3, #80	; 0x50
 8002ce4:	d82a      	bhi.n	8002d3c <HAL_CAN_IRQHandler+0x334>
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d019      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x316>
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d826      	bhi.n	8002d3c <HAL_CAN_IRQHandler+0x334>
 8002cee:	2b30      	cmp	r3, #48	; 0x30
 8002cf0:	d010      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x30c>
 8002cf2:	2b30      	cmp	r3, #48	; 0x30
 8002cf4:	d822      	bhi.n	8002d3c <HAL_CAN_IRQHandler+0x334>
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d002      	beq.n	8002d00 <HAL_CAN_IRQHandler+0x2f8>
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d005      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cfe:	e01d      	b.n	8002d3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d08:	e019      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	f043 0310 	orr.w	r3, r3, #16
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d12:	e014      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f043 0320 	orr.w	r3, r3, #32
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d1c:	e00f      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d26:	e00a      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d30:	e005      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d3a:	e000      	b.n	8002d3e <HAL_CAN_IRQHandler+0x336>
            break;
 8002d3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699a      	ldr	r2, [r3, #24]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2204      	movs	r2, #4
 8002d54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe f9bf 	bl	80010ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b083      	sub	sp, #12
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
         );
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d301      	bcc.n	8002fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00f      	b.n	8002fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <SysTick_Config+0x40>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fce:	210f      	movs	r1, #15
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f7ff ff8e 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <SysTick_Config+0x40>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SysTick_Config+0x40>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010

08002ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff29 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff3e 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff8e 	bl	8002f48 <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5d 	bl	8002ef4 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff31 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffa2 	bl	8002fb0 <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e098      	b.n	80031bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <HAL_DMA_Init+0x150>)
 8003092:	429a      	cmp	r2, r3
 8003094:	d80f      	bhi.n	80030b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <HAL_DMA_Init+0x154>)
 800309e:	4413      	add	r3, r2
 80030a0:	4a4b      	ldr	r2, [pc, #300]	; (80031d0 <HAL_DMA_Init+0x158>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	009a      	lsls	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_DMA_Init+0x15c>)
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
 80030b4:	e00e      	b.n	80030d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b46      	ldr	r3, [pc, #280]	; (80031d8 <HAL_DMA_Init+0x160>)
 80030be:	4413      	add	r3, r2
 80030c0:	4a43      	ldr	r2, [pc, #268]	; (80031d0 <HAL_DMA_Init+0x158>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	009a      	lsls	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a42      	ldr	r2, [pc, #264]	; (80031dc <HAL_DMA_Init+0x164>)
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800312e:	d039      	beq.n	80031a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_DMA_Init+0x15c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d11a      	bne.n	8003170 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800313a:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <HAL_DMA_Init+0x168>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f003 031c 	and.w	r3, r3, #28
 8003146:	210f      	movs	r1, #15
 8003148:	fa01 f303 	lsl.w	r3, r1, r3
 800314c:	43db      	mvns	r3, r3
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <HAL_DMA_Init+0x168>)
 8003150:	4013      	ands	r3, r2
 8003152:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <HAL_DMA_Init+0x168>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f003 031c 	and.w	r3, r3, #28
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	491d      	ldr	r1, [pc, #116]	; (80031e0 <HAL_DMA_Init+0x168>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
 800316e:	e019      	b.n	80031a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_DMA_Init+0x16c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	f003 031c 	and.w	r3, r3, #28
 800317c:	210f      	movs	r1, #15
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	4917      	ldr	r1, [pc, #92]	; (80031e4 <HAL_DMA_Init+0x16c>)
 8003186:	4013      	ands	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_DMA_Init+0x16c>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f003 031c 	and.w	r3, r3, #28
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	4911      	ldr	r1, [pc, #68]	; (80031e4 <HAL_DMA_Init+0x16c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40020407 	.word	0x40020407
 80031cc:	bffdfff8 	.word	0xbffdfff8
 80031d0:	cccccccd 	.word	0xcccccccd
 80031d4:	40020000 	.word	0x40020000
 80031d8:	bffdfbf8 	.word	0xbffdfbf8
 80031dc:	40020400 	.word	0x40020400
 80031e0:	400200a8 	.word	0x400200a8
 80031e4:	400204a8 	.word	0x400204a8

080031e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d008      	beq.n	8003212 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e022      	b.n	8003258 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 020e 	bic.w	r2, r2, #14
 8003220:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f003 021c 	and.w	r2, r3, #28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d005      	beq.n	8003288 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2204      	movs	r2, #4
 8003280:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	e029      	b.n	80032dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	f003 021c 	and.w	r2, r3, #28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
    }
  }
  return status;
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	f003 031c 	and.w	r3, r3, #28
 8003306:	2204      	movs	r2, #4
 8003308:	409a      	lsls	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4013      	ands	r3, r2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d026      	beq.n	8003360 <HAL_DMA_IRQHandler+0x7a>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d021      	beq.n	8003360 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d107      	bne.n	800333a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f003 021c 	and.w	r2, r3, #28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	2104      	movs	r1, #4
 8003348:	fa01 f202 	lsl.w	r2, r1, r2
 800334c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	2b00      	cmp	r3, #0
 8003354:	d071      	beq.n	800343a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800335e:	e06c      	b.n	800343a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f003 031c 	and.w	r3, r3, #28
 8003368:	2202      	movs	r2, #2
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02e      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xec>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d029      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 020a 	bic.w	r2, r2, #10
 800339a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f003 021c 	and.w	r2, r3, #28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2102      	movs	r1, #2
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d038      	beq.n	800343a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033d0:	e033      	b.n	800343a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f003 031c 	and.w	r3, r3, #28
 80033da:	2208      	movs	r2, #8
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02a      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d025      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 020e 	bic.w	r2, r2, #14
 80033fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f003 021c 	and.w	r2, r3, #28
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2101      	movs	r1, #1
 800340e:	fa01 f202 	lsl.w	r2, r1, r2
 8003412:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800343a:	bf00      	nop
 800343c:	bf00      	nop
}
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003452:	e154      	b.n	80036fe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2101      	movs	r1, #1
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	4013      	ands	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8146 	beq.w	80036f8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b01      	cmp	r3, #1
 8003476:	d005      	beq.n	8003484 <HAL_GPIO_Init+0x40>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d130      	bne.n	80034e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034ba:	2201      	movs	r2, #1
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0201 	and.w	r2, r3, #1
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d017      	beq.n	8003522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d123      	bne.n	8003576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	08da      	lsrs	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3208      	adds	r2, #8
 8003536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4013      	ands	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	6939      	ldr	r1, [r7, #16]
 8003572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	2203      	movs	r2, #3
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0203 	and.w	r2, r3, #3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80a0 	beq.w	80036f8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_GPIO_Init+0x2d8>)
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_GPIO_Init+0x2d8>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6613      	str	r3, [r2, #96]	; 0x60
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_GPIO_Init+0x2d8>)
 80035c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035d0:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_GPIO_Init+0x2dc>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	220f      	movs	r2, #15
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4013      	ands	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035fa:	d019      	beq.n	8003630 <HAL_GPIO_Init+0x1ec>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a49      	ldr	r2, [pc, #292]	; (8003724 <HAL_GPIO_Init+0x2e0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_GPIO_Init+0x1e8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a48      	ldr	r2, [pc, #288]	; (8003728 <HAL_GPIO_Init+0x2e4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_GPIO_Init+0x1e4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_GPIO_Init+0x2e8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <HAL_GPIO_Init+0x1e0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a46      	ldr	r2, [pc, #280]	; (8003730 <HAL_GPIO_Init+0x2ec>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_GPIO_Init+0x1dc>
 800361c:	2304      	movs	r3, #4
 800361e:	e008      	b.n	8003632 <HAL_GPIO_Init+0x1ee>
 8003620:	2307      	movs	r3, #7
 8003622:	e006      	b.n	8003632 <HAL_GPIO_Init+0x1ee>
 8003624:	2303      	movs	r3, #3
 8003626:	e004      	b.n	8003632 <HAL_GPIO_Init+0x1ee>
 8003628:	2302      	movs	r3, #2
 800362a:	e002      	b.n	8003632 <HAL_GPIO_Init+0x1ee>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_GPIO_Init+0x1ee>
 8003630:	2300      	movs	r3, #0
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	f002 0203 	and.w	r2, r2, #3
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	4093      	lsls	r3, r2
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003642:	4937      	ldr	r1, [pc, #220]	; (8003720 <HAL_GPIO_Init+0x2dc>)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	3302      	adds	r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003650:	4b38      	ldr	r3, [pc, #224]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	43db      	mvns	r3, r3
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003674:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800369e:	4a25      	ldr	r2, [pc, #148]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036a4:	4b23      	ldr	r3, [pc, #140]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_GPIO_Init+0x2f0>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3301      	adds	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	f47f aea3 	bne.w	8003454 <HAL_GPIO_Init+0x10>
  }
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	40010000 	.word	0x40010000
 8003724:	48000400 	.word	0x48000400
 8003728:	48000800 	.word	0x48000800
 800372c:	48000c00 	.word	0x48000c00
 8003730:	48001000 	.word	0x48001000
 8003734:	40010400 	.word	0x40010400

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003754:	e002      	b.n	800375c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003756:	887a      	ldrh	r2, [r7, #2]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e041      	b.n	80037fe <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003782:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f245 5255 	movw	r2, #21845	; 0x5555
 800378c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6852      	ldr	r2, [r2, #4]
 8003796:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80037a2:	f7fe f95f 	bl	8001a64 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80037a8:	e00f      	b.n	80037ca <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80037aa:	f7fe f95b 	bl	8001a64 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b31      	cmp	r3, #49	; 0x31
 80037b6:	d908      	bls.n	80037ca <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e019      	b.n	80037fe <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e8      	bne.n	80037aa <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d005      	beq.n	80037f2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	611a      	str	r2, [r3, #16]
 80037f0:	e004      	b.n	80037fc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003816:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <HAL_PWREx_GetVoltageRange+0x18>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40007000 	.word	0x40007000

08003844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003852:	d130      	bne.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d038      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800386a:	4a1e      	ldr	r2, [pc, #120]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800386c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2232      	movs	r2, #50	; 0x32
 8003878:	fb02 f303 	mul.w	r3, r2, r3
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0c9b      	lsrs	r3, r3, #18
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003888:	e002      	b.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d102      	bne.n	80038a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f2      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b0:	d110      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e00f      	b.n	80038d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d007      	beq.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038c4:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038cc:	4a05      	ldr	r2, [pc, #20]	; (80038e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000
 80038e8:	20000000 	.word	0x20000000
 80038ec:	431bde83 	.word	0x431bde83

080038f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f000 bc02 	b.w	8004108 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003904:	4b96      	ldr	r3, [pc, #600]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800390e:	4b94      	ldr	r3, [pc, #592]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80e4 	beq.w	8003aee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_RCC_OscConfig+0x4c>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	f040 808b 	bne.w	8003a4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b01      	cmp	r3, #1
 8003938:	f040 8087 	bne.w	8003a4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800393c:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x64>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e3d9      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1a      	ldr	r2, [r3, #32]
 8003958:	4b81      	ldr	r3, [pc, #516]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_RCC_OscConfig+0x7e>
 8003964:	4b7e      	ldr	r3, [pc, #504]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	e005      	b.n	800397a <HAL_RCC_OscConfig+0x8a>
 800396e:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800397a:	4293      	cmp	r3, r2
 800397c:	d223      	bcs.n	80039c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fd52 	bl	800442c <RCC_SetFlashLatencyFromMSIRange>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e3ba      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a72      	ldr	r2, [pc, #456]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003998:	f043 0308 	orr.w	r3, r3, #8
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b70      	ldr	r3, [pc, #448]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	496d      	ldr	r1, [pc, #436]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039b0:	4b6b      	ldr	r3, [pc, #428]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	4968      	ldr	r1, [pc, #416]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
 80039c4:	e025      	b.n	8003a12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c6:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039cc:	f043 0308 	orr.w	r3, r3, #8
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4960      	ldr	r1, [pc, #384]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e4:	4b5e      	ldr	r3, [pc, #376]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	495b      	ldr	r1, [pc, #364]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fd12 	bl	800442c <RCC_SetFlashLatencyFromMSIRange>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e37a      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a12:	f000 fc81 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	4950      	ldr	r1, [pc, #320]	; (8003b64 <HAL_RCC_OscConfig+0x274>)
 8003a24:	5ccb      	ldrb	r3, [r1, r3]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2e:	4a4e      	ldr	r2, [pc, #312]	; (8003b68 <HAL_RCC_OscConfig+0x278>)
 8003a30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a32:	4b4e      	ldr	r3, [pc, #312]	; (8003b6c <HAL_RCC_OscConfig+0x27c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fd ffc4 	bl	80019c4 <HAL_InitTick>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d052      	beq.n	8003aec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	e35e      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d032      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a52:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a42      	ldr	r2, [pc, #264]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe f801 	bl	8001a64 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a66:	f7fd fffd 	bl	8001a64 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e347      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a84:	4b36      	ldr	r3, [pc, #216]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4930      	ldr	r1, [pc, #192]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa2:	4b2f      	ldr	r3, [pc, #188]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	492b      	ldr	r1, [pc, #172]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	604b      	str	r3, [r1, #4]
 8003ab6:	e01a      	b.n	8003aee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ab8:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a28      	ldr	r2, [pc, #160]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd ffce 	bl	8001a64 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003acc:	f7fd ffca 	bl	8001a64 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e314      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ade:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1dc>
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d073      	beq.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x21c>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d10e      	bne.n	8003b24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d10b      	bne.n	8003b24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0c:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d063      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2f0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d15f      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e2f1      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2c:	d106      	bne.n	8003b3c <HAL_RCC_OscConfig+0x24c>
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e025      	b.n	8003b88 <HAL_RCC_OscConfig+0x298>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b44:	d114      	bne.n	8003b70 <HAL_RCC_OscConfig+0x280>
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a05      	ldr	r2, [pc, #20]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	4b03      	ldr	r3, [pc, #12]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a02      	ldr	r2, [pc, #8]	; (8003b60 <HAL_RCC_OscConfig+0x270>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e013      	b.n	8003b88 <HAL_RCC_OscConfig+0x298>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	08005b00 	.word	0x08005b00
 8003b68:	20000000 	.word	0x20000000
 8003b6c:	20000004 	.word	0x20000004
 8003b70:	4ba0      	ldr	r3, [pc, #640]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a9f      	ldr	r2, [pc, #636]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b9d      	ldr	r3, [pc, #628]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a9c      	ldr	r2, [pc, #624]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd ff68 	bl	8001a64 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fd ff64 	bl	8001a64 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e2ae      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003baa:	4b92      	ldr	r3, [pc, #584]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x2a8>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd ff54 	bl	8001a64 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd ff50 	bl	8001a64 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e29a      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d0>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d060      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_OscConfig+0x310>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d119      	bne.n	8003c2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d116      	bne.n	8003c2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c00:	4b7c      	ldr	r3, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_OscConfig+0x328>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e277      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	4973      	ldr	r1, [pc, #460]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c2c:	e040      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d023      	beq.n	8003c7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c36:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6e      	ldr	r2, [pc, #440]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fd ff0f 	bl	8001a64 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fd ff0b 	bl	8001a64 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e255      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5c:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c68:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	495f      	ldr	r1, [pc, #380]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd feeb 	bl	8001a64 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c92:	f7fd fee7 	bl	8001a64 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e231      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca4:	4b53      	ldr	r3, [pc, #332]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d03c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01c      	beq.n	8003cfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd4:	f7fd fec6 	bl	8001a64 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cdc:	f7fd fec2 	bl	8001a64 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e20c      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCC_OscConfig+0x3ec>
 8003cfc:	e01b      	b.n	8003d36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cfe:	4b3d      	ldr	r3, [pc, #244]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fd fea9 	bl	8001a64 <HAL_GetTick>
 8003d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d16:	f7fd fea5 	bl	8001a64 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e1ef      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d28:	4b32      	ldr	r3, [pc, #200]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80a6 	beq.w	8003e90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d44:	2300      	movs	r3, #0
 8003d46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d60:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d118      	bne.n	8003dae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7c:	4b1e      	ldr	r3, [pc, #120]	; (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1d      	ldr	r2, [pc, #116]	; (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fe6c 	bl	8001a64 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d90:	f7fd fe68 	bl	8001a64 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1b2      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_RCC_OscConfig+0x508>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d108      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4d8>
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	4a0d      	ldr	r2, [pc, #52]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dc6:	e029      	b.n	8003e1c <HAL_RCC_OscConfig+0x52c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d115      	bne.n	8003dfc <HAL_RCC_OscConfig+0x50c>
 8003dd0:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	4a03      	ldr	r2, [pc, #12]	; (8003df4 <HAL_RCC_OscConfig+0x504>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003df0:	e014      	b.n	8003e1c <HAL_RCC_OscConfig+0x52c>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	4b9a      	ldr	r3, [pc, #616]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	4a99      	ldr	r2, [pc, #612]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e0c:	4b96      	ldr	r3, [pc, #600]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	4a95      	ldr	r2, [pc, #596]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d016      	beq.n	8003e52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd fe1e 	bl	8001a64 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	e00a      	b.n	8003e42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2c:	f7fd fe1a 	bl	8001a64 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e162      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e42:	4b89      	ldr	r3, [pc, #548]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ed      	beq.n	8003e2c <HAL_RCC_OscConfig+0x53c>
 8003e50:	e015      	b.n	8003e7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fd fe07 	bl	8001a64 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	e00a      	b.n	8003e70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fd fe03 	bl	8001a64 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e14b      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e70:	4b7d      	ldr	r3, [pc, #500]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ed      	bne.n	8003e5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b78      	ldr	r3, [pc, #480]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	4a77      	ldr	r2, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03c      	beq.n	8003f16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01c      	beq.n	8003ede <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ea4:	4b70      	ldr	r3, [pc, #448]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003eaa:	4a6f      	ldr	r2, [pc, #444]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fdd6 	bl	8001a64 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ebc:	f7fd fdd2 	bl	8001a64 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e11c      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ece:	4b66      	ldr	r3, [pc, #408]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0ef      	beq.n	8003ebc <HAL_RCC_OscConfig+0x5cc>
 8003edc:	e01b      	b.n	8003f16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ede:	4b62      	ldr	r3, [pc, #392]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003ee0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee4:	4a60      	ldr	r2, [pc, #384]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd fdb9 	bl	8001a64 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ef6:	f7fd fdb5 	bl	8001a64 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0ff      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f08:	4b57      	ldr	r3, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ef      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80f3 	beq.w	8004106 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	f040 80c9 	bne.w	80040bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f2a:	4b4f      	ldr	r3, [pc, #316]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 0203 	and.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d12c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d123      	bne.n	8003f98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d11b      	bne.n	8003f98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d113      	bne.n	8003f98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d109      	bne.n	8003f98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	3b01      	subs	r3, #1
 8003f92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d06b      	beq.n	8004070 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d062      	beq.n	8004064 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f9e:	4b32      	ldr	r3, [pc, #200]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0ac      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fae:	4b2e      	ldr	r3, [pc, #184]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003fb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fba:	f7fd fd53 	bl	8001a64 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fd fd4f 	bl	8001a64 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e099      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	4b21      	ldr	r3, [pc, #132]	; (800406c <HAL_RCC_OscConfig+0x77c>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ff0:	3a01      	subs	r2, #1
 8003ff2:	0112      	lsls	r2, r2, #4
 8003ff4:	4311      	orrs	r1, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ffa:	0212      	lsls	r2, r2, #8
 8003ffc:	4311      	orrs	r1, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004002:	0852      	lsrs	r2, r2, #1
 8004004:	3a01      	subs	r2, #1
 8004006:	0552      	lsls	r2, r2, #21
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800400e:	0852      	lsrs	r2, r2, #1
 8004010:	3a01      	subs	r2, #1
 8004012:	0652      	lsls	r2, r2, #25
 8004014:	4311      	orrs	r1, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800401a:	06d2      	lsls	r2, r2, #27
 800401c:	430a      	orrs	r2, r1
 800401e:	4912      	ldr	r1, [pc, #72]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8004020:	4313      	orrs	r3, r2
 8004022:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8004036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800403a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800403c:	f7fd fd12 	bl	8001a64 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fd0e 	bl	8001a64 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e058      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <HAL_RCC_OscConfig+0x778>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004062:	e050      	b.n	8004106 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e04f      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
 8004068:	40021000 	.word	0x40021000
 800406c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d144      	bne.n	8004106 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800407c:	4b24      	ldr	r3, [pc, #144]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a23      	ldr	r2, [pc, #140]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 800408e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004092:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004094:	f7fd fce6 	bl	8001a64 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fd fce2 	bl	8001a64 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e02c      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x7ac>
 80040ba:	e024      	b.n	8004106 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d01f      	beq.n	8004102 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fd fcc9 	bl	8001a64 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fd fcc5 	bl	8001a64 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e00f      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	4905      	ldr	r1, [pc, #20]	; (8004110 <HAL_RCC_OscConfig+0x820>)
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCC_OscConfig+0x824>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60cb      	str	r3, [r1, #12]
 8004100:	e001      	b.n	8004106 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3720      	adds	r7, #32
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40021000 	.word	0x40021000
 8004114:	feeefffc 	.word	0xfeeefffc

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0e7      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b75      	ldr	r3, [pc, #468]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b72      	ldr	r3, [pc, #456]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4970      	ldr	r1, [pc, #448]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b6e      	ldr	r3, [pc, #440]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0cf      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	4960      	ldr	r1, [pc, #384]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04c      	beq.n	8004230 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	4b5a      	ldr	r3, [pc, #360]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e0a6      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d107      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b6:	4b54      	ldr	r3, [pc, #336]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d115      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e09a      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d107      	bne.n	80041de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ce:	4b4e      	ldr	r3, [pc, #312]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e08e      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e086      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ee:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f023 0203 	bic.w	r2, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4943      	ldr	r1, [pc, #268]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004200:	f7fd fc30 	bl	8001a64 <HAL_GetTick>
 8004204:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004206:	e00a      	b.n	800421e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004208:	f7fd fc2c 	bl	8001a64 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	f241 3288 	movw	r2, #5000	; 0x1388
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e06e      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421e:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 020c 	and.w	r2, r3, #12
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	429a      	cmp	r2, r3
 800422e:	d1eb      	bne.n	8004208 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004248:	429a      	cmp	r2, r3
 800424a:	d208      	bcs.n	800425e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	492b      	ldr	r1, [pc, #172]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	4313      	orrs	r3, r2
 800425c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425e:	4b29      	ldr	r3, [pc, #164]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d210      	bcs.n	800428e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 0207 	bic.w	r2, r3, #7
 8004274:	4923      	ldr	r1, [pc, #140]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_ClockConfig+0x1ec>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e036      	b.n	80042fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	4918      	ldr	r1, [pc, #96]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4910      	ldr	r1, [pc, #64]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042cc:	f000 f824 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b0d      	ldr	r3, [pc, #52]	; (8004308 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	490b      	ldr	r1, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x1f4>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1f8>)
 80042ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1fc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fd fb67 	bl	80019c4 <HAL_InitTick>
 80042f6:	4603      	mov	r3, r0
 80042f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80042fa:	7afb      	ldrb	r3, [r7, #11]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40022000 	.word	0x40022000
 8004308:	40021000 	.word	0x40021000
 800430c:	08005b00 	.word	0x08005b00
 8004310:	20000000 	.word	0x20000000
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b3e      	ldr	r3, [pc, #248]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d121      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11e      	bne.n	800438a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800434c:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004358:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e005      	b.n	8004374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004368:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004374:	4a2b      	ldr	r2, [pc, #172]	; (8004424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004388:	e00a      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b04      	cmp	r3, #4
 800438e:	d102      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e004      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800439c:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 800439e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	2b0c      	cmp	r3, #12
 80043a4:	d134      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043a6:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0xa6>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0xac>
 80043bc:	e005      	b.n	80043ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043be:	4b1a      	ldr	r3, [pc, #104]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c0:	617b      	str	r3, [r7, #20]
      break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c4:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_RCC_GetSysClockFreq+0x110>)
 80043c6:	617b      	str	r3, [r7, #20]
      break;
 80043c8:	e002      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	617b      	str	r3, [r7, #20]
      break;
 80043ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	3301      	adds	r3, #1
 80043dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	fb03 f202 	mul.w	r2, r3, r2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	0e5b      	lsrs	r3, r3, #25
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	3301      	adds	r3, #1
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004410:	69bb      	ldr	r3, [r7, #24]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
 8004424:	08005b10 	.word	0x08005b10
 8004428:	00f42400 	.word	0x00f42400

0800442c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004444:	f7ff f9f0 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 8004448:	6178      	str	r0, [r7, #20]
 800444a:	e014      	b.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800444c:	4b25      	ldr	r3, [pc, #148]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004456:	6593      	str	r3, [r2, #88]	; 0x58
 8004458:	4b22      	ldr	r3, [pc, #136]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800445a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004464:	f7ff f9e0 	bl	8003828 <HAL_PWREx_GetVoltageRange>
 8004468:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b1e      	ldr	r3, [pc, #120]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	4a1d      	ldr	r2, [pc, #116]	; (80044e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800447c:	d10b      	bne.n	8004496 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d919      	bls.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2ba0      	cmp	r3, #160	; 0xa0
 8004488:	d902      	bls.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800448a:	2302      	movs	r3, #2
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	e013      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004490:	2301      	movs	r3, #1
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e010      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b80      	cmp	r3, #128	; 0x80
 800449a:	d902      	bls.n	80044a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800449c:	2303      	movs	r3, #3
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e00a      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d102      	bne.n	80044ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044a8:	2302      	movs	r3, #2
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e004      	b.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b70      	cmp	r3, #112	; 0x70
 80044b2:	d101      	bne.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044b4:	2301      	movs	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 0207 	bic.w	r2, r3, #7
 80044c0:	4909      	ldr	r1, [pc, #36]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d001      	beq.n	80044da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40022000 	.word	0x40022000

080044ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f4:	2300      	movs	r3, #0
 80044f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f8:	2300      	movs	r3, #0
 80044fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004504:	2b00      	cmp	r3, #0
 8004506:	d031      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004510:	d01a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004512:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004516:	d814      	bhi.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800451c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004520:	d10f      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004522:	4b5d      	ldr	r3, [pc, #372]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4a5c      	ldr	r2, [pc, #368]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800452e:	e00c      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f9f0 	bl	800491c <RCCEx_PLLSAI1_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004540:	e003      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	74fb      	strb	r3, [r7, #19]
      break;
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800454a:	7cfb      	ldrb	r3, [r7, #19]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004550:	4b51      	ldr	r3, [pc, #324]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455e:	494e      	ldr	r1, [pc, #312]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004566:	e001      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	7cfb      	ldrb	r3, [r7, #19]
 800456a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 809e 	beq.w	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800457e:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b40      	ldr	r3, [pc, #256]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a3f      	ldr	r2, [pc, #252]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b3d      	ldr	r3, [pc, #244]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b0:	4b3a      	ldr	r3, [pc, #232]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a39      	ldr	r2, [pc, #228]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045bc:	f7fd fa52 	bl	8001a64 <HAL_GetTick>
 80045c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045c2:	e009      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd fa4e 	bl	8001a64 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d902      	bls.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	74fb      	strb	r3, [r7, #19]
        break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045d8:	4b30      	ldr	r3, [pc, #192]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ef      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d15a      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	429a      	cmp	r2, r3
 8004604:	d019      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b21      	ldr	r3, [pc, #132]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004618:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	4b1d      	ldr	r3, [pc, #116]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004632:	4a19      	ldr	r2, [pc, #100]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d016      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fd fa0e 	bl	8001a64 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800464a:	e00b      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fd fa0a 	bl	8001a64 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d902      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	74fb      	strb	r3, [r7, #19]
            break;
 8004662:	e006      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0ec      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004672:	7cfb      	ldrb	r3, [r7, #19]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800467a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004686:	4904      	ldr	r1, [pc, #16]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800468e:	e009      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	74bb      	strb	r3, [r7, #18]
 8004694:	e006      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004696:	bf00      	nop
 8004698:	40021000 	.word	0x40021000
 800469c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a4:	7c7b      	ldrb	r3, [r7, #17]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d105      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	4b9b      	ldr	r3, [pc, #620]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	4a9a      	ldr	r2, [pc, #616]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c2:	4b95      	ldr	r3, [pc, #596]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c8:	f023 0203 	bic.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	4991      	ldr	r1, [pc, #580]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e4:	4b8c      	ldr	r3, [pc, #560]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ea:	f023 020c 	bic.w	r2, r3, #12
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	4989      	ldr	r1, [pc, #548]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004706:	4b84      	ldr	r3, [pc, #528]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	4980      	ldr	r1, [pc, #512]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004728:	4b7b      	ldr	r3, [pc, #492]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4978      	ldr	r1, [pc, #480]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800474a:	4b73      	ldr	r3, [pc, #460]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	496f      	ldr	r1, [pc, #444]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800476c:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4967      	ldr	r1, [pc, #412]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478e:	4b62      	ldr	r3, [pc, #392]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	495e      	ldr	r1, [pc, #376]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b0:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	4956      	ldr	r1, [pc, #344]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	494d      	ldr	r1, [pc, #308]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d028      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004802:	4945      	ldr	r1, [pc, #276]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004814:	4b40      	ldr	r3, [pc, #256]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4a3f      	ldr	r2, [pc, #252]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800481a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481e:	60d3      	str	r3, [r2, #12]
 8004820:	e011      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800482a:	d10c      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f872 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d028      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004852:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004858:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	492d      	ldr	r1, [pc, #180]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004870:	d106      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004872:	4b29      	ldr	r3, [pc, #164]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	4a28      	ldr	r2, [pc, #160]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487c:	60d3      	str	r3, [r2, #12]
 800487e:	e011      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2101      	movs	r1, #1
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f843 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	4916      	ldr	r1, [pc, #88]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ce:	d10c      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f820 	bl	800491c <RCCEx_PLLSAI1_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048e0:	7cfb      	ldrb	r3, [r7, #19]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800490c:	7cbb      	ldrb	r3, [r7, #18]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000

0800491c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492a:	4b74      	ldr	r3, [pc, #464]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004936:	4b71      	ldr	r3, [pc, #452]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10d      	bne.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
       ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800494e:	4b6b      	ldr	r3, [pc, #428]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
       ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d047      	beq.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e044      	b.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d018      	beq.n	80049a2 <RCCEx_PLLSAI1_Config+0x86>
 8004970:	2b03      	cmp	r3, #3
 8004972:	d825      	bhi.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <RCCEx_PLLSAI1_Config+0x62>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d009      	beq.n	8004990 <RCCEx_PLLSAI1_Config+0x74>
 800497c:	e020      	b.n	80049c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497e:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11d      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498e:	e01a      	b.n	80049c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004990:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e013      	b.n	80049ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ae:	4b53      	ldr	r3, [pc, #332]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049be:	e006      	b.n	80049ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e004      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	430b      	orrs	r3, r1
 80049ec:	4943      	ldr	r1, [pc, #268]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d17c      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049f8:	4b40      	ldr	r3, [pc, #256]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fd f82e 	bl	8001a64 <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a0c:	f7fd f82a 	bl	8001a64 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ef      	bne.n	8004a0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d15f      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a38:	4b30      	ldr	r3, [pc, #192]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	0211      	lsls	r1, r2, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	06d2      	lsls	r2, r2, #27
 8004a50:	430a      	orrs	r2, r1
 8004a52:	492a      	ldr	r1, [pc, #168]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	610b      	str	r3, [r1, #16]
 8004a58:	e027      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d112      	bne.n	8004a86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6892      	ldr	r2, [r2, #8]
 8004a70:	0211      	lsls	r1, r2, #8
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6912      	ldr	r2, [r2, #16]
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0552      	lsls	r2, r2, #21
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	491f      	ldr	r1, [pc, #124]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]
 8004a84:	e011      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a86:	4b1d      	ldr	r3, [pc, #116]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6892      	ldr	r2, [r2, #8]
 8004a96:	0211      	lsls	r1, r2, #8
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6952      	ldr	r2, [r2, #20]
 8004a9c:	0852      	lsrs	r2, r2, #1
 8004a9e:	3a01      	subs	r2, #1
 8004aa0:	0652      	lsls	r2, r2, #25
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	4915      	ldr	r1, [pc, #84]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fc ffd5 	bl	8001a64 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004abc:	e009      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004abe:	f7fc ffd1 	bl	8001a64 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	73fb      	strb	r3, [r7, #15]
          break;
 8004ad0:	e005      	b.n	8004ade <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ef      	beq.n	8004abe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	4903      	ldr	r1, [pc, #12]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e049      	b.n	8004ba6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc feb0 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f000 fa74 	bl	800502c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_TIM_Base_Stop_IT+0x48>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	f240 4344 	movw	r3, #1092	; 0x444
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_Base_Stop_IT+0x48>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0202 	mvn.w	r2, #2
 8004c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f9ce 	bl	8004ff0 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f9c0 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f9d1 	bl	8005004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0304 	and.w	r3, r3, #4
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0204 	mvn.w	r2, #4
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f9a4 	bl	8004ff0 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f996 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f9a7 	bl	8005004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d122      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d11b      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0208 	mvn.w	r2, #8
 8004ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2204      	movs	r2, #4
 8004ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f97a 	bl	8004ff0 <HAL_TIM_IC_CaptureCallback>
 8004cfc:	e005      	b.n	8004d0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f96c 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f97d 	bl	8005004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0310 	and.w	r3, r3, #16
 8004d1a:	2b10      	cmp	r3, #16
 8004d1c:	d122      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d11b      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0210 	mvn.w	r2, #16
 8004d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2208      	movs	r2, #8
 8004d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f950 	bl	8004ff0 <HAL_TIM_IC_CaptureCallback>
 8004d50:	e005      	b.n	8004d5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f942 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f953 	bl	8005004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0201 	mvn.w	r2, #1
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fb84 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b80      	cmp	r3, #128	; 0x80
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 faa6 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dca:	d10e      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b80      	cmp	r3, #128	; 0x80
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fa99 	bl	800531c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b40      	cmp	r3, #64	; 0x40
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f901 	bl	8005018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d10e      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d107      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f06f 0220 	mvn.w	r2, #32
 8004e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa59 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_ConfigClockSource+0x1c>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0b6      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x18a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2202      	movs	r2, #2
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e90:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	d03e      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xd8>
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea8:	f200 8087 	bhi.w	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb0:	f000 8086 	beq.w	8004fc0 <HAL_TIM_ConfigClockSource+0x176>
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d87f      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004eba:	2b70      	cmp	r3, #112	; 0x70
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_TIM_ConfigClockSource+0xaa>
 8004ebe:	2b70      	cmp	r3, #112	; 0x70
 8004ec0:	d87b      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004ec2:	2b60      	cmp	r3, #96	; 0x60
 8004ec4:	d050      	beq.n	8004f68 <HAL_TIM_ConfigClockSource+0x11e>
 8004ec6:	2b60      	cmp	r3, #96	; 0x60
 8004ec8:	d877      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004eca:	2b50      	cmp	r3, #80	; 0x50
 8004ecc:	d03c      	beq.n	8004f48 <HAL_TIM_ConfigClockSource+0xfe>
 8004ece:	2b50      	cmp	r3, #80	; 0x50
 8004ed0:	d873      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d058      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0x13e>
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d86f      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004eda:	2b30      	cmp	r3, #48	; 0x30
 8004edc:	d064      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x15e>
 8004ede:	2b30      	cmp	r3, #48	; 0x30
 8004ee0:	d86b      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d060      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x15e>
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d867      	bhi.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05c      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x15e>
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d05a      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0x15e>
 8004ef2:	e062      	b.n	8004fba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f000 f970 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f16:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
      break;
 8004f20:	e04f      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f000 f959 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f44:	609a      	str	r2, [r3, #8]
      break;
 8004f46:	e03c      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f000 f8cd 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2150      	movs	r1, #80	; 0x50
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 f926 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f66:	e02c      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6818      	ldr	r0, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	461a      	mov	r2, r3
 8004f76:	f000 f8ec 	bl	8005152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2160      	movs	r1, #96	; 0x60
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f916 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f86:	e01c      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	461a      	mov	r2, r3
 8004f96:	f000 f8ad 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2140      	movs	r1, #64	; 0x40
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 f906 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004fa6:	e00c      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f000 f8fd 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004fb8:	e003      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2a      	ldr	r2, [pc, #168]	; (80050e8 <TIM_Base_SetConfig+0xbc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0x20>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504a:	d108      	bne.n	800505e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a21      	ldr	r2, [pc, #132]	; (80050e8 <TIM_Base_SetConfig+0xbc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0x52>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0x52>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1e      	ldr	r2, [pc, #120]	; (80050ec <TIM_Base_SetConfig+0xc0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0x52>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <TIM_Base_SetConfig+0xc4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <TIM_Base_SetConfig+0xbc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_Base_SetConfig+0xa0>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <TIM_Base_SetConfig+0xc0>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0xa0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <TIM_Base_SetConfig+0xc4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d103      	bne.n	80050d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	615a      	str	r2, [r3, #20]
}
 80050da:	bf00      	nop
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0210 	bic.w	r2, r3, #16
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800517c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e04f      	b.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a21      	ldr	r2, [pc, #132]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d108      	bne.n	800527c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005270:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a14      	ldr	r2, [pc, #80]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d004      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a10      	ldr	r2, [pc, #64]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40012c00 	.word	0x40012c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0ba      	sub	sp, #232	; 0xe8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005356:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800535a:	f640 030f 	movw	r3, #2063	; 0x80f
 800535e:	4013      	ands	r3, r2
 8005360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005364:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d115      	bne.n	8005398 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00f      	beq.n	8005398 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d009      	beq.n	8005398 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 82a6 	beq.w	80058da <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
      }
      return;
 8005396:	e2a0      	b.n	80058da <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005398:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8117 	beq.w	80055d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80053a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80053ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053b2:	4b85      	ldr	r3, [pc, #532]	; (80055c8 <HAL_UART_IRQHandler+0x298>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 810a 	beq.w	80055d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d011      	beq.n	80053ec <HAL_UART_IRQHandler+0xbc>
 80053c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d011      	beq.n	800541c <HAL_UART_IRQHandler+0xec>
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2202      	movs	r2, #2
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	d011      	beq.n	800544c <HAL_UART_IRQHandler+0x11c>
 8005428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2204      	movs	r2, #4
 800543a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005442:	f043 0202 	orr.w	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	f003 0308 	and.w	r3, r3, #8
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005468:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2208      	movs	r2, #8
 8005476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547e:	f043 0208 	orr.w	r2, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005490:	2b00      	cmp	r3, #0
 8005492:	d012      	beq.n	80054ba <HAL_UART_IRQHandler+0x18a>
 8005494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00c      	beq.n	80054ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 820c 	beq.w	80058de <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00d      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d005      	beq.n	8005512 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005506:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800550a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800550e:	2b00      	cmp	r3, #0
 8005510:	d04f      	beq.n	80055b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fa0e 	bl	8005934 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d141      	bne.n	80055aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800553c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005544:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005552:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800555e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800556a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1d9      	bne.n	8005526 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	2b00      	cmp	r3, #0
 8005578:	d013      	beq.n	80055a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	4a13      	ldr	r2, [pc, #76]	; (80055cc <HAL_UART_IRQHandler+0x29c>)
 8005580:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	4618      	mov	r0, r3
 8005588:	f7fd fe6c 	bl	8003264 <HAL_DMA_Abort_IT>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d017      	beq.n	80055c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800559c:	4610      	mov	r0, r2
 800559e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e00f      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f9b0 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00b      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f9ac 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e007      	b.n	80055c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9a8 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055c0:	e18d      	b.n	80058de <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c2:	bf00      	nop
    return;
 80055c4:	e18b      	b.n	80058de <HAL_UART_IRQHandler+0x5ae>
 80055c6:	bf00      	nop
 80055c8:	04000120 	.word	0x04000120
 80055cc:	080059fb 	.word	0x080059fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 8146 	bne.w	8005866 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 813f 	beq.w	8005866 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f000 8138 	beq.w	8005866 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2210      	movs	r2, #16
 80055fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	f040 80b4 	bne.w	8005776 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800561a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 815f 	beq.w	80058e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800562a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800562e:	429a      	cmp	r2, r3
 8005630:	f080 8157 	bcs.w	80058e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800563a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 8085 	bne.w	800575a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800565c:	e853 3f00 	ldrex	r3, [r3]
 8005660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800567a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800567e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005686:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1da      	bne.n	8005650 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3308      	adds	r3, #8
 80056ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e1      	bne.n	800569a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3308      	adds	r3, #8
 80056dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3308      	adds	r3, #8
 80056f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005700:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e3      	bne.n	80056d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572a:	f023 0310 	bic.w	r3, r3, #16
 800572e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800573c:	65bb      	str	r3, [r7, #88]	; 0x58
 800573e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005744:	e841 2300 	strex	r3, r2, [r1]
 8005748:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800574a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1e4      	bne.n	800571a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4618      	mov	r0, r3
 8005756:	f7fd fd47 	bl	80031e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005766:	b29b      	uxth	r3, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	b29b      	uxth	r3, r3
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8d4 	bl	800591c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005774:	e0b5      	b.n	80058e2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005782:	b29b      	uxth	r3, r3
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a7 	beq.w	80058e6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005798:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a2 	beq.w	80058e6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
 80057c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e4      	bne.n	80057a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	e853 3f00 	ldrex	r3, [r3]
 80057e6:	623b      	str	r3, [r7, #32]
   return(result);
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057fc:	633a      	str	r2, [r7, #48]	; 0x30
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e3      	bne.n	80057d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	617b      	str	r3, [r7, #20]
   return(result);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e4      	bne.n	8005822 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f85c 	bl	800591c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005864:	e03f      	b.n	80058e6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00e      	beq.n	8005890 <HAL_UART_IRQHandler+0x560>
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d008      	beq.n	8005890 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f8f6 	bl	8005a7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800588e:	e02d      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00e      	beq.n	80058ba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01c      	beq.n	80058ea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
    }
    return;
 80058b8:	e017      	b.n	80058ea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d012      	beq.n	80058ec <HAL_UART_IRQHandler+0x5bc>
 80058c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00c      	beq.n	80058ec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8a7 	bl	8005a26 <UART_EndTransmit_IT>
    return;
 80058d8:	e008      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80058da:	bf00      	nop
 80058dc:	e006      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80058de:	bf00      	nop
 80058e0:	e004      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
      return;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_UART_IRQHandler+0x5bc>
    return;
 80058ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058ec:	37e8      	adds	r7, #232	; 0xe8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b095      	sub	sp, #84	; 0x54
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005950:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595a:	643b      	str	r3, [r7, #64]	; 0x40
 800595c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e6      	bne.n	800593c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3308      	adds	r3, #8
 8005974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	61fb      	str	r3, [r7, #28]
   return(result);
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	64bb      	str	r3, [r7, #72]	; 0x48
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3308      	adds	r3, #8
 800598c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800598e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e5      	bne.n	800596e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d118      	bne.n	80059dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	613b      	str	r3, [r7, #16]
   return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059ee:	bf00      	nop
 80059f0:	3754      	adds	r7, #84	; 0x54
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f7ff ff75 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b088      	sub	sp, #32
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	e853 3f00 	ldrex	r3, [r3]
 8005a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	e841 2300 	strex	r3, r2, [r1]
 8005a58:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1e6      	bne.n	8005a2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ff41 	bl	80058f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a72:	bf00      	nop
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 f820 	bl	8005ae8 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08005b40 	.word	0x08005b40
 8005acc:	08005b40 	.word	0x08005b40
 8005ad0:	08005b40 	.word	0x08005b40
 8005ad4:	08005b44 	.word	0x08005b44

08005ad8 <memset>:
 8005ad8:	4402      	add	r2, r0
 8005ada:	4603      	mov	r3, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
