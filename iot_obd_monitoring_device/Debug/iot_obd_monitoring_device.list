
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097e8  080097e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097f0  080097f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097f0  080097f0  000197f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097f4  080097f4  000197f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080097f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  20000070  08009868  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08009868  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae6f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da7  00000000  00000000  0003af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0003ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  000402b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b20  00000000  00000000  00041708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce85  00000000  00000000  00068228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4096  00000000  00000000  000850ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  00169194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093ec 	.word	0x080093ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080093ec 	.word	0x080093ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Verify_Checksum>:

	HAL_Delay(60);
}

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e009      	b.n	8000dea <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4413      	add	r3, r2
 8000de2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d101      	bne.n	8000e08 <Verify_Checksum+0x48>
	{
		return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <Verify_Checksum+0x4a>
	}
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <kline_rx_callback>:

void kline_rx_callback(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <kline_rx_callback+0x94>)
 8000e20:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <kline_rx_callback+0x20>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <kline_rx_callback+0x98>)
 8000e2a:	f005 f911 	bl	8006050 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <kline_rx_callback+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
//			OBD2_ShowOnDisplay(obd_comm.current_value);
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8000e36:	e035      	b.n	8000ea4 <kline_rx_callback+0x8c>
	else if (obd_comm.msg_type == 2)
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <kline_rx_callback+0x94>)
 8000e3a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <kline_rx_callback+0x8c>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3305      	adds	r3, #5
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e4e:	f7ff ffb7 	bl	8000dc0 <Verify_Checksum>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d025      	beq.n	8000ea4 <kline_rx_callback+0x8c>
			uint8_t j = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	e00b      	b.n	8000e7a <kline_rx_callback+0x62>
				rx_frame[j] = kline_rx_buf[i];
 8000e62:	79ba      	ldrb	r2, [r7, #6]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4914      	ldr	r1, [pc, #80]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e68:	5c89      	ldrb	r1, [r1, r2]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
				j++;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3301      	adds	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	3301      	adds	r3, #1
 8000e78:	71bb      	strb	r3, [r7, #6]
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3304      	adds	r3, #4
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dded      	ble.n	8000e62 <kline_rx_callback+0x4a>
			obd_comm.msg_type = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <kline_rx_callback+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e90:	f000 f872 	bl	8000f78 <OBD2_PID_Parse>
 8000e94:	eef0 7a40 	vmov.f32	s15, s0
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <kline_rx_callback+0x94>)
 8000e9a:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
			HAL_IWDG_Refresh(&hiwdg);
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <kline_rx_callback+0xa8>)
 8000ea0:	f003 fe76 	bl	8004b90 <HAL_IWDG_Refresh>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000188 	.word	0x20000188
 8000eb0:	200008c8 	.word	0x200008c8
 8000eb4:	200000a3 	.word	0x200000a3
 8000eb8:	2000008c 	.word	0x2000008c
 8000ebc:	2000009c 	.word	0x2000009c
 8000ec0:	20000178 	.word	0x20000178

08000ec4 <OBD2_PID_Decode>:
extern uint32_t adc_buffer;

static void OBD2_PID_Decode(uint8_t* rx_frame);

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	uint8_t number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	061b      	lsls	r3, r3, #24
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3305      	adds	r3, #5
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	021b      	lsls	r3, r3, #8
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	72fb      	strb	r3, [r7, #11]
	uint8_t j = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 32;
 8000f04:	2320      	movs	r3, #32
 8000f06:	73bb      	strb	r3, [r7, #14]
	uint8_t l = 64;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8000f0c:	231f      	movs	r3, #31
 8000f0e:	733b      	strb	r3, [r7, #12]
	{
		uint8_t digit = number >> i;
 8000f10:	7afa      	ldrb	r2, [r7, #11]
 8000f12:	7b3b      	ldrb	r3, [r7, #12]
 8000f14:	fa42 f303 	asr.w	r3, r2, r3
 8000f18:	72bb      	strb	r3, [r7, #10]
		digit &= 1;
 8000f1a:	7abb      	ldrb	r3, [r7, #10]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	72bb      	strb	r3, [r7, #10]
		if(obd_comm.pid == 0x00)
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <OBD2_PID_Decode+0xac>)
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d108      	bne.n	8000f3c <OBD2_PID_Decode+0x78>
		{
			obd_comm.available_pids[j] = digit;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <OBD2_PID_Decode+0xac>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	7aba      	ldrb	r2, [r7, #10]
 8000f32:	70da      	strb	r2, [r3, #3]
			j++;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e014      	b.n	8000f66 <OBD2_PID_Decode+0xa2>
		}
		else if(obd_comm.pid == 0x20)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <OBD2_PID_Decode+0xac>)
 8000f3e:	785b      	ldrb	r3, [r3, #1]
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d108      	bne.n	8000f56 <OBD2_PID_Decode+0x92>
		{
			obd_comm.available_pids[k] = digit;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <OBD2_PID_Decode+0xac>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	7aba      	ldrb	r2, [r7, #10]
 8000f4c:	70da      	strb	r2, [r3, #3]
			k++;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73bb      	strb	r3, [r7, #14]
 8000f54:	e007      	b.n	8000f66 <OBD2_PID_Decode+0xa2>
		}
		else
		{
			obd_comm.available_pids[l] = digit;
 8000f56:	7b7b      	ldrb	r3, [r7, #13]
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <OBD2_PID_Decode+0xac>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	7aba      	ldrb	r2, [r7, #10]
 8000f5e:	70da      	strb	r2, [r3, #3]
			l++;
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	3301      	adds	r3, #1
 8000f64:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8000f66:	7b3b      	ldrb	r3, [r7, #12]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	733b      	strb	r3, [r7, #12]
	{
 8000f6c:	e7d0      	b.n	8000f10 <OBD2_PID_Decode+0x4c>
 8000f6e:	bf00      	nop
 8000f70:	20000188 	.word	0x20000188
 8000f74:	00000000 	.word	0x00000000

08000f78 <OBD2_PID_Parse>:
		}
	}
}

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2ba6      	cmp	r3, #166	; 0xa6
 8000f8e:	f200 83b2 	bhi.w	80016f6 <OBD2_PID_Parse+0x77e>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <OBD2_PID_Parse+0x20>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001235 	.word	0x08001235
 8000f9c:	080016f7 	.word	0x080016f7
 8000fa0:	080016f7 	.word	0x080016f7
 8000fa4:	080016f7 	.word	0x080016f7
 8000fa8:	08001243 	.word	0x08001243
 8000fac:	0800124b 	.word	0x0800124b
 8000fb0:	08001261 	.word	0x08001261
 8000fb4:	08001261 	.word	0x08001261
 8000fb8:	08001261 	.word	0x08001261
 8000fbc:	08001261 	.word	0x08001261
 8000fc0:	08001267 	.word	0x08001267
 8000fc4:	08001283 	.word	0x08001283
 8000fc8:	08001297 	.word	0x08001297
 8000fcc:	080012bd 	.word	0x080012bd
 8000fd0:	080012d1 	.word	0x080012d1
 8000fd4:	080012eb 	.word	0x080012eb
 8000fd8:	08001301 	.word	0x08001301
 8000fdc:	0800132b 	.word	0x0800132b
 8000fe0:	080016f7 	.word	0x080016f7
 8000fe4:	080016f7 	.word	0x080016f7
 8000fe8:	08001333 	.word	0x08001333
 8000fec:	08001333 	.word	0x08001333
 8000ff0:	08001333 	.word	0x08001333
 8000ff4:	08001333 	.word	0x08001333
 8000ff8:	08001333 	.word	0x08001333
 8000ffc:	08001333 	.word	0x08001333
 8001000:	08001333 	.word	0x08001333
 8001004:	08001333 	.word	0x08001333
 8001008:	080016f7 	.word	0x080016f7
 800100c:	080016f7 	.word	0x080016f7
 8001010:	080016f7 	.word	0x080016f7
 8001014:	08001351 	.word	0x08001351
 8001018:	0800136f 	.word	0x0800136f
 800101c:	08001351 	.word	0x08001351
 8001020:	0800137d 	.word	0x0800137d
 8001024:	080013ad 	.word	0x080013ad
 8001028:	080013d3 	.word	0x080013d3
 800102c:	080013d3 	.word	0x080013d3
 8001030:	080013d3 	.word	0x080013d3
 8001034:	080013d3 	.word	0x080013d3
 8001038:	080013d3 	.word	0x080013d3
 800103c:	080013d3 	.word	0x080013d3
 8001040:	080013d3 	.word	0x080013d3
 8001044:	080013d3 	.word	0x080013d3
 8001048:	080013db 	.word	0x080013db
 800104c:	080013e3 	.word	0x080013e3
 8001050:	080013e9 	.word	0x080013e9
 8001054:	080013e9 	.word	0x080013e9
 8001058:	080013f1 	.word	0x080013f1
 800105c:	08001405 	.word	0x08001405
 8001060:	08001423 	.word	0x08001423
 8001064:	08001449 	.word	0x08001449
 8001068:	0800145d 	.word	0x0800145d
 800106c:	0800145d 	.word	0x0800145d
 8001070:	0800145d 	.word	0x0800145d
 8001074:	0800145d 	.word	0x0800145d
 8001078:	0800145d 	.word	0x0800145d
 800107c:	0800145d 	.word	0x0800145d
 8001080:	0800145d 	.word	0x0800145d
 8001084:	0800145d 	.word	0x0800145d
 8001088:	08001465 	.word	0x08001465
 800108c:	08001465 	.word	0x08001465
 8001090:	08001465 	.word	0x08001465
 8001094:	08001465 	.word	0x08001465
 8001098:	08001491 	.word	0x08001491
 800109c:	080016f7 	.word	0x080016f7
 80010a0:	0800149f 	.word	0x0800149f
 80010a4:	080014c9 	.word	0x080014c9
 80010a8:	080014d1 	.word	0x080014d1
 80010ac:	080014d9 	.word	0x080014d9
 80010b0:	080014e1 	.word	0x080014e1
 80010b4:	080014f7 	.word	0x080014f7
 80010b8:	080014f7 	.word	0x080014f7
 80010bc:	080014f7 	.word	0x080014f7
 80010c0:	080014f7 	.word	0x080014f7
 80010c4:	080014f7 	.word	0x080014f7
 80010c8:	080014f7 	.word	0x080014f7
 80010cc:	080014ff 	.word	0x080014ff
 80010d0:	080014ff 	.word	0x080014ff
 80010d4:	0800151d 	.word	0x0800151d
 80010d8:	080016f7 	.word	0x080016f7
 80010dc:	080016f7 	.word	0x080016f7
 80010e0:	08001531 	.word	0x08001531
 80010e4:	0800154d 	.word	0x0800154d
 80010e8:	0800157f 	.word	0x0800157f
 80010ec:	080015a3 	.word	0x080015a3
 80010f0:	080015a3 	.word	0x080015a3
 80010f4:	080015a3 	.word	0x080015a3
 80010f8:	080015a3 	.word	0x080015a3
 80010fc:	080015a9 	.word	0x080015a9
 8001100:	080015c7 	.word	0x080015c7
 8001104:	080015c7 	.word	0x080015c7
 8001108:	080015cf 	.word	0x080015cf
 800110c:	080015e5 	.word	0x080015e5
 8001110:	080015eb 	.word	0x080015eb
 8001114:	080016f7 	.word	0x080016f7
 8001118:	080016f7 	.word	0x080016f7
 800111c:	0800161d 	.word	0x0800161d
 8001120:	0800161d 	.word	0x0800161d
 8001124:	08001633 	.word	0x08001633
 8001128:	08001651 	.word	0x08001651
 800112c:	080016f7 	.word	0x080016f7
 8001130:	08001667 	.word	0x08001667
 8001134:	0800166f 	.word	0x0800166f
 8001138:	0800166f 	.word	0x0800166f
 800113c:	080016f7 	.word	0x080016f7
 8001140:	080016f7 	.word	0x080016f7
 8001144:	080016f7 	.word	0x080016f7
 8001148:	080016f7 	.word	0x080016f7
 800114c:	080016f7 	.word	0x080016f7
 8001150:	080016f7 	.word	0x080016f7
 8001154:	080016f7 	.word	0x080016f7
 8001158:	080016f7 	.word	0x080016f7
 800115c:	080016f7 	.word	0x080016f7
 8001160:	080016f7 	.word	0x080016f7
 8001164:	080016f7 	.word	0x080016f7
 8001168:	080016f7 	.word	0x080016f7
 800116c:	080016f7 	.word	0x080016f7
 8001170:	080016f7 	.word	0x080016f7
 8001174:	080016f7 	.word	0x080016f7
 8001178:	080016f7 	.word	0x080016f7
 800117c:	080016f7 	.word	0x080016f7
 8001180:	080016f7 	.word	0x080016f7
 8001184:	080016f7 	.word	0x080016f7
 8001188:	08001685 	.word	0x08001685
 800118c:	080016f7 	.word	0x080016f7
 8001190:	080016f7 	.word	0x080016f7
 8001194:	080016f7 	.word	0x080016f7
 8001198:	080016f7 	.word	0x080016f7
 800119c:	080016f7 	.word	0x080016f7
 80011a0:	080016f7 	.word	0x080016f7
 80011a4:	080016f7 	.word	0x080016f7
 80011a8:	080016f7 	.word	0x080016f7
 80011ac:	080016f7 	.word	0x080016f7
 80011b0:	080016f7 	.word	0x080016f7
 80011b4:	080016f7 	.word	0x080016f7
 80011b8:	080016f7 	.word	0x080016f7
 80011bc:	080016f7 	.word	0x080016f7
 80011c0:	080016f7 	.word	0x080016f7
 80011c4:	080016f7 	.word	0x080016f7
 80011c8:	080016f7 	.word	0x080016f7
 80011cc:	080016f7 	.word	0x080016f7
 80011d0:	080016f7 	.word	0x080016f7
 80011d4:	080016f7 	.word	0x080016f7
 80011d8:	080016f7 	.word	0x080016f7
 80011dc:	080016f7 	.word	0x080016f7
 80011e0:	080016f7 	.word	0x080016f7
 80011e4:	080016f7 	.word	0x080016f7
 80011e8:	080016f7 	.word	0x080016f7
 80011ec:	080016f7 	.word	0x080016f7
 80011f0:	080016f7 	.word	0x080016f7
 80011f4:	080016f7 	.word	0x080016f7
 80011f8:	080016f7 	.word	0x080016f7
 80011fc:	080016f7 	.word	0x080016f7
 8001200:	080016f7 	.word	0x080016f7
 8001204:	080016f7 	.word	0x080016f7
 8001208:	080016f7 	.word	0x080016f7
 800120c:	080016f7 	.word	0x080016f7
 8001210:	080016f7 	.word	0x080016f7
 8001214:	080016f7 	.word	0x080016f7
 8001218:	080016f7 	.word	0x080016f7
 800121c:	080016f7 	.word	0x080016f7
 8001220:	080016f7 	.word	0x080016f7
 8001224:	080016f7 	.word	0x080016f7
 8001228:	080016f7 	.word	0x080016f7
 800122c:	080016f7 	.word	0x080016f7
 8001230:	080016b1 	.word	0x080016b1
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe45 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
		break;
 8001240:	e259      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
		break;
 8001248:	e255      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b28      	subs	r3, #40	; 0x28
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800125e:	e24a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001260:	4bb7      	ldr	r3, [pc, #732]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 8001262:	60fb      	str	r3, [r7, #12]
		break;
 8001264:	e247      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3303      	adds	r3, #3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001280:	e239      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3303      	adds	r3, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001294:	e22f      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3303      	adds	r3, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3204      	adds	r2, #4
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da00      	bge.n	80012ac <OBD2_PID_Parse+0x334>
 80012aa:	3303      	adds	r3, #3
 80012ac:	109b      	asrs	r3, r3, #2
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ba:	e21c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3303      	adds	r3, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ce:	e212      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b40      	subs	r3, #64	; 0x40
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012e8:	e205      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3303      	adds	r3, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b28      	subs	r3, #40	; 0x28
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012fe:	e1fa      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3303      	adds	r3, #3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	3204      	adds	r2, #4
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a8c      	ldr	r2, [pc, #560]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001312:	fb82 1203 	smull	r1, r2, r2, r3
 8001316:	1152      	asrs	r2, r2, #5
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001328:	e1e5      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
		break;
 8001330:	e1e1      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3303      	adds	r3, #3
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4a82      	ldr	r2, [pc, #520]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	b2db      	uxtb	r3, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800134e:	e1d2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	3204      	adds	r2, #4
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800136c:	e1c3      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fda8 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
		break;
 800137a:	e1bc      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	3204      	adds	r2, #4
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8c9 	bl	8000524 <__aeabi_i2d>
 8001392:	a369      	add	r3, pc, #420	; (adr r3, 8001538 <OBD2_PID_Parse+0x5c0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb3a 	bl	8000a1c <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	3204      	adds	r2, #4
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80013d0:	e191      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
		break;
 80013d8:	e18d      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
		break;
 80013e0:	e189      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 80013e4:	60fb      	str	r3, [r7, #12]
		break;
 80013e6:	e186      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
		break;
 80013ee:	e182      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3303      	adds	r3, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001402:	e178      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3303      	adds	r3, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	3204      	adds	r2, #4
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001420:	e169      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3303      	adds	r3, #3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3204      	adds	r2, #4
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <OBD2_PID_Parse+0x4c0>
 8001436:	3303      	adds	r3, #3
 8001438:	109b      	asrs	r3, r3, #2
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001446:	e156      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3303      	adds	r3, #3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001456:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800145a:	e14c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
		break;
 8001462:	e148      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3303      	adds	r3, #3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	3204      	adds	r2, #4
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001476:	fb82 1203 	smull	r1, r2, r2, r3
 800147a:	1152      	asrs	r2, r2, #5
 800147c:	17db      	asrs	r3, r3, #31
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	3b28      	subs	r3, #40	; 0x28
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800148e:	e132      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd17 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
		break;
 800149c:	e12b      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3204      	adds	r2, #4
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <OBD2_PID_Parse+0x5d0>)
 80014b0:	fb82 1203 	smull	r1, r2, r2, r3
 80014b4:	1192      	asrs	r2, r2, #6
 80014b6:	17db      	asrs	r3, r3, #31
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014c6:	e116      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
		break;
 80014ce:	e112      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
		break;
 80014d6:	e10e      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
		break;
 80014de:	e10a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3303      	adds	r3, #3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3b28      	subs	r3, #40	; 0x28
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014f4:	e0ff      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
		break;
 80014fc:	e0fb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3303      	adds	r3, #3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	3204      	adds	r2, #4
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800151a:	e0ec      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800152e:	e0e2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
		break;
 8001536:	e0de      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
 8001538:	10624dd3 	.word	0x10624dd3
 800153c:	3fb43958 	.word	0x3fb43958
 8001540:	c2c80000 	.word	0xc2c80000
 8001544:	51eb851f 	.word	0x51eb851f
 8001548:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3303      	adds	r3, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	3204      	adds	r2, #4
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffe1 	bl	8000524 <__aeabi_i2d>
 8001562:	a370      	add	r3, pc, #448	; (adr r3, 8001724 <OBD2_PID_Parse+0x7ac>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa52 	bl	8000a1c <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
		break;
 800157c:	e0bb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	3204      	adds	r2, #4
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001592:	3b7f      	subs	r3, #127	; 0x7f
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015a0:	e0a9      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <OBD2_PID_Parse+0x7a0>)
 80015a4:	60fb      	str	r3, [r7, #12]
		break;
 80015a6:	e0a6      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3303      	adds	r3, #3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	3204      	adds	r2, #4
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015c4:	e097      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
		break;
 80015cc:	e093      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3303      	adds	r3, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b28      	subs	r3, #40	; 0x28
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015e2:	e088      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <OBD2_PID_Parse+0x7a4>)
 80015e6:	60fb      	str	r3, [r7, #12]
		break;
 80015e8:	e085      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3204      	adds	r2, #4
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	a341      	add	r3, pc, #260	; (adr r3, 8001708 <OBD2_PID_Parse+0x790>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa03 	bl	8000a1c <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]
		break;
 800161a:	e06c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3303      	adds	r3, #3
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3b7d      	subs	r3, #125	; 0x7d
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001630:	e061      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	3204      	adds	r2, #4
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800164e:	e052      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b7d      	subs	r3, #125	; 0x7d
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001664:	e047      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
		break;
 800166c:	e043      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3303      	adds	r3, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3b28      	subs	r3, #40	; 0x28
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001682:	e038      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3303      	adds	r3, #3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	3204      	adds	r2, #4
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <OBD2_PID_Parse+0x7a8>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1152      	asrs	r2, r2, #5
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	3b28      	subs	r3, #40	; 0x28
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016ae:	e022      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3303      	adds	r3, #3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3305      	adds	r3, #5
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	3206      	adds	r2, #6
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff25 	bl	8000524 <__aeabi_i2d>
 80016da:	a30d      	add	r3, pc, #52	; (adr r3, 8001710 <OBD2_PID_Parse+0x798>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f996 	bl	8000a1c <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
		break;
 80016f4:	bf00      	nop
	}
	return value;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	ee07 3a90 	vmov	s15, r3
}
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fa99999 	.word	0x3fa99999
 8001710:	9999999a 	.word	0x9999999a
 8001714:	3fb99999 	.word	0x3fb99999
 8001718:	c2c80000 	.word	0xc2c80000
 800171c:	c3520000 	.word	0xc3520000
 8001720:	51eb851f 	.word	0x51eb851f
 8001724:	47ae147b 	.word	0x47ae147b
 8001728:	3f747ae1 	.word	0x3f747ae1

0800172c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	obd_comm.msg_type = 0;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001736:	2200      	movs	r2, #0
 8001738:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	f107 0214 	add.w	r2, r7, #20
 8001744:	2100      	movs	r1, #0
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001748:	f002 fa60 	bl	8003c0c <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fc11 	bl	8000f78 <OBD2_PID_Parse>
 8001756:	eef0 7a40 	vmov.f32	s15, s0
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800175c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

	HAL_IWDG_Refresh(&hiwdg);
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001762:	f003 fa15 	bl	8004b90 <HAL_IWDG_Refresh>
}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000188 	.word	0x20000188
 8001774:	200000a4 	.word	0x200000a4
 8001778:	20000178 	.word	0x20000178

0800177c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2210      	movs	r2, #16
 800178a:	60da      	str	r2, [r3, #12]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800179e:	463b      	mov	r3, r7
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <MX_ADC1_Init+0xc0>)
 80017b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017d0:	2204      	movs	r2, #4
 80017d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017dc:	2201      	movs	r2, #1
 80017de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_ADC1_Init+0xbc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_ADC1_Init+0xbc>)
 8001804:	2200      	movs	r2, #0
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_ADC1_Init+0xbc>)
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <MX_ADC1_Init+0xbc>)
 8001812:	f001 fcd3 	bl	80031bc <HAL_ADC_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800181c:	f000 fabf 	bl	8001d9e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_ADC1_Init+0xc4>)
 8001822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001824:	2306      	movs	r3, #6
 8001826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800182c:	237f      	movs	r3, #127	; 0x7f
 800182e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001830:	2304      	movs	r3, #4
 8001832:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_ADC1_Init+0xbc>)
 800183e:	f001 fe05 	bl	800344c <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001848:	f000 faa9 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200000cc 	.word	0x200000cc
 8001858:	50040000 	.word	0x50040000
 800185c:	3ac04000 	.word	0x3ac04000

08001860 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0a0      	sub	sp, #128	; 0x80
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	225c      	movs	r2, #92	; 0x5c
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 fae5 	bl	8007e50 <memset>
  if(adcHandle->Instance==ADC1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a3a      	ldr	r2, [pc, #232]	; (8001974 <HAL_ADC_MspInit+0x114>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d16d      	bne.n	800196c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001890:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001894:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001896:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800189a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800189c:	2303      	movs	r3, #3
 800189e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018a4:	2308      	movs	r3, #8
 80018a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018a8:	2307      	movs	r3, #7
 80018aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 f810 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80018ca:	f000 fa68 	bl	8001d9e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e6:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_ADC_MspInit+0x118>)
 80018f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 80018fe:	2320      	movs	r3, #32
 8001900:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001902:	230b      	movs	r3, #11
 8001904:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 800190a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800190e:	4619      	mov	r1, r3
 8001910:	481a      	ldr	r0, [pc, #104]	; (800197c <HAL_ADC_MspInit+0x11c>)
 8001912:	f002 ffab 	bl	800486c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001918:	4a1a      	ldr	r2, [pc, #104]	; (8001984 <HAL_ADC_MspInit+0x124>)
 800191a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_ADC_MspInit+0x120>)
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_ADC_MspInit+0x120>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800193a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_ADC_MspInit+0x120>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001946:	2220      	movs	r2, #32
 8001948:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_ADC_MspInit+0x120>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001952:	f002 fda5 	bl	80044a0 <HAL_DMA_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 800195c:	f000 fa1f 	bl	8001d9e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001964:	64da      	str	r2, [r3, #76]	; 0x4c
 8001966:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_ADC_MspInit+0x120>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800196c:	bf00      	nop
 800196e:	3780      	adds	r7, #128	; 0x80
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	50040000 	.word	0x50040000
 8001978:	40021000 	.word	0x40021000
 800197c:	48000800 	.word	0x48000800
 8001980:	20000130 	.word	0x20000130
 8001984:	40020008 	.word	0x40020008

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <MX_DMA_Init+0x48>)
 8001990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <MX_DMA_Init+0x48>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6493      	str	r3, [r2, #72]	; 0x48
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <MX_DMA_Init+0x48>)
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	200b      	movs	r0, #11
 80019ac:	f002 fd41 	bl	8004432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019b0:	200b      	movs	r0, #11
 80019b2:	f002 fd5a 	bl	800446a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	200f      	movs	r0, #15
 80019bc:	f002 fd39 	bl	8004432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019c0:	200f      	movs	r0, #15
 80019c2:	f002 fd52 	bl	800446a <HAL_NVIC_EnableIRQ>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000

080019d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <MX_GPIO_Init+0x144>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a4a      	ldr	r2, [pc, #296]	; (8001b18 <MX_GPIO_Init+0x144>)
 80019f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <MX_GPIO_Init+0x144>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	4a44      	ldr	r2, [pc, #272]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a3e      	ldr	r2, [pc, #248]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a32      	ldr	r2, [pc, #200]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b30      	ldr	r3, [pc, #192]	; (8001b18 <MX_GPIO_Init+0x144>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210c      	movs	r1, #12
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <MX_GPIO_Init+0x148>)
 8001a68:	f003 f87a 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f003 f873 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	4828      	ldr	r0, [pc, #160]	; (8001b20 <MX_GPIO_Init+0x14c>)
 8001a80:	f003 f86e 	bl	8004b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 8001a84:	230c      	movs	r3, #12
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4820      	ldr	r0, [pc, #128]	; (8001b1c <MX_GPIO_Init+0x148>)
 8001a9c:	f002 fee6 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 8001aa0:	2350      	movs	r3, #80	; 0x50
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f002 fed9 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 8001aba:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f002 fec9 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8001ada:	2304      	movs	r3, #4
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <MX_GPIO_Init+0x14c>)
 8001af2:	f002 febb 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001af6:	2308      	movs	r3, #8
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4806      	ldr	r0, [pc, #24]	; (8001b24 <MX_GPIO_Init+0x150>)
 8001b0a:	f002 feaf 	bl	800486c <HAL_GPIO_Init>

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	48000800 	.word	0x48000800
 8001b20:	48000c00 	.word	0x48000c00
 8001b24:	48001c00 	.word	0x48001c00

08001b28 <mqtt_start>:
		buffer[i][1] = obd.current_value;
	}
}

static uint8_t mqtt_start(BG77 module)
{
 8001b28:	b084      	sub	sp, #16
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	f5ad 6dc4 	sub.w	sp, sp, #1568	; 0x620
 8001b30:	f44f 67c4 	mov.w	r7, #1568	; 0x620
 8001b34:	446f      	add	r7, sp
 8001b36:	f107 0c08 	add.w	ip, r7, #8
 8001b3a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	}
//	else
//	{
//		return FALSE;
//	}
	mqtt_open(MQTT_IP,  MQTT_PORT, 0, module);
 8001b3e:	466b      	mov	r3, sp
 8001b40:	f107 0108 	add.w	r1, r7, #8
 8001b44:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f006 f973 	bl	8007e34 <memcpy>
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f240 715b 	movw	r1, #1883	; 0x75b
 8001b54:	480e      	ldr	r0, [pc, #56]	; (8001b90 <mqtt_start+0x68>)
 8001b56:	f000 fe93 	bl	8002880 <mqtt_open>
	HAL_Delay(10000);
 8001b5a:	f242 7010 	movw	r0, #10000	; 0x2710
 8001b5e:	f001 f97d 	bl	8002e5c <HAL_Delay>
	mqtt_connect(0,"obd1", module);
 8001b62:	4668      	mov	r0, sp
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f006 f961 	bl	8007e34 <memcpy>
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	cb0c      	ldmia	r3, {r2, r3}
 8001b78:	4906      	ldr	r1, [pc, #24]	; (8001b94 <mqtt_start+0x6c>)
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 fefe 	bl	800297c <mqtt_connect>

	return TRUE;
 8001b80:	2301      	movs	r3, #1
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b8a:	b004      	add	sp, #16
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	08009404 	.word	0x08009404
 8001b94:	08009414 	.word	0x08009414

08001b98 <mqtt_stop>:

static uint8_t mqtt_stop(BG77 module)
{
 8001b98:	b084      	sub	sp, #16
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	f5ad 6dc3 	sub.w	sp, sp, #1560	; 0x618
 8001ba0:	f44f 67c3 	mov.w	r7, #1560	; 0x618
 8001ba4:	446f      	add	r7, sp
 8001ba6:	f107 0c08 	add.w	ip, r7, #8
 8001baa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(mqtt_disconnect(0, module))
 8001bae:	4668      	mov	r0, sp
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f006 f93b 	bl	8007e34 <memcpy>
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	cb0c      	ldmia	r3, {r2, r3}
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 ff69 	bl	8002a9c <mqtt_disconnect>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d014      	beq.n	8001bfa <mqtt_stop+0x62>
	{
		if(mqtt_close(0, module))
 8001bd0:	4668      	mov	r0, sp
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f006 f92a 	bl	8007e34 <memcpy>
 8001be0:	f107 0308 	add.w	r3, r7, #8
 8001be4:	cb0c      	ldmia	r3, {r2, r3}
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 ffd2 	bl	8002b90 <mqtt_close>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <mqtt_stop+0x5e>
		{
			return FALSE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e002      	b.n	8001bfc <mqtt_stop+0x64>
		}
		else
		{
			return TRUE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <mqtt_stop+0x64>
		}
	}
	else
	{
		return TRUE;
 8001bfa:	2301      	movs	r3, #1
	}
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c04:	b004      	add	sp, #16
 8001c06:	4770      	bx	lr

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	f2ad 6d1c 	subw	sp, sp, #1564	; 0x61c
 8001c0e:	f44f 67c2 	mov.w	r7, #1552	; 0x610
 8001c12:	446f      	add	r7, sp
  /* USER CODE BEGIN 1 */
//	float mqtt_buf[96][2] = {0};
	uint8_t sent = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f001 f8ac 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f85a 	bl	8001cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff fed8 	bl	80019d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c24:	f7ff feb0 	bl	8001988 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c28:	f7ff fdb6 	bl	8001798 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001c2c:	f000 fb2a 	bl	8002284 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c30:	f000 fb5c 	bl	80022ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001c34:	f000 fb8e 	bl	8002354 <MX_USART3_UART_Init>
//  MX_IWDG_Init();
  MX_TIM6_Init();
 8001c38:	f000 fa7c 	bl	8002134 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001c3c:	f000 fa2a 	bl	8002094 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001c40:	f000 f899 	bl	8001d76 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  module.initialized = module_init(module);
 8001c44:	4c20      	ldr	r4, [pc, #128]	; (8001cc8 <main+0xc0>)
 8001c46:	4668      	mov	r0, sp
 8001c48:	f104 0310 	add.w	r3, r4, #16
 8001c4c:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001c50:	4619      	mov	r1, r3
 8001c52:	f006 f8ef 	bl	8007e34 <memcpy>
 8001c56:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c5a:	f000 fd63 	bl	8002724 <module_init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <main+0xc0>)
 8001c64:	f883 25df 	strb.w	r2, [r3, #1503]	; 0x5df
//  module.rssi = check_signal(module);
//  obd_comm.used_protocol = OBD2_Init();
//
//  acquire_vehicle_data(obd_comm, mqtt_buf);
  module.connected = mqtt_start(module);
 8001c68:	4c17      	ldr	r4, [pc, #92]	; (8001cc8 <main+0xc0>)
 8001c6a:	4668      	mov	r0, sp
 8001c6c:	f104 0310 	add.w	r3, r4, #16
 8001c70:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001c74:	4619      	mov	r1, r3
 8001c76:	f006 f8dd 	bl	8007e34 <memcpy>
 8001c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c7e:	f7ff ff53 	bl	8001b28 <mqtt_start>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <main+0xc0>)
 8001c88:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de

  mqtt_publish(0,0,0,0,OBD_TOPIC, "Hello v4");
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <main+0xc4>)
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <main+0xc8>)
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f000 ffe8 	bl	8002c70 <mqtt_publish>

  module.connected = mqtt_stop(module);
 8001ca0:	4c09      	ldr	r4, [pc, #36]	; (8001cc8 <main+0xc0>)
 8001ca2:	4668      	mov	r0, sp
 8001ca4:	f104 0310 	add.w	r3, r4, #16
 8001ca8:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 8001cac:	4619      	mov	r1, r3
 8001cae:	f006 f8c1 	bl	8007e34 <memcpy>
 8001cb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb6:	f7ff ff6f 	bl	8001b98 <mqtt_stop>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <main+0xc0>)
 8001cc0:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <main+0xbc>
 8001cc6:	bf00      	nop
 8001cc8:	20000258 	.word	0x20000258
 8001ccc:	0800941c 	.word	0x0800941c
 8001cd0:	08009428 	.word	0x08009428

08001cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b096      	sub	sp, #88	; 0x58
 8001cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	2244      	movs	r2, #68	; 0x44
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 f8b4 	bl	8007e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce8:	463b      	mov	r3, r7
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cf6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cfa:	f002 ff67 	bl	8004bcc <HAL_PWREx_ControlVoltageScaling>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d04:	f000 f84b 	bl	8001d9e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001d08:	2309      	movs	r3, #9
 8001d0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d12:	2301      	movs	r3, #1
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d16:	2302      	movs	r3, #2
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d22:	230a      	movs	r3, #10
 8001d24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d26:	2307      	movs	r3, #7
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 ff9e 	bl	8004c78 <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d42:	f000 f82c 	bl	8001d9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d46:	230f      	movs	r3, #15
 8001d48:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fb9e 	bl	80054a0 <HAL_RCC_ClockConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d6a:	f000 f818 	bl	8001d9e <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3758      	adds	r7, #88	; 0x58
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f002 fb57 	bl	8004432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d84:	2010      	movs	r0, #16
 8001d86:	f002 fb70 	bl	800446a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2026      	movs	r0, #38	; 0x26
 8001d90:	f002 fb4f 	bl	8004432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d94:	2026      	movs	r0, #38	; 0x26
 8001d96:	f002 fb68 	bl	800446a <HAL_NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da2:	b672      	cpsid	i
}
 8001da4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <Error_Handler+0x8>

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_MspInit+0x44>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_MspInit+0x44>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_MspInit+0x44>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_MspInit+0x44>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_MspInit+0x44>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_MspInit+0x44>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40021000 	.word	0x40021000

08001df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <NMI_Handler+0x4>

08001df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <HardFault_Handler+0x4>

08001dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <MemManage_Handler+0x4>

08001e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <BusFault_Handler+0x4>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <UsageFault_Handler+0x4>

08001e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e3c:	f000 ffee 	bl	8002e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA1_Channel1_IRQHandler+0x10>)
 8001e4a:	f002 fc60 	bl	800470e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000130 	.word	0x20000130

08001e58 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <DMA1_Channel5_IRQHandler+0x10>)
 8001e5e:	f002 fc56 	bl	800470e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000aa0 	.word	0x20000aa0

08001e6c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <DMA1_Channel6_IRQHandler+0x10>)
 8001e72:	f002 fc4c 	bl	800470e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000ae8 	.word	0x20000ae8

08001e80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <CAN1_RX0_IRQHandler+0x10>)
 8001e86:	f001 ffd3 	bl	8003e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200000a4 	.word	0x200000a4

08001e94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <CAN1_RX1_IRQHandler+0x10>)
 8001e9a:	f001 ffc9 	bl	8003e30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200000a4 	.word	0x200000a4

08001ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <USART1_IRQHandler+0x10>)
 8001eae:	f004 fdc9 	bl	8006a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000914 	.word	0x20000914

08001ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <USART2_IRQHandler+0x10>)
 8001ec2:	f004 fdbf 	bl	8006a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000998 	.word	0x20000998

08001ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM6_DAC_IRQHandler+0x10>)
 8001ed6:	f004 f8ea 	bl	80060ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200008c8 	.word	0x200008c8

08001ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return 1;
 8001ee8:	2301      	movs	r3, #1
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_kill>:

int _kill(int pid, int sig)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efe:	f005 ff6f 	bl	8007de0 <__errno>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2216      	movs	r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
	return -1;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_exit>:

void _exit (int status)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffe7 	bl	8001ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f26:	e7fe      	b.n	8001f26 <_exit+0x12>

08001f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f3a:	f3af 8000 	nop.w
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
	}

return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
	}
	return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	; (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f005 fed4 	bl	8007de0 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20010000 	.word	0x20010000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000878 	.word	0x20000878
 800206c:	20000b48 	.word	0x20000b48

08002070 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <MX_TIM2_Init+0x98>)
 80020b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <MX_TIM2_Init+0x98>)
 80020bc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <MX_TIM2_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <MX_TIM2_Init+0x98>)
 80020ca:	4a19      	ldr	r2, [pc, #100]	; (8002130 <MX_TIM2_Init+0x9c>)
 80020cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <MX_TIM2_Init+0x98>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_TIM2_Init+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020da:	4814      	ldr	r0, [pc, #80]	; (800212c <MX_TIM2_Init+0x98>)
 80020dc:	f003 ff0c 	bl	8005ef8 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80020e6:	f7ff fe5a 	bl	8001d9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <MX_TIM2_Init+0x98>)
 80020f8:	f004 f8f8 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002102:	f7ff fe4c 	bl	8001d9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_TIM2_Init+0x98>)
 8002114:	f004 fada 	bl	80066cc <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800211e:	f7ff fe3e 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	2000087c 	.word	0x2000087c
 8002130:	000f423f 	.word	0x000f423f

08002134 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <MX_TIM6_Init+0x68>)
 8002146:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <MX_TIM6_Init+0x6c>)
 8002148:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_TIM6_Init+0x68>)
 800214c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002150:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <MX_TIM6_Init+0x68>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8002158:	4b10      	ldr	r3, [pc, #64]	; (800219c <MX_TIM6_Init+0x68>)
 800215a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800215e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <MX_TIM6_Init+0x68>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002166:	480d      	ldr	r0, [pc, #52]	; (800219c <MX_TIM6_Init+0x68>)
 8002168:	f003 fec6 	bl	8005ef8 <HAL_TIM_Base_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002172:	f7ff fe14 	bl	8001d9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <MX_TIM6_Init+0x68>)
 8002184:	f004 faa2 	bl	80066cc <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800218e:	f7ff fe06 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200008c8 	.word	0x200008c8
 80021a0:	40001000 	.word	0x40001000

080021a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d10c      	bne.n	80021d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021ce:	e018      	b.n	8002202 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_TIM_Base_MspInit+0x6c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d113      	bne.n	8002202 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021e0:	f043 0310 	orr.w	r3, r3, #16
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_TIM_Base_MspInit+0x68>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2036      	movs	r0, #54	; 0x36
 80021f8:	f002 f91b 	bl	8004432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021fc:	2036      	movs	r0, #54	; 0x36
 80021fe:	f002 f934 	bl	800446a <HAL_NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40001000 	.word	0x40001000

08002214 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(obd_comm.msg_type == 0)
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002228:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 8002230:	bf00      	nop
 8002232:	e003      	b.n	800223c <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
		{
			obd_comm.msg_type = 3;
 8002234:	4b10      	ldr	r3, [pc, #64]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002236:	2203      	movs	r2, #3
 8002238:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}
		HAL_TIM_Base_Stop_IT(&htim6);
 800223c:	480f      	ldr	r0, [pc, #60]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800223e:	f003 ff07 	bl	8006050 <HAL_TIM_Base_Stop_IT>
		{
			module.received = 2;
		}
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 8002242:	e012      	b.n	800226a <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM2)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224c:	d10d      	bne.n	800226a <HAL_TIM_PeriodElapsedCallback+0x56>
		if(module.received == 1)
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002250:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIM_PeriodElapsedCallback+0x48>
			__NOP();
 8002258:	bf00      	nop
 800225a:	e003      	b.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x50>
			module.received = 2;
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800225e:	2202      	movs	r2, #2
 8002260:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
		HAL_TIM_Base_Stop_IT(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f003 fef3 	bl	8006050 <HAL_TIM_Base_Stop_IT>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40001000 	.word	0x40001000
 8002278:	20000188 	.word	0x20000188
 800227c:	200008c8 	.word	0x200008c8
 8002280:	20000258 	.word	0x20000258

08002284 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <MX_USART1_UART_Init+0x64>)
 800228c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 8002290:	f642 02a0 	movw	r2, #10400	; 0x28a0
 8002294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ce:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_USART1_UART_Init+0x60>)
 80022d0:	f004 fa80 	bl	80067d4 <HAL_UART_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80022da:	f7ff fd60 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000914 	.word	0x20000914
 80022e8:	40013800 	.word	0x40013800

080022ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <MX_USART2_UART_Init+0x60>)
 80022f2:	4a17      	ldr	r2, [pc, #92]	; (8002350 <MX_USART2_UART_Init+0x64>)
 80022f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_USART2_UART_Init+0x60>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_USART2_UART_Init+0x60>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002318:	f44f 7240 	mov.w	r2, #768	; 0x300
 800231c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002320:	2200      	movs	r2, #0
 8002322:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002326:	2200      	movs	r2, #0
 8002328:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART2_UART_Init+0x60>)
 800232c:	2208      	movs	r2, #8
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART2_UART_Init+0x60>)
 8002332:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	; (800234c <MX_USART2_UART_Init+0x60>)
 800233a:	f004 fa4b 	bl	80067d4 <HAL_UART_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002344:	f7ff fd2b 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000998 	.word	0x20000998
 8002350:	40004400 	.word	0x40004400

08002354 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800235a:	4a15      	ldr	r2, [pc, #84]	; (80023b0 <MX_USART3_UART_Init+0x5c>)
 800235c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800237a:	220c      	movs	r2, #12
 800237c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <MX_USART3_UART_Init+0x58>)
 800238c:	2200      	movs	r2, #0
 800238e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002396:	4805      	ldr	r0, [pc, #20]	; (80023ac <MX_USART3_UART_Init+0x58>)
 8002398:	f004 fa1c 	bl	80067d4 <HAL_UART_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023a2:	f7ff fcfc 	bl	8001d9e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000a1c 	.word	0x20000a1c
 80023b0:	40004800 	.word	0x40004800

080023b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0a4      	sub	sp, #144	; 0x90
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	225c      	movs	r2, #92	; 0x5c
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 fd3b 	bl	8007e50 <memset>
  if(uartHandle->Instance==USART1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a99      	ldr	r2, [pc, #612]	; (8002644 <HAL_UART_MspInit+0x290>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d16b      	bne.n	80024bc <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023e4:	2301      	movs	r3, #1
 80023e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fa77 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023fc:	f7ff fccf 	bl	8001d9e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002400:	4b91      	ldr	r3, [pc, #580]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	4a90      	ldr	r2, [pc, #576]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240a:	6613      	str	r3, [r2, #96]	; 0x60
 800240c:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_UART_MspInit+0x294>)
 800240e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002418:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_UART_MspInit+0x294>)
 800241a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241c:	4a8a      	ldr	r2, [pc, #552]	; (8002648 <HAL_UART_MspInit+0x294>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002424:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 8002430:	23c0      	movs	r3, #192	; 0xc0
 8002432:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002446:	2307      	movs	r3, #7
 8002448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002450:	4619      	mov	r1, r3
 8002452:	487e      	ldr	r0, [pc, #504]	; (800264c <HAL_UART_MspInit+0x298>)
 8002454:	f002 fa0a 	bl	800486c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002458:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <HAL_UART_MspInit+0x29c>)
 800245a:	4a7e      	ldr	r2, [pc, #504]	; (8002654 <HAL_UART_MspInit+0x2a0>)
 800245c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800245e:	4b7c      	ldr	r3, [pc, #496]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002460:	2202      	movs	r2, #2
 8002462:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246a:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_UART_MspInit+0x29c>)
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002478:	2200      	movs	r2, #0
 800247a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800247c:	4b74      	ldr	r3, [pc, #464]	; (8002650 <HAL_UART_MspInit+0x29c>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_UART_MspInit+0x29c>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800248e:	4870      	ldr	r0, [pc, #448]	; (8002650 <HAL_UART_MspInit+0x29c>)
 8002490:	f002 f806 	bl	80044a0 <HAL_DMA_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800249a:	f7ff fc80 	bl	8001d9e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <HAL_UART_MspInit+0x29c>)
 80024a2:	671a      	str	r2, [r3, #112]	; 0x70
 80024a4:	4a6a      	ldr	r2, [pc, #424]	; (8002650 <HAL_UART_MspInit+0x29c>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2101      	movs	r1, #1
 80024ae:	2025      	movs	r0, #37	; 0x25
 80024b0:	f001 ffbf 	bl	8004432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024b4:	2025      	movs	r0, #37	; 0x25
 80024b6:	f001 ffd8 	bl	800446a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ba:	e0bf      	b.n	800263c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_UART_MspInit+0x2a4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d17a      	bne.n	80025bc <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024c6:	2302      	movs	r3, #2
 80024c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ce:	f107 0320 	add.w	r3, r7, #32
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fa06 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80024de:	f7ff fc5e 	bl	8001d9e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024e2:	4b59      	ldr	r3, [pc, #356]	; (8002648 <HAL_UART_MspInit+0x294>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	4a58      	ldr	r2, [pc, #352]	; (8002648 <HAL_UART_MspInit+0x294>)
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
 80024ee:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_UART_MspInit+0x294>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b53      	ldr	r3, [pc, #332]	; (8002648 <HAL_UART_MspInit+0x294>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002506:	4b50      	ldr	r3, [pc, #320]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	613b      	str	r3, [r7, #16]
 8002510:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 8002512:	230b      	movs	r3, #11
 8002514:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002528:	2307      	movs	r3, #7
 800252a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002532:	4619      	mov	r1, r3
 8002534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002538:	f002 f998 	bl	800486c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 800253c:	2304      	movs	r3, #4
 800253e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002546:	2301      	movs	r3, #1
 8002548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002552:	2307      	movs	r3, #7
 8002554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f002 f983 	bl	800486c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002568:	4a3d      	ldr	r2, [pc, #244]	; (8002660 <HAL_UART_MspInit+0x2ac>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800256c:	4b3b      	ldr	r3, [pc, #236]	; (800265c <HAL_UART_MspInit+0x2a8>)
 800256e:	2202      	movs	r2, #2
 8002570:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b38      	ldr	r3, [pc, #224]	; (800265c <HAL_UART_MspInit+0x2a8>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002584:	4b35      	ldr	r3, [pc, #212]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002586:	2200      	movs	r2, #0
 8002588:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_UART_MspInit+0x2a8>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_UART_MspInit+0x2a8>)
 8002598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800259c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800259e:	482f      	ldr	r0, [pc, #188]	; (800265c <HAL_UART_MspInit+0x2a8>)
 80025a0:	f001 ff7e 	bl	80044a0 <HAL_DMA_Init>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80025aa:	f7ff fbf8 	bl	8001d9e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2a      	ldr	r2, [pc, #168]	; (800265c <HAL_UART_MspInit+0x2a8>)
 80025b2:	671a      	str	r2, [r3, #112]	; 0x70
 80025b4:	4a29      	ldr	r2, [pc, #164]	; (800265c <HAL_UART_MspInit+0x2a8>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80025ba:	e03f      	b.n	800263c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_UART_MspInit+0x2b0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13a      	bne.n	800263c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025c6:	2304      	movs	r3, #4
 80025c8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ce:	f107 0320 	add.w	r3, r7, #32
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 f986 	bl	80058e4 <HAL_RCCEx_PeriphCLKConfig>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80025de:	f7ff fbde 	bl	8001d9e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_UART_MspInit+0x294>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_UART_MspInit+0x294>)
 80025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_UART_MspInit+0x294>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_UART_MspInit+0x294>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_UART_MspInit+0x294>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002612:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002616:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800262a:	2307      	movs	r3, #7
 800262c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002630:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002634:	4619      	mov	r1, r3
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <HAL_UART_MspInit+0x2b4>)
 8002638:	f002 f918 	bl	800486c <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	3790      	adds	r7, #144	; 0x90
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40013800 	.word	0x40013800
 8002648:	40021000 	.word	0x40021000
 800264c:	48000400 	.word	0x48000400
 8002650:	20000aa0 	.word	0x20000aa0
 8002654:	40020058 	.word	0x40020058
 8002658:	40004400 	.word	0x40004400
 800265c:	20000ae8 	.word	0x20000ae8
 8002660:	4002006c 	.word	0x4002006c
 8002664:	40004800 	.word	0x40004800
 8002668:	48000800 	.word	0x48000800

0800266c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a08      	ldr	r2, [pc, #32]	; (8002698 <HAL_UART_RxCpltCallback+0x2c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d102      	bne.n	8002682 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 800267c:	f7fe fbcc 	bl	8000e18 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 8002680:	e005      	b.n	800268e <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a05      	ldr	r2, [pc, #20]	; (800269c <HAL_UART_RxCpltCallback+0x30>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 800268a:	f000 f8d1 	bl	8002830 <nb_rx_callback>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000914 	.word	0x20000914
 800269c:	20000998 	.word	0x20000998

080026a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 80026ac:	f000 f8c0 	bl	8002830 <nb_rx_callback>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	__NOP();
 80026c0:	bf00      	nop
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d4:	f7ff fccc 	bl	8002070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <LoopForever+0x6>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <LoopForever+0xe>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	; (800271c <LoopForever+0x16>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fe:	f005 fb75 	bl	8007dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002702:	f7ff fa81 	bl	8001c08 <main>

08002706 <LoopForever>:

LoopForever:
    b LoopForever
 8002706:	e7fe      	b.n	8002706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002708:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002714:	080097f8 	.word	0x080097f8
  ldr r2, =_sbss
 8002718:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800271c:	20000b48 	.word	0x20000b48

08002720 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_IRQHandler>
	...

08002724 <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	BG77 struct
 */
uint8_t module_init(BG77 module)
{
 8002724:	b084      	sub	sp, #16
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af02      	add	r7, sp, #8
 800272c:	f107 0c10 	add.w	ip, r7, #16
 8002730:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t repeat = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	71fb      	strb	r3, [r7, #7]
	power_on();
 8002738:	f000 faf8 	bl	8002d2c <power_on>
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, 4, NB) != TRUE)
 800273c:	e007      	b.n	800274e <module_init+0x2a>
	{
		if(repeat > MAX_REPEAT)
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2b0a      	cmp	r3, #10
 8002742:	d901      	bls.n	8002748 <module_init+0x24>
		{
			return FALSE;
 8002744:	2300      	movs	r3, #0
 8002746:	e018      	b.n	800277a <module_init+0x56>
		}
		repeat++;
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	3301      	adds	r3, #1
 800274c:	71fb      	strb	r3, [r7, #7]
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, 4, NB) != TRUE)
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <module_init+0x64>)
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2304      	movs	r3, #4
 8002754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <module_init+0x68>)
 800275a:	480d      	ldr	r0, [pc, #52]	; (8002790 <module_init+0x6c>)
 800275c:	f000 f81c 	bl	8002798 <send_command>
 8002760:	4603      	mov	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d1eb      	bne.n	800273e <module_init+0x1a>
	}
	send_command("ATE0\r\n", "OK\r\n", DEFAULT_TIMEOUT, 4, NB);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <module_init+0x64>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2304      	movs	r3, #4
 800276c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002770:	4906      	ldr	r1, [pc, #24]	; (800278c <module_init+0x68>)
 8002772:	4808      	ldr	r0, [pc, #32]	; (8002794 <module_init+0x70>)
 8002774:	f000 f810 	bl	8002798 <send_command>
	return TRUE;
 8002778:	2301      	movs	r3, #1
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002784:	b004      	add	sp, #16
 8002786:	4770      	bx	lr
 8002788:	20000998 	.word	0x20000998
 800278c:	08009434 	.word	0x08009434
 8002790:	0800943c 	.word	0x0800943c
 8002794:	08009444 	.word	0x08009444

08002798 <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval TRUE if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, uint8_t size, UART_HandleTypeDef *interface)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	460b      	mov	r3, r1
 80027a8:	80fb      	strh	r3, [r7, #6]
 80027aa:	4613      	mov	r3, r2
 80027ac:	717b      	strb	r3, [r7, #5]
	module.received = 0;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <send_command+0x8c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
	module.expected_size = size;
 80027b6:	4a1b      	ldr	r2, [pc, #108]	; (8002824 <send_command+0x8c>)
 80027b8:	797b      	ldrb	r3, [r7, #5]
 80027ba:	f882 35dd 	strb.w	r3, [r2, #1501]	; 0x5dd
	clear_rx_buff();
 80027be:	f000 fac9 	bl	8002d54 <clear_rx_buff>
	uint8_t length = strlen(command);
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f7fd fd04 	bl	80001d0 <strlen>
 80027c8:	4603      	mov	r3, r0
 80027ca:	75fb      	strb	r3, [r7, #23]
//	HAL_UART_Receive_DMA(interface, module.rx_buff, size+2);
	HAL_UART_Receive_IT(interface, &rx_data, 1);
 80027cc:	2201      	movs	r2, #1
 80027ce:	4916      	ldr	r1, [pc, #88]	; (8002828 <send_command+0x90>)
 80027d0:	6a38      	ldr	r0, [r7, #32]
 80027d2:	f004 f8e1 	bl	8006998 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	68f9      	ldr	r1, [r7, #12]
 80027de:	6a38      	ldr	r0, [r7, #32]
 80027e0:	f004 f846 	bl	8006870 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(NB_TIMER);
 80027e4:	4811      	ldr	r0, [pc, #68]	; (800282c <send_command+0x94>)
 80027e6:	f003 fbdf 	bl	8005fa8 <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 80027ea:	e000      	b.n	80027ee <send_command+0x56>
	{
		__NOP();
 80027ec:	bf00      	nop
	while(module.received == 0)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <send_command+0x8c>)
 80027f0:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f9      	beq.n	80027ec <send_command+0x54>
	}
	if(module.received == 1)
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <send_command+0x8c>)
 80027fa:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10a      	bne.n	8002818 <send_command+0x80>
	{
		if(strstr((char *)module.rx_buff, reply) != NULL)
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	4807      	ldr	r0, [pc, #28]	; (8002824 <send_command+0x8c>)
 8002806:	f005 fb4b 	bl	8007ea0 <strstr>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <send_command+0x7c>
		{
			return TRUE;
 8002810:	2301      	movs	r3, #1
 8002812:	e002      	b.n	800281a <send_command+0x82>
		}
		else
		{
			return FALSE;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <send_command+0x82>
		}
	}
	return FALSE;
 8002818:	2300      	movs	r3, #0
//	else
//	{
//		return FALSE;
//	}

}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000258 	.word	0x20000258
 8002828:	20000b30 	.word	0x20000b30
 800282c:	2000087c 	.word	0x2000087c

08002830 <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
//	module.received = 1;
	module.rx_buff[module.rx_index++] = rx_data;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <nb_rx_callback+0x44>)
 8002836:	f893 35dc 	ldrb.w	r3, [r3, #1500]	; 0x5dc
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	b2d1      	uxtb	r1, r2
 800283e:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <nb_rx_callback+0x44>)
 8002840:	f882 15dc 	strb.w	r1, [r2, #1500]	; 0x5dc
 8002844:	461a      	mov	r2, r3
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <nb_rx_callback+0x48>)
 8002848:	7819      	ldrb	r1, [r3, #0]
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <nb_rx_callback+0x44>)
 800284c:	5499      	strb	r1, [r3, r2]
	if(module.rx_index > module.expected_size)
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <nb_rx_callback+0x44>)
 8002850:	f893 25dc 	ldrb.w	r2, [r3, #1500]	; 0x5dc
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <nb_rx_callback+0x44>)
 8002856:	f893 35dd 	ldrb.w	r3, [r3, #1501]	; 0x5dd
 800285a:	429a      	cmp	r2, r3
 800285c:	d903      	bls.n	8002866 <nb_rx_callback+0x36>
	{
		module.received = 1;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <nb_rx_callback+0x44>)
 8002860:	2201      	movs	r2, #1
 8002862:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
	}
	HAL_UART_Receive_IT(NB, &rx_data, 1);
 8002866:	2201      	movs	r2, #1
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <nb_rx_callback+0x48>)
 800286a:	4804      	ldr	r0, [pc, #16]	; (800287c <nb_rx_callback+0x4c>)
 800286c:	f004 f894 	bl	8006998 <HAL_UART_Receive_IT>
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000258 	.word	0x20000258
 8002878:	20000b30 	.word	0x20000b30
 800287c:	20000998 	.word	0x20000998

08002880 <mqtt_open>:
 *	@param	id				Connection ID (0-5)
 *	@param	module			BG77 struct
 *	@retval	TRUE or FALSE depending on the response
 * */
uint8_t mqtt_open(const char* broker_address, uint16_t port, uint8_t id, BG77 module)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b0c6      	sub	sp, #280	; 0x118
 8002884:	af02      	add	r7, sp, #8
 8002886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800288a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288e:	6018      	str	r0, [r3, #0]
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002898:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 800289c:	4602      	mov	r2, r0
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028a4:	f2a3 130f 	subw	r3, r3, #271	; 0x10f
 80028a8:	460a      	mov	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
//	wake_up();
	char command [COMMAND_SIZE];
	sprintf(command, "AT+QMTOPEN=%d,\"%s\",%d\r\n", id, broker_address, port);
 80028ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028b0:	f2a3 130f 	subw	r3, r3, #271	; 0x10f
 80028b4:	7819      	ldrb	r1, [r3, #0]
 80028b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ba:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028c8:	f107 000c 	add.w	r0, r7, #12
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	460a      	mov	r2, r1
 80028d2:	4924      	ldr	r1, [pc, #144]	; (8002964 <mqtt_open+0xe4>)
 80028d4:	f005 fac4 	bl	8007e60 <siprintf>
	if(send_command(command, "OK\r\n", DEFAULT_TIMEOUT, 18, NB))
 80028d8:	f107 000c 	add.w	r0, r7, #12
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <mqtt_open+0xe8>)
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2312      	movs	r3, #18
 80028e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028e6:	4921      	ldr	r1, [pc, #132]	; (800296c <mqtt_open+0xec>)
 80028e8:	f7ff ff56 	bl	8002798 <send_command>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d031      	beq.n	8002956 <mqtt_open+0xd6>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 80028f2:	491f      	ldr	r1, [pc, #124]	; (8002970 <mqtt_open+0xf0>)
 80028f4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80028f8:	f005 fae8 	bl	8007ecc <strtok>
 80028fc:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		if(token)
 8002900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d026      	beq.n	8002956 <mqtt_open+0xd6>
		{
			token = strtok(NULL,",");
 8002908:	491a      	ldr	r1, [pc, #104]	; (8002974 <mqtt_open+0xf4>)
 800290a:	2000      	movs	r0, #0
 800290c:	f005 fade 	bl	8007ecc <strtok>
 8002910:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
			if(token)
 8002914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01c      	beq.n	8002956 <mqtt_open+0xd6>
			{
				token = strtok(NULL, "\n");
 800291c:	4916      	ldr	r1, [pc, #88]	; (8002978 <mqtt_open+0xf8>)
 800291e:	2000      	movs	r0, #0
 8002920:	f005 fad4 	bl	8007ecc <strtok>
 8002924:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
				if(token)
 8002928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <mqtt_open+0xd6>
				{
					char *ptr;
					uint8_t status;
					status = strtol(token, &ptr, 10);
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	220a      	movs	r2, #10
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800293c:	f005 fba4 	bl	8008088 <strtol>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
					if(status == 0)
 8002946:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <mqtt_open+0xd2>
					{
						return TRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	e002      	b.n	8002958 <mqtt_open+0xd8>
					}
					else
					{
						return FALSE;
 8002952:	2300      	movs	r3, #0
 8002954:	e000      	b.n	8002958 <mqtt_open+0xd8>
					}
				}
			}
		}
	}
	return FALSE;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08009490 	.word	0x08009490
 8002968:	20000998 	.word	0x20000998
 800296c:	08009434 	.word	0x08009434
 8002970:	08009458 	.word	0x08009458
 8002974:	0800945c 	.word	0x0800945c
 8002978:	08009460 	.word	0x08009460

0800297c <mqtt_connect>:
 * @param	module		BG77 struct
 * @retval	return code for the command
 */
//TODO
uint8_t mqtt_connect(uint8_t id, const char* client_id, BG77 module)
{
 800297c:	b082      	sub	sp, #8
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b0c9      	sub	sp, #292	; 0x124
 8002982:	af02      	add	r7, sp, #8
 8002984:	4604      	mov	r4, r0
 8002986:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800298a:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800298e:	6001      	str	r1, [r0, #0]
 8002990:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8002994:	e881 000c 	stmia.w	r1, {r2, r3}
 8002998:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800299c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80029a0:	4622      	mov	r2, r4
 80029a2:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [3];
	uint8_t i = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command, "AT+QMTCONN=%d,\"%s\"\r\n",id,client_id);
 80029aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029ae:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80029b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029bc:	f107 0010 	add.w	r0, r7, #16
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4931      	ldr	r1, [pc, #196]	; (8002a88 <mqtt_connect+0x10c>)
 80029c4:	f005 fa4c 	bl	8007e60 <siprintf>
	if(send_command(command, "OK\r\n", DEFAULT_TIMEOUT, 19, NB))
 80029c8:	f107 0010 	add.w	r0, r7, #16
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <mqtt_connect+0x110>)
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2313      	movs	r3, #19
 80029d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029d6:	492e      	ldr	r1, [pc, #184]	; (8002a90 <mqtt_connect+0x114>)
 80029d8:	f7ff fede 	bl	8002798 <send_command>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d048      	beq.n	8002a74 <mqtt_connect+0xf8>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 80029e2:	492c      	ldr	r1, [pc, #176]	; (8002a94 <mqtt_connect+0x118>)
 80029e4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80029e8:	f005 fa70 	bl	8007ecc <strtok>
 80029ec:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		if(token)
 80029f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03b      	beq.n	8002a70 <mqtt_connect+0xf4>
		{
			token = strtok(NULL, ",");
 80029f8:	4927      	ldr	r1, [pc, #156]	; (8002a98 <mqtt_connect+0x11c>)
 80029fa:	2000      	movs	r0, #0
 80029fc:	f005 fa66 	bl	8007ecc <strtok>
 8002a00:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
			while(token != NULL)
 8002a04:	e015      	b.n	8002a32 <mqtt_connect+0xb6>
			{
				char *ptr;
				ret[i] = strtol(token, &ptr, 10);
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	220a      	movs	r2, #10
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002a12:	f005 fb39 	bl	8008088 <strtol>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a1c:	b2d1      	uxtb	r1, r2
 8002a1e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002a22:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002a26:	54d1      	strb	r1, [r2, r3]
				i++;
 8002a28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			while(token != NULL)
 8002a32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1e5      	bne.n	8002a06 <mqtt_connect+0x8a>
			}
			if(ret[1] == (0 | 1))
 8002a3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a42:	785b      	ldrb	r3, [r3, #1]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d111      	bne.n	8002a6c <mqtt_connect+0xf0>
			{
				switch(ret[2])
 8002a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a4c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a50:	789b      	ldrb	r3, [r3, #2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <mqtt_connect+0xde>
				{
				 case 0:
					 return TRUE;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00d      	b.n	8002a76 <mqtt_connect+0xfa>
					 break;
				 default:
					 module.error = ret[2];
 8002a5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a62:	789b      	ldrb	r3, [r3, #2]
 8002a64:	f887 370b 	strb.w	r3, [r7, #1803]	; 0x70b
					 return FALSE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e004      	b.n	8002a76 <mqtt_connect+0xfa>
				}
			}
			else
			{
				return FALSE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e002      	b.n	8002a76 <mqtt_connect+0xfa>
			}
		}
		return FALSE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <mqtt_connect+0xfa>
	}
	return FALSE;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a82:	b002      	add	sp, #8
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	080094a8 	.word	0x080094a8
 8002a8c:	20000998 	.word	0x20000998
 8002a90:	08009434 	.word	0x08009434
 8002a94:	08009458 	.word	0x08009458
 8002a98:	0800945c 	.word	0x0800945c

08002a9c <mqtt_disconnect>:
 *	@param	id	 	Connection ID (0-5)
 *	@param	module	BG77 struct
 *	@retval	TRUE if the disconnect is successful
 */
uint8_t mqtt_disconnect(uint8_t id, BG77 module)
{
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b0c8      	sub	sp, #288	; 0x120
 8002aa2:	af02      	add	r7, sp, #8
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002aaa:	e880 000c 	stmia.w	r0, {r2, r3}
 8002aae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ab2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ab6:	460a      	mov	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [2];
	uint8_t i = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command,"AT+QMTDISC=%d\r\n",id);
 8002ac0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ac4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	f107 0310 	add.w	r3, r7, #16
 8002ace:	492b      	ldr	r1, [pc, #172]	; (8002b7c <mqtt_disconnect+0xe0>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 f9c5 	bl	8007e60 <siprintf>
	if(send_command(command, "OK\r\n", DEFAULT_TIMEOUT, 18, NB))
 8002ad6:	f107 0010 	add.w	r0, r7, #16
 8002ada:	4b29      	ldr	r3, [pc, #164]	; (8002b80 <mqtt_disconnect+0xe4>)
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2312      	movs	r3, #18
 8002ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ae4:	4927      	ldr	r1, [pc, #156]	; (8002b84 <mqtt_disconnect+0xe8>)
 8002ae6:	f7ff fe57 	bl	8002798 <send_command>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d03c      	beq.n	8002b6a <mqtt_disconnect+0xce>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 8002af0:	4925      	ldr	r1, [pc, #148]	; (8002b88 <mqtt_disconnect+0xec>)
 8002af2:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002af6:	f005 f9e9 	bl	8007ecc <strtok>
 8002afa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		if(token)
 8002afe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d031      	beq.n	8002b6a <mqtt_disconnect+0xce>
		{
			token = strtok(NULL, ",");
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <mqtt_disconnect+0xf0>)
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f005 f9df 	bl	8007ecc <strtok>
 8002b0e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
			while(token != NULL)
 8002b12:	e01b      	b.n	8002b4c <mqtt_disconnect+0xb0>
			{
				char *ptr;
				ret[i] = strtol(token, &ptr, 10);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	220a      	movs	r2, #10
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002b20:	f005 fab2 	bl	8008088 <strtol>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b2a:	b2d1      	uxtb	r1, r2
 8002b2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002b30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002b34:	54d1      	strb	r1, [r2, r3]
				token = strtok(NULL, ",");
 8002b36:	4915      	ldr	r1, [pc, #84]	; (8002b8c <mqtt_disconnect+0xf0>)
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f005 f9c7 	bl	8007ecc <strtok>
 8002b3e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
				i++;
 8002b42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b46:	3301      	adds	r3, #1
 8002b48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			while(token != NULL)
 8002b4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1df      	bne.n	8002b14 <mqtt_disconnect+0x78>
			}
			if(ret[1] == 0)
 8002b54:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002b58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002b5c:	785b      	ldrb	r3, [r3, #1]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <mqtt_disconnect+0xca>
			{
				return TRUE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e002      	b.n	8002b6c <mqtt_disconnect+0xd0>
			}
			else
			{
				return FALSE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <mqtt_disconnect+0xd0>
			}
		}
	}
	return FALSE;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b78:	b002      	add	sp, #8
 8002b7a:	4770      	bx	lr
 8002b7c:	080094c0 	.word	0x080094c0
 8002b80:	20000998 	.word	0x20000998
 8002b84:	08009434 	.word	0x08009434
 8002b88:	08009458 	.word	0x08009458
 8002b8c:	0800945c 	.word	0x0800945c

08002b90 <mqtt_close>:
 *	@param	id	 	Connection ID (0-5)
 *	@param	module	BG77 struct
 *	@retval	TRUE if the closure is successful
 */
uint8_t mqtt_close(uint8_t id, BG77 module)
{
 8002b90:	b082      	sub	sp, #8
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b0c8      	sub	sp, #288	; 0x120
 8002b96:	af02      	add	r7, sp, #8
 8002b98:	4601      	mov	r1, r0
 8002b9a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002b9e:	e880 000c 	stmia.w	r0, {r2, r3}
 8002ba2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ba6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002baa:	460a      	mov	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t i = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command,"AT+QMTCLOSE=%d\r\n",id);
 8002bb4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002bb8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4926      	ldr	r1, [pc, #152]	; (8002c5c <mqtt_close+0xcc>)
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f005 f94b 	bl	8007e60 <siprintf>
	if(send_command(command, "OK\r\n", DEFAULT_TIMEOUT, 19, NB))
 8002bca:	f107 0010 	add.w	r0, r7, #16
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <mqtt_close+0xd0>)
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2313      	movs	r3, #19
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	4922      	ldr	r1, [pc, #136]	; (8002c64 <mqtt_close+0xd4>)
 8002bda:	f7ff fddd 	bl	8002798 <send_command>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d032      	beq.n	8002c4a <mqtt_close+0xba>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 8002be4:	4920      	ldr	r1, [pc, #128]	; (8002c68 <mqtt_close+0xd8>)
 8002be6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8002bea:	f005 f96f 	bl	8007ecc <strtok>
 8002bee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		if(token)
 8002bf2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d025      	beq.n	8002c46 <mqtt_close+0xb6>
		{
			token = strtok(NULL, ",");
 8002bfa:	491c      	ldr	r1, [pc, #112]	; (8002c6c <mqtt_close+0xdc>)
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f005 f965 	bl	8007ecc <strtok>
 8002c02:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
			while(token != NULL)
 8002c06:	e01a      	b.n	8002c3e <mqtt_close+0xae>
			{
				if(i == 1)
 8002c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d116      	bne.n	8002c3e <mqtt_close+0xae>
				{
					char *ptr;
					uint8_t res = strtol(token, &ptr, 10);
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	220a      	movs	r2, #10
 8002c16:	4619      	mov	r1, r3
 8002c18:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002c1c:	f005 fa34 	bl	8008088 <strtol>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
					module.error = res;
 8002c26:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c2a:	f887 3703 	strb.w	r3, [r7, #1795]	; 0x703
					if(res == 0)
 8002c2e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <mqtt_close+0xaa>
					{
						return TRUE;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e008      	b.n	8002c4c <mqtt_close+0xbc>
					}
					else
					{
						return FALSE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e006      	b.n	8002c4c <mqtt_close+0xbc>
			while(token != NULL)
 8002c3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e0      	bne.n	8002c08 <mqtt_close+0x78>
					}
				}
			}
		}
		return FALSE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <mqtt_close+0xbc>
	}
	return FALSE;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002c52:	46bd      	mov	sp, r7
 8002c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c58:	b002      	add	sp, #8
 8002c5a:	4770      	bx	lr
 8002c5c:	080094d0 	.word	0x080094d0
 8002c60:	20000998 	.word	0x20000998
 8002c64:	08009434 	.word	0x08009434
 8002c68:	08009458 	.word	0x08009458
 8002c6c:	0800945c 	.word	0x0800945c

08002c70 <mqtt_publish>:
 *	@param	topic	MQTT topic
 *	@param	msg		data to be published
 *	@retval	TRUE if the publication is successful
 */
uint8_t mqtt_publish(uint8_t id, uint8_t msg_id, uint8_t qos, uint8_t retain, const char *topic, const char *msg)
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b0c6      	sub	sp, #280	; 0x118
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	4605      	mov	r5, r0
 8002c78:	460c      	mov	r4, r1
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c82:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002c86:	462a      	mov	r2, r5
 8002c88:	701a      	strb	r2, [r3, #0]
 8002c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c8e:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002c92:	4622      	mov	r2, r4
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002c9a:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ca6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002caa:	460a      	mov	r2, r1
 8002cac:	701a      	strb	r2, [r3, #0]
	char command[COMMAND_SIZE];
	sprintf(command, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",\"%s\"\r\n",id, msg_id, qos, retain, topic, msg);
 8002cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002cb2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002cb6:	781c      	ldrb	r4, [r3, #0]
 8002cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002cbc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8002cc0:	781d      	ldrb	r5, [r3, #0]
 8002cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002cc6:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002cd0:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002cd4:	7812      	ldrb	r2, [r2, #0]
 8002cd6:	f107 0008 	add.w	r0, r7, #8
 8002cda:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8002cde:	9103      	str	r1, [sp, #12]
 8002ce0:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8002ce4:	9102      	str	r1, [sp, #8]
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462b      	mov	r3, r5
 8002cec:	4622      	mov	r2, r4
 8002cee:	490c      	ldr	r1, [pc, #48]	; (8002d20 <mqtt_publish+0xb0>)
 8002cf0:	f005 f8b6 	bl	8007e60 <siprintf>
	if(send_command(command, "OK\r\n", DEFAULT_TIMEOUT, 4, NB))
 8002cf4:	f107 0008 	add.w	r0, r7, #8
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <mqtt_publish+0xb4>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d02:	4909      	ldr	r1, [pc, #36]	; (8002d28 <mqtt_publish+0xb8>)
 8002d04:	f7ff fd48 	bl	8002798 <send_command>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <mqtt_publish+0xa2>
	{
		return TRUE;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <mqtt_publish+0xa4>
	}
	return FALSE;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	08009518 	.word	0x08009518
 8002d24:	20000998 	.word	0x20000998
 8002d28:	08009434 	.word	0x08009434

08002d2c <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 8002d30:	2201      	movs	r2, #1
 8002d32:	2120      	movs	r1, #32
 8002d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d38:	f001 ff12 	bl	8004b60 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8002d3c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002d40:	f000 f88c 	bl	8002e5c <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 8002d44:	2200      	movs	r2, #0
 8002d46:	2120      	movs	r1, #32
 8002d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4c:	f001 ff08 	bl	8004b60 <HAL_GPIO_WritePin>
}
 8002d50:	bf00      	nop
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <clear_rx_buff+0x1c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
	memset(module.rx_buff, 0, sizeof(module.rx_buff));
 8002d60:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002d64:	2100      	movs	r1, #0
 8002d66:	4802      	ldr	r0, [pc, #8]	; (8002d70 <clear_rx_buff+0x1c>)
 8002d68:	f005 f872 	bl	8007e50 <memset>
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000258 	.word	0x20000258

08002d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7e:	2003      	movs	r0, #3
 8002d80:	f001 fb4c 	bl	800441c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d84:	200f      	movs	r0, #15
 8002d86:	f000 f80d 	bl	8002da4 <HAL_InitTick>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	71fb      	strb	r3, [r7, #7]
 8002d94:	e001      	b.n	8002d9a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d96:	f7ff f807 	bl	8001da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_InitTick+0x6c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d023      	beq.n	8002e00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_InitTick+0x70>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_InitTick+0x6c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fb59 	bl	8004486 <HAL_SYSTICK_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d809      	bhi.n	8002df4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f001 fb23 	bl	8004432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <HAL_InitTick+0x74>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e007      	b.n	8002e04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e004      	b.n	8002e04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e001      	b.n	8002e04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000008 	.word	0x20000008
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000004 	.word	0x20000004

08002e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <HAL_IncTick+0x20>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x24>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <HAL_IncTick+0x24>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	20000b34 	.word	0x20000b34

08002e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return uwTick;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_GetTick+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000b34 	.word	0x20000b34

08002e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e64:	f7ff ffee 	bl	8002e44 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d005      	beq.n	8002e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_Delay+0x44>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e82:	bf00      	nop
 8002e84:	f7ff ffde 	bl	8002e44 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8f7      	bhi.n	8002e84 <HAL_Delay+0x28>
  {
  }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <LL_ADC_SetOffset+0x44>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	03fff000 	.word	0x03fff000

08002f54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3360      	adds	r3, #96	; 0x60
 8002f62:	461a      	mov	r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3360      	adds	r3, #96	; 0x60
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b087      	sub	sp, #28
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3330      	adds	r3, #48	; 0x30
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	4413      	add	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	211f      	movs	r1, #31
 8002fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	401a      	ands	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	f003 011f 	and.w	r1, r3, #31
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3314      	adds	r3, #20
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	0e5b      	lsrs	r3, r3, #25
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2107      	movs	r1, #7
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	401a      	ands	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0d1b      	lsrs	r3, r3, #20
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	431a      	orrs	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0318 	and.w	r3, r3, #24
 8003086:	4908      	ldr	r1, [pc, #32]	; (80030a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003088:	40d9      	lsrs	r1, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	400b      	ands	r3, r1
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	0007ffff 	.word	0x0007ffff

080030ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6093      	str	r3, [r2, #8]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030e4:	d101      	bne.n	80030ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003108:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800310c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <LL_ADC_IsEnabled+0x18>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <LL_ADC_IsEnabled+0x1a>
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d101      	bne.n	8003186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e12c      	b.n	8003430 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d109      	bne.n	80031f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7fe fb3b 	bl	8001860 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff67 	bl	80030d0 <LL_ADC_IsDeepPowerDownEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff4d 	bl	80030ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff82 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff ff66 	bl	80030f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800322c:	4b82      	ldr	r3, [pc, #520]	; (8003438 <HAL_ADC_Init+0x27c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	099b      	lsrs	r3, r3, #6
 8003232:	4a82      	ldr	r2, [pc, #520]	; (800343c <HAL_ADC_Init+0x280>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	099b      	lsrs	r3, r3, #6
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003240:	e002      	b.n	8003248 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3b01      	subs	r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f9      	bne.n	8003242 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff64 	bl	8003120 <LL_ADC_IsInternalRegulatorEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff75 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 8003284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 80c5 	bne.w	800341e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80c1 	bne.w	800341e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032a4:	f043 0202 	orr.w	r2, r3, #2
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff49 	bl	8003148 <LL_ADC_IsEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032bc:	4860      	ldr	r0, [pc, #384]	; (8003440 <HAL_ADC_Init+0x284>)
 80032be:	f7ff ff43 	bl	8003148 <LL_ADC_IsEnabled>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4619      	mov	r1, r3
 80032ce:	485d      	ldr	r0, [pc, #372]	; (8003444 <HAL_ADC_Init+0x288>)
 80032d0:	f7ff fde8 	bl	8002ea4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e5b      	ldrb	r3, [r3, #25]
 80032d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80032e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80032ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	3b01      	subs	r3, #1
 8003308:	045b      	lsls	r3, r3, #17
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b45      	ldr	r3, [pc, #276]	; (8003448 <HAL_ADC_Init+0x28c>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	430b      	orrs	r3, r1
 800333e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff12 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 800334a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff ff1f 	bl	8003194 <LL_ADC_INJ_IsConversionOngoing>
 8003356:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d13d      	bne.n	80033da <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d13a      	bne.n	80033da <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003368:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003370:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003372:	4313      	orrs	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003380:	f023 0302 	bic.w	r3, r3, #2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	69b9      	ldr	r1, [r7, #24]
 800338a:	430b      	orrs	r3, r1
 800338c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003394:	2b01      	cmp	r3, #1
 8003396:	d118      	bne.n	80033ca <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033a2:	f023 0304 	bic.w	r3, r3, #4
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033b4:	4311      	orrs	r1, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ba:	430a      	orrs	r2, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	611a      	str	r2, [r3, #16]
 80033c8:	e007      	b.n	80033da <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0201 	bic.w	r2, r2, #1
 80033d8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d10c      	bne.n	80033fc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f023 010f 	bic.w	r1, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
 80033fa:	e007      	b.n	800340c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 020f 	bic.w	r2, r2, #15
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
 800341c:	e007      	b.n	800342e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	f043 0210 	orr.w	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800342e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000000 	.word	0x20000000
 800343c:	053e2d63 	.word	0x053e2d63
 8003440:	50040000 	.word	0x50040000
 8003444:	50040300 	.word	0x50040300
 8003448:	fff0c007 	.word	0xfff0c007

0800344c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b0b6      	sub	sp, #216	; 0xd8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x22>
 800346a:	2302      	movs	r3, #2
 800346c:	e3b9      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x796>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fe77 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f040 839e 	bne.w	8003bc4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d824      	bhi.n	80034da <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	3b02      	subs	r3, #2
 8003496:	2b03      	cmp	r3, #3
 8003498:	d81b      	bhi.n	80034d2 <HAL_ADC_ConfigChannel+0x86>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <HAL_ADC_ConfigChannel+0x54>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b9 	.word	0x080034b9
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034c9 	.word	0x080034c9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	220c      	movs	r2, #12
 80034b4:	605a      	str	r2, [r3, #4]
          break;
 80034b6:	e011      	b.n	80034dc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2212      	movs	r2, #18
 80034bc:	605a      	str	r2, [r3, #4]
          break;
 80034be:	e00d      	b.n	80034dc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2218      	movs	r2, #24
 80034c4:	605a      	str	r2, [r3, #4]
          break;
 80034c6:	e009      	b.n	80034dc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ce:	605a      	str	r2, [r3, #4]
          break;
 80034d0:	e004      	b.n	80034dc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2206      	movs	r2, #6
 80034d6:	605a      	str	r2, [r3, #4]
          break;
 80034d8:	e000      	b.n	80034dc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80034da:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	f7ff fd64 	bl	8002fb6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fe3b 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 80034f8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fe47 	bl	8003194 <LL_ADC_INJ_IsConversionOngoing>
 8003506:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800350a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800350e:	2b00      	cmp	r3, #0
 8003510:	f040 81a6 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003518:	2b00      	cmp	r3, #0
 800351a:	f040 81a1 	bne.w	8003860 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	461a      	mov	r2, r3
 800352c:	f7ff fd6f 	bl	800300e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	08db      	lsrs	r3, r3, #3
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d00a      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6919      	ldr	r1, [r3, #16]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003562:	f7ff fcd3 	bl	8002f0c <LL_ADC_SetOffset>
 8003566:	e17b      	b.n	8003860 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fcf0 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x148>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fce5 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 800358a:	4603      	mov	r3, r0
 800358c:	0e9b      	lsrs	r3, r3, #26
 800358e:	f003 021f 	and.w	r2, r3, #31
 8003592:	e01e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x186>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff fcda 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80035c2:	2320      	movs	r3, #32
 80035c4:	e004      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80035c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d105      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x19e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0e9b      	lsrs	r3, r3, #26
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	e018      	b.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80035fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e004      	b.n	800361c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800361c:	429a      	cmp	r2, r3
 800361e:	d106      	bne.n	800362e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fca9 	bl	8002f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fc8d 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 800363a:	4603      	mov	r3, r0
 800363c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x20e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fc82 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	e01e      	b.n	8003698 <HAL_ADC_ConfigChannel+0x24c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fc77 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800367c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800368c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x264>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	e018      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x296>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80036c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80036cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e004      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80036d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036dc:	fab3 f383 	clz	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d106      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fc46 	bl	8002f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2102      	movs	r1, #2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fc2a 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x2d4>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fc1f 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 8003716:	4603      	mov	r3, r0
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 021f 	and.w	r2, r3, #31
 800371e:	e01e      	b.n	800375e <HAL_ADC_ConfigChannel+0x312>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2102      	movs	r1, #2
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fc14 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800373e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e004      	b.n	800375c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003752:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x32a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	e016      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x358>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003788:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800378e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003796:	2320      	movs	r3, #32
 8003798:	e004      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800379a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d106      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2102      	movs	r1, #2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fbe5 	bl	8002f80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2103      	movs	r1, #3
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fbc9 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x396>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2103      	movs	r1, #3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fbbe 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 80037d8:	4603      	mov	r3, r0
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	e017      	b.n	8003812 <HAL_ADC_ConfigChannel+0x3c6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2103      	movs	r1, #3
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fbb3 	bl	8002f54 <LL_ADC_GetOffsetChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80037fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80037fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	e003      	b.n	8003810 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_ADC_ConfigChannel+0x3de>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0e9b      	lsrs	r3, r3, #26
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	e011      	b.n	800384e <HAL_ADC_ConfigChannel+0x402>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800383c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003842:	2320      	movs	r3, #32
 8003844:	e003      	b.n	800384e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800384e:	429a      	cmp	r2, r3
 8003850:	d106      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	2103      	movs	r1, #3
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fb90 	bl	8002f80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fc6f 	bl	8003148 <LL_ADC_IsEnabled>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 813f 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f7ff fbf0 	bl	8003064 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a8e      	ldr	r2, [pc, #568]	; (8003ac4 <HAL_ADC_ConfigChannel+0x678>)
 800388a:	4293      	cmp	r3, r2
 800388c:	f040 8130 	bne.w	8003af0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x46c>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	3301      	adds	r3, #1
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	bf94      	ite	ls
 80038b0:	2301      	movls	r3, #1
 80038b2:	2300      	movhi	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e019      	b.n	80038ec <HAL_ADC_ConfigChannel+0x4a0>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80038c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80038d0:	2320      	movs	r3, #32
 80038d2:	e003      	b.n	80038dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80038d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	3301      	adds	r3, #1
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	bf94      	ite	ls
 80038e6:	2301      	movls	r3, #1
 80038e8:	2300      	movhi	r3, #0
 80038ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d079      	beq.n	80039e4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_ADC_ConfigChannel+0x4c0>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	0e9b      	lsrs	r3, r3, #26
 8003902:	3301      	adds	r3, #1
 8003904:	069b      	lsls	r3, r3, #26
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	e015      	b.n	8003938 <HAL_ADC_ConfigChannel+0x4ec>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800391a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800391c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x50c>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	3301      	adds	r3, #1
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	e017      	b.n	8003988 <HAL_ADC_ConfigChannel+0x53c>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003960:	fa93 f3a3 	rbit	r3, r3
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	e003      	b.n	800397c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f303 	lsl.w	r3, r1, r3
 8003988:	ea42 0103 	orr.w	r1, r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x562>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	0e9b      	lsrs	r3, r3, #26
 800399e:	3301      	adds	r3, #1
 80039a0:	f003 021f 	and.w	r2, r3, #31
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	051b      	lsls	r3, r3, #20
 80039ac:	e018      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x594>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80039c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039e0:	430b      	orrs	r3, r1
 80039e2:	e080      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x5b4>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0e9b      	lsrs	r3, r3, #26
 80039f6:	3301      	adds	r3, #1
 80039f8:	069b      	lsls	r3, r3, #26
 80039fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039fe:	e015      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x5e0>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	fa93 f3a3 	rbit	r3, r3
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a10:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003a18:	2320      	movs	r3, #32
 8003a1a:	e003      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	069b      	lsls	r3, r3, #26
 8003a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x600>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0e9b      	lsrs	r3, r3, #26
 8003a3e:	3301      	adds	r3, #1
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	e017      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x630>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	61fb      	str	r3, [r7, #28]
  return result;
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003a64:	2320      	movs	r3, #32
 8003a66:	e003      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	fab3 f383 	clz	r3, r3
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3301      	adds	r3, #1
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7c:	ea42 0103 	orr.w	r1, r2, r3
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x65c>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0e9b      	lsrs	r3, r3, #26
 8003a92:	3301      	adds	r3, #1
 8003a94:	f003 021f 	and.w	r2, r3, #31
 8003a98:	4613      	mov	r3, r2
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b1e      	subs	r3, #30
 8003aa0:	051b      	lsls	r3, r3, #20
 8003aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	e01d      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x698>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	613b      	str	r3, [r7, #16]
  return result;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d103      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	e005      	b.n	8003ad0 <HAL_ADC_ConfigChannel+0x684>
 8003ac4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f003 021f 	and.w	r2, r3, #31
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	3b1e      	subs	r3, #30
 8003ade:	051b      	lsls	r3, r3, #20
 8003ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	6892      	ldr	r2, [r2, #8]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7ff fa8f 	bl	800300e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_ADC_ConfigChannel+0x7a0>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d06c      	beq.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003afc:	483c      	ldr	r0, [pc, #240]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003afe:	f7ff f9f7 	bl	8002ef0 <LL_ADC_GetCommonPathInternalCh>
 8003b02:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a3a      	ldr	r2, [pc, #232]	; (8003bf4 <HAL_ADC_ConfigChannel+0x7a8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d127      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d121      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a35      	ldr	r2, [pc, #212]	; (8003bf8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d157      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b2e:	4619      	mov	r1, r3
 8003b30:	482f      	ldr	r0, [pc, #188]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003b32:	f7ff f9ca 	bl	8002eca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_ADC_ConfigChannel+0x7b0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_ADC_ConfigChannel+0x7b4>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	099b      	lsrs	r3, r3, #6
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b50:	e002      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f9      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b5e:	e03a      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <HAL_ADC_ConfigChannel+0x7b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d113      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x746>
 8003b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d12a      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4819      	ldr	r0, [pc, #100]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003b8c:	f7ff f99d 	bl	8002eca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b90:	e021      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_ADC_ConfigChannel+0x7bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d11c      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <HAL_ADC_ConfigChannel+0x7ac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d111      	bne.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bba:	4619      	mov	r1, r3
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <HAL_ADC_ConfigChannel+0x7a4>)
 8003bbe:	f7ff f984 	bl	8002eca <LL_ADC_SetCommonPathInternalCh>
 8003bc2:	e008      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	37d8      	adds	r7, #216	; 0xd8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	80080000 	.word	0x80080000
 8003bf0:	50040300 	.word	0x50040300
 8003bf4:	c7520000 	.word	0xc7520000
 8003bf8:	50040000 	.word	0x50040000
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	053e2d63 	.word	0x053e2d63
 8003c04:	cb840000 	.word	0xcb840000
 8003c08:	80000001 	.word	0x80000001

08003c0c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c20:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d003      	beq.n	8003c30 <HAL_CAN_GetRxMessage+0x24>
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	f040 80f3 	bne.w	8003e16 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d116      	bne.n	8003c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0e7      	b.n	8003e24 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d107      	bne.n	8003c72 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e0d8      	b.n	8003e24 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	331b      	adds	r3, #27
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	4413      	add	r3, r2
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0204 	and.w	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	331b      	adds	r3, #27
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4413      	add	r3, r2
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	0d5b      	lsrs	r3, r3, #21
 8003ca0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e00b      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	331b      	adds	r3, #27
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	4413      	add	r3, r2
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	331b      	adds	r3, #27
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0202 	and.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	331b      	adds	r3, #27
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 020f 	and.w	r2, r3, #15
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	331b      	adds	r3, #27
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	331b      	adds	r3, #27
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4413      	add	r3, r2
 8003d14:	3304      	adds	r3, #4
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	0a1a      	lsrs	r2, r3, #8
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0c1a      	lsrs	r2, r3, #16
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	3302      	adds	r3, #2
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	0e1a      	lsrs	r2, r3, #24
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	3303      	adds	r3, #3
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	3304      	adds	r3, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0a1a      	lsrs	r2, r3, #8
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	3305      	adds	r3, #5
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0c1a      	lsrs	r2, r3, #16
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	3306      	adds	r3, #6
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e1a      	lsrs	r2, r3, #24
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	3307      	adds	r3, #7
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0220 	orr.w	r2, r2, #32
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	e007      	b.n	8003e12 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0220 	orr.w	r2, r2, #32
 8003e10:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e006      	b.n	8003e24 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	371c      	adds	r7, #28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e6c:	6a3b      	ldr	r3, [r7, #32]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d07c      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d023      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2201      	movs	r2, #1
 8003e86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f983 	bl	800419e <HAL_CAN_TxMailbox0CompleteCallback>
 8003e98:	e016      	b.n	8003ec8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	e00c      	b.n	8003ec8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec0:	e002      	b.n	8003ec8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f989 	bl	80041da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d024      	beq.n	8003f1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f963 	bl	80041b2 <HAL_CAN_TxMailbox1CompleteCallback>
 8003eec:	e016      	b.n	8003f1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	e00c      	b.n	8003f1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
 8003f14:	e002      	b.n	8003f1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f969 	bl	80041ee <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f943 	bl	80041c6 <HAL_CAN_TxMailbox2CompleteCallback>
 8003f40:	e016      	b.n	8003f70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d004      	beq.n	8003f56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
 8003f54:	e00c      	b.n	8003f70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d004      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	e002      	b.n	8003f70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f949 	bl	8004202 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d007      	beq.n	8003f94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2208      	movs	r2, #8
 8003fae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f930 	bl	8004216 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fbac 	bl	800172c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d006      	beq.n	800401a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2208      	movs	r2, #8
 8004012:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f912 	bl	800423e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f8f9 	bl	800422a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2210      	movs	r2, #16
 8004052:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f8fc 	bl	8004252 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d006      	beq.n	800407c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2208      	movs	r2, #8
 8004074:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8f5 	bl	8004266 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d07b      	beq.n	800417e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d072      	beq.n	8004176 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d043      	beq.n	8004176 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d03e      	beq.n	8004176 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040fe:	2b60      	cmp	r3, #96	; 0x60
 8004100:	d02b      	beq.n	800415a <HAL_CAN_IRQHandler+0x32a>
 8004102:	2b60      	cmp	r3, #96	; 0x60
 8004104:	d82e      	bhi.n	8004164 <HAL_CAN_IRQHandler+0x334>
 8004106:	2b50      	cmp	r3, #80	; 0x50
 8004108:	d022      	beq.n	8004150 <HAL_CAN_IRQHandler+0x320>
 800410a:	2b50      	cmp	r3, #80	; 0x50
 800410c:	d82a      	bhi.n	8004164 <HAL_CAN_IRQHandler+0x334>
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d019      	beq.n	8004146 <HAL_CAN_IRQHandler+0x316>
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d826      	bhi.n	8004164 <HAL_CAN_IRQHandler+0x334>
 8004116:	2b30      	cmp	r3, #48	; 0x30
 8004118:	d010      	beq.n	800413c <HAL_CAN_IRQHandler+0x30c>
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d822      	bhi.n	8004164 <HAL_CAN_IRQHandler+0x334>
 800411e:	2b10      	cmp	r3, #16
 8004120:	d002      	beq.n	8004128 <HAL_CAN_IRQHandler+0x2f8>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d005      	beq.n	8004132 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004126:	e01d      	b.n	8004164 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004130:	e019      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f043 0310 	orr.w	r3, r3, #16
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800413a:	e014      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f043 0320 	orr.w	r3, r3, #32
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004144:	e00f      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800414e:	e00a      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004158:	e005      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004162:	e000      	b.n	8004166 <HAL_CAN_IRQHandler+0x336>
            break;
 8004164:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699a      	ldr	r2, [r3, #24]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004174:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2204      	movs	r2, #4
 800417c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fd faf3 	bl	800177c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004196:	bf00      	nop
 8004198:	3728      	adds	r7, #40	; 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <__NVIC_SetPriorityGrouping+0x44>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004298:	4013      	ands	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <__NVIC_SetPriorityGrouping+0x44>)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	60d3      	str	r3, [r2, #12]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <__NVIC_GetPriorityGrouping+0x18>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	0a1b      	lsrs	r3, r3, #8
 80042ce:	f003 0307 	and.w	r3, r3, #7
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db0b      	blt.n	800430a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	4907      	ldr	r1, [pc, #28]	; (8004318 <__NVIC_EnableIRQ+0x38>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	095b      	lsrs	r3, r3, #5
 8004300:	2001      	movs	r0, #1
 8004302:	fa00 f202 	lsl.w	r2, r0, r2
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000e100 	.word	0xe000e100

0800431c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	2b00      	cmp	r3, #0
 800432e:	db0a      	blt.n	8004346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	490c      	ldr	r1, [pc, #48]	; (8004368 <__NVIC_SetPriority+0x4c>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	0112      	lsls	r2, r2, #4
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	440b      	add	r3, r1
 8004340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004344:	e00a      	b.n	800435c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <__NVIC_SetPriority+0x50>)
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	3b04      	subs	r3, #4
 8004354:	0112      	lsls	r2, r2, #4
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	440b      	add	r3, r1
 800435a:	761a      	strb	r2, [r3, #24]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000e100 	.word	0xe000e100
 800436c:	e000ed00 	.word	0xe000ed00

08004370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f1c3 0307 	rsb	r3, r3, #7
 800438a:	2b04      	cmp	r3, #4
 800438c:	bf28      	it	cs
 800438e:	2304      	movcs	r3, #4
 8004390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3304      	adds	r3, #4
 8004396:	2b06      	cmp	r3, #6
 8004398:	d902      	bls.n	80043a0 <NVIC_EncodePriority+0x30>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3b03      	subs	r3, #3
 800439e:	e000      	b.n	80043a2 <NVIC_EncodePriority+0x32>
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	f04f 32ff 	mov.w	r2, #4294967295
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	401a      	ands	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa01 f303 	lsl.w	r3, r1, r3
 80043c2:	43d9      	mvns	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	4313      	orrs	r3, r2
         );
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3724      	adds	r7, #36	; 0x24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e8:	d301      	bcc.n	80043ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00f      	b.n	800440e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ee:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <SysTick_Config+0x40>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043f6:	210f      	movs	r1, #15
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	f7ff ff8e 	bl	800431c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <SysTick_Config+0x40>)
 8004402:	2200      	movs	r2, #0
 8004404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004406:	4b04      	ldr	r3, [pc, #16]	; (8004418 <SysTick_Config+0x40>)
 8004408:	2207      	movs	r2, #7
 800440a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	e000e010 	.word	0xe000e010

0800441c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff ff29 	bl	800427c <__NVIC_SetPriorityGrouping>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	4603      	mov	r3, r0
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004444:	f7ff ff3e 	bl	80042c4 <__NVIC_GetPriorityGrouping>
 8004448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	6978      	ldr	r0, [r7, #20]
 8004450:	f7ff ff8e 	bl	8004370 <NVIC_EncodePriority>
 8004454:	4602      	mov	r2, r0
 8004456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff5d 	bl	800431c <__NVIC_SetPriority>
}
 8004462:	bf00      	nop
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff31 	bl	80042e0 <__NVIC_EnableIRQ>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ffa2 	bl	80043d8 <SysTick_Config>
 8004494:	4603      	mov	r3, r0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e098      	b.n	80045e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_DMA_Init+0x150>)
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d80f      	bhi.n	80044de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b4b      	ldr	r3, [pc, #300]	; (80045f4 <HAL_DMA_Init+0x154>)
 80044c6:	4413      	add	r3, r2
 80044c8:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_DMA_Init+0x158>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	009a      	lsls	r2, r3, #2
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a48      	ldr	r2, [pc, #288]	; (80045fc <HAL_DMA_Init+0x15c>)
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
 80044dc:	e00e      	b.n	80044fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_DMA_Init+0x160>)
 80044e6:	4413      	add	r3, r2
 80044e8:	4a43      	ldr	r2, [pc, #268]	; (80045f8 <HAL_DMA_Init+0x158>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	009a      	lsls	r2, r3, #2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <HAL_DMA_Init+0x164>)
 80044fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800452c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004556:	d039      	beq.n	80045cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <HAL_DMA_Init+0x15c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d11a      	bne.n	8004598 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004562:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_DMA_Init+0x168>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456a:	f003 031c 	and.w	r3, r3, #28
 800456e:	210f      	movs	r1, #15
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	4924      	ldr	r1, [pc, #144]	; (8004608 <HAL_DMA_Init+0x168>)
 8004578:	4013      	ands	r3, r2
 800457a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <HAL_DMA_Init+0x168>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f003 031c 	and.w	r3, r3, #28
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	491d      	ldr	r1, [pc, #116]	; (8004608 <HAL_DMA_Init+0x168>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
 8004596:	e019      	b.n	80045cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004598:	4b1c      	ldr	r3, [pc, #112]	; (800460c <HAL_DMA_Init+0x16c>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f003 031c 	and.w	r3, r3, #28
 80045a4:	210f      	movs	r1, #15
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	4917      	ldr	r1, [pc, #92]	; (800460c <HAL_DMA_Init+0x16c>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80045b2:	4b16      	ldr	r3, [pc, #88]	; (800460c <HAL_DMA_Init+0x16c>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6859      	ldr	r1, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f003 031c 	and.w	r3, r3, #28
 80045c2:	fa01 f303 	lsl.w	r3, r1, r3
 80045c6:	4911      	ldr	r1, [pc, #68]	; (800460c <HAL_DMA_Init+0x16c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40020407 	.word	0x40020407
 80045f4:	bffdfff8 	.word	0xbffdfff8
 80045f8:	cccccccd 	.word	0xcccccccd
 80045fc:	40020000 	.word	0x40020000
 8004600:	bffdfbf8 	.word	0xbffdfbf8
 8004604:	40020400 	.word	0x40020400
 8004608:	400200a8 	.word	0x400200a8
 800460c:	400204a8 	.word	0x400204a8

08004610 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d008      	beq.n	800463a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2204      	movs	r2, #4
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e022      	b.n	8004680 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 020e 	bic.w	r2, r2, #14
 8004648:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	f003 021c 	and.w	r2, r3, #28
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f202 	lsl.w	r2, r1, r2
 800466c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d005      	beq.n	80046b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2204      	movs	r2, #4
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	e029      	b.n	8004704 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 020e 	bic.w	r2, r2, #14
 80046be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f003 021c 	and.w	r2, r3, #28
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f202 	lsl.w	r2, r1, r2
 80046e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	4798      	blx	r3
    }
  }
  return status;
 8004704:	7bfb      	ldrb	r3, [r7, #15]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f003 031c 	and.w	r3, r3, #28
 800472e:	2204      	movs	r2, #4
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d026      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7a>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d021      	beq.n	8004788 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d107      	bne.n	8004762 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0204 	bic.w	r2, r2, #4
 8004760:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 021c 	and.w	r2, r3, #28
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2104      	movs	r1, #4
 8004770:	fa01 f202 	lsl.w	r2, r1, r2
 8004774:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	2b00      	cmp	r3, #0
 800477c:	d071      	beq.n	8004862 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004786:	e06c      	b.n	8004862 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	f003 031c 	and.w	r3, r3, #28
 8004790:	2202      	movs	r2, #2
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d02e      	beq.n	80047fa <HAL_DMA_IRQHandler+0xec>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d029      	beq.n	80047fa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020a 	bic.w	r2, r2, #10
 80047c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	f003 021c 	and.w	r2, r3, #28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	2102      	movs	r1, #2
 80047da:	fa01 f202 	lsl.w	r2, r1, r2
 80047de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d038      	beq.n	8004862 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80047f8:	e033      	b.n	8004862 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fe:	f003 031c 	and.w	r3, r3, #28
 8004802:	2208      	movs	r2, #8
 8004804:	409a      	lsls	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x156>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d025      	beq.n	8004864 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 020e 	bic.w	r2, r2, #14
 8004826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482c:	f003 021c 	and.w	r2, r3, #28
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f202 	lsl.w	r2, r1, r2
 800483a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004862:	bf00      	nop
 8004864:	bf00      	nop
}
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800487a:	e154      	b.n	8004b26 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2101      	movs	r1, #1
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8146 	beq.w	8004b20 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d005      	beq.n	80048ac <HAL_GPIO_Init+0x40>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d130      	bne.n	800490e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	2203      	movs	r2, #3
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80048e2:	2201      	movs	r2, #1
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	f003 0201 	and.w	r2, r3, #1
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	2b03      	cmp	r3, #3
 8004918:	d017      	beq.n	800494a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d123      	bne.n	800499e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	08da      	lsrs	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3208      	adds	r2, #8
 800495e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4013      	ands	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4313      	orrs	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	08da      	lsrs	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3208      	adds	r2, #8
 8004998:	6939      	ldr	r1, [r7, #16]
 800499a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	2203      	movs	r2, #3
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4013      	ands	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f000 80a0 	beq.w	8004b20 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e0:	4b58      	ldr	r3, [pc, #352]	; (8004b44 <HAL_GPIO_Init+0x2d8>)
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	4a57      	ldr	r2, [pc, #348]	; (8004b44 <HAL_GPIO_Init+0x2d8>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6613      	str	r3, [r2, #96]	; 0x60
 80049ec:	4b55      	ldr	r3, [pc, #340]	; (8004b44 <HAL_GPIO_Init+0x2d8>)
 80049ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049f8:	4a53      	ldr	r2, [pc, #332]	; (8004b48 <HAL_GPIO_Init+0x2dc>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	089b      	lsrs	r3, r3, #2
 80049fe:	3302      	adds	r3, #2
 8004a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	220f      	movs	r2, #15
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a22:	d019      	beq.n	8004a58 <HAL_GPIO_Init+0x1ec>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a49      	ldr	r2, [pc, #292]	; (8004b4c <HAL_GPIO_Init+0x2e0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_GPIO_Init+0x1e8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a48      	ldr	r2, [pc, #288]	; (8004b50 <HAL_GPIO_Init+0x2e4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00d      	beq.n	8004a50 <HAL_GPIO_Init+0x1e4>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a47      	ldr	r2, [pc, #284]	; (8004b54 <HAL_GPIO_Init+0x2e8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d007      	beq.n	8004a4c <HAL_GPIO_Init+0x1e0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <HAL_GPIO_Init+0x2ec>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_GPIO_Init+0x1dc>
 8004a44:	2304      	movs	r3, #4
 8004a46:	e008      	b.n	8004a5a <HAL_GPIO_Init+0x1ee>
 8004a48:	2307      	movs	r3, #7
 8004a4a:	e006      	b.n	8004a5a <HAL_GPIO_Init+0x1ee>
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e004      	b.n	8004a5a <HAL_GPIO_Init+0x1ee>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e002      	b.n	8004a5a <HAL_GPIO_Init+0x1ee>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <HAL_GPIO_Init+0x1ee>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	f002 0203 	and.w	r2, r2, #3
 8004a60:	0092      	lsls	r2, r2, #2
 8004a62:	4093      	lsls	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a6a:	4937      	ldr	r1, [pc, #220]	; (8004b48 <HAL_GPIO_Init+0x2dc>)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	089b      	lsrs	r3, r3, #2
 8004a70:	3302      	adds	r3, #2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a78:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	43db      	mvns	r3, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4013      	ands	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a9c:	4a2f      	ldr	r2, [pc, #188]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004aa2:	4b2e      	ldr	r3, [pc, #184]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ac6:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_GPIO_Init+0x2f0>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	3301      	adds	r3, #1
 8004b24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f aea3 	bne.w	800487c <HAL_GPIO_Init+0x10>
  }
}
 8004b36:	bf00      	nop
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	48000400 	.word	0x48000400
 8004b50:	48000800 	.word	0x48000800
 8004b54:	48000c00 	.word	0x48000c00
 8004b58:	48001000 	.word	0x48001000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b70:	787b      	ldrb	r3, [r7, #1]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b76:	887a      	ldrh	r2, [r7, #2]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b7c:	e002      	b.n	8004b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b7e:	887a      	ldrh	r2, [r7, #2]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004bb4:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40007000 	.word	0x40007000

08004bcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bda:	d130      	bne.n	8004c3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bdc:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be8:	d038      	beq.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2232      	movs	r2, #50	; 0x32
 8004c00:	fb02 f303 	mul.w	r3, r2, r3
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	0c9b      	lsrs	r3, r3, #18
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c10:	e002      	b.n	8004c18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c18:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d102      	bne.n	8004c2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f2      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d110      	bne.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00f      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c3e:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4a:	d007      	beq.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c54:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	20000000 	.word	0x20000000
 8004c74:	431bde83 	.word	0x431bde83

08004c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f000 bc02 	b.w	8005490 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8c:	4b96      	ldr	r3, [pc, #600]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c96:	4b94      	ldr	r3, [pc, #592]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80e4 	beq.w	8004e76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4c>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b0c      	cmp	r3, #12
 8004cb8:	f040 808b 	bne.w	8004dd2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 8087 	bne.w	8004dd2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cc4:	4b88      	ldr	r3, [pc, #544]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x64>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e3d9      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1a      	ldr	r2, [r3, #32]
 8004ce0:	4b81      	ldr	r3, [pc, #516]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x7e>
 8004cec:	4b7e      	ldr	r3, [pc, #504]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf4:	e005      	b.n	8004d02 <HAL_RCC_OscConfig+0x8a>
 8004cf6:	4b7c      	ldr	r3, [pc, #496]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d223      	bcs.n	8004d4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 fd8a 	bl	8005824 <RCC_SetFlashLatencyFromMSIRange>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e3ba      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1a:	4b73      	ldr	r3, [pc, #460]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a72      	ldr	r2, [pc, #456]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d20:	f043 0308 	orr.w	r3, r3, #8
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b70      	ldr	r3, [pc, #448]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	496d      	ldr	r1, [pc, #436]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d38:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	4968      	ldr	r1, [pc, #416]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	604b      	str	r3, [r1, #4]
 8004d4c:	e025      	b.n	8004d9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4e:	4b66      	ldr	r3, [pc, #408]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a65      	ldr	r2, [pc, #404]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b63      	ldr	r3, [pc, #396]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	4960      	ldr	r1, [pc, #384]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d6c:	4b5e      	ldr	r3, [pc, #376]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	495b      	ldr	r1, [pc, #364]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 fd4a 	bl	8005824 <RCC_SetFlashLatencyFromMSIRange>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e37a      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d9a:	f000 fc81 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	4b51      	ldr	r3, [pc, #324]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4950      	ldr	r1, [pc, #320]	; (8004eec <HAL_RCC_OscConfig+0x274>)
 8004dac:	5ccb      	ldrb	r3, [r1, r3]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	fa22 f303 	lsr.w	r3, r2, r3
 8004db6:	4a4e      	ldr	r2, [pc, #312]	; (8004ef0 <HAL_RCC_OscConfig+0x278>)
 8004db8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dba:	4b4e      	ldr	r3, [pc, #312]	; (8004ef4 <HAL_RCC_OscConfig+0x27c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fd fff0 	bl	8002da4 <HAL_InitTick>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d052      	beq.n	8004e74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	e35e      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d032      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a42      	ldr	r2, [pc, #264]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004de6:	f7fe f82d 	bl	8002e44 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dee:	f7fe f829 	bl	8002e44 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e347      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a35      	ldr	r2, [pc, #212]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e12:	f043 0308 	orr.w	r3, r3, #8
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	4930      	ldr	r1, [pc, #192]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	492b      	ldr	r1, [pc, #172]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
 8004e3e:	e01a      	b.n	8004e76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e40:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fffa 	bl	8002e44 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e54:	f7fd fff6 	bl	8002e44 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e314      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e66:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1dc>
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d073      	beq.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_OscConfig+0x21c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0c      	cmp	r3, #12
 8004e8c:	d10e      	bne.n	8004eac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d10b      	bne.n	8004eac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d063      	beq.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d15f      	bne.n	8004f68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e2f1      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x24c>
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e025      	b.n	8004f10 <HAL_RCC_OscConfig+0x298>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ecc:	d114      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x280>
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a05      	ldr	r2, [pc, #20]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b03      	ldr	r3, [pc, #12]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a02      	ldr	r2, [pc, #8]	; (8004ee8 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e013      	b.n	8004f10 <HAL_RCC_OscConfig+0x298>
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	08009558 	.word	0x08009558
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	20000004 	.word	0x20000004
 8004ef8:	4ba0      	ldr	r3, [pc, #640]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a9f      	ldr	r2, [pc, #636]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b9d      	ldr	r3, [pc, #628]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a9c      	ldr	r2, [pc, #624]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fd ff94 	bl	8002e44 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fd ff90 	bl	8002e44 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e2ae      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f32:	4b92      	ldr	r3, [pc, #584]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x2a8>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fd ff80 	bl	8002e44 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd ff7c 	bl	8002e44 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e29a      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f5a:	4b88      	ldr	r3, [pc, #544]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x2d0>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d060      	beq.n	8005038 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_OscConfig+0x310>
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d116      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f88:	4b7c      	ldr	r3, [pc, #496]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x328>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e277      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	4b76      	ldr	r3, [pc, #472]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	061b      	lsls	r3, r3, #24
 8004fae:	4973      	ldr	r1, [pc, #460]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fb4:	e040      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d023      	beq.n	8005006 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fbe:	4b6f      	ldr	r3, [pc, #444]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6e      	ldr	r2, [pc, #440]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd ff3b 	bl	8002e44 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fd ff37 	bl	8002e44 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e255      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe4:	4b65      	ldr	r3, [pc, #404]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b62      	ldr	r3, [pc, #392]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	495f      	ldr	r1, [pc, #380]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]
 8005004:	e018      	b.n	8005038 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005006:	4b5d      	ldr	r3, [pc, #372]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5c      	ldr	r2, [pc, #368]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800500c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fd ff17 	bl	8002e44 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501a:	f7fd ff13 	bl	8002e44 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e231      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800502c:	4b53      	ldr	r3, [pc, #332]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0308 	and.w	r3, r3, #8
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03c      	beq.n	80050be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800504c:	4b4b      	ldr	r3, [pc, #300]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800504e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005052:	4a4a      	ldr	r2, [pc, #296]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fd fef2 	bl	8002e44 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005064:	f7fd feee 	bl	8002e44 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e20c      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005076:	4b41      	ldr	r3, [pc, #260]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCC_OscConfig+0x3ec>
 8005084:	e01b      	b.n	80050be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508c:	4a3b      	ldr	r2, [pc, #236]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fd fed5 	bl	8002e44 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800509e:	f7fd fed1 	bl	8002e44 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e1ef      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050b0:	4b32      	ldr	r3, [pc, #200]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ef      	bne.n	800509e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 80a6 	beq.w	8005218 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050cc:	2300      	movs	r3, #0
 80050ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050d0:	4b2a      	ldr	r3, [pc, #168]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	4b27      	ldr	r3, [pc, #156]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	6593      	str	r3, [r2, #88]	; 0x58
 80050e8:	4b24      	ldr	r3, [pc, #144]	; (800517c <HAL_RCC_OscConfig+0x504>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050f8:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d118      	bne.n	8005136 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 800510a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005110:	f7fd fe98 	bl	8002e44 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005118:	f7fd fe94 	bl	8002e44 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1b2      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800512a:	4b15      	ldr	r3, [pc, #84]	; (8005180 <HAL_RCC_OscConfig+0x508>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d108      	bne.n	8005150 <HAL_RCC_OscConfig+0x4d8>
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800514e:	e029      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b05      	cmp	r3, #5
 8005156:	d115      	bne.n	8005184 <HAL_RCC_OscConfig+0x50c>
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800515a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515e:	4a07      	ldr	r2, [pc, #28]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005160:	f043 0304 	orr.w	r3, r3, #4
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <HAL_RCC_OscConfig+0x504>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_RCC_OscConfig+0x504>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005178:	e014      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	4b9a      	ldr	r3, [pc, #616]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	4a99      	ldr	r2, [pc, #612]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005194:	4b96      	ldr	r3, [pc, #600]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a95      	ldr	r2, [pc, #596]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800519c:	f023 0304 	bic.w	r3, r3, #4
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d016      	beq.n	80051da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd fe4a 	bl	8002e44 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fd fe46 	bl	8002e44 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e162      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ca:	4b89      	ldr	r3, [pc, #548]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ed      	beq.n	80051b4 <HAL_RCC_OscConfig+0x53c>
 80051d8:	e015      	b.n	8005206 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051da:	f7fd fe33 	bl	8002e44 <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e0:	e00a      	b.n	80051f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e2:	f7fd fe2f 	bl	8002e44 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e14b      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f8:	4b7d      	ldr	r3, [pc, #500]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ed      	bne.n	80051e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005206:	7ffb      	ldrb	r3, [r7, #31]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520c:	4b78      	ldr	r3, [pc, #480]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	4a77      	ldr	r2, [pc, #476]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005216:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d03c      	beq.n	800529e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01c      	beq.n	8005266 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800522c:	4b70      	ldr	r3, [pc, #448]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005232:	4a6f      	ldr	r2, [pc, #444]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523c:	f7fd fe02 	bl	8002e44 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005244:	f7fd fdfe 	bl	8002e44 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e11c      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005256:	4b66      	ldr	r3, [pc, #408]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ef      	beq.n	8005244 <HAL_RCC_OscConfig+0x5cc>
 8005264:	e01b      	b.n	800529e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005266:	4b62      	ldr	r3, [pc, #392]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800526c:	4a60      	ldr	r2, [pc, #384]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fd fde5 	bl	8002e44 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800527e:	f7fd fde1 	bl	8002e44 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e0ff      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005290:	4b57      	ldr	r3, [pc, #348]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1ef      	bne.n	800527e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80f3 	beq.w	800548e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	f040 80c9 	bne.w	8005444 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052b2:	4b4f      	ldr	r3, [pc, #316]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 0203 	and.w	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d12c      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	3b01      	subs	r3, #1
 80052d2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d123      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d11b      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d113      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	085b      	lsrs	r3, r3, #1
 8005304:	3b01      	subs	r3, #1
 8005306:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005308:	429a      	cmp	r2, r3
 800530a:	d109      	bne.n	8005320 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	085b      	lsrs	r3, r3, #1
 8005318:	3b01      	subs	r3, #1
 800531a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d06b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d062      	beq.n	80053ec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005326:	4b32      	ldr	r3, [pc, #200]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e0ac      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005336:	4b2e      	ldr	r3, [pc, #184]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800533c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005340:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005342:	f7fd fd7f 	bl	8002e44 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534a:	f7fd fd7b 	bl	8002e44 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e099      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x77c>)
 800536e:	4013      	ands	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005378:	3a01      	subs	r2, #1
 800537a:	0112      	lsls	r2, r2, #4
 800537c:	4311      	orrs	r1, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005382:	0212      	lsls	r2, r2, #8
 8005384:	4311      	orrs	r1, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800538a:	0852      	lsrs	r2, r2, #1
 800538c:	3a01      	subs	r2, #1
 800538e:	0552      	lsls	r2, r2, #21
 8005390:	4311      	orrs	r1, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005396:	0852      	lsrs	r2, r2, #1
 8005398:	3a01      	subs	r2, #1
 800539a:	0652      	lsls	r2, r2, #25
 800539c:	4311      	orrs	r1, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053a2:	06d2      	lsls	r2, r2, #27
 80053a4:	430a      	orrs	r2, r1
 80053a6:	4912      	ldr	r1, [pc, #72]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053ac:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053b8:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053c4:	f7fd fd3e 	bl	8002e44 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fd fd3a 	bl	8002e44 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e058      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <HAL_RCC_OscConfig+0x778>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053ea:	e050      	b.n	800548e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e04f      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
 80053f0:	40021000 	.word	0x40021000
 80053f4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053f8:	4b27      	ldr	r3, [pc, #156]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d144      	bne.n	800548e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 800540a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800540e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005410:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800541c:	f7fd fd12 	bl	8002e44 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd fd0e 	bl	8002e44 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e02c      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x7ac>
 8005442:	e024      	b.n	800548e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b0c      	cmp	r3, #12
 8005448:	d01f      	beq.n	800548a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a12      	ldr	r2, [pc, #72]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fd fcf5 	bl	8002e44 <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545e:	f7fd fcf1 	bl	8002e44 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e00f      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	4905      	ldr	r1, [pc, #20]	; (8005498 <HAL_RCC_OscConfig+0x820>)
 8005482:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_OscConfig+0x824>)
 8005484:	4013      	ands	r3, r2
 8005486:	60cb      	str	r3, [r1, #12]
 8005488:	e001      	b.n	800548e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	feeefffc 	.word	0xfeeefffc

080054a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0e7      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b4:	4b75      	ldr	r3, [pc, #468]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d910      	bls.n	80054e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b72      	ldr	r3, [pc, #456]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 0207 	bic.w	r2, r3, #7
 80054ca:	4970      	ldr	r1, [pc, #448]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d2:	4b6e      	ldr	r3, [pc, #440]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d001      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0cf      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d010      	beq.n	8005512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b66      	ldr	r3, [pc, #408]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d908      	bls.n	8005512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005500:	4b63      	ldr	r3, [pc, #396]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4960      	ldr	r1, [pc, #384]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d04c      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b03      	cmp	r3, #3
 8005524:	d107      	bne.n	8005536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005526:	4b5a      	ldr	r3, [pc, #360]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d121      	bne.n	8005576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0a6      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d107      	bne.n	800554e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d115      	bne.n	8005576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e09a      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005556:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d109      	bne.n	8005576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e08e      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005566:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e086      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005576:	4b46      	ldr	r3, [pc, #280]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 0203 	bic.w	r2, r3, #3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4943      	ldr	r1, [pc, #268]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fd fc5c 	bl	8002e44 <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005590:	f7fd fc58 	bl	8002e44 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e06e      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	4b3a      	ldr	r3, [pc, #232]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 020c 	and.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1eb      	bne.n	8005590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d010      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	4b31      	ldr	r3, [pc, #196]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d208      	bcs.n	80055e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d4:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	492b      	ldr	r1, [pc, #172]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d210      	bcs.n	8005616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 0207 	bic.w	r2, r3, #7
 80055fc:	4923      	ldr	r1, [pc, #140]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	4313      	orrs	r3, r2
 8005602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005604:	4b21      	ldr	r3, [pc, #132]	; (800568c <HAL_RCC_ClockConfig+0x1ec>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d001      	beq.n	8005616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e036      	b.n	8005684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d008      	beq.n	8005634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005622:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4918      	ldr	r1, [pc, #96]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005630:	4313      	orrs	r3, r2
 8005632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005640:	4b13      	ldr	r3, [pc, #76]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4910      	ldr	r1, [pc, #64]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 8005650:	4313      	orrs	r3, r2
 8005652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005654:	f000 f824 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f003 030f 	and.w	r3, r3, #15
 8005664:	490b      	ldr	r1, [pc, #44]	; (8005694 <HAL_RCC_ClockConfig+0x1f4>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	fa22 f303 	lsr.w	r3, r2, r3
 8005670:	4a09      	ldr	r2, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1f8>)
 8005672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_ClockConfig+0x1fc>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd fb93 	bl	8002da4 <HAL_InitTick>
 800567e:	4603      	mov	r3, r0
 8005680:	72fb      	strb	r3, [r7, #11]

  return status;
 8005682:	7afb      	ldrb	r3, [r7, #11]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40022000 	.word	0x40022000
 8005690:	40021000 	.word	0x40021000
 8005694:	08009558 	.word	0x08009558
 8005698:	20000000 	.word	0x20000000
 800569c:	20000004 	.word	0x20000004

080056a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b089      	sub	sp, #36	; 0x24
 80056a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61fb      	str	r3, [r7, #28]
 80056aa:	2300      	movs	r3, #0
 80056ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ae:	4b3e      	ldr	r3, [pc, #248]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 030c 	and.w	r3, r3, #12
 80056b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b8:	4b3b      	ldr	r3, [pc, #236]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x34>
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0c      	cmp	r3, #12
 80056cc:	d121      	bne.n	8005712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d11e      	bne.n	8005712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056d4:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d107      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056e0:	4b31      	ldr	r3, [pc, #196]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e005      	b.n	80056fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	091b      	lsrs	r3, r3, #4
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80056fc:	4a2b      	ldr	r2, [pc, #172]	; (80057ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005710:	e00a      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d102      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005718:	4b25      	ldr	r3, [pc, #148]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e004      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d101      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005724:	4b22      	ldr	r3, [pc, #136]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d134      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b02      	cmp	r3, #2
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0xa6>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d003      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0xac>
 8005744:	e005      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005748:	617b      	str	r3, [r7, #20]
      break;
 800574a:	e005      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800574c:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800574e:	617b      	str	r3, [r7, #20]
      break;
 8005750:	e002      	b.n	8005758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	617b      	str	r3, [r7, #20]
      break;
 8005756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	3301      	adds	r3, #1
 8005764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	fb03 f202 	mul.w	r2, r3, r2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	0e5b      	lsrs	r3, r3, #25
 8005784:	f003 0303 	and.w	r3, r3, #3
 8005788:	3301      	adds	r3, #1
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005798:	69bb      	ldr	r3, [r7, #24]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3724      	adds	r7, #36	; 0x24
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	08009570 	.word	0x08009570
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000000 	.word	0x20000000

080057cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057d0:	f7ff fff0 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 80057d4:	4602      	mov	r2, r0
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4904      	ldr	r1, [pc, #16]	; (80057f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057e2:	5ccb      	ldrb	r3, [r1, r3]
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000
 80057f4:	08009568 	.word	0x08009568

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80057fc:	f7ff ffda 	bl	80057b4 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b06      	ldr	r3, [pc, #24]	; (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	0adb      	lsrs	r3, r3, #11
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4904      	ldr	r1, [pc, #16]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x28>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005818:	4618      	mov	r0, r3
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000
 8005820:	08009568 	.word	0x08009568

08005824 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005830:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800583c:	f7ff f9b8 	bl	8004bb0 <HAL_PWREx_GetVoltageRange>
 8005840:	6178      	str	r0, [r7, #20]
 8005842:	e014      	b.n	800586e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005844:	4b25      	ldr	r3, [pc, #148]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	4a24      	ldr	r2, [pc, #144]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6593      	str	r3, [r2, #88]	; 0x58
 8005850:	4b22      	ldr	r3, [pc, #136]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800585c:	f7ff f9a8 	bl	8004bb0 <HAL_PWREx_GetVoltageRange>
 8005860:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005862:	4b1e      	ldr	r3, [pc, #120]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800586c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d10b      	bne.n	800588e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b80      	cmp	r3, #128	; 0x80
 800587a:	d919      	bls.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2ba0      	cmp	r3, #160	; 0xa0
 8005880:	d902      	bls.n	8005888 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005882:	2302      	movs	r3, #2
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	e013      	b.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005888:	2301      	movs	r3, #1
 800588a:	613b      	str	r3, [r7, #16]
 800588c:	e010      	b.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b80      	cmp	r3, #128	; 0x80
 8005892:	d902      	bls.n	800589a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005894:	2303      	movs	r3, #3
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	e00a      	b.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b80      	cmp	r3, #128	; 0x80
 800589e:	d102      	bne.n	80058a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058a0:	2302      	movs	r3, #2
 80058a2:	613b      	str	r3, [r7, #16]
 80058a4:	e004      	b.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b70      	cmp	r3, #112	; 0x70
 80058aa:	d101      	bne.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058ac:	2301      	movs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058b0:	4b0b      	ldr	r3, [pc, #44]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 0207 	bic.w	r2, r3, #7
 80058b8:	4909      	ldr	r1, [pc, #36]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d001      	beq.n	80058d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40022000 	.word	0x40022000

080058e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058ec:	2300      	movs	r3, #0
 80058ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058f0:	2300      	movs	r3, #0
 80058f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d031      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005908:	d01a      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800590a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800590e:	d814      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005918:	d10f      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800591a:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	4a5c      	ldr	r2, [pc, #368]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005924:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005926:	e00c      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f000 f9f0 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005934:	4603      	mov	r3, r0
 8005936:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005938:	e003      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	74fb      	strb	r3, [r7, #19]
      break;
 800593e:	e000      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005948:	4b51      	ldr	r3, [pc, #324]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	494e      	ldr	r1, [pc, #312]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005958:	4313      	orrs	r3, r2
 800595a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800595e:	e001      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 809e 	beq.w	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005972:	2300      	movs	r3, #0
 8005974:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005976:	4b46      	ldr	r3, [pc, #280]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800598c:	4b40      	ldr	r3, [pc, #256]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800598e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005990:	4a3f      	ldr	r2, [pc, #252]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005996:	6593      	str	r3, [r2, #88]	; 0x58
 8005998:	4b3d      	ldr	r3, [pc, #244]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a4:	2301      	movs	r3, #1
 80059a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a8:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a39      	ldr	r2, [pc, #228]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059b4:	f7fd fa46 	bl	8002e44 <HAL_GetTick>
 80059b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059ba:	e009      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059bc:	f7fd fa42 	bl	8002e44 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	74fb      	strb	r3, [r7, #19]
        break;
 80059ce:	e005      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059d0:	4b30      	ldr	r3, [pc, #192]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ef      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d15a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059e2:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d01e      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d019      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a0a:	4b21      	ldr	r3, [pc, #132]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a2a:	4a19      	ldr	r2, [pc, #100]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d016      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3c:	f7fd fa02 	bl	8002e44 <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a42:	e00b      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fd f9fe 	bl	8002e44 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d902      	bls.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	74fb      	strb	r3, [r7, #19]
            break;
 8005a5a:	e006      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d0ec      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005a6a:	7cfb      	ldrb	r3, [r7, #19]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	4904      	ldr	r1, [pc, #16]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a86:	e009      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
 8005a8a:	74bb      	strb	r3, [r7, #18]
 8005a8c:	e006      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a9c:	7c7b      	ldrb	r3, [r7, #17]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d105      	bne.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa2:	4b9b      	ldr	r3, [pc, #620]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa6:	4a9a      	ldr	r2, [pc, #616]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aba:	4b95      	ldr	r3, [pc, #596]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f023 0203 	bic.w	r2, r3, #3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	4991      	ldr	r1, [pc, #580]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005adc:	4b8c      	ldr	r3, [pc, #560]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f023 020c 	bic.w	r2, r3, #12
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	4989      	ldr	r1, [pc, #548]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005afe:	4b84      	ldr	r3, [pc, #528]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	4980      	ldr	r1, [pc, #512]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b20:	4b7b      	ldr	r3, [pc, #492]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	4978      	ldr	r1, [pc, #480]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b42:	4b73      	ldr	r3, [pc, #460]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	496f      	ldr	r1, [pc, #444]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b64:	4b6a      	ldr	r3, [pc, #424]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	4967      	ldr	r1, [pc, #412]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b86:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	495e      	ldr	r1, [pc, #376]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ba8:	4b59      	ldr	r3, [pc, #356]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb6:	4956      	ldr	r1, [pc, #344]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bca:	4b51      	ldr	r3, [pc, #324]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	494d      	ldr	r1, [pc, #308]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d028      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bec:	4b48      	ldr	r3, [pc, #288]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfa:	4945      	ldr	r1, [pc, #276]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c0c:	4b40      	ldr	r3, [pc, #256]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a3f      	ldr	r2, [pc, #252]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c16:	60d3      	str	r3, [r2, #12]
 8005c18:	e011      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c22:	d10c      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	2101      	movs	r1, #1
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f872 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d028      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	492d      	ldr	r1, [pc, #180]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c68:	d106      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c6a:	4b29      	ldr	r3, [pc, #164]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	4a28      	ldr	r2, [pc, #160]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c74:	60d3      	str	r3, [r2, #12]
 8005c76:	e011      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2101      	movs	r1, #1
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 f843 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c92:	7cfb      	ldrb	r3, [r7, #19]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01c      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	4916      	ldr	r1, [pc, #88]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	2102      	movs	r1, #2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f820 	bl	8005d14 <RCCEx_PLLSAI1_Config>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd8:	7cfb      	ldrb	r3, [r7, #19]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	4904      	ldr	r1, [pc, #16]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d04:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000

08005d14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d22:	4b74      	ldr	r3, [pc, #464]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d018      	beq.n	8005d60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d2e:	4b71      	ldr	r3, [pc, #452]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0203 	and.w	r2, r3, #3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d10d      	bne.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
       ||
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d46:	4b6b      	ldr	r3, [pc, #428]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
       ||
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d047      	beq.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
 8005d5e:	e044      	b.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d018      	beq.n	8005d9a <RCCEx_PLLSAI1_Config+0x86>
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d825      	bhi.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d002      	beq.n	8005d76 <RCCEx_PLLSAI1_Config+0x62>
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d009      	beq.n	8005d88 <RCCEx_PLLSAI1_Config+0x74>
 8005d74:	e020      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d76:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11d      	bne.n	8005dbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d86:	e01a      	b.n	8005dbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d88:	4b5a      	ldr	r3, [pc, #360]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d116      	bne.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d98:	e013      	b.n	8005dc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d9a:	4b56      	ldr	r3, [pc, #344]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10f      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005da6:	4b53      	ldr	r3, [pc, #332]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005db6:	e006      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	73fb      	strb	r3, [r7, #15]
      break;
 8005dbc:	e004      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dce:	4b49      	ldr	r3, [pc, #292]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6819      	ldr	r1, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	430b      	orrs	r3, r1
 8005de4:	4943      	ldr	r1, [pc, #268]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d17c      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005df0:	4b40      	ldr	r3, [pc, #256]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfc:	f7fd f822 	bl	8002e44 <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e02:	e009      	b.n	8005e18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e04:	f7fd f81e 	bl	8002e44 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d902      	bls.n	8005e18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	73fb      	strb	r3, [r7, #15]
        break;
 8005e16:	e005      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e18:	4b36      	ldr	r3, [pc, #216]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1ef      	bne.n	8005e04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d15f      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d110      	bne.n	8005e52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e30:	4b30      	ldr	r3, [pc, #192]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6892      	ldr	r2, [r2, #8]
 8005e40:	0211      	lsls	r1, r2, #8
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68d2      	ldr	r2, [r2, #12]
 8005e46:	06d2      	lsls	r2, r2, #27
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	492a      	ldr	r1, [pc, #168]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	610b      	str	r3, [r1, #16]
 8005e50:	e027      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d112      	bne.n	8005e7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e58:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6892      	ldr	r2, [r2, #8]
 8005e68:	0211      	lsls	r1, r2, #8
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6912      	ldr	r2, [r2, #16]
 8005e6e:	0852      	lsrs	r2, r2, #1
 8005e70:	3a01      	subs	r2, #1
 8005e72:	0552      	lsls	r2, r2, #21
 8005e74:	430a      	orrs	r2, r1
 8005e76:	491f      	ldr	r1, [pc, #124]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]
 8005e7c:	e011      	b.n	8005ea2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6892      	ldr	r2, [r2, #8]
 8005e8e:	0211      	lsls	r1, r2, #8
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6952      	ldr	r2, [r2, #20]
 8005e94:	0852      	lsrs	r2, r2, #1
 8005e96:	3a01      	subs	r2, #1
 8005e98:	0652      	lsls	r2, r2, #25
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	4915      	ldr	r1, [pc, #84]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ea2:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fc ffc9 	bl	8002e44 <HAL_GetTick>
 8005eb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eb4:	e009      	b.n	8005eca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eb6:	f7fc ffc5 	bl	8002e44 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d902      	bls.n	8005eca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	73fb      	strb	r3, [r7, #15]
          break;
 8005ec8:	e005      	b.n	8005ed6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eca:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0ef      	beq.n	8005eb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	4903      	ldr	r1, [pc, #12]	; (8005ef4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000

08005ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e049      	b.n	8005f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc f940 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f000 faca 	bl	80064d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d001      	beq.n	8005fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e03b      	b.n	8006038 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0201 	orr.w	r2, r2, #1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a19      	ldr	r2, [pc, #100]	; (8006044 <HAL_TIM_Base_Start_IT+0x9c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <HAL_TIM_Base_Start_IT+0x4e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fea:	d004      	beq.n	8005ff6 <HAL_TIM_Base_Start_IT+0x4e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <HAL_TIM_Base_Start_IT+0xa0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d115      	bne.n	8006022 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_TIM_Base_Start_IT+0xa4>)
 8005ffe:	4013      	ands	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d015      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x8c>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600e:	d011      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006020:	e008      	b.n	8006034 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e000      	b.n	8006036 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006034:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40012c00 	.word	0x40012c00
 8006048:	40014000 	.word	0x40014000
 800604c:	00010007 	.word	0x00010007

08006050 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10f      	bne.n	8006098 <HAL_TIM_Base_Stop_IT+0x48>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a1a      	ldr	r2, [r3, #32]
 800607e:	f240 4344 	movw	r3, #1092	; 0x444
 8006082:	4013      	ands	r3, r2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d107      	bne.n	8006098 <HAL_TIM_Base_Stop_IT+0x48>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d122      	bne.n	800610a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d11b      	bne.n	800610a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f06f 0202 	mvn.w	r2, #2
 80060da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9ce 	bl	8006492 <HAL_TIM_IC_CaptureCallback>
 80060f6:	e005      	b.n	8006104 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f9c0 	bl	800647e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9d1 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b04      	cmp	r3, #4
 8006116:	d122      	bne.n	800615e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b04      	cmp	r3, #4
 8006124:	d11b      	bne.n	800615e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f06f 0204 	mvn.w	r2, #4
 800612e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9a4 	bl	8006492 <HAL_TIM_IC_CaptureCallback>
 800614a:	e005      	b.n	8006158 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f996 	bl	800647e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f9a7 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b08      	cmp	r3, #8
 800616a:	d122      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b08      	cmp	r3, #8
 8006178:	d11b      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f06f 0208 	mvn.w	r2, #8
 8006182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2204      	movs	r2, #4
 8006188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d003      	beq.n	80061a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f97a 	bl	8006492 <HAL_TIM_IC_CaptureCallback>
 800619e:	e005      	b.n	80061ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f96c 	bl	800647e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f97d 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d122      	bne.n	8006206 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	d11b      	bne.n	8006206 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f06f 0210 	mvn.w	r2, #16
 80061d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2208      	movs	r2, #8
 80061dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f950 	bl	8006492 <HAL_TIM_IC_CaptureCallback>
 80061f2:	e005      	b.n	8006200 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f942 	bl	800647e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f953 	bl	80064a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10e      	bne.n	8006232 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d107      	bne.n	8006232 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f06f 0201 	mvn.w	r2, #1
 800622a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fb fff1 	bl	8002214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623c:	2b80      	cmp	r3, #128	; 0x80
 800623e:	d10e      	bne.n	800625e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d107      	bne.n	800625e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 faa7 	bl	80067ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800626c:	d10e      	bne.n	800628c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006278:	2b80      	cmp	r3, #128	; 0x80
 800627a:	d107      	bne.n	800628c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa9a 	bl	80067c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006296:	2b40      	cmp	r3, #64	; 0x40
 8006298:	d10e      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d107      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f901 	bl	80064ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	d10e      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d107      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0220 	mvn.w	r2, #32
 80062dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa5a 	bl	8006798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e0b6      	b.n	8006476 <HAL_TIM_ConfigClockSource+0x18a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006344:	d03e      	beq.n	80063c4 <HAL_TIM_ConfigClockSource+0xd8>
 8006346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634a:	f200 8087 	bhi.w	800645c <HAL_TIM_ConfigClockSource+0x170>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	f000 8086 	beq.w	8006462 <HAL_TIM_ConfigClockSource+0x176>
 8006356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800635a:	d87f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 800635c:	2b70      	cmp	r3, #112	; 0x70
 800635e:	d01a      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0xaa>
 8006360:	2b70      	cmp	r3, #112	; 0x70
 8006362:	d87b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d050      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x11e>
 8006368:	2b60      	cmp	r3, #96	; 0x60
 800636a:	d877      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 800636c:	2b50      	cmp	r3, #80	; 0x50
 800636e:	d03c      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xfe>
 8006370:	2b50      	cmp	r3, #80	; 0x50
 8006372:	d873      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 8006374:	2b40      	cmp	r3, #64	; 0x40
 8006376:	d058      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x13e>
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d86f      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 800637c:	2b30      	cmp	r3, #48	; 0x30
 800637e:	d064      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15e>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d86b      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 8006384:	2b20      	cmp	r3, #32
 8006386:	d060      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15e>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d867      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x170>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15e>
 8006390:	2b10      	cmp	r3, #16
 8006392:	d05a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x15e>
 8006394:	e062      	b.n	800645c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6899      	ldr	r1, [r3, #8]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f000 f971 	bl	800668c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
      break;
 80063c2:	e04f      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	6899      	ldr	r1, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f000 f95a 	bl	800668c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063e6:	609a      	str	r2, [r3, #8]
      break;
 80063e8:	e03c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 f8ce 	bl	8006598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2150      	movs	r1, #80	; 0x50
 8006402:	4618      	mov	r0, r3
 8006404:	f000 f927 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006408:	e02c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 f8ed 	bl	80065f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2160      	movs	r1, #96	; 0x60
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f917 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006428:	e01c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	461a      	mov	r2, r3
 8006438:	f000 f8ae 	bl	8006598 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f907 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 8006448:	e00c      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f000 f8fe 	bl	8006656 <TIM_ITRx_SetConfig>
      break;
 800645a:	e003      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e000      	b.n	8006464 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <TIM_Base_SetConfig+0xbc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_Base_SetConfig+0x20>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d108      	bne.n	8006502 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a21      	ldr	r2, [pc, #132]	; (800658c <TIM_Base_SetConfig+0xbc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00b      	beq.n	8006522 <TIM_Base_SetConfig+0x52>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006510:	d007      	beq.n	8006522 <TIM_Base_SetConfig+0x52>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1e      	ldr	r2, [pc, #120]	; (8006590 <TIM_Base_SetConfig+0xc0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_Base_SetConfig+0x52>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1d      	ldr	r2, [pc, #116]	; (8006594 <TIM_Base_SetConfig+0xc4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d108      	bne.n	8006534 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a0c      	ldr	r2, [pc, #48]	; (800658c <TIM_Base_SetConfig+0xbc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_Base_SetConfig+0xa0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a0b      	ldr	r2, [pc, #44]	; (8006590 <TIM_Base_SetConfig+0xc0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_Base_SetConfig+0xa0>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a0a      	ldr	r2, [pc, #40]	; (8006594 <TIM_Base_SetConfig+0xc4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d103      	bne.n	8006578 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	615a      	str	r2, [r3, #20]
}
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400

08006598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 030a 	bic.w	r3, r3, #10
 80065d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	621a      	str	r2, [r3, #32]
}
 80065ea:	bf00      	nop
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	f023 0210 	bic.w	r2, r3, #16
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006620:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	031b      	lsls	r3, r3, #12
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006632:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	f043 0307 	orr.w	r3, r3, #7
 8006678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
}
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
 8006698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	021a      	lsls	r2, r3, #8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	609a      	str	r2, [r3, #8]
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e04f      	b.n	8006784 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a21      	ldr	r2, [pc, #132]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d108      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006714:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a14      	ldr	r2, [pc, #80]	; (8006790 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674c:	d004      	beq.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a10      	ldr	r2, [pc, #64]	; (8006794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d10c      	bne.n	8006772 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800675e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	4313      	orrs	r3, r2
 8006768:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40014000 	.word	0x40014000

08006798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e040      	b.n	8006868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d106      	bne.n	80067fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7fb fddc 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2224      	movs	r2, #36	; 0x24
 8006800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fc02 	bl	800701c <UART_SetConfig>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e022      	b.n	8006868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fe50 	bl	80074d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800683e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800684e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fed7 	bl	8007614 <UART_CheckIdleState>
 8006866:	4603      	mov	r3, r0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006884:	2b20      	cmp	r3, #32
 8006886:	f040 8082 	bne.w	800698e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_UART_Transmit+0x26>
 8006890:	88fb      	ldrh	r3, [r7, #6]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07a      	b.n	8006990 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Transmit+0x38>
 80068a4:	2302      	movs	r3, #2
 80068a6:	e073      	b.n	8006990 <HAL_UART_Transmit+0x120>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2221      	movs	r2, #33	; 0x21
 80068bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068be:	f7fc fac1 	bl	8002e44 <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068dc:	d108      	bne.n	80068f0 <HAL_UART_Transmit+0x80>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	61bb      	str	r3, [r7, #24]
 80068ee:	e003      	b.n	80068f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006900:	e02d      	b.n	800695e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	2180      	movs	r1, #128	; 0x80
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 feca 	bl	80076a6 <UART_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e039      	b.n	8006990 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10b      	bne.n	800693a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	881a      	ldrh	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692e:	b292      	uxth	r2, r2
 8006930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	3302      	adds	r3, #2
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	e008      	b.n	800694c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	b292      	uxth	r2, r2
 8006944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	3301      	adds	r3, #1
 800694a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1cb      	bne.n	8006902 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2200      	movs	r2, #0
 8006972:	2140      	movs	r1, #64	; 0x40
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fe96 	bl	80076a6 <UART_WaitOnFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e005      	b.n	8006990 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d142      	bne.n	8006a34 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_UART_Receive_IT+0x22>
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e03b      	b.n	8006a36 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_UART_Receive_IT+0x34>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e034      	b.n	8006a36 <HAL_UART_Receive_IT+0x9e>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <HAL_UART_Receive_IT+0xa8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d01f      	beq.n	8006a24 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d018      	beq.n	8006a24 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	623b      	str	r3, [r7, #32]
 8006a12:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	69f9      	ldr	r1, [r7, #28]
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e6      	bne.n	80069f2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	461a      	mov	r2, r3
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 ff00 	bl	8007830 <UART_Start_Receive_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	e000      	b.n	8006a36 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006a34:	2302      	movs	r3, #2
  }
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3728      	adds	r7, #40	; 0x28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40008000 	.word	0x40008000

08006a44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b0ba      	sub	sp, #232	; 0xe8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a72:	4013      	ands	r3, r2
 8006a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 82a6 	beq.w	8006fee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
      }
      return;
 8006aaa:	e2a0      	b.n	8006fee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 8117 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ac6:	4b85      	ldr	r3, [pc, #532]	; (8006cdc <HAL_UART_IRQHandler+0x298>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 810a 	beq.w	8006ce4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d011      	beq.n	8006b00 <HAL_UART_IRQHandler+0xbc>
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2201      	movs	r2, #1
 8006aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006af6:	f043 0201 	orr.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d011      	beq.n	8006b30 <HAL_UART_IRQHandler+0xec>
 8006b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00b      	beq.n	8006b30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2202      	movs	r2, #2
 8006b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b26:	f043 0204 	orr.w	r2, r3, #4
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d011      	beq.n	8006b60 <HAL_UART_IRQHandler+0x11c>
 8006b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b56:	f043 0202 	orr.w	r2, r3, #2
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d017      	beq.n	8006b9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2208      	movs	r2, #8
 8006b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b92:	f043 0208 	orr.w	r2, r3, #8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d012      	beq.n	8006bce <HAL_UART_IRQHandler+0x18a>
 8006ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bc4:	f043 0220 	orr.w	r2, r3, #32
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 820c 	beq.w	8006ff2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00d      	beq.n	8006c02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d005      	beq.n	8006c26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d04f      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fecc 	bl	80079c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d141      	bne.n	8006cbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1d9      	bne.n	8006c3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d013      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <HAL_UART_IRQHandler+0x29c>)
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd fcf6 	bl	800468c <HAL_DMA_Abort_IT>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e00f      	b.n	8006cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9a6 	bl	8007008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cbc:	e00b      	b.n	8006cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9a2 	bl	8007008 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc4:	e007      	b.n	8006cd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f99e 	bl	8007008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006cd4:	e18d      	b.n	8006ff2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd6:	bf00      	nop
    return;
 8006cd8:	e18b      	b.n	8006ff2 <HAL_UART_IRQHandler+0x5ae>
 8006cda:	bf00      	nop
 8006cdc:	04000120 	.word	0x04000120
 8006ce0:	08007a8b 	.word	0x08007a8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	f040 8146 	bne.w	8006f7a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 813f 	beq.w	8006f7a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8138 	beq.w	8006f7a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	f040 80b4 	bne.w	8006e8a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 815f 	beq.w	8006ff6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d42:	429a      	cmp	r2, r3
 8006d44:	f080 8157 	bcs.w	8006ff6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 8085 	bne.w	8006e6e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d70:	e853 3f00 	ldrex	r3, [r3]
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d92:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1da      	bne.n	8006d64 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	3308      	adds	r3, #8
 8006dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006dd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1e1      	bne.n	8006dae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e3      	bne.n	8006dea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
 8006e42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e58:	e841 2300 	strex	r3, r2, [r1]
 8006e5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1e4      	bne.n	8006e2e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fd fbd1 	bl	8004610 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fb fc0c 	bl	80026a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e88:	e0b5      	b.n	8006ff6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80a7 	beq.w	8006ffa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80a2 	beq.w	8006ffa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006edc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ede:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ee0:	e841 2300 	strex	r3, r2, [r1]
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e4      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	623b      	str	r3, [r7, #32]
   return(result);
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	f023 0301 	bic.w	r3, r3, #1
 8006f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f10:	633a      	str	r2, [r7, #48]	; 0x30
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e3      	bne.n	8006eec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0310 	bic.w	r3, r3, #16
 8006f4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	617b      	str	r3, [r7, #20]
   return(result);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e4      	bne.n	8006f36 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fb94 	bl	80026a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f78:	e03f      	b.n	8006ffa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00e      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x560>
 8006f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d008      	beq.n	8006fa4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 ff14 	bl	8007dca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fa2:	e02d      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01c      	beq.n	8006ffe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	4798      	blx	r3
    }
    return;
 8006fcc:	e017      	b.n	8006ffe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d012      	beq.n	8007000 <HAL_UART_IRQHandler+0x5bc>
 8006fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fd65 	bl	8007ab6 <UART_EndTransmit_IT>
    return;
 8006fec:	e008      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006fee:	bf00      	nop
 8006ff0:	e006      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ff2:	bf00      	nop
 8006ff4:	e004      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ffe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007000:	37e8      	adds	r7, #232	; 0xe8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop

08007008 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800701c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007020:	b08a      	sub	sp, #40	; 0x28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	431a      	orrs	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4313      	orrs	r3, r2
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b9e      	ldr	r3, [pc, #632]	; (80072c4 <UART_SetConfig+0x2a8>)
 800704c:	4013      	ands	r3, r2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007054:	430b      	orrs	r3, r1
 8007056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a93      	ldr	r2, [pc, #588]	; (80072c8 <UART_SetConfig+0x2ac>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d004      	beq.n	8007088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007084:	4313      	orrs	r3, r2
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a8a      	ldr	r2, [pc, #552]	; (80072cc <UART_SetConfig+0x2b0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d126      	bne.n	80070f4 <UART_SetConfig+0xd8>
 80070a6:	4b8a      	ldr	r3, [pc, #552]	; (80072d0 <UART_SetConfig+0x2b4>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d81b      	bhi.n	80070ec <UART_SetConfig+0xd0>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0xa0>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070d5 	.word	0x080070d5
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	2301      	movs	r3, #1
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070d2:	e0ab      	b.n	800722c <UART_SetConfig+0x210>
 80070d4:	2302      	movs	r3, #2
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070da:	e0a7      	b.n	800722c <UART_SetConfig+0x210>
 80070dc:	2304      	movs	r3, #4
 80070de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070e2:	e0a3      	b.n	800722c <UART_SetConfig+0x210>
 80070e4:	2308      	movs	r3, #8
 80070e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ea:	e09f      	b.n	800722c <UART_SetConfig+0x210>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f2:	e09b      	b.n	800722c <UART_SetConfig+0x210>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a76      	ldr	r2, [pc, #472]	; (80072d4 <UART_SetConfig+0x2b8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d138      	bne.n	8007170 <UART_SetConfig+0x154>
 80070fe:	4b74      	ldr	r3, [pc, #464]	; (80072d0 <UART_SetConfig+0x2b4>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	f003 030c 	and.w	r3, r3, #12
 8007108:	2b0c      	cmp	r3, #12
 800710a:	d82d      	bhi.n	8007168 <UART_SetConfig+0x14c>
 800710c:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <UART_SetConfig+0xf8>)
 800710e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007112:	bf00      	nop
 8007114:	08007149 	.word	0x08007149
 8007118:	08007169 	.word	0x08007169
 800711c:	08007169 	.word	0x08007169
 8007120:	08007169 	.word	0x08007169
 8007124:	08007159 	.word	0x08007159
 8007128:	08007169 	.word	0x08007169
 800712c:	08007169 	.word	0x08007169
 8007130:	08007169 	.word	0x08007169
 8007134:	08007151 	.word	0x08007151
 8007138:	08007169 	.word	0x08007169
 800713c:	08007169 	.word	0x08007169
 8007140:	08007169 	.word	0x08007169
 8007144:	08007161 	.word	0x08007161
 8007148:	2300      	movs	r3, #0
 800714a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800714e:	e06d      	b.n	800722c <UART_SetConfig+0x210>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007156:	e069      	b.n	800722c <UART_SetConfig+0x210>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800715e:	e065      	b.n	800722c <UART_SetConfig+0x210>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007166:	e061      	b.n	800722c <UART_SetConfig+0x210>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800716e:	e05d      	b.n	800722c <UART_SetConfig+0x210>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a58      	ldr	r2, [pc, #352]	; (80072d8 <UART_SetConfig+0x2bc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d125      	bne.n	80071c6 <UART_SetConfig+0x1aa>
 800717a:	4b55      	ldr	r3, [pc, #340]	; (80072d0 <UART_SetConfig+0x2b4>)
 800717c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007180:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007184:	2b30      	cmp	r3, #48	; 0x30
 8007186:	d016      	beq.n	80071b6 <UART_SetConfig+0x19a>
 8007188:	2b30      	cmp	r3, #48	; 0x30
 800718a:	d818      	bhi.n	80071be <UART_SetConfig+0x1a2>
 800718c:	2b20      	cmp	r3, #32
 800718e:	d00a      	beq.n	80071a6 <UART_SetConfig+0x18a>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d814      	bhi.n	80071be <UART_SetConfig+0x1a2>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <UART_SetConfig+0x182>
 8007198:	2b10      	cmp	r3, #16
 800719a:	d008      	beq.n	80071ae <UART_SetConfig+0x192>
 800719c:	e00f      	b.n	80071be <UART_SetConfig+0x1a2>
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071a4:	e042      	b.n	800722c <UART_SetConfig+0x210>
 80071a6:	2302      	movs	r3, #2
 80071a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071ac:	e03e      	b.n	800722c <UART_SetConfig+0x210>
 80071ae:	2304      	movs	r3, #4
 80071b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071b4:	e03a      	b.n	800722c <UART_SetConfig+0x210>
 80071b6:	2308      	movs	r3, #8
 80071b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071bc:	e036      	b.n	800722c <UART_SetConfig+0x210>
 80071be:	2310      	movs	r3, #16
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80071c4:	e032      	b.n	800722c <UART_SetConfig+0x210>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3f      	ldr	r2, [pc, #252]	; (80072c8 <UART_SetConfig+0x2ac>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d12a      	bne.n	8007226 <UART_SetConfig+0x20a>
 80071d0:	4b3f      	ldr	r3, [pc, #252]	; (80072d0 <UART_SetConfig+0x2b4>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071de:	d01a      	beq.n	8007216 <UART_SetConfig+0x1fa>
 80071e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071e4:	d81b      	bhi.n	800721e <UART_SetConfig+0x202>
 80071e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ea:	d00c      	beq.n	8007206 <UART_SetConfig+0x1ea>
 80071ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f0:	d815      	bhi.n	800721e <UART_SetConfig+0x202>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <UART_SetConfig+0x1e2>
 80071f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fa:	d008      	beq.n	800720e <UART_SetConfig+0x1f2>
 80071fc:	e00f      	b.n	800721e <UART_SetConfig+0x202>
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007204:	e012      	b.n	800722c <UART_SetConfig+0x210>
 8007206:	2302      	movs	r3, #2
 8007208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800720c:	e00e      	b.n	800722c <UART_SetConfig+0x210>
 800720e:	2304      	movs	r3, #4
 8007210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007214:	e00a      	b.n	800722c <UART_SetConfig+0x210>
 8007216:	2308      	movs	r3, #8
 8007218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800721c:	e006      	b.n	800722c <UART_SetConfig+0x210>
 800721e:	2310      	movs	r3, #16
 8007220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007224:	e002      	b.n	800722c <UART_SetConfig+0x210>
 8007226:	2310      	movs	r3, #16
 8007228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a25      	ldr	r2, [pc, #148]	; (80072c8 <UART_SetConfig+0x2ac>)
 8007232:	4293      	cmp	r3, r2
 8007234:	f040 808a 	bne.w	800734c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007238:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800723c:	2b08      	cmp	r3, #8
 800723e:	d824      	bhi.n	800728a <UART_SetConfig+0x26e>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <UART_SetConfig+0x22c>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800726d 	.word	0x0800726d
 800724c:	0800728b 	.word	0x0800728b
 8007250:	08007275 	.word	0x08007275
 8007254:	0800728b 	.word	0x0800728b
 8007258:	0800727b 	.word	0x0800727b
 800725c:	0800728b 	.word	0x0800728b
 8007260:	0800728b 	.word	0x0800728b
 8007264:	0800728b 	.word	0x0800728b
 8007268:	08007283 	.word	0x08007283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800726c:	f7fe faae 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8007270:	61f8      	str	r0, [r7, #28]
        break;
 8007272:	e010      	b.n	8007296 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007274:	4b19      	ldr	r3, [pc, #100]	; (80072dc <UART_SetConfig+0x2c0>)
 8007276:	61fb      	str	r3, [r7, #28]
        break;
 8007278:	e00d      	b.n	8007296 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800727a:	f7fe fa11 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800727e:	61f8      	str	r0, [r7, #28]
        break;
 8007280:	e009      	b.n	8007296 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007286:	61fb      	str	r3, [r7, #28]
        break;
 8007288:	e005      	b.n	8007296 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 8109 	beq.w	80074b0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	4413      	add	r3, r2
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d305      	bcc.n	80072ba <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072b4:	69fa      	ldr	r2, [r7, #28]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d912      	bls.n	80072e0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072c0:	e0f6      	b.n	80074b0 <UART_SetConfig+0x494>
 80072c2:	bf00      	nop
 80072c4:	efff69f3 	.word	0xefff69f3
 80072c8:	40008000 	.word	0x40008000
 80072cc:	40013800 	.word	0x40013800
 80072d0:	40021000 	.word	0x40021000
 80072d4:	40004400 	.word	0x40004400
 80072d8:	40004800 	.word	0x40004800
 80072dc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2200      	movs	r2, #0
 80072e4:	461c      	mov	r4, r3
 80072e6:	4615      	mov	r5, r2
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	022b      	lsls	r3, r5, #8
 80072f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80072f6:	0222      	lsls	r2, r4, #8
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	6849      	ldr	r1, [r1, #4]
 80072fc:	0849      	lsrs	r1, r1, #1
 80072fe:	2000      	movs	r0, #0
 8007300:	4688      	mov	r8, r1
 8007302:	4681      	mov	r9, r0
 8007304:	eb12 0a08 	adds.w	sl, r2, r8
 8007308:	eb43 0b09 	adc.w	fp, r3, r9
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800731a:	4650      	mov	r0, sl
 800731c:	4659      	mov	r1, fp
 800731e:	f7f9 fbcd 	bl	8000abc <__aeabi_uldivmod>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4613      	mov	r3, r2
 8007328:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007330:	d308      	bcc.n	8007344 <UART_SetConfig+0x328>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007338:	d204      	bcs.n	8007344 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	e0b5      	b.n	80074b0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800734a:	e0b1      	b.n	80074b0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007354:	d15d      	bne.n	8007412 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800735a:	2b08      	cmp	r3, #8
 800735c:	d827      	bhi.n	80073ae <UART_SetConfig+0x392>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x348>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	080073af 	.word	0x080073af
 8007374:	0800739f 	.word	0x0800739f
 8007378:	080073af 	.word	0x080073af
 800737c:	080073af 	.word	0x080073af
 8007380:	080073af 	.word	0x080073af
 8007384:	080073a7 	.word	0x080073a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fe fa20 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 800738c:	61f8      	str	r0, [r7, #28]
        break;
 800738e:	e014      	b.n	80073ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fe fa32 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007394:	61f8      	str	r0, [r7, #28]
        break;
 8007396:	e010      	b.n	80073ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007398:	4b4c      	ldr	r3, [pc, #304]	; (80074cc <UART_SetConfig+0x4b0>)
 800739a:	61fb      	str	r3, [r7, #28]
        break;
 800739c:	e00d      	b.n	80073ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739e:	f7fe f97f 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 80073a2:	61f8      	str	r0, [r7, #28]
        break;
 80073a4:	e009      	b.n	80073ba <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073aa:	61fb      	str	r3, [r7, #28]
        break;
 80073ac:	e005      	b.n	80073ba <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80073b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d077      	beq.n	80074b0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	005a      	lsls	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	441a      	add	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d916      	bls.n	800740a <UART_SetConfig+0x3ee>
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e2:	d212      	bcs.n	800740a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f023 030f 	bic.w	r3, r3, #15
 80073ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	8afa      	ldrh	r2, [r7, #22]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e052      	b.n	80074b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007410:	e04e      	b.n	80074b0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007412:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007416:	2b08      	cmp	r3, #8
 8007418:	d827      	bhi.n	800746a <UART_SetConfig+0x44e>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0x404>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007445 	.word	0x08007445
 8007424:	0800744d 	.word	0x0800744d
 8007428:	08007455 	.word	0x08007455
 800742c:	0800746b 	.word	0x0800746b
 8007430:	0800745b 	.word	0x0800745b
 8007434:	0800746b 	.word	0x0800746b
 8007438:	0800746b 	.word	0x0800746b
 800743c:	0800746b 	.word	0x0800746b
 8007440:	08007463 	.word	0x08007463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007444:	f7fe f9c2 	bl	80057cc <HAL_RCC_GetPCLK1Freq>
 8007448:	61f8      	str	r0, [r7, #28]
        break;
 800744a:	e014      	b.n	8007476 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800744c:	f7fe f9d4 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 8007450:	61f8      	str	r0, [r7, #28]
        break;
 8007452:	e010      	b.n	8007476 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007454:	4b1d      	ldr	r3, [pc, #116]	; (80074cc <UART_SetConfig+0x4b0>)
 8007456:	61fb      	str	r3, [r7, #28]
        break;
 8007458:	e00d      	b.n	8007476 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745a:	f7fe f921 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800745e:	61f8      	str	r0, [r7, #28]
        break;
 8007460:	e009      	b.n	8007476 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007466:	61fb      	str	r3, [r7, #28]
        break;
 8007468:	e005      	b.n	8007476 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007474:	bf00      	nop
    }

    if (pclk != 0U)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d019      	beq.n	80074b0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085a      	lsrs	r2, r3, #1
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	fbb2 f3f3 	udiv	r3, r2, r3
 800748e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b0f      	cmp	r3, #15
 8007494:	d909      	bls.n	80074aa <UART_SetConfig+0x48e>
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800749c:	d205      	bcs.n	80074aa <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60da      	str	r2, [r3, #12]
 80074a8:	e002      	b.n	80074b0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80074bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3728      	adds	r7, #40	; 0x28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ca:	bf00      	nop
 80074cc:	00f42400 	.word	0x00f42400

080074d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ce:	d10a      	bne.n	80075e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af02      	add	r7, sp, #8
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007624:	f7fb fc0e 	bl	8002e44 <HAL_GetTick>
 8007628:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b08      	cmp	r3, #8
 8007636:	d10e      	bne.n	8007656 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f82d 	bl	80076a6 <UART_WaitOnFlagUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e023      	b.n	800769e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b04      	cmp	r3, #4
 8007662:	d10e      	bne.n	8007682 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f817 	bl	80076a6 <UART_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00d      	b.n	800769e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b09c      	sub	sp, #112	; 0x70
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	603b      	str	r3, [r7, #0]
 80076b2:	4613      	mov	r3, r2
 80076b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076b6:	e0a5      	b.n	8007804 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076be:	f000 80a1 	beq.w	8007804 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c2:	f7fb fbbf 	bl	8002e44 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d302      	bcc.n	80076d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80076d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d13e      	bne.n	8007756 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ec:	667b      	str	r3, [r7, #100]	; 0x64
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e6      	bne.n	80076d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800771a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	663b      	str	r3, [r7, #96]	; 0x60
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800772a:	64ba      	str	r2, [r7, #72]	; 0x48
 800772c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e5      	bne.n	800770a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2220      	movs	r2, #32
 8007742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2220      	movs	r2, #32
 8007748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e067      	b.n	8007826 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d04f      	beq.n	8007804 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007772:	d147      	bne.n	8007804 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800777c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	613b      	str	r3, [r7, #16]
   return(result);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80077d0:	623a      	str	r2, [r7, #32]
 80077d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	69f9      	ldr	r1, [r7, #28]
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e5      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e010      	b.n	8007826 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	4013      	ands	r3, r2
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	bf0c      	ite	eq
 8007814:	2301      	moveq	r3, #1
 8007816:	2300      	movne	r3, #0
 8007818:	b2db      	uxtb	r3, r3
 800781a:	461a      	mov	r2, r3
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	429a      	cmp	r2, r3
 8007820:	f43f af4a 	beq.w	80076b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3770      	adds	r7, #112	; 0x70
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007830:	b480      	push	{r7}
 8007832:	b097      	sub	sp, #92	; 0x5c
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	88fa      	ldrh	r2, [r7, #6]
 8007848:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007862:	d10e      	bne.n	8007882 <UART_Start_Receive_IT+0x52>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <UART_Start_Receive_IT+0x48>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007872:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007876:	e02d      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	22ff      	movs	r2, #255	; 0xff
 800787c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007880:	e028      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <UART_Start_Receive_IT+0x76>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <UART_Start_Receive_IT+0x6c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800789a:	e01b      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	227f      	movs	r2, #127	; 0x7f
 80078a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078a4:	e016      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ae:	d10d      	bne.n	80078cc <UART_Start_Receive_IT+0x9c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <UART_Start_Receive_IT+0x92>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	227f      	movs	r2, #127	; 0x7f
 80078bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078c0:	e008      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	223f      	movs	r2, #63	; 0x3f
 80078c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078ca:	e003      	b.n	80078d4 <UART_Start_Receive_IT+0xa4>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2222      	movs	r2, #34	; 0x22
 80078e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	657b      	str	r3, [r7, #84]	; 0x54
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007902:	64ba      	str	r2, [r7, #72]	; 0x48
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e5      	bne.n	80078e2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791e:	d107      	bne.n	8007930 <UART_Start_Receive_IT+0x100>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691b      	ldr	r3, [r3, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d103      	bne.n	8007930 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <UART_Start_Receive_IT+0x18c>)
 800792c:	665a      	str	r2, [r3, #100]	; 0x64
 800792e:	e002      	b.n	8007936 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4a23      	ldr	r2, [pc, #140]	; (80079c0 <UART_Start_Receive_IT+0x190>)
 8007934:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d019      	beq.n	800797a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794e:	e853 3f00 	ldrex	r3, [r3]
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800795a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007964:	637b      	str	r3, [r7, #52]	; 0x34
 8007966:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800796a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e6      	bne.n	8007946 <UART_Start_Receive_IT+0x116>
 8007978:	e018      	b.n	80079ac <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f043 0320 	orr.w	r3, r3, #32
 800798e:	653b      	str	r3, [r7, #80]	; 0x50
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007998:	623b      	str	r3, [r7, #32]
 800799a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	69f9      	ldr	r1, [r7, #28]
 800799e:	6a3a      	ldr	r2, [r7, #32]
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	375c      	adds	r7, #92	; 0x5c
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	08007c6b 	.word	0x08007c6b
 80079c0:	08007b0b 	.word	0x08007b0b

080079c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b095      	sub	sp, #84	; 0x54
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ea:	643b      	str	r3, [r7, #64]	; 0x40
 80079ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f023 0301 	bic.w	r3, r3, #1
 8007a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	3308      	adds	r3, #8
 8007a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d118      	bne.n	8007a6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 0310 	bic.w	r3, r3, #16
 8007a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	6979      	ldr	r1, [r7, #20]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007a7e:	bf00      	nop
 8007a80:	3754      	adds	r7, #84	; 0x54
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff faad 	bl	8007008 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b088      	sub	sp, #32
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6979      	ldr	r1, [r7, #20]
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e6      	bne.n	8007abe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2220      	movs	r2, #32
 8007af4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7fa fddb 	bl	80026b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b02:	bf00      	nop
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b096      	sub	sp, #88	; 0x58
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b20:	2b22      	cmp	r3, #34	; 0x22
 8007b22:	f040 8094 	bne.w	8007c4e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007b34:	b2d9      	uxtb	r1, r3
 8007b36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b40:	400a      	ands	r2, r1
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d179      	bne.n	8007c62 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	e853 3f00 	ldrex	r3, [r3]
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b82:	653b      	str	r3, [r7, #80]	; 0x50
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b94:	e841 2300 	strex	r3, r2, [r1]
 8007b98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1e6      	bne.n	8007b6e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	f023 0301 	bic.w	r3, r3, #1
 8007bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bc0:	633a      	str	r2, [r7, #48]	; 0x30
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e5      	bne.n	8007ba0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d12e      	bne.n	8007c46 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0310 	bic.w	r3, r3, #16
 8007c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	69b9      	ldr	r1, [r7, #24]
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	617b      	str	r3, [r7, #20]
   return(result);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e6      	bne.n	8007bee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f003 0310 	and.w	r3, r3, #16
 8007c2a:	2b10      	cmp	r3, #16
 8007c2c:	d103      	bne.n	8007c36 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2210      	movs	r2, #16
 8007c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fa fd2e 	bl	80026a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c44:	e00d      	b.n	8007c62 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f7fa fd10 	bl	800266c <HAL_UART_RxCpltCallback>
}
 8007c4c:	e009      	b.n	8007c62 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	8b1b      	ldrh	r3, [r3, #24]
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0208 	orr.w	r2, r2, #8
 8007c5e:	b292      	uxth	r2, r2
 8007c60:	831a      	strh	r2, [r3, #24]
}
 8007c62:	bf00      	nop
 8007c64:	3758      	adds	r7, #88	; 0x58
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b096      	sub	sp, #88	; 0x58
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c78:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c80:	2b22      	cmp	r3, #34	; 0x22
 8007c82:	f040 8094 	bne.w	8007dae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c94:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c96:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007c9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d179      	bne.n	8007dc2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cec:	643b      	str	r3, [r7, #64]	; 0x40
 8007cee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e6      	bne.n	8007cce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e5      	bne.n	8007d00 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d12e      	bne.n	8007da6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f023 0310 	bic.w	r3, r3, #16
 8007d62:	647b      	str	r3, [r7, #68]	; 0x44
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	6979      	ldr	r1, [r7, #20]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	613b      	str	r3, [r7, #16]
   return(result);
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e6      	bne.n	8007d4e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f003 0310 	and.w	r3, r3, #16
 8007d8a:	2b10      	cmp	r3, #16
 8007d8c:	d103      	bne.n	8007d96 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2210      	movs	r2, #16
 8007d94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7fa fc7e 	bl	80026a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007da4:	e00d      	b.n	8007dc2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fa fc60 	bl	800266c <HAL_UART_RxCpltCallback>
}
 8007dac:	e009      	b.n	8007dc2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	8b1b      	ldrh	r3, [r3, #24]
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0208 	orr.w	r2, r2, #8
 8007dbe:	b292      	uxth	r2, r2
 8007dc0:	831a      	strh	r2, [r3, #24]
}
 8007dc2:	bf00      	nop
 8007dc4:	3758      	adds	r7, #88	; 0x58
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
	...

08007de0 <__errno>:
 8007de0:	4b01      	ldr	r3, [pc, #4]	; (8007de8 <__errno+0x8>)
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	2000000c 	.word	0x2000000c

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4d0d      	ldr	r5, [pc, #52]	; (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	; (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1b64      	subs	r4, r4, r5
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2600      	movs	r6, #0
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4d0b      	ldr	r5, [pc, #44]	; (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <__libc_init_array+0x44>)
 8007e00:	f001 faf4 	bl	80093ec <_init>
 8007e04:	1b64      	subs	r4, r4, r5
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2600      	movs	r6, #0
 8007e0a:	42a6      	cmp	r6, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e14:	4798      	blx	r3
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1e:	4798      	blx	r3
 8007e20:	3601      	adds	r6, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	080097f0 	.word	0x080097f0
 8007e28:	080097f0 	.word	0x080097f0
 8007e2c:	080097f0 	.word	0x080097f0
 8007e30:	080097f4 	.word	0x080097f4

08007e34 <memcpy>:
 8007e34:	440a      	add	r2, r1
 8007e36:	4291      	cmp	r1, r2
 8007e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	4770      	bx	lr
 8007e40:	b510      	push	{r4, lr}
 8007e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4a:	4291      	cmp	r1, r2
 8007e4c:	d1f9      	bne.n	8007e42 <memcpy+0xe>
 8007e4e:	bd10      	pop	{r4, pc}

08007e50 <memset>:
 8007e50:	4402      	add	r2, r0
 8007e52:	4603      	mov	r3, r0
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d100      	bne.n	8007e5a <memset+0xa>
 8007e58:	4770      	bx	lr
 8007e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5e:	e7f9      	b.n	8007e54 <memset+0x4>

08007e60 <siprintf>:
 8007e60:	b40e      	push	{r1, r2, r3}
 8007e62:	b500      	push	{lr}
 8007e64:	b09c      	sub	sp, #112	; 0x70
 8007e66:	ab1d      	add	r3, sp, #116	; 0x74
 8007e68:	9002      	str	r0, [sp, #8]
 8007e6a:	9006      	str	r0, [sp, #24]
 8007e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e70:	4809      	ldr	r0, [pc, #36]	; (8007e98 <siprintf+0x38>)
 8007e72:	9107      	str	r1, [sp, #28]
 8007e74:	9104      	str	r1, [sp, #16]
 8007e76:	4909      	ldr	r1, [pc, #36]	; (8007e9c <siprintf+0x3c>)
 8007e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7c:	9105      	str	r1, [sp, #20]
 8007e7e:	6800      	ldr	r0, [r0, #0]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	a902      	add	r1, sp, #8
 8007e84:	f000 fa7e 	bl	8008384 <_svfiprintf_r>
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	b01c      	add	sp, #112	; 0x70
 8007e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e94:	b003      	add	sp, #12
 8007e96:	4770      	bx	lr
 8007e98:	2000000c 	.word	0x2000000c
 8007e9c:	ffff0208 	.word	0xffff0208

08007ea0 <strstr>:
 8007ea0:	780a      	ldrb	r2, [r1, #0]
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	b96a      	cbnz	r2, 8007ec2 <strstr+0x22>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d109      	bne.n	8007ec0 <strstr+0x20>
 8007eac:	460c      	mov	r4, r1
 8007eae:	4605      	mov	r5, r0
 8007eb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f6      	beq.n	8007ea6 <strstr+0x6>
 8007eb8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007ebc:	429e      	cmp	r6, r3
 8007ebe:	d0f7      	beq.n	8007eb0 <strstr+0x10>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	7803      	ldrb	r3, [r0, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1ef      	bne.n	8007ea8 <strstr+0x8>
 8007ec8:	4618      	mov	r0, r3
 8007eca:	e7ec      	b.n	8007ea6 <strstr+0x6>

08007ecc <strtok>:
 8007ecc:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <strtok+0x5c>)
 8007ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed0:	681e      	ldr	r6, [r3, #0]
 8007ed2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	b9fc      	cbnz	r4, 8007f18 <strtok+0x4c>
 8007ed8:	2050      	movs	r0, #80	; 0x50
 8007eda:	9101      	str	r1, [sp, #4]
 8007edc:	f000 f90e 	bl	80080fc <malloc>
 8007ee0:	9901      	ldr	r1, [sp, #4]
 8007ee2:	65b0      	str	r0, [r6, #88]	; 0x58
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	b920      	cbnz	r0, 8007ef2 <strtok+0x26>
 8007ee8:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <strtok+0x60>)
 8007eea:	4811      	ldr	r0, [pc, #68]	; (8007f30 <strtok+0x64>)
 8007eec:	2157      	movs	r1, #87	; 0x57
 8007eee:	f000 f8d5 	bl	800809c <__assert_func>
 8007ef2:	e9c0 4400 	strd	r4, r4, [r0]
 8007ef6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007efa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007efe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007f02:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007f06:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007f0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007f0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007f12:	6184      	str	r4, [r0, #24]
 8007f14:	7704      	strb	r4, [r0, #28]
 8007f16:	6244      	str	r4, [r0, #36]	; 0x24
 8007f18:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	b002      	add	sp, #8
 8007f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f24:	f000 b806 	b.w	8007f34 <__strtok_r>
 8007f28:	2000000c 	.word	0x2000000c
 8007f2c:	080095a4 	.word	0x080095a4
 8007f30:	080095bb 	.word	0x080095bb

08007f34 <__strtok_r>:
 8007f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f36:	b908      	cbnz	r0, 8007f3c <__strtok_r+0x8>
 8007f38:	6810      	ldr	r0, [r2, #0]
 8007f3a:	b188      	cbz	r0, 8007f60 <__strtok_r+0x2c>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007f44:	460f      	mov	r7, r1
 8007f46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007f4a:	b91e      	cbnz	r6, 8007f54 <__strtok_r+0x20>
 8007f4c:	b965      	cbnz	r5, 8007f68 <__strtok_r+0x34>
 8007f4e:	6015      	str	r5, [r2, #0]
 8007f50:	4628      	mov	r0, r5
 8007f52:	e005      	b.n	8007f60 <__strtok_r+0x2c>
 8007f54:	42b5      	cmp	r5, r6
 8007f56:	d1f6      	bne.n	8007f46 <__strtok_r+0x12>
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f0      	bne.n	8007f3e <__strtok_r+0xa>
 8007f5c:	6014      	str	r4, [r2, #0]
 8007f5e:	7003      	strb	r3, [r0, #0]
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	461c      	mov	r4, r3
 8007f64:	e00c      	b.n	8007f80 <__strtok_r+0x4c>
 8007f66:	b915      	cbnz	r5, 8007f6e <__strtok_r+0x3a>
 8007f68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007f72:	42ab      	cmp	r3, r5
 8007f74:	d1f7      	bne.n	8007f66 <__strtok_r+0x32>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f3      	beq.n	8007f62 <__strtok_r+0x2e>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	e7ed      	b.n	8007f60 <__strtok_r+0x2c>

08007f84 <_strtol_l.constprop.0>:
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8a:	d001      	beq.n	8007f90 <_strtol_l.constprop.0+0xc>
 8007f8c:	2b24      	cmp	r3, #36	; 0x24
 8007f8e:	d906      	bls.n	8007f9e <_strtol_l.constprop.0+0x1a>
 8007f90:	f7ff ff26 	bl	8007de0 <__errno>
 8007f94:	2316      	movs	r3, #22
 8007f96:	6003      	str	r3, [r0, #0]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008084 <_strtol_l.constprop.0+0x100>
 8007fa2:	460d      	mov	r5, r1
 8007fa4:	462e      	mov	r6, r5
 8007fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007faa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007fae:	f017 0708 	ands.w	r7, r7, #8
 8007fb2:	d1f7      	bne.n	8007fa4 <_strtol_l.constprop.0+0x20>
 8007fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8007fb6:	d132      	bne.n	800801e <_strtol_l.constprop.0+0x9a>
 8007fb8:	782c      	ldrb	r4, [r5, #0]
 8007fba:	2701      	movs	r7, #1
 8007fbc:	1cb5      	adds	r5, r6, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d05b      	beq.n	800807a <_strtol_l.constprop.0+0xf6>
 8007fc2:	2b10      	cmp	r3, #16
 8007fc4:	d109      	bne.n	8007fda <_strtol_l.constprop.0+0x56>
 8007fc6:	2c30      	cmp	r4, #48	; 0x30
 8007fc8:	d107      	bne.n	8007fda <_strtol_l.constprop.0+0x56>
 8007fca:	782c      	ldrb	r4, [r5, #0]
 8007fcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007fd0:	2c58      	cmp	r4, #88	; 0x58
 8007fd2:	d14d      	bne.n	8008070 <_strtol_l.constprop.0+0xec>
 8007fd4:	786c      	ldrb	r4, [r5, #1]
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	3502      	adds	r5, #2
 8007fda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fe2:	f04f 0c00 	mov.w	ip, #0
 8007fe6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007fea:	4666      	mov	r6, ip
 8007fec:	fb03 8a19 	mls	sl, r3, r9, r8
 8007ff0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007ff4:	f1be 0f09 	cmp.w	lr, #9
 8007ff8:	d816      	bhi.n	8008028 <_strtol_l.constprop.0+0xa4>
 8007ffa:	4674      	mov	r4, lr
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	dd24      	ble.n	800804a <_strtol_l.constprop.0+0xc6>
 8008000:	f1bc 0f00 	cmp.w	ip, #0
 8008004:	db1e      	blt.n	8008044 <_strtol_l.constprop.0+0xc0>
 8008006:	45b1      	cmp	r9, r6
 8008008:	d31c      	bcc.n	8008044 <_strtol_l.constprop.0+0xc0>
 800800a:	d101      	bne.n	8008010 <_strtol_l.constprop.0+0x8c>
 800800c:	45a2      	cmp	sl, r4
 800800e:	db19      	blt.n	8008044 <_strtol_l.constprop.0+0xc0>
 8008010:	fb06 4603 	mla	r6, r6, r3, r4
 8008014:	f04f 0c01 	mov.w	ip, #1
 8008018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801c:	e7e8      	b.n	8007ff0 <_strtol_l.constprop.0+0x6c>
 800801e:	2c2b      	cmp	r4, #43	; 0x2b
 8008020:	bf04      	itt	eq
 8008022:	782c      	ldrbeq	r4, [r5, #0]
 8008024:	1cb5      	addeq	r5, r6, #2
 8008026:	e7ca      	b.n	8007fbe <_strtol_l.constprop.0+0x3a>
 8008028:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800802c:	f1be 0f19 	cmp.w	lr, #25
 8008030:	d801      	bhi.n	8008036 <_strtol_l.constprop.0+0xb2>
 8008032:	3c37      	subs	r4, #55	; 0x37
 8008034:	e7e2      	b.n	8007ffc <_strtol_l.constprop.0+0x78>
 8008036:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800803a:	f1be 0f19 	cmp.w	lr, #25
 800803e:	d804      	bhi.n	800804a <_strtol_l.constprop.0+0xc6>
 8008040:	3c57      	subs	r4, #87	; 0x57
 8008042:	e7db      	b.n	8007ffc <_strtol_l.constprop.0+0x78>
 8008044:	f04f 3cff 	mov.w	ip, #4294967295
 8008048:	e7e6      	b.n	8008018 <_strtol_l.constprop.0+0x94>
 800804a:	f1bc 0f00 	cmp.w	ip, #0
 800804e:	da05      	bge.n	800805c <_strtol_l.constprop.0+0xd8>
 8008050:	2322      	movs	r3, #34	; 0x22
 8008052:	6003      	str	r3, [r0, #0]
 8008054:	4646      	mov	r6, r8
 8008056:	b942      	cbnz	r2, 800806a <_strtol_l.constprop.0+0xe6>
 8008058:	4630      	mov	r0, r6
 800805a:	e79e      	b.n	8007f9a <_strtol_l.constprop.0+0x16>
 800805c:	b107      	cbz	r7, 8008060 <_strtol_l.constprop.0+0xdc>
 800805e:	4276      	negs	r6, r6
 8008060:	2a00      	cmp	r2, #0
 8008062:	d0f9      	beq.n	8008058 <_strtol_l.constprop.0+0xd4>
 8008064:	f1bc 0f00 	cmp.w	ip, #0
 8008068:	d000      	beq.n	800806c <_strtol_l.constprop.0+0xe8>
 800806a:	1e69      	subs	r1, r5, #1
 800806c:	6011      	str	r1, [r2, #0]
 800806e:	e7f3      	b.n	8008058 <_strtol_l.constprop.0+0xd4>
 8008070:	2430      	movs	r4, #48	; 0x30
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1b1      	bne.n	8007fda <_strtol_l.constprop.0+0x56>
 8008076:	2308      	movs	r3, #8
 8008078:	e7af      	b.n	8007fda <_strtol_l.constprop.0+0x56>
 800807a:	2c30      	cmp	r4, #48	; 0x30
 800807c:	d0a5      	beq.n	8007fca <_strtol_l.constprop.0+0x46>
 800807e:	230a      	movs	r3, #10
 8008080:	e7ab      	b.n	8007fda <_strtol_l.constprop.0+0x56>
 8008082:	bf00      	nop
 8008084:	08009655 	.word	0x08009655

08008088 <strtol>:
 8008088:	4613      	mov	r3, r2
 800808a:	460a      	mov	r2, r1
 800808c:	4601      	mov	r1, r0
 800808e:	4802      	ldr	r0, [pc, #8]	; (8008098 <strtol+0x10>)
 8008090:	6800      	ldr	r0, [r0, #0]
 8008092:	f7ff bf77 	b.w	8007f84 <_strtol_l.constprop.0>
 8008096:	bf00      	nop
 8008098:	2000000c 	.word	0x2000000c

0800809c <__assert_func>:
 800809c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800809e:	4614      	mov	r4, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4b09      	ldr	r3, [pc, #36]	; (80080c8 <__assert_func+0x2c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4605      	mov	r5, r0
 80080a8:	68d8      	ldr	r0, [r3, #12]
 80080aa:	b14c      	cbz	r4, 80080c0 <__assert_func+0x24>
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <__assert_func+0x30>)
 80080ae:	9100      	str	r1, [sp, #0]
 80080b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080b4:	4906      	ldr	r1, [pc, #24]	; (80080d0 <__assert_func+0x34>)
 80080b6:	462b      	mov	r3, r5
 80080b8:	f000 f80e 	bl	80080d8 <fiprintf>
 80080bc:	f000 fe20 	bl	8008d00 <abort>
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <__assert_func+0x38>)
 80080c2:	461c      	mov	r4, r3
 80080c4:	e7f3      	b.n	80080ae <__assert_func+0x12>
 80080c6:	bf00      	nop
 80080c8:	2000000c 	.word	0x2000000c
 80080cc:	08009618 	.word	0x08009618
 80080d0:	08009625 	.word	0x08009625
 80080d4:	08009653 	.word	0x08009653

080080d8 <fiprintf>:
 80080d8:	b40e      	push	{r1, r2, r3}
 80080da:	b503      	push	{r0, r1, lr}
 80080dc:	4601      	mov	r1, r0
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	4805      	ldr	r0, [pc, #20]	; (80080f8 <fiprintf+0x20>)
 80080e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e6:	6800      	ldr	r0, [r0, #0]
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	f000 fa75 	bl	80085d8 <_vfiprintf_r>
 80080ee:	b002      	add	sp, #8
 80080f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080f4:	b003      	add	sp, #12
 80080f6:	4770      	bx	lr
 80080f8:	2000000c 	.word	0x2000000c

080080fc <malloc>:
 80080fc:	4b02      	ldr	r3, [pc, #8]	; (8008108 <malloc+0xc>)
 80080fe:	4601      	mov	r1, r0
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	f000 b86f 	b.w	80081e4 <_malloc_r>
 8008106:	bf00      	nop
 8008108:	2000000c 	.word	0x2000000c

0800810c <_free_r>:
 800810c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800810e:	2900      	cmp	r1, #0
 8008110:	d044      	beq.n	800819c <_free_r+0x90>
 8008112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008116:	9001      	str	r0, [sp, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f1a1 0404 	sub.w	r4, r1, #4
 800811e:	bfb8      	it	lt
 8008120:	18e4      	addlt	r4, r4, r3
 8008122:	f001 f82f 	bl	8009184 <__malloc_lock>
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <_free_r+0x94>)
 8008128:	9801      	ldr	r0, [sp, #4]
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	b933      	cbnz	r3, 800813c <_free_r+0x30>
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	6014      	str	r4, [r2, #0]
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008138:	f001 b82a 	b.w	8009190 <__malloc_unlock>
 800813c:	42a3      	cmp	r3, r4
 800813e:	d908      	bls.n	8008152 <_free_r+0x46>
 8008140:	6825      	ldr	r5, [r4, #0]
 8008142:	1961      	adds	r1, r4, r5
 8008144:	428b      	cmp	r3, r1
 8008146:	bf01      	itttt	eq
 8008148:	6819      	ldreq	r1, [r3, #0]
 800814a:	685b      	ldreq	r3, [r3, #4]
 800814c:	1949      	addeq	r1, r1, r5
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	e7ed      	b.n	800812e <_free_r+0x22>
 8008152:	461a      	mov	r2, r3
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	b10b      	cbz	r3, 800815c <_free_r+0x50>
 8008158:	42a3      	cmp	r3, r4
 800815a:	d9fa      	bls.n	8008152 <_free_r+0x46>
 800815c:	6811      	ldr	r1, [r2, #0]
 800815e:	1855      	adds	r5, r2, r1
 8008160:	42a5      	cmp	r5, r4
 8008162:	d10b      	bne.n	800817c <_free_r+0x70>
 8008164:	6824      	ldr	r4, [r4, #0]
 8008166:	4421      	add	r1, r4
 8008168:	1854      	adds	r4, r2, r1
 800816a:	42a3      	cmp	r3, r4
 800816c:	6011      	str	r1, [r2, #0]
 800816e:	d1e0      	bne.n	8008132 <_free_r+0x26>
 8008170:	681c      	ldr	r4, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	4421      	add	r1, r4
 8008178:	6011      	str	r1, [r2, #0]
 800817a:	e7da      	b.n	8008132 <_free_r+0x26>
 800817c:	d902      	bls.n	8008184 <_free_r+0x78>
 800817e:	230c      	movs	r3, #12
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	e7d6      	b.n	8008132 <_free_r+0x26>
 8008184:	6825      	ldr	r5, [r4, #0]
 8008186:	1961      	adds	r1, r4, r5
 8008188:	428b      	cmp	r3, r1
 800818a:	bf04      	itt	eq
 800818c:	6819      	ldreq	r1, [r3, #0]
 800818e:	685b      	ldreq	r3, [r3, #4]
 8008190:	6063      	str	r3, [r4, #4]
 8008192:	bf04      	itt	eq
 8008194:	1949      	addeq	r1, r1, r5
 8008196:	6021      	streq	r1, [r4, #0]
 8008198:	6054      	str	r4, [r2, #4]
 800819a:	e7ca      	b.n	8008132 <_free_r+0x26>
 800819c:	b003      	add	sp, #12
 800819e:	bd30      	pop	{r4, r5, pc}
 80081a0:	20000b38 	.word	0x20000b38

080081a4 <sbrk_aligned>:
 80081a4:	b570      	push	{r4, r5, r6, lr}
 80081a6:	4e0e      	ldr	r6, [pc, #56]	; (80081e0 <sbrk_aligned+0x3c>)
 80081a8:	460c      	mov	r4, r1
 80081aa:	6831      	ldr	r1, [r6, #0]
 80081ac:	4605      	mov	r5, r0
 80081ae:	b911      	cbnz	r1, 80081b6 <sbrk_aligned+0x12>
 80081b0:	f000 fcd6 	bl	8008b60 <_sbrk_r>
 80081b4:	6030      	str	r0, [r6, #0]
 80081b6:	4621      	mov	r1, r4
 80081b8:	4628      	mov	r0, r5
 80081ba:	f000 fcd1 	bl	8008b60 <_sbrk_r>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d00a      	beq.n	80081d8 <sbrk_aligned+0x34>
 80081c2:	1cc4      	adds	r4, r0, #3
 80081c4:	f024 0403 	bic.w	r4, r4, #3
 80081c8:	42a0      	cmp	r0, r4
 80081ca:	d007      	beq.n	80081dc <sbrk_aligned+0x38>
 80081cc:	1a21      	subs	r1, r4, r0
 80081ce:	4628      	mov	r0, r5
 80081d0:	f000 fcc6 	bl	8008b60 <_sbrk_r>
 80081d4:	3001      	adds	r0, #1
 80081d6:	d101      	bne.n	80081dc <sbrk_aligned+0x38>
 80081d8:	f04f 34ff 	mov.w	r4, #4294967295
 80081dc:	4620      	mov	r0, r4
 80081de:	bd70      	pop	{r4, r5, r6, pc}
 80081e0:	20000b3c 	.word	0x20000b3c

080081e4 <_malloc_r>:
 80081e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	1ccd      	adds	r5, r1, #3
 80081ea:	f025 0503 	bic.w	r5, r5, #3
 80081ee:	3508      	adds	r5, #8
 80081f0:	2d0c      	cmp	r5, #12
 80081f2:	bf38      	it	cc
 80081f4:	250c      	movcc	r5, #12
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	4607      	mov	r7, r0
 80081fa:	db01      	blt.n	8008200 <_malloc_r+0x1c>
 80081fc:	42a9      	cmp	r1, r5
 80081fe:	d905      	bls.n	800820c <_malloc_r+0x28>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	2600      	movs	r6, #0
 8008206:	4630      	mov	r0, r6
 8008208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800820c:	4e2e      	ldr	r6, [pc, #184]	; (80082c8 <_malloc_r+0xe4>)
 800820e:	f000 ffb9 	bl	8009184 <__malloc_lock>
 8008212:	6833      	ldr	r3, [r6, #0]
 8008214:	461c      	mov	r4, r3
 8008216:	bb34      	cbnz	r4, 8008266 <_malloc_r+0x82>
 8008218:	4629      	mov	r1, r5
 800821a:	4638      	mov	r0, r7
 800821c:	f7ff ffc2 	bl	80081a4 <sbrk_aligned>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	4604      	mov	r4, r0
 8008224:	d14d      	bne.n	80082c2 <_malloc_r+0xde>
 8008226:	6834      	ldr	r4, [r6, #0]
 8008228:	4626      	mov	r6, r4
 800822a:	2e00      	cmp	r6, #0
 800822c:	d140      	bne.n	80082b0 <_malloc_r+0xcc>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	4631      	mov	r1, r6
 8008232:	4638      	mov	r0, r7
 8008234:	eb04 0803 	add.w	r8, r4, r3
 8008238:	f000 fc92 	bl	8008b60 <_sbrk_r>
 800823c:	4580      	cmp	r8, r0
 800823e:	d13a      	bne.n	80082b6 <_malloc_r+0xd2>
 8008240:	6821      	ldr	r1, [r4, #0]
 8008242:	3503      	adds	r5, #3
 8008244:	1a6d      	subs	r5, r5, r1
 8008246:	f025 0503 	bic.w	r5, r5, #3
 800824a:	3508      	adds	r5, #8
 800824c:	2d0c      	cmp	r5, #12
 800824e:	bf38      	it	cc
 8008250:	250c      	movcc	r5, #12
 8008252:	4629      	mov	r1, r5
 8008254:	4638      	mov	r0, r7
 8008256:	f7ff ffa5 	bl	80081a4 <sbrk_aligned>
 800825a:	3001      	adds	r0, #1
 800825c:	d02b      	beq.n	80082b6 <_malloc_r+0xd2>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	442b      	add	r3, r5
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	e00e      	b.n	8008284 <_malloc_r+0xa0>
 8008266:	6822      	ldr	r2, [r4, #0]
 8008268:	1b52      	subs	r2, r2, r5
 800826a:	d41e      	bmi.n	80082aa <_malloc_r+0xc6>
 800826c:	2a0b      	cmp	r2, #11
 800826e:	d916      	bls.n	800829e <_malloc_r+0xba>
 8008270:	1961      	adds	r1, r4, r5
 8008272:	42a3      	cmp	r3, r4
 8008274:	6025      	str	r5, [r4, #0]
 8008276:	bf18      	it	ne
 8008278:	6059      	strne	r1, [r3, #4]
 800827a:	6863      	ldr	r3, [r4, #4]
 800827c:	bf08      	it	eq
 800827e:	6031      	streq	r1, [r6, #0]
 8008280:	5162      	str	r2, [r4, r5]
 8008282:	604b      	str	r3, [r1, #4]
 8008284:	4638      	mov	r0, r7
 8008286:	f104 060b 	add.w	r6, r4, #11
 800828a:	f000 ff81 	bl	8009190 <__malloc_unlock>
 800828e:	f026 0607 	bic.w	r6, r6, #7
 8008292:	1d23      	adds	r3, r4, #4
 8008294:	1af2      	subs	r2, r6, r3
 8008296:	d0b6      	beq.n	8008206 <_malloc_r+0x22>
 8008298:	1b9b      	subs	r3, r3, r6
 800829a:	50a3      	str	r3, [r4, r2]
 800829c:	e7b3      	b.n	8008206 <_malloc_r+0x22>
 800829e:	6862      	ldr	r2, [r4, #4]
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	bf0c      	ite	eq
 80082a4:	6032      	streq	r2, [r6, #0]
 80082a6:	605a      	strne	r2, [r3, #4]
 80082a8:	e7ec      	b.n	8008284 <_malloc_r+0xa0>
 80082aa:	4623      	mov	r3, r4
 80082ac:	6864      	ldr	r4, [r4, #4]
 80082ae:	e7b2      	b.n	8008216 <_malloc_r+0x32>
 80082b0:	4634      	mov	r4, r6
 80082b2:	6876      	ldr	r6, [r6, #4]
 80082b4:	e7b9      	b.n	800822a <_malloc_r+0x46>
 80082b6:	230c      	movs	r3, #12
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	4638      	mov	r0, r7
 80082bc:	f000 ff68 	bl	8009190 <__malloc_unlock>
 80082c0:	e7a1      	b.n	8008206 <_malloc_r+0x22>
 80082c2:	6025      	str	r5, [r4, #0]
 80082c4:	e7de      	b.n	8008284 <_malloc_r+0xa0>
 80082c6:	bf00      	nop
 80082c8:	20000b38 	.word	0x20000b38

080082cc <__ssputs_r>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	688e      	ldr	r6, [r1, #8]
 80082d2:	429e      	cmp	r6, r3
 80082d4:	4682      	mov	sl, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4690      	mov	r8, r2
 80082da:	461f      	mov	r7, r3
 80082dc:	d838      	bhi.n	8008350 <__ssputs_r+0x84>
 80082de:	898a      	ldrh	r2, [r1, #12]
 80082e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082e4:	d032      	beq.n	800834c <__ssputs_r+0x80>
 80082e6:	6825      	ldr	r5, [r4, #0]
 80082e8:	6909      	ldr	r1, [r1, #16]
 80082ea:	eba5 0901 	sub.w	r9, r5, r1
 80082ee:	6965      	ldr	r5, [r4, #20]
 80082f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082f8:	3301      	adds	r3, #1
 80082fa:	444b      	add	r3, r9
 80082fc:	106d      	asrs	r5, r5, #1
 80082fe:	429d      	cmp	r5, r3
 8008300:	bf38      	it	cc
 8008302:	461d      	movcc	r5, r3
 8008304:	0553      	lsls	r3, r2, #21
 8008306:	d531      	bpl.n	800836c <__ssputs_r+0xa0>
 8008308:	4629      	mov	r1, r5
 800830a:	f7ff ff6b 	bl	80081e4 <_malloc_r>
 800830e:	4606      	mov	r6, r0
 8008310:	b950      	cbnz	r0, 8008328 <__ssputs_r+0x5c>
 8008312:	230c      	movs	r3, #12
 8008314:	f8ca 3000 	str.w	r3, [sl]
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	6921      	ldr	r1, [r4, #16]
 800832a:	464a      	mov	r2, r9
 800832c:	f7ff fd82 	bl	8007e34 <memcpy>
 8008330:	89a3      	ldrh	r3, [r4, #12]
 8008332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	6126      	str	r6, [r4, #16]
 800833e:	6165      	str	r5, [r4, #20]
 8008340:	444e      	add	r6, r9
 8008342:	eba5 0509 	sub.w	r5, r5, r9
 8008346:	6026      	str	r6, [r4, #0]
 8008348:	60a5      	str	r5, [r4, #8]
 800834a:	463e      	mov	r6, r7
 800834c:	42be      	cmp	r6, r7
 800834e:	d900      	bls.n	8008352 <__ssputs_r+0x86>
 8008350:	463e      	mov	r6, r7
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	4632      	mov	r2, r6
 8008356:	4641      	mov	r1, r8
 8008358:	f000 fefa 	bl	8009150 <memmove>
 800835c:	68a3      	ldr	r3, [r4, #8]
 800835e:	1b9b      	subs	r3, r3, r6
 8008360:	60a3      	str	r3, [r4, #8]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	4433      	add	r3, r6
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	2000      	movs	r0, #0
 800836a:	e7db      	b.n	8008324 <__ssputs_r+0x58>
 800836c:	462a      	mov	r2, r5
 800836e:	f000 ff15 	bl	800919c <_realloc_r>
 8008372:	4606      	mov	r6, r0
 8008374:	2800      	cmp	r0, #0
 8008376:	d1e1      	bne.n	800833c <__ssputs_r+0x70>
 8008378:	6921      	ldr	r1, [r4, #16]
 800837a:	4650      	mov	r0, sl
 800837c:	f7ff fec6 	bl	800810c <_free_r>
 8008380:	e7c7      	b.n	8008312 <__ssputs_r+0x46>
	...

08008384 <_svfiprintf_r>:
 8008384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008388:	4698      	mov	r8, r3
 800838a:	898b      	ldrh	r3, [r1, #12]
 800838c:	061b      	lsls	r3, r3, #24
 800838e:	b09d      	sub	sp, #116	; 0x74
 8008390:	4607      	mov	r7, r0
 8008392:	460d      	mov	r5, r1
 8008394:	4614      	mov	r4, r2
 8008396:	d50e      	bpl.n	80083b6 <_svfiprintf_r+0x32>
 8008398:	690b      	ldr	r3, [r1, #16]
 800839a:	b963      	cbnz	r3, 80083b6 <_svfiprintf_r+0x32>
 800839c:	2140      	movs	r1, #64	; 0x40
 800839e:	f7ff ff21 	bl	80081e4 <_malloc_r>
 80083a2:	6028      	str	r0, [r5, #0]
 80083a4:	6128      	str	r0, [r5, #16]
 80083a6:	b920      	cbnz	r0, 80083b2 <_svfiprintf_r+0x2e>
 80083a8:	230c      	movs	r3, #12
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e0d1      	b.n	8008556 <_svfiprintf_r+0x1d2>
 80083b2:	2340      	movs	r3, #64	; 0x40
 80083b4:	616b      	str	r3, [r5, #20]
 80083b6:	2300      	movs	r3, #0
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	2320      	movs	r3, #32
 80083bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80083c4:	2330      	movs	r3, #48	; 0x30
 80083c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008570 <_svfiprintf_r+0x1ec>
 80083ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083ce:	f04f 0901 	mov.w	r9, #1
 80083d2:	4623      	mov	r3, r4
 80083d4:	469a      	mov	sl, r3
 80083d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083da:	b10a      	cbz	r2, 80083e0 <_svfiprintf_r+0x5c>
 80083dc:	2a25      	cmp	r2, #37	; 0x25
 80083de:	d1f9      	bne.n	80083d4 <_svfiprintf_r+0x50>
 80083e0:	ebba 0b04 	subs.w	fp, sl, r4
 80083e4:	d00b      	beq.n	80083fe <_svfiprintf_r+0x7a>
 80083e6:	465b      	mov	r3, fp
 80083e8:	4622      	mov	r2, r4
 80083ea:	4629      	mov	r1, r5
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff ff6d 	bl	80082cc <__ssputs_r>
 80083f2:	3001      	adds	r0, #1
 80083f4:	f000 80aa 	beq.w	800854c <_svfiprintf_r+0x1c8>
 80083f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083fa:	445a      	add	r2, fp
 80083fc:	9209      	str	r2, [sp, #36]	; 0x24
 80083fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80a2 	beq.w	800854c <_svfiprintf_r+0x1c8>
 8008408:	2300      	movs	r3, #0
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008412:	f10a 0a01 	add.w	sl, sl, #1
 8008416:	9304      	str	r3, [sp, #16]
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800841e:	931a      	str	r3, [sp, #104]	; 0x68
 8008420:	4654      	mov	r4, sl
 8008422:	2205      	movs	r2, #5
 8008424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008428:	4851      	ldr	r0, [pc, #324]	; (8008570 <_svfiprintf_r+0x1ec>)
 800842a:	f7f7 fed9 	bl	80001e0 <memchr>
 800842e:	9a04      	ldr	r2, [sp, #16]
 8008430:	b9d8      	cbnz	r0, 800846a <_svfiprintf_r+0xe6>
 8008432:	06d0      	lsls	r0, r2, #27
 8008434:	bf44      	itt	mi
 8008436:	2320      	movmi	r3, #32
 8008438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800843c:	0711      	lsls	r1, r2, #28
 800843e:	bf44      	itt	mi
 8008440:	232b      	movmi	r3, #43	; 0x2b
 8008442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008446:	f89a 3000 	ldrb.w	r3, [sl]
 800844a:	2b2a      	cmp	r3, #42	; 0x2a
 800844c:	d015      	beq.n	800847a <_svfiprintf_r+0xf6>
 800844e:	9a07      	ldr	r2, [sp, #28]
 8008450:	4654      	mov	r4, sl
 8008452:	2000      	movs	r0, #0
 8008454:	f04f 0c0a 	mov.w	ip, #10
 8008458:	4621      	mov	r1, r4
 800845a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800845e:	3b30      	subs	r3, #48	; 0x30
 8008460:	2b09      	cmp	r3, #9
 8008462:	d94e      	bls.n	8008502 <_svfiprintf_r+0x17e>
 8008464:	b1b0      	cbz	r0, 8008494 <_svfiprintf_r+0x110>
 8008466:	9207      	str	r2, [sp, #28]
 8008468:	e014      	b.n	8008494 <_svfiprintf_r+0x110>
 800846a:	eba0 0308 	sub.w	r3, r0, r8
 800846e:	fa09 f303 	lsl.w	r3, r9, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	9304      	str	r3, [sp, #16]
 8008476:	46a2      	mov	sl, r4
 8008478:	e7d2      	b.n	8008420 <_svfiprintf_r+0x9c>
 800847a:	9b03      	ldr	r3, [sp, #12]
 800847c:	1d19      	adds	r1, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9103      	str	r1, [sp, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	bfbb      	ittet	lt
 8008486:	425b      	neglt	r3, r3
 8008488:	f042 0202 	orrlt.w	r2, r2, #2
 800848c:	9307      	strge	r3, [sp, #28]
 800848e:	9307      	strlt	r3, [sp, #28]
 8008490:	bfb8      	it	lt
 8008492:	9204      	strlt	r2, [sp, #16]
 8008494:	7823      	ldrb	r3, [r4, #0]
 8008496:	2b2e      	cmp	r3, #46	; 0x2e
 8008498:	d10c      	bne.n	80084b4 <_svfiprintf_r+0x130>
 800849a:	7863      	ldrb	r3, [r4, #1]
 800849c:	2b2a      	cmp	r3, #42	; 0x2a
 800849e:	d135      	bne.n	800850c <_svfiprintf_r+0x188>
 80084a0:	9b03      	ldr	r3, [sp, #12]
 80084a2:	1d1a      	adds	r2, r3, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	9203      	str	r2, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bfb8      	it	lt
 80084ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80084b0:	3402      	adds	r4, #2
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008580 <_svfiprintf_r+0x1fc>
 80084b8:	7821      	ldrb	r1, [r4, #0]
 80084ba:	2203      	movs	r2, #3
 80084bc:	4650      	mov	r0, sl
 80084be:	f7f7 fe8f 	bl	80001e0 <memchr>
 80084c2:	b140      	cbz	r0, 80084d6 <_svfiprintf_r+0x152>
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	eba0 000a 	sub.w	r0, r0, sl
 80084ca:	fa03 f000 	lsl.w	r0, r3, r0
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	4303      	orrs	r3, r0
 80084d2:	3401      	adds	r4, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084da:	4826      	ldr	r0, [pc, #152]	; (8008574 <_svfiprintf_r+0x1f0>)
 80084dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e0:	2206      	movs	r2, #6
 80084e2:	f7f7 fe7d 	bl	80001e0 <memchr>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d038      	beq.n	800855c <_svfiprintf_r+0x1d8>
 80084ea:	4b23      	ldr	r3, [pc, #140]	; (8008578 <_svfiprintf_r+0x1f4>)
 80084ec:	bb1b      	cbnz	r3, 8008536 <_svfiprintf_r+0x1b2>
 80084ee:	9b03      	ldr	r3, [sp, #12]
 80084f0:	3307      	adds	r3, #7
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	3308      	adds	r3, #8
 80084f8:	9303      	str	r3, [sp, #12]
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	4433      	add	r3, r6
 80084fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008500:	e767      	b.n	80083d2 <_svfiprintf_r+0x4e>
 8008502:	fb0c 3202 	mla	r2, ip, r2, r3
 8008506:	460c      	mov	r4, r1
 8008508:	2001      	movs	r0, #1
 800850a:	e7a5      	b.n	8008458 <_svfiprintf_r+0xd4>
 800850c:	2300      	movs	r3, #0
 800850e:	3401      	adds	r4, #1
 8008510:	9305      	str	r3, [sp, #20]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0c0a 	mov.w	ip, #10
 8008518:	4620      	mov	r0, r4
 800851a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800851e:	3a30      	subs	r2, #48	; 0x30
 8008520:	2a09      	cmp	r2, #9
 8008522:	d903      	bls.n	800852c <_svfiprintf_r+0x1a8>
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0c5      	beq.n	80084b4 <_svfiprintf_r+0x130>
 8008528:	9105      	str	r1, [sp, #20]
 800852a:	e7c3      	b.n	80084b4 <_svfiprintf_r+0x130>
 800852c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008530:	4604      	mov	r4, r0
 8008532:	2301      	movs	r3, #1
 8008534:	e7f0      	b.n	8008518 <_svfiprintf_r+0x194>
 8008536:	ab03      	add	r3, sp, #12
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	462a      	mov	r2, r5
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <_svfiprintf_r+0x1f8>)
 800853e:	a904      	add	r1, sp, #16
 8008540:	4638      	mov	r0, r7
 8008542:	f3af 8000 	nop.w
 8008546:	1c42      	adds	r2, r0, #1
 8008548:	4606      	mov	r6, r0
 800854a:	d1d6      	bne.n	80084fa <_svfiprintf_r+0x176>
 800854c:	89ab      	ldrh	r3, [r5, #12]
 800854e:	065b      	lsls	r3, r3, #25
 8008550:	f53f af2c 	bmi.w	80083ac <_svfiprintf_r+0x28>
 8008554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008556:	b01d      	add	sp, #116	; 0x74
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	ab03      	add	r3, sp, #12
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	462a      	mov	r2, r5
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <_svfiprintf_r+0x1f8>)
 8008564:	a904      	add	r1, sp, #16
 8008566:	4638      	mov	r0, r7
 8008568:	f000 f9d4 	bl	8008914 <_printf_i>
 800856c:	e7eb      	b.n	8008546 <_svfiprintf_r+0x1c2>
 800856e:	bf00      	nop
 8008570:	08009755 	.word	0x08009755
 8008574:	0800975f 	.word	0x0800975f
 8008578:	00000000 	.word	0x00000000
 800857c:	080082cd 	.word	0x080082cd
 8008580:	0800975b 	.word	0x0800975b

08008584 <__sfputc_r>:
 8008584:	6893      	ldr	r3, [r2, #8]
 8008586:	3b01      	subs	r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	b410      	push	{r4}
 800858c:	6093      	str	r3, [r2, #8]
 800858e:	da08      	bge.n	80085a2 <__sfputc_r+0x1e>
 8008590:	6994      	ldr	r4, [r2, #24]
 8008592:	42a3      	cmp	r3, r4
 8008594:	db01      	blt.n	800859a <__sfputc_r+0x16>
 8008596:	290a      	cmp	r1, #10
 8008598:	d103      	bne.n	80085a2 <__sfputc_r+0x1e>
 800859a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859e:	f000 baef 	b.w	8008b80 <__swbuf_r>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	1c58      	adds	r0, r3, #1
 80085a6:	6010      	str	r0, [r2, #0]
 80085a8:	7019      	strb	r1, [r3, #0]
 80085aa:	4608      	mov	r0, r1
 80085ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <__sfputs_r>:
 80085b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b4:	4606      	mov	r6, r0
 80085b6:	460f      	mov	r7, r1
 80085b8:	4614      	mov	r4, r2
 80085ba:	18d5      	adds	r5, r2, r3
 80085bc:	42ac      	cmp	r4, r5
 80085be:	d101      	bne.n	80085c4 <__sfputs_r+0x12>
 80085c0:	2000      	movs	r0, #0
 80085c2:	e007      	b.n	80085d4 <__sfputs_r+0x22>
 80085c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085c8:	463a      	mov	r2, r7
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff ffda 	bl	8008584 <__sfputc_r>
 80085d0:	1c43      	adds	r3, r0, #1
 80085d2:	d1f3      	bne.n	80085bc <__sfputs_r+0xa>
 80085d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085d8 <_vfiprintf_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	460d      	mov	r5, r1
 80085de:	b09d      	sub	sp, #116	; 0x74
 80085e0:	4614      	mov	r4, r2
 80085e2:	4698      	mov	r8, r3
 80085e4:	4606      	mov	r6, r0
 80085e6:	b118      	cbz	r0, 80085f0 <_vfiprintf_r+0x18>
 80085e8:	6983      	ldr	r3, [r0, #24]
 80085ea:	b90b      	cbnz	r3, 80085f0 <_vfiprintf_r+0x18>
 80085ec:	f000 fcaa 	bl	8008f44 <__sinit>
 80085f0:	4b89      	ldr	r3, [pc, #548]	; (8008818 <_vfiprintf_r+0x240>)
 80085f2:	429d      	cmp	r5, r3
 80085f4:	d11b      	bne.n	800862e <_vfiprintf_r+0x56>
 80085f6:	6875      	ldr	r5, [r6, #4]
 80085f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085fa:	07d9      	lsls	r1, r3, #31
 80085fc:	d405      	bmi.n	800860a <_vfiprintf_r+0x32>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	059a      	lsls	r2, r3, #22
 8008602:	d402      	bmi.n	800860a <_vfiprintf_r+0x32>
 8008604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008606:	f000 fd3b 	bl	8009080 <__retarget_lock_acquire_recursive>
 800860a:	89ab      	ldrh	r3, [r5, #12]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	d501      	bpl.n	8008614 <_vfiprintf_r+0x3c>
 8008610:	692b      	ldr	r3, [r5, #16]
 8008612:	b9eb      	cbnz	r3, 8008650 <_vfiprintf_r+0x78>
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f000 fb04 	bl	8008c24 <__swsetup_r>
 800861c:	b1c0      	cbz	r0, 8008650 <_vfiprintf_r+0x78>
 800861e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008620:	07dc      	lsls	r4, r3, #31
 8008622:	d50e      	bpl.n	8008642 <_vfiprintf_r+0x6a>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b01d      	add	sp, #116	; 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	4b7b      	ldr	r3, [pc, #492]	; (800881c <_vfiprintf_r+0x244>)
 8008630:	429d      	cmp	r5, r3
 8008632:	d101      	bne.n	8008638 <_vfiprintf_r+0x60>
 8008634:	68b5      	ldr	r5, [r6, #8]
 8008636:	e7df      	b.n	80085f8 <_vfiprintf_r+0x20>
 8008638:	4b79      	ldr	r3, [pc, #484]	; (8008820 <_vfiprintf_r+0x248>)
 800863a:	429d      	cmp	r5, r3
 800863c:	bf08      	it	eq
 800863e:	68f5      	ldreq	r5, [r6, #12]
 8008640:	e7da      	b.n	80085f8 <_vfiprintf_r+0x20>
 8008642:	89ab      	ldrh	r3, [r5, #12]
 8008644:	0598      	lsls	r0, r3, #22
 8008646:	d4ed      	bmi.n	8008624 <_vfiprintf_r+0x4c>
 8008648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800864a:	f000 fd1a 	bl	8009082 <__retarget_lock_release_recursive>
 800864e:	e7e9      	b.n	8008624 <_vfiprintf_r+0x4c>
 8008650:	2300      	movs	r3, #0
 8008652:	9309      	str	r3, [sp, #36]	; 0x24
 8008654:	2320      	movs	r3, #32
 8008656:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800865a:	f8cd 800c 	str.w	r8, [sp, #12]
 800865e:	2330      	movs	r3, #48	; 0x30
 8008660:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008824 <_vfiprintf_r+0x24c>
 8008664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008668:	f04f 0901 	mov.w	r9, #1
 800866c:	4623      	mov	r3, r4
 800866e:	469a      	mov	sl, r3
 8008670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008674:	b10a      	cbz	r2, 800867a <_vfiprintf_r+0xa2>
 8008676:	2a25      	cmp	r2, #37	; 0x25
 8008678:	d1f9      	bne.n	800866e <_vfiprintf_r+0x96>
 800867a:	ebba 0b04 	subs.w	fp, sl, r4
 800867e:	d00b      	beq.n	8008698 <_vfiprintf_r+0xc0>
 8008680:	465b      	mov	r3, fp
 8008682:	4622      	mov	r2, r4
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f7ff ff93 	bl	80085b2 <__sfputs_r>
 800868c:	3001      	adds	r0, #1
 800868e:	f000 80aa 	beq.w	80087e6 <_vfiprintf_r+0x20e>
 8008692:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008694:	445a      	add	r2, fp
 8008696:	9209      	str	r2, [sp, #36]	; 0x24
 8008698:	f89a 3000 	ldrb.w	r3, [sl]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80a2 	beq.w	80087e6 <_vfiprintf_r+0x20e>
 80086a2:	2300      	movs	r3, #0
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295
 80086a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ac:	f10a 0a01 	add.w	sl, sl, #1
 80086b0:	9304      	str	r3, [sp, #16]
 80086b2:	9307      	str	r3, [sp, #28]
 80086b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086b8:	931a      	str	r3, [sp, #104]	; 0x68
 80086ba:	4654      	mov	r4, sl
 80086bc:	2205      	movs	r2, #5
 80086be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c2:	4858      	ldr	r0, [pc, #352]	; (8008824 <_vfiprintf_r+0x24c>)
 80086c4:	f7f7 fd8c 	bl	80001e0 <memchr>
 80086c8:	9a04      	ldr	r2, [sp, #16]
 80086ca:	b9d8      	cbnz	r0, 8008704 <_vfiprintf_r+0x12c>
 80086cc:	06d1      	lsls	r1, r2, #27
 80086ce:	bf44      	itt	mi
 80086d0:	2320      	movmi	r3, #32
 80086d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086d6:	0713      	lsls	r3, r2, #28
 80086d8:	bf44      	itt	mi
 80086da:	232b      	movmi	r3, #43	; 0x2b
 80086dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e0:	f89a 3000 	ldrb.w	r3, [sl]
 80086e4:	2b2a      	cmp	r3, #42	; 0x2a
 80086e6:	d015      	beq.n	8008714 <_vfiprintf_r+0x13c>
 80086e8:	9a07      	ldr	r2, [sp, #28]
 80086ea:	4654      	mov	r4, sl
 80086ec:	2000      	movs	r0, #0
 80086ee:	f04f 0c0a 	mov.w	ip, #10
 80086f2:	4621      	mov	r1, r4
 80086f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086f8:	3b30      	subs	r3, #48	; 0x30
 80086fa:	2b09      	cmp	r3, #9
 80086fc:	d94e      	bls.n	800879c <_vfiprintf_r+0x1c4>
 80086fe:	b1b0      	cbz	r0, 800872e <_vfiprintf_r+0x156>
 8008700:	9207      	str	r2, [sp, #28]
 8008702:	e014      	b.n	800872e <_vfiprintf_r+0x156>
 8008704:	eba0 0308 	sub.w	r3, r0, r8
 8008708:	fa09 f303 	lsl.w	r3, r9, r3
 800870c:	4313      	orrs	r3, r2
 800870e:	9304      	str	r3, [sp, #16]
 8008710:	46a2      	mov	sl, r4
 8008712:	e7d2      	b.n	80086ba <_vfiprintf_r+0xe2>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	1d19      	adds	r1, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	9103      	str	r1, [sp, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfbb      	ittet	lt
 8008720:	425b      	neglt	r3, r3
 8008722:	f042 0202 	orrlt.w	r2, r2, #2
 8008726:	9307      	strge	r3, [sp, #28]
 8008728:	9307      	strlt	r3, [sp, #28]
 800872a:	bfb8      	it	lt
 800872c:	9204      	strlt	r2, [sp, #16]
 800872e:	7823      	ldrb	r3, [r4, #0]
 8008730:	2b2e      	cmp	r3, #46	; 0x2e
 8008732:	d10c      	bne.n	800874e <_vfiprintf_r+0x176>
 8008734:	7863      	ldrb	r3, [r4, #1]
 8008736:	2b2a      	cmp	r3, #42	; 0x2a
 8008738:	d135      	bne.n	80087a6 <_vfiprintf_r+0x1ce>
 800873a:	9b03      	ldr	r3, [sp, #12]
 800873c:	1d1a      	adds	r2, r3, #4
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	9203      	str	r2, [sp, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	bfb8      	it	lt
 8008746:	f04f 33ff 	movlt.w	r3, #4294967295
 800874a:	3402      	adds	r4, #2
 800874c:	9305      	str	r3, [sp, #20]
 800874e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008834 <_vfiprintf_r+0x25c>
 8008752:	7821      	ldrb	r1, [r4, #0]
 8008754:	2203      	movs	r2, #3
 8008756:	4650      	mov	r0, sl
 8008758:	f7f7 fd42 	bl	80001e0 <memchr>
 800875c:	b140      	cbz	r0, 8008770 <_vfiprintf_r+0x198>
 800875e:	2340      	movs	r3, #64	; 0x40
 8008760:	eba0 000a 	sub.w	r0, r0, sl
 8008764:	fa03 f000 	lsl.w	r0, r3, r0
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	4303      	orrs	r3, r0
 800876c:	3401      	adds	r4, #1
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	482c      	ldr	r0, [pc, #176]	; (8008828 <_vfiprintf_r+0x250>)
 8008776:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800877a:	2206      	movs	r2, #6
 800877c:	f7f7 fd30 	bl	80001e0 <memchr>
 8008780:	2800      	cmp	r0, #0
 8008782:	d03f      	beq.n	8008804 <_vfiprintf_r+0x22c>
 8008784:	4b29      	ldr	r3, [pc, #164]	; (800882c <_vfiprintf_r+0x254>)
 8008786:	bb1b      	cbnz	r3, 80087d0 <_vfiprintf_r+0x1f8>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	3307      	adds	r3, #7
 800878c:	f023 0307 	bic.w	r3, r3, #7
 8008790:	3308      	adds	r3, #8
 8008792:	9303      	str	r3, [sp, #12]
 8008794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008796:	443b      	add	r3, r7
 8008798:	9309      	str	r3, [sp, #36]	; 0x24
 800879a:	e767      	b.n	800866c <_vfiprintf_r+0x94>
 800879c:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a0:	460c      	mov	r4, r1
 80087a2:	2001      	movs	r0, #1
 80087a4:	e7a5      	b.n	80086f2 <_vfiprintf_r+0x11a>
 80087a6:	2300      	movs	r3, #0
 80087a8:	3401      	adds	r4, #1
 80087aa:	9305      	str	r3, [sp, #20]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f04f 0c0a 	mov.w	ip, #10
 80087b2:	4620      	mov	r0, r4
 80087b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087b8:	3a30      	subs	r2, #48	; 0x30
 80087ba:	2a09      	cmp	r2, #9
 80087bc:	d903      	bls.n	80087c6 <_vfiprintf_r+0x1ee>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0c5      	beq.n	800874e <_vfiprintf_r+0x176>
 80087c2:	9105      	str	r1, [sp, #20]
 80087c4:	e7c3      	b.n	800874e <_vfiprintf_r+0x176>
 80087c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ca:	4604      	mov	r4, r0
 80087cc:	2301      	movs	r3, #1
 80087ce:	e7f0      	b.n	80087b2 <_vfiprintf_r+0x1da>
 80087d0:	ab03      	add	r3, sp, #12
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	462a      	mov	r2, r5
 80087d6:	4b16      	ldr	r3, [pc, #88]	; (8008830 <_vfiprintf_r+0x258>)
 80087d8:	a904      	add	r1, sp, #16
 80087da:	4630      	mov	r0, r6
 80087dc:	f3af 8000 	nop.w
 80087e0:	4607      	mov	r7, r0
 80087e2:	1c78      	adds	r0, r7, #1
 80087e4:	d1d6      	bne.n	8008794 <_vfiprintf_r+0x1bc>
 80087e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087e8:	07d9      	lsls	r1, r3, #31
 80087ea:	d405      	bmi.n	80087f8 <_vfiprintf_r+0x220>
 80087ec:	89ab      	ldrh	r3, [r5, #12]
 80087ee:	059a      	lsls	r2, r3, #22
 80087f0:	d402      	bmi.n	80087f8 <_vfiprintf_r+0x220>
 80087f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087f4:	f000 fc45 	bl	8009082 <__retarget_lock_release_recursive>
 80087f8:	89ab      	ldrh	r3, [r5, #12]
 80087fa:	065b      	lsls	r3, r3, #25
 80087fc:	f53f af12 	bmi.w	8008624 <_vfiprintf_r+0x4c>
 8008800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008802:	e711      	b.n	8008628 <_vfiprintf_r+0x50>
 8008804:	ab03      	add	r3, sp, #12
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	462a      	mov	r2, r5
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <_vfiprintf_r+0x258>)
 800880c:	a904      	add	r1, sp, #16
 800880e:	4630      	mov	r0, r6
 8008810:	f000 f880 	bl	8008914 <_printf_i>
 8008814:	e7e4      	b.n	80087e0 <_vfiprintf_r+0x208>
 8008816:	bf00      	nop
 8008818:	080097a8 	.word	0x080097a8
 800881c:	080097c8 	.word	0x080097c8
 8008820:	08009788 	.word	0x08009788
 8008824:	08009755 	.word	0x08009755
 8008828:	0800975f 	.word	0x0800975f
 800882c:	00000000 	.word	0x00000000
 8008830:	080085b3 	.word	0x080085b3
 8008834:	0800975b 	.word	0x0800975b

08008838 <_printf_common>:
 8008838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800883c:	4616      	mov	r6, r2
 800883e:	4699      	mov	r9, r3
 8008840:	688a      	ldr	r2, [r1, #8]
 8008842:	690b      	ldr	r3, [r1, #16]
 8008844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008848:	4293      	cmp	r3, r2
 800884a:	bfb8      	it	lt
 800884c:	4613      	movlt	r3, r2
 800884e:	6033      	str	r3, [r6, #0]
 8008850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008854:	4607      	mov	r7, r0
 8008856:	460c      	mov	r4, r1
 8008858:	b10a      	cbz	r2, 800885e <_printf_common+0x26>
 800885a:	3301      	adds	r3, #1
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	0699      	lsls	r1, r3, #26
 8008862:	bf42      	ittt	mi
 8008864:	6833      	ldrmi	r3, [r6, #0]
 8008866:	3302      	addmi	r3, #2
 8008868:	6033      	strmi	r3, [r6, #0]
 800886a:	6825      	ldr	r5, [r4, #0]
 800886c:	f015 0506 	ands.w	r5, r5, #6
 8008870:	d106      	bne.n	8008880 <_printf_common+0x48>
 8008872:	f104 0a19 	add.w	sl, r4, #25
 8008876:	68e3      	ldr	r3, [r4, #12]
 8008878:	6832      	ldr	r2, [r6, #0]
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	42ab      	cmp	r3, r5
 800887e:	dc26      	bgt.n	80088ce <_printf_common+0x96>
 8008880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008884:	1e13      	subs	r3, r2, #0
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	bf18      	it	ne
 800888a:	2301      	movne	r3, #1
 800888c:	0692      	lsls	r2, r2, #26
 800888e:	d42b      	bmi.n	80088e8 <_printf_common+0xb0>
 8008890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d01e      	beq.n	80088dc <_printf_common+0xa4>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	68e5      	ldr	r5, [r4, #12]
 80088a2:	6832      	ldr	r2, [r6, #0]
 80088a4:	f003 0306 	and.w	r3, r3, #6
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	bf08      	it	eq
 80088ac:	1aad      	subeq	r5, r5, r2
 80088ae:	68a3      	ldr	r3, [r4, #8]
 80088b0:	6922      	ldr	r2, [r4, #16]
 80088b2:	bf0c      	ite	eq
 80088b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088b8:	2500      	movne	r5, #0
 80088ba:	4293      	cmp	r3, r2
 80088bc:	bfc4      	itt	gt
 80088be:	1a9b      	subgt	r3, r3, r2
 80088c0:	18ed      	addgt	r5, r5, r3
 80088c2:	2600      	movs	r6, #0
 80088c4:	341a      	adds	r4, #26
 80088c6:	42b5      	cmp	r5, r6
 80088c8:	d11a      	bne.n	8008900 <_printf_common+0xc8>
 80088ca:	2000      	movs	r0, #0
 80088cc:	e008      	b.n	80088e0 <_printf_common+0xa8>
 80088ce:	2301      	movs	r3, #1
 80088d0:	4652      	mov	r2, sl
 80088d2:	4649      	mov	r1, r9
 80088d4:	4638      	mov	r0, r7
 80088d6:	47c0      	blx	r8
 80088d8:	3001      	adds	r0, #1
 80088da:	d103      	bne.n	80088e4 <_printf_common+0xac>
 80088dc:	f04f 30ff 	mov.w	r0, #4294967295
 80088e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e4:	3501      	adds	r5, #1
 80088e6:	e7c6      	b.n	8008876 <_printf_common+0x3e>
 80088e8:	18e1      	adds	r1, r4, r3
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	2030      	movs	r0, #48	; 0x30
 80088ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088f2:	4422      	add	r2, r4
 80088f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088fc:	3302      	adds	r3, #2
 80088fe:	e7c7      	b.n	8008890 <_printf_common+0x58>
 8008900:	2301      	movs	r3, #1
 8008902:	4622      	mov	r2, r4
 8008904:	4649      	mov	r1, r9
 8008906:	4638      	mov	r0, r7
 8008908:	47c0      	blx	r8
 800890a:	3001      	adds	r0, #1
 800890c:	d0e6      	beq.n	80088dc <_printf_common+0xa4>
 800890e:	3601      	adds	r6, #1
 8008910:	e7d9      	b.n	80088c6 <_printf_common+0x8e>
	...

08008914 <_printf_i>:
 8008914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	7e0f      	ldrb	r7, [r1, #24]
 800891a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800891c:	2f78      	cmp	r7, #120	; 0x78
 800891e:	4691      	mov	r9, r2
 8008920:	4680      	mov	r8, r0
 8008922:	460c      	mov	r4, r1
 8008924:	469a      	mov	sl, r3
 8008926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800892a:	d807      	bhi.n	800893c <_printf_i+0x28>
 800892c:	2f62      	cmp	r7, #98	; 0x62
 800892e:	d80a      	bhi.n	8008946 <_printf_i+0x32>
 8008930:	2f00      	cmp	r7, #0
 8008932:	f000 80d8 	beq.w	8008ae6 <_printf_i+0x1d2>
 8008936:	2f58      	cmp	r7, #88	; 0x58
 8008938:	f000 80a3 	beq.w	8008a82 <_printf_i+0x16e>
 800893c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008944:	e03a      	b.n	80089bc <_printf_i+0xa8>
 8008946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800894a:	2b15      	cmp	r3, #21
 800894c:	d8f6      	bhi.n	800893c <_printf_i+0x28>
 800894e:	a101      	add	r1, pc, #4	; (adr r1, 8008954 <_printf_i+0x40>)
 8008950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089c1 	.word	0x080089c1
 800895c:	0800893d 	.word	0x0800893d
 8008960:	0800893d 	.word	0x0800893d
 8008964:	0800893d 	.word	0x0800893d
 8008968:	0800893d 	.word	0x0800893d
 800896c:	080089c1 	.word	0x080089c1
 8008970:	0800893d 	.word	0x0800893d
 8008974:	0800893d 	.word	0x0800893d
 8008978:	0800893d 	.word	0x0800893d
 800897c:	0800893d 	.word	0x0800893d
 8008980:	08008acd 	.word	0x08008acd
 8008984:	080089f1 	.word	0x080089f1
 8008988:	08008aaf 	.word	0x08008aaf
 800898c:	0800893d 	.word	0x0800893d
 8008990:	0800893d 	.word	0x0800893d
 8008994:	08008aef 	.word	0x08008aef
 8008998:	0800893d 	.word	0x0800893d
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	0800893d 	.word	0x0800893d
 80089a4:	0800893d 	.word	0x0800893d
 80089a8:	08008ab7 	.word	0x08008ab7
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	1d1a      	adds	r2, r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089bc:	2301      	movs	r3, #1
 80089be:	e0a3      	b.n	8008b08 <_printf_i+0x1f4>
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	6829      	ldr	r1, [r5, #0]
 80089c4:	0606      	lsls	r6, r0, #24
 80089c6:	f101 0304 	add.w	r3, r1, #4
 80089ca:	d50a      	bpl.n	80089e2 <_printf_i+0xce>
 80089cc:	680e      	ldr	r6, [r1, #0]
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	2e00      	cmp	r6, #0
 80089d2:	da03      	bge.n	80089dc <_printf_i+0xc8>
 80089d4:	232d      	movs	r3, #45	; 0x2d
 80089d6:	4276      	negs	r6, r6
 80089d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089dc:	485e      	ldr	r0, [pc, #376]	; (8008b58 <_printf_i+0x244>)
 80089de:	230a      	movs	r3, #10
 80089e0:	e019      	b.n	8008a16 <_printf_i+0x102>
 80089e2:	680e      	ldr	r6, [r1, #0]
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089ea:	bf18      	it	ne
 80089ec:	b236      	sxthne	r6, r6
 80089ee:	e7ef      	b.n	80089d0 <_printf_i+0xbc>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	1d19      	adds	r1, r3, #4
 80089f6:	6029      	str	r1, [r5, #0]
 80089f8:	0601      	lsls	r1, r0, #24
 80089fa:	d501      	bpl.n	8008a00 <_printf_i+0xec>
 80089fc:	681e      	ldr	r6, [r3, #0]
 80089fe:	e002      	b.n	8008a06 <_printf_i+0xf2>
 8008a00:	0646      	lsls	r6, r0, #25
 8008a02:	d5fb      	bpl.n	80089fc <_printf_i+0xe8>
 8008a04:	881e      	ldrh	r6, [r3, #0]
 8008a06:	4854      	ldr	r0, [pc, #336]	; (8008b58 <_printf_i+0x244>)
 8008a08:	2f6f      	cmp	r7, #111	; 0x6f
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2308      	moveq	r3, #8
 8008a0e:	230a      	movne	r3, #10
 8008a10:	2100      	movs	r1, #0
 8008a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a16:	6865      	ldr	r5, [r4, #4]
 8008a18:	60a5      	str	r5, [r4, #8]
 8008a1a:	2d00      	cmp	r5, #0
 8008a1c:	bfa2      	ittt	ge
 8008a1e:	6821      	ldrge	r1, [r4, #0]
 8008a20:	f021 0104 	bicge.w	r1, r1, #4
 8008a24:	6021      	strge	r1, [r4, #0]
 8008a26:	b90e      	cbnz	r6, 8008a2c <_printf_i+0x118>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	d04d      	beq.n	8008ac8 <_printf_i+0x1b4>
 8008a2c:	4615      	mov	r5, r2
 8008a2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a32:	fb03 6711 	mls	r7, r3, r1, r6
 8008a36:	5dc7      	ldrb	r7, [r0, r7]
 8008a38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a3c:	4637      	mov	r7, r6
 8008a3e:	42bb      	cmp	r3, r7
 8008a40:	460e      	mov	r6, r1
 8008a42:	d9f4      	bls.n	8008a2e <_printf_i+0x11a>
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d10b      	bne.n	8008a60 <_printf_i+0x14c>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07de      	lsls	r6, r3, #31
 8008a4c:	d508      	bpl.n	8008a60 <_printf_i+0x14c>
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	6861      	ldr	r1, [r4, #4]
 8008a52:	4299      	cmp	r1, r3
 8008a54:	bfde      	ittt	le
 8008a56:	2330      	movle	r3, #48	; 0x30
 8008a58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a60:	1b52      	subs	r2, r2, r5
 8008a62:	6122      	str	r2, [r4, #16]
 8008a64:	f8cd a000 	str.w	sl, [sp]
 8008a68:	464b      	mov	r3, r9
 8008a6a:	aa03      	add	r2, sp, #12
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4640      	mov	r0, r8
 8008a70:	f7ff fee2 	bl	8008838 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	d14c      	bne.n	8008b12 <_printf_i+0x1fe>
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	b004      	add	sp, #16
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a82:	4835      	ldr	r0, [pc, #212]	; (8008b58 <_printf_i+0x244>)
 8008a84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a88:	6829      	ldr	r1, [r5, #0]
 8008a8a:	6823      	ldr	r3, [r4, #0]
 8008a8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a90:	6029      	str	r1, [r5, #0]
 8008a92:	061d      	lsls	r5, r3, #24
 8008a94:	d514      	bpl.n	8008ac0 <_printf_i+0x1ac>
 8008a96:	07df      	lsls	r7, r3, #31
 8008a98:	bf44      	itt	mi
 8008a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a9e:	6023      	strmi	r3, [r4, #0]
 8008aa0:	b91e      	cbnz	r6, 8008aaa <_printf_i+0x196>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f023 0320 	bic.w	r3, r3, #32
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	2310      	movs	r3, #16
 8008aac:	e7b0      	b.n	8008a10 <_printf_i+0xfc>
 8008aae:	6823      	ldr	r3, [r4, #0]
 8008ab0:	f043 0320 	orr.w	r3, r3, #32
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	2378      	movs	r3, #120	; 0x78
 8008ab8:	4828      	ldr	r0, [pc, #160]	; (8008b5c <_printf_i+0x248>)
 8008aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008abe:	e7e3      	b.n	8008a88 <_printf_i+0x174>
 8008ac0:	0659      	lsls	r1, r3, #25
 8008ac2:	bf48      	it	mi
 8008ac4:	b2b6      	uxthmi	r6, r6
 8008ac6:	e7e6      	b.n	8008a96 <_printf_i+0x182>
 8008ac8:	4615      	mov	r5, r2
 8008aca:	e7bb      	b.n	8008a44 <_printf_i+0x130>
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	6826      	ldr	r6, [r4, #0]
 8008ad0:	6961      	ldr	r1, [r4, #20]
 8008ad2:	1d18      	adds	r0, r3, #4
 8008ad4:	6028      	str	r0, [r5, #0]
 8008ad6:	0635      	lsls	r5, r6, #24
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	d501      	bpl.n	8008ae0 <_printf_i+0x1cc>
 8008adc:	6019      	str	r1, [r3, #0]
 8008ade:	e002      	b.n	8008ae6 <_printf_i+0x1d2>
 8008ae0:	0670      	lsls	r0, r6, #25
 8008ae2:	d5fb      	bpl.n	8008adc <_printf_i+0x1c8>
 8008ae4:	8019      	strh	r1, [r3, #0]
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	4615      	mov	r5, r2
 8008aec:	e7ba      	b.n	8008a64 <_printf_i+0x150>
 8008aee:	682b      	ldr	r3, [r5, #0]
 8008af0:	1d1a      	adds	r2, r3, #4
 8008af2:	602a      	str	r2, [r5, #0]
 8008af4:	681d      	ldr	r5, [r3, #0]
 8008af6:	6862      	ldr	r2, [r4, #4]
 8008af8:	2100      	movs	r1, #0
 8008afa:	4628      	mov	r0, r5
 8008afc:	f7f7 fb70 	bl	80001e0 <memchr>
 8008b00:	b108      	cbz	r0, 8008b06 <_printf_i+0x1f2>
 8008b02:	1b40      	subs	r0, r0, r5
 8008b04:	6060      	str	r0, [r4, #4]
 8008b06:	6863      	ldr	r3, [r4, #4]
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b10:	e7a8      	b.n	8008a64 <_printf_i+0x150>
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	462a      	mov	r2, r5
 8008b16:	4649      	mov	r1, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	47d0      	blx	sl
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d0ab      	beq.n	8008a78 <_printf_i+0x164>
 8008b20:	6823      	ldr	r3, [r4, #0]
 8008b22:	079b      	lsls	r3, r3, #30
 8008b24:	d413      	bmi.n	8008b4e <_printf_i+0x23a>
 8008b26:	68e0      	ldr	r0, [r4, #12]
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	4298      	cmp	r0, r3
 8008b2c:	bfb8      	it	lt
 8008b2e:	4618      	movlt	r0, r3
 8008b30:	e7a4      	b.n	8008a7c <_printf_i+0x168>
 8008b32:	2301      	movs	r3, #1
 8008b34:	4632      	mov	r2, r6
 8008b36:	4649      	mov	r1, r9
 8008b38:	4640      	mov	r0, r8
 8008b3a:	47d0      	blx	sl
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	d09b      	beq.n	8008a78 <_printf_i+0x164>
 8008b40:	3501      	adds	r5, #1
 8008b42:	68e3      	ldr	r3, [r4, #12]
 8008b44:	9903      	ldr	r1, [sp, #12]
 8008b46:	1a5b      	subs	r3, r3, r1
 8008b48:	42ab      	cmp	r3, r5
 8008b4a:	dcf2      	bgt.n	8008b32 <_printf_i+0x21e>
 8008b4c:	e7eb      	b.n	8008b26 <_printf_i+0x212>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	f104 0619 	add.w	r6, r4, #25
 8008b54:	e7f5      	b.n	8008b42 <_printf_i+0x22e>
 8008b56:	bf00      	nop
 8008b58:	08009766 	.word	0x08009766
 8008b5c:	08009777 	.word	0x08009777

08008b60 <_sbrk_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	; (8008b7c <_sbrk_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f9 fa4a 	bl	8002004 <_sbrk>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_sbrk_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_sbrk_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	20000b44 	.word	0x20000b44

08008b80 <__swbuf_r>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	460e      	mov	r6, r1
 8008b84:	4614      	mov	r4, r2
 8008b86:	4605      	mov	r5, r0
 8008b88:	b118      	cbz	r0, 8008b92 <__swbuf_r+0x12>
 8008b8a:	6983      	ldr	r3, [r0, #24]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <__swbuf_r+0x12>
 8008b8e:	f000 f9d9 	bl	8008f44 <__sinit>
 8008b92:	4b21      	ldr	r3, [pc, #132]	; (8008c18 <__swbuf_r+0x98>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	d12b      	bne.n	8008bf0 <__swbuf_r+0x70>
 8008b98:	686c      	ldr	r4, [r5, #4]
 8008b9a:	69a3      	ldr	r3, [r4, #24]
 8008b9c:	60a3      	str	r3, [r4, #8]
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	071a      	lsls	r2, r3, #28
 8008ba2:	d52f      	bpl.n	8008c04 <__swbuf_r+0x84>
 8008ba4:	6923      	ldr	r3, [r4, #16]
 8008ba6:	b36b      	cbz	r3, 8008c04 <__swbuf_r+0x84>
 8008ba8:	6923      	ldr	r3, [r4, #16]
 8008baa:	6820      	ldr	r0, [r4, #0]
 8008bac:	1ac0      	subs	r0, r0, r3
 8008bae:	6963      	ldr	r3, [r4, #20]
 8008bb0:	b2f6      	uxtb	r6, r6
 8008bb2:	4283      	cmp	r3, r0
 8008bb4:	4637      	mov	r7, r6
 8008bb6:	dc04      	bgt.n	8008bc2 <__swbuf_r+0x42>
 8008bb8:	4621      	mov	r1, r4
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f92e 	bl	8008e1c <_fflush_r>
 8008bc0:	bb30      	cbnz	r0, 8008c10 <__swbuf_r+0x90>
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	6823      	ldr	r3, [r4, #0]
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	6022      	str	r2, [r4, #0]
 8008bce:	701e      	strb	r6, [r3, #0]
 8008bd0:	6963      	ldr	r3, [r4, #20]
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	4283      	cmp	r3, r0
 8008bd6:	d004      	beq.n	8008be2 <__swbuf_r+0x62>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	07db      	lsls	r3, r3, #31
 8008bdc:	d506      	bpl.n	8008bec <__swbuf_r+0x6c>
 8008bde:	2e0a      	cmp	r6, #10
 8008be0:	d104      	bne.n	8008bec <__swbuf_r+0x6c>
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 f919 	bl	8008e1c <_fflush_r>
 8008bea:	b988      	cbnz	r0, 8008c10 <__swbuf_r+0x90>
 8008bec:	4638      	mov	r0, r7
 8008bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <__swbuf_r+0x9c>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d101      	bne.n	8008bfa <__swbuf_r+0x7a>
 8008bf6:	68ac      	ldr	r4, [r5, #8]
 8008bf8:	e7cf      	b.n	8008b9a <__swbuf_r+0x1a>
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <__swbuf_r+0xa0>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	bf08      	it	eq
 8008c00:	68ec      	ldreq	r4, [r5, #12]
 8008c02:	e7ca      	b.n	8008b9a <__swbuf_r+0x1a>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f80c 	bl	8008c24 <__swsetup_r>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0cb      	beq.n	8008ba8 <__swbuf_r+0x28>
 8008c10:	f04f 37ff 	mov.w	r7, #4294967295
 8008c14:	e7ea      	b.n	8008bec <__swbuf_r+0x6c>
 8008c16:	bf00      	nop
 8008c18:	080097a8 	.word	0x080097a8
 8008c1c:	080097c8 	.word	0x080097c8
 8008c20:	08009788 	.word	0x08009788

08008c24 <__swsetup_r>:
 8008c24:	4b32      	ldr	r3, [pc, #200]	; (8008cf0 <__swsetup_r+0xcc>)
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	b125      	cbz	r5, 8008c3a <__swsetup_r+0x16>
 8008c30:	69ab      	ldr	r3, [r5, #24]
 8008c32:	b913      	cbnz	r3, 8008c3a <__swsetup_r+0x16>
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f985 	bl	8008f44 <__sinit>
 8008c3a:	4b2e      	ldr	r3, [pc, #184]	; (8008cf4 <__swsetup_r+0xd0>)
 8008c3c:	429c      	cmp	r4, r3
 8008c3e:	d10f      	bne.n	8008c60 <__swsetup_r+0x3c>
 8008c40:	686c      	ldr	r4, [r5, #4]
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c48:	0719      	lsls	r1, r3, #28
 8008c4a:	d42c      	bmi.n	8008ca6 <__swsetup_r+0x82>
 8008c4c:	06dd      	lsls	r5, r3, #27
 8008c4e:	d411      	bmi.n	8008c74 <__swsetup_r+0x50>
 8008c50:	2309      	movs	r3, #9
 8008c52:	6033      	str	r3, [r6, #0]
 8008c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	e03e      	b.n	8008cde <__swsetup_r+0xba>
 8008c60:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <__swsetup_r+0xd4>)
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d101      	bne.n	8008c6a <__swsetup_r+0x46>
 8008c66:	68ac      	ldr	r4, [r5, #8]
 8008c68:	e7eb      	b.n	8008c42 <__swsetup_r+0x1e>
 8008c6a:	4b24      	ldr	r3, [pc, #144]	; (8008cfc <__swsetup_r+0xd8>)
 8008c6c:	429c      	cmp	r4, r3
 8008c6e:	bf08      	it	eq
 8008c70:	68ec      	ldreq	r4, [r5, #12]
 8008c72:	e7e6      	b.n	8008c42 <__swsetup_r+0x1e>
 8008c74:	0758      	lsls	r0, r3, #29
 8008c76:	d512      	bpl.n	8008c9e <__swsetup_r+0x7a>
 8008c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c7a:	b141      	cbz	r1, 8008c8e <__swsetup_r+0x6a>
 8008c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c80:	4299      	cmp	r1, r3
 8008c82:	d002      	beq.n	8008c8a <__swsetup_r+0x66>
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fa41 	bl	800810c <_free_r>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	2300      	movs	r3, #0
 8008c98:	6063      	str	r3, [r4, #4]
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f043 0308 	orr.w	r3, r3, #8
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	6923      	ldr	r3, [r4, #16]
 8008ca8:	b94b      	cbnz	r3, 8008cbe <__swsetup_r+0x9a>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb4:	d003      	beq.n	8008cbe <__swsetup_r+0x9a>
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f000 fa09 	bl	80090d0 <__smakebuf_r>
 8008cbe:	89a0      	ldrh	r0, [r4, #12]
 8008cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cc4:	f010 0301 	ands.w	r3, r0, #1
 8008cc8:	d00a      	beq.n	8008ce0 <__swsetup_r+0xbc>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60a3      	str	r3, [r4, #8]
 8008cce:	6963      	ldr	r3, [r4, #20]
 8008cd0:	425b      	negs	r3, r3
 8008cd2:	61a3      	str	r3, [r4, #24]
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	b943      	cbnz	r3, 8008cea <__swsetup_r+0xc6>
 8008cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cdc:	d1ba      	bne.n	8008c54 <__swsetup_r+0x30>
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	0781      	lsls	r1, r0, #30
 8008ce2:	bf58      	it	pl
 8008ce4:	6963      	ldrpl	r3, [r4, #20]
 8008ce6:	60a3      	str	r3, [r4, #8]
 8008ce8:	e7f4      	b.n	8008cd4 <__swsetup_r+0xb0>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e7f7      	b.n	8008cde <__swsetup_r+0xba>
 8008cee:	bf00      	nop
 8008cf0:	2000000c 	.word	0x2000000c
 8008cf4:	080097a8 	.word	0x080097a8
 8008cf8:	080097c8 	.word	0x080097c8
 8008cfc:	08009788 	.word	0x08009788

08008d00 <abort>:
 8008d00:	b508      	push	{r3, lr}
 8008d02:	2006      	movs	r0, #6
 8008d04:	f000 faa2 	bl	800924c <raise>
 8008d08:	2001      	movs	r0, #1
 8008d0a:	f7f9 f903 	bl	8001f14 <_exit>
	...

08008d10 <__sflush_r>:
 8008d10:	898a      	ldrh	r2, [r1, #12]
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	4605      	mov	r5, r0
 8008d18:	0710      	lsls	r0, r2, #28
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	d458      	bmi.n	8008dd0 <__sflush_r+0xc0>
 8008d1e:	684b      	ldr	r3, [r1, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc05      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dc02      	bgt.n	8008d30 <__sflush_r+0x20>
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d32:	2e00      	cmp	r6, #0
 8008d34:	d0f9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d36:	2300      	movs	r3, #0
 8008d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d3c:	682f      	ldr	r7, [r5, #0]
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	d032      	beq.n	8008da8 <__sflush_r+0x98>
 8008d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	075a      	lsls	r2, r3, #29
 8008d48:	d505      	bpl.n	8008d56 <__sflush_r+0x46>
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	1ac0      	subs	r0, r0, r3
 8008d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d50:	b10b      	cbz	r3, 8008d56 <__sflush_r+0x46>
 8008d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d54:	1ac0      	subs	r0, r0, r3
 8008d56:	2300      	movs	r3, #0
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d5c:	6a21      	ldr	r1, [r4, #32]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	1c43      	adds	r3, r0, #1
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	d106      	bne.n	8008d76 <__sflush_r+0x66>
 8008d68:	6829      	ldr	r1, [r5, #0]
 8008d6a:	291d      	cmp	r1, #29
 8008d6c:	d82c      	bhi.n	8008dc8 <__sflush_r+0xb8>
 8008d6e:	4a2a      	ldr	r2, [pc, #168]	; (8008e18 <__sflush_r+0x108>)
 8008d70:	40ca      	lsrs	r2, r1
 8008d72:	07d6      	lsls	r6, r2, #31
 8008d74:	d528      	bpl.n	8008dc8 <__sflush_r+0xb8>
 8008d76:	2200      	movs	r2, #0
 8008d78:	6062      	str	r2, [r4, #4]
 8008d7a:	04d9      	lsls	r1, r3, #19
 8008d7c:	6922      	ldr	r2, [r4, #16]
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	d504      	bpl.n	8008d8c <__sflush_r+0x7c>
 8008d82:	1c42      	adds	r2, r0, #1
 8008d84:	d101      	bne.n	8008d8a <__sflush_r+0x7a>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b903      	cbnz	r3, 8008d8c <__sflush_r+0x7c>
 8008d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8008d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8e:	602f      	str	r7, [r5, #0]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d0ca      	beq.n	8008d2a <__sflush_r+0x1a>
 8008d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d98:	4299      	cmp	r1, r3
 8008d9a:	d002      	beq.n	8008da2 <__sflush_r+0x92>
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	f7ff f9b5 	bl	800810c <_free_r>
 8008da2:	2000      	movs	r0, #0
 8008da4:	6360      	str	r0, [r4, #52]	; 0x34
 8008da6:	e7c1      	b.n	8008d2c <__sflush_r+0x1c>
 8008da8:	6a21      	ldr	r1, [r4, #32]
 8008daa:	2301      	movs	r3, #1
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b0      	blx	r6
 8008db0:	1c41      	adds	r1, r0, #1
 8008db2:	d1c7      	bne.n	8008d44 <__sflush_r+0x34>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0c4      	beq.n	8008d44 <__sflush_r+0x34>
 8008dba:	2b1d      	cmp	r3, #29
 8008dbc:	d001      	beq.n	8008dc2 <__sflush_r+0xb2>
 8008dbe:	2b16      	cmp	r3, #22
 8008dc0:	d101      	bne.n	8008dc6 <__sflush_r+0xb6>
 8008dc2:	602f      	str	r7, [r5, #0]
 8008dc4:	e7b1      	b.n	8008d2a <__sflush_r+0x1a>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	e7ad      	b.n	8008d2c <__sflush_r+0x1c>
 8008dd0:	690f      	ldr	r7, [r1, #16]
 8008dd2:	2f00      	cmp	r7, #0
 8008dd4:	d0a9      	beq.n	8008d2a <__sflush_r+0x1a>
 8008dd6:	0793      	lsls	r3, r2, #30
 8008dd8:	680e      	ldr	r6, [r1, #0]
 8008dda:	bf08      	it	eq
 8008ddc:	694b      	ldreq	r3, [r1, #20]
 8008dde:	600f      	str	r7, [r1, #0]
 8008de0:	bf18      	it	ne
 8008de2:	2300      	movne	r3, #0
 8008de4:	eba6 0807 	sub.w	r8, r6, r7
 8008de8:	608b      	str	r3, [r1, #8]
 8008dea:	f1b8 0f00 	cmp.w	r8, #0
 8008dee:	dd9c      	ble.n	8008d2a <__sflush_r+0x1a>
 8008df0:	6a21      	ldr	r1, [r4, #32]
 8008df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df4:	4643      	mov	r3, r8
 8008df6:	463a      	mov	r2, r7
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b0      	blx	r6
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	dc06      	bgt.n	8008e0e <__sflush_r+0xfe>
 8008e00:	89a3      	ldrh	r3, [r4, #12]
 8008e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	e78e      	b.n	8008d2c <__sflush_r+0x1c>
 8008e0e:	4407      	add	r7, r0
 8008e10:	eba8 0800 	sub.w	r8, r8, r0
 8008e14:	e7e9      	b.n	8008dea <__sflush_r+0xda>
 8008e16:	bf00      	nop
 8008e18:	20400001 	.word	0x20400001

08008e1c <_fflush_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	690b      	ldr	r3, [r1, #16]
 8008e20:	4605      	mov	r5, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b913      	cbnz	r3, 8008e2c <_fflush_r+0x10>
 8008e26:	2500      	movs	r5, #0
 8008e28:	4628      	mov	r0, r5
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	b118      	cbz	r0, 8008e36 <_fflush_r+0x1a>
 8008e2e:	6983      	ldr	r3, [r0, #24]
 8008e30:	b90b      	cbnz	r3, 8008e36 <_fflush_r+0x1a>
 8008e32:	f000 f887 	bl	8008f44 <__sinit>
 8008e36:	4b14      	ldr	r3, [pc, #80]	; (8008e88 <_fflush_r+0x6c>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	d11b      	bne.n	8008e74 <_fflush_r+0x58>
 8008e3c:	686c      	ldr	r4, [r5, #4]
 8008e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0ef      	beq.n	8008e26 <_fflush_r+0xa>
 8008e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e48:	07d0      	lsls	r0, r2, #31
 8008e4a:	d404      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e4c:	0599      	lsls	r1, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_fflush_r+0x3a>
 8008e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e52:	f000 f915 	bl	8009080 <__retarget_lock_acquire_recursive>
 8008e56:	4628      	mov	r0, r5
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f7ff ff59 	bl	8008d10 <__sflush_r>
 8008e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e60:	07da      	lsls	r2, r3, #31
 8008e62:	4605      	mov	r5, r0
 8008e64:	d4e0      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	059b      	lsls	r3, r3, #22
 8008e6a:	d4dd      	bmi.n	8008e28 <_fflush_r+0xc>
 8008e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6e:	f000 f908 	bl	8009082 <__retarget_lock_release_recursive>
 8008e72:	e7d9      	b.n	8008e28 <_fflush_r+0xc>
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <_fflush_r+0x70>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <_fflush_r+0x62>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7df      	b.n	8008e3e <_fflush_r+0x22>
 8008e7e:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <_fflush_r+0x74>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7da      	b.n	8008e3e <_fflush_r+0x22>
 8008e88:	080097a8 	.word	0x080097a8
 8008e8c:	080097c8 	.word	0x080097c8
 8008e90:	08009788 	.word	0x08009788

08008e94 <std>:
 8008e94:	2300      	movs	r3, #0
 8008e96:	b510      	push	{r4, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ea2:	6083      	str	r3, [r0, #8]
 8008ea4:	8181      	strh	r1, [r0, #12]
 8008ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ea8:	81c2      	strh	r2, [r0, #14]
 8008eaa:	6183      	str	r3, [r0, #24]
 8008eac:	4619      	mov	r1, r3
 8008eae:	2208      	movs	r2, #8
 8008eb0:	305c      	adds	r0, #92	; 0x5c
 8008eb2:	f7fe ffcd 	bl	8007e50 <memset>
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <std+0x38>)
 8008eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8008eba:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <std+0x3c>)
 8008ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <std+0x40>)
 8008ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ec2:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <std+0x44>)
 8008ec4:	6224      	str	r4, [r4, #32]
 8008ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec8:	bd10      	pop	{r4, pc}
 8008eca:	bf00      	nop
 8008ecc:	08009285 	.word	0x08009285
 8008ed0:	080092a7 	.word	0x080092a7
 8008ed4:	080092df 	.word	0x080092df
 8008ed8:	08009303 	.word	0x08009303

08008edc <_cleanup_r>:
 8008edc:	4901      	ldr	r1, [pc, #4]	; (8008ee4 <_cleanup_r+0x8>)
 8008ede:	f000 b8af 	b.w	8009040 <_fwalk_reent>
 8008ee2:	bf00      	nop
 8008ee4:	08008e1d 	.word	0x08008e1d

08008ee8 <__sfmoreglue>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	2268      	movs	r2, #104	; 0x68
 8008eec:	1e4d      	subs	r5, r1, #1
 8008eee:	4355      	muls	r5, r2
 8008ef0:	460e      	mov	r6, r1
 8008ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ef6:	f7ff f975 	bl	80081e4 <_malloc_r>
 8008efa:	4604      	mov	r4, r0
 8008efc:	b140      	cbz	r0, 8008f10 <__sfmoreglue+0x28>
 8008efe:	2100      	movs	r1, #0
 8008f00:	e9c0 1600 	strd	r1, r6, [r0]
 8008f04:	300c      	adds	r0, #12
 8008f06:	60a0      	str	r0, [r4, #8]
 8008f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f0c:	f7fe ffa0 	bl	8007e50 <memset>
 8008f10:	4620      	mov	r0, r4
 8008f12:	bd70      	pop	{r4, r5, r6, pc}

08008f14 <__sfp_lock_acquire>:
 8008f14:	4801      	ldr	r0, [pc, #4]	; (8008f1c <__sfp_lock_acquire+0x8>)
 8008f16:	f000 b8b3 	b.w	8009080 <__retarget_lock_acquire_recursive>
 8008f1a:	bf00      	nop
 8008f1c:	20000b41 	.word	0x20000b41

08008f20 <__sfp_lock_release>:
 8008f20:	4801      	ldr	r0, [pc, #4]	; (8008f28 <__sfp_lock_release+0x8>)
 8008f22:	f000 b8ae 	b.w	8009082 <__retarget_lock_release_recursive>
 8008f26:	bf00      	nop
 8008f28:	20000b41 	.word	0x20000b41

08008f2c <__sinit_lock_acquire>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	; (8008f34 <__sinit_lock_acquire+0x8>)
 8008f2e:	f000 b8a7 	b.w	8009080 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000b42 	.word	0x20000b42

08008f38 <__sinit_lock_release>:
 8008f38:	4801      	ldr	r0, [pc, #4]	; (8008f40 <__sinit_lock_release+0x8>)
 8008f3a:	f000 b8a2 	b.w	8009082 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000b42 	.word	0x20000b42

08008f44 <__sinit>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	f7ff fff0 	bl	8008f2c <__sinit_lock_acquire>
 8008f4c:	69a3      	ldr	r3, [r4, #24]
 8008f4e:	b11b      	cbz	r3, 8008f58 <__sinit+0x14>
 8008f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f54:	f7ff bff0 	b.w	8008f38 <__sinit_lock_release>
 8008f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008f5e:	4b13      	ldr	r3, [pc, #76]	; (8008fac <__sinit+0x68>)
 8008f60:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <__sinit+0x6c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	bf04      	itt	eq
 8008f6a:	2301      	moveq	r3, #1
 8008f6c:	61a3      	streq	r3, [r4, #24]
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 f820 	bl	8008fb4 <__sfp>
 8008f74:	6060      	str	r0, [r4, #4]
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 f81c 	bl	8008fb4 <__sfp>
 8008f7c:	60a0      	str	r0, [r4, #8]
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 f818 	bl	8008fb4 <__sfp>
 8008f84:	2200      	movs	r2, #0
 8008f86:	60e0      	str	r0, [r4, #12]
 8008f88:	2104      	movs	r1, #4
 8008f8a:	6860      	ldr	r0, [r4, #4]
 8008f8c:	f7ff ff82 	bl	8008e94 <std>
 8008f90:	68a0      	ldr	r0, [r4, #8]
 8008f92:	2201      	movs	r2, #1
 8008f94:	2109      	movs	r1, #9
 8008f96:	f7ff ff7d 	bl	8008e94 <std>
 8008f9a:	68e0      	ldr	r0, [r4, #12]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	2112      	movs	r1, #18
 8008fa0:	f7ff ff78 	bl	8008e94 <std>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	61a3      	str	r3, [r4, #24]
 8008fa8:	e7d2      	b.n	8008f50 <__sinit+0xc>
 8008faa:	bf00      	nop
 8008fac:	080095a0 	.word	0x080095a0
 8008fb0:	08008edd 	.word	0x08008edd

08008fb4 <__sfp>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	4607      	mov	r7, r0
 8008fb8:	f7ff ffac 	bl	8008f14 <__sfp_lock_acquire>
 8008fbc:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <__sfp+0x84>)
 8008fbe:	681e      	ldr	r6, [r3, #0]
 8008fc0:	69b3      	ldr	r3, [r6, #24]
 8008fc2:	b913      	cbnz	r3, 8008fca <__sfp+0x16>
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7ff ffbd 	bl	8008f44 <__sinit>
 8008fca:	3648      	adds	r6, #72	; 0x48
 8008fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	d503      	bpl.n	8008fdc <__sfp+0x28>
 8008fd4:	6833      	ldr	r3, [r6, #0]
 8008fd6:	b30b      	cbz	r3, 800901c <__sfp+0x68>
 8008fd8:	6836      	ldr	r6, [r6, #0]
 8008fda:	e7f7      	b.n	8008fcc <__sfp+0x18>
 8008fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fe0:	b9d5      	cbnz	r5, 8009018 <__sfp+0x64>
 8008fe2:	4b16      	ldr	r3, [pc, #88]	; (800903c <__sfp+0x88>)
 8008fe4:	60e3      	str	r3, [r4, #12]
 8008fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fea:	6665      	str	r5, [r4, #100]	; 0x64
 8008fec:	f000 f847 	bl	800907e <__retarget_lock_init_recursive>
 8008ff0:	f7ff ff96 	bl	8008f20 <__sfp_lock_release>
 8008ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ffc:	6025      	str	r5, [r4, #0]
 8008ffe:	61a5      	str	r5, [r4, #24]
 8009000:	2208      	movs	r2, #8
 8009002:	4629      	mov	r1, r5
 8009004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009008:	f7fe ff22 	bl	8007e50 <memset>
 800900c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009014:	4620      	mov	r0, r4
 8009016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009018:	3468      	adds	r4, #104	; 0x68
 800901a:	e7d9      	b.n	8008fd0 <__sfp+0x1c>
 800901c:	2104      	movs	r1, #4
 800901e:	4638      	mov	r0, r7
 8009020:	f7ff ff62 	bl	8008ee8 <__sfmoreglue>
 8009024:	4604      	mov	r4, r0
 8009026:	6030      	str	r0, [r6, #0]
 8009028:	2800      	cmp	r0, #0
 800902a:	d1d5      	bne.n	8008fd8 <__sfp+0x24>
 800902c:	f7ff ff78 	bl	8008f20 <__sfp_lock_release>
 8009030:	230c      	movs	r3, #12
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	e7ee      	b.n	8009014 <__sfp+0x60>
 8009036:	bf00      	nop
 8009038:	080095a0 	.word	0x080095a0
 800903c:	ffff0001 	.word	0xffff0001

08009040 <_fwalk_reent>:
 8009040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009044:	4606      	mov	r6, r0
 8009046:	4688      	mov	r8, r1
 8009048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800904c:	2700      	movs	r7, #0
 800904e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009052:	f1b9 0901 	subs.w	r9, r9, #1
 8009056:	d505      	bpl.n	8009064 <_fwalk_reent+0x24>
 8009058:	6824      	ldr	r4, [r4, #0]
 800905a:	2c00      	cmp	r4, #0
 800905c:	d1f7      	bne.n	800904e <_fwalk_reent+0xe>
 800905e:	4638      	mov	r0, r7
 8009060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009064:	89ab      	ldrh	r3, [r5, #12]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d907      	bls.n	800907a <_fwalk_reent+0x3a>
 800906a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800906e:	3301      	adds	r3, #1
 8009070:	d003      	beq.n	800907a <_fwalk_reent+0x3a>
 8009072:	4629      	mov	r1, r5
 8009074:	4630      	mov	r0, r6
 8009076:	47c0      	blx	r8
 8009078:	4307      	orrs	r7, r0
 800907a:	3568      	adds	r5, #104	; 0x68
 800907c:	e7e9      	b.n	8009052 <_fwalk_reent+0x12>

0800907e <__retarget_lock_init_recursive>:
 800907e:	4770      	bx	lr

08009080 <__retarget_lock_acquire_recursive>:
 8009080:	4770      	bx	lr

08009082 <__retarget_lock_release_recursive>:
 8009082:	4770      	bx	lr

08009084 <__swhatbuf_r>:
 8009084:	b570      	push	{r4, r5, r6, lr}
 8009086:	460e      	mov	r6, r1
 8009088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908c:	2900      	cmp	r1, #0
 800908e:	b096      	sub	sp, #88	; 0x58
 8009090:	4614      	mov	r4, r2
 8009092:	461d      	mov	r5, r3
 8009094:	da08      	bge.n	80090a8 <__swhatbuf_r+0x24>
 8009096:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	602a      	str	r2, [r5, #0]
 800909e:	061a      	lsls	r2, r3, #24
 80090a0:	d410      	bmi.n	80090c4 <__swhatbuf_r+0x40>
 80090a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a6:	e00e      	b.n	80090c6 <__swhatbuf_r+0x42>
 80090a8:	466a      	mov	r2, sp
 80090aa:	f000 f951 	bl	8009350 <_fstat_r>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	dbf1      	blt.n	8009096 <__swhatbuf_r+0x12>
 80090b2:	9a01      	ldr	r2, [sp, #4]
 80090b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090bc:	425a      	negs	r2, r3
 80090be:	415a      	adcs	r2, r3
 80090c0:	602a      	str	r2, [r5, #0]
 80090c2:	e7ee      	b.n	80090a2 <__swhatbuf_r+0x1e>
 80090c4:	2340      	movs	r3, #64	; 0x40
 80090c6:	2000      	movs	r0, #0
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	b016      	add	sp, #88	; 0x58
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080090d0 <__smakebuf_r>:
 80090d0:	898b      	ldrh	r3, [r1, #12]
 80090d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090d4:	079d      	lsls	r5, r3, #30
 80090d6:	4606      	mov	r6, r0
 80090d8:	460c      	mov	r4, r1
 80090da:	d507      	bpl.n	80090ec <__smakebuf_r+0x1c>
 80090dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	2301      	movs	r3, #1
 80090e6:	6163      	str	r3, [r4, #20]
 80090e8:	b002      	add	sp, #8
 80090ea:	bd70      	pop	{r4, r5, r6, pc}
 80090ec:	ab01      	add	r3, sp, #4
 80090ee:	466a      	mov	r2, sp
 80090f0:	f7ff ffc8 	bl	8009084 <__swhatbuf_r>
 80090f4:	9900      	ldr	r1, [sp, #0]
 80090f6:	4605      	mov	r5, r0
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff f873 	bl	80081e4 <_malloc_r>
 80090fe:	b948      	cbnz	r0, 8009114 <__smakebuf_r+0x44>
 8009100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009104:	059a      	lsls	r2, r3, #22
 8009106:	d4ef      	bmi.n	80090e8 <__smakebuf_r+0x18>
 8009108:	f023 0303 	bic.w	r3, r3, #3
 800910c:	f043 0302 	orr.w	r3, r3, #2
 8009110:	81a3      	strh	r3, [r4, #12]
 8009112:	e7e3      	b.n	80090dc <__smakebuf_r+0xc>
 8009114:	4b0d      	ldr	r3, [pc, #52]	; (800914c <__smakebuf_r+0x7c>)
 8009116:	62b3      	str	r3, [r6, #40]	; 0x28
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	6020      	str	r0, [r4, #0]
 800911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	6163      	str	r3, [r4, #20]
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	6120      	str	r0, [r4, #16]
 800912a:	b15b      	cbz	r3, 8009144 <__smakebuf_r+0x74>
 800912c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009130:	4630      	mov	r0, r6
 8009132:	f000 f91f 	bl	8009374 <_isatty_r>
 8009136:	b128      	cbz	r0, 8009144 <__smakebuf_r+0x74>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	89a0      	ldrh	r0, [r4, #12]
 8009146:	4305      	orrs	r5, r0
 8009148:	81a5      	strh	r5, [r4, #12]
 800914a:	e7cd      	b.n	80090e8 <__smakebuf_r+0x18>
 800914c:	08008edd 	.word	0x08008edd

08009150 <memmove>:
 8009150:	4288      	cmp	r0, r1
 8009152:	b510      	push	{r4, lr}
 8009154:	eb01 0402 	add.w	r4, r1, r2
 8009158:	d902      	bls.n	8009160 <memmove+0x10>
 800915a:	4284      	cmp	r4, r0
 800915c:	4623      	mov	r3, r4
 800915e:	d807      	bhi.n	8009170 <memmove+0x20>
 8009160:	1e43      	subs	r3, r0, #1
 8009162:	42a1      	cmp	r1, r4
 8009164:	d008      	beq.n	8009178 <memmove+0x28>
 8009166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800916a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800916e:	e7f8      	b.n	8009162 <memmove+0x12>
 8009170:	4402      	add	r2, r0
 8009172:	4601      	mov	r1, r0
 8009174:	428a      	cmp	r2, r1
 8009176:	d100      	bne.n	800917a <memmove+0x2a>
 8009178:	bd10      	pop	{r4, pc}
 800917a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800917e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009182:	e7f7      	b.n	8009174 <memmove+0x24>

08009184 <__malloc_lock>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__malloc_lock+0x8>)
 8009186:	f7ff bf7b 	b.w	8009080 <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	20000b40 	.word	0x20000b40

08009190 <__malloc_unlock>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__malloc_unlock+0x8>)
 8009192:	f7ff bf76 	b.w	8009082 <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	20000b40 	.word	0x20000b40

0800919c <_realloc_r>:
 800919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a0:	4680      	mov	r8, r0
 80091a2:	4614      	mov	r4, r2
 80091a4:	460e      	mov	r6, r1
 80091a6:	b921      	cbnz	r1, 80091b2 <_realloc_r+0x16>
 80091a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ac:	4611      	mov	r1, r2
 80091ae:	f7ff b819 	b.w	80081e4 <_malloc_r>
 80091b2:	b92a      	cbnz	r2, 80091c0 <_realloc_r+0x24>
 80091b4:	f7fe ffaa 	bl	800810c <_free_r>
 80091b8:	4625      	mov	r5, r4
 80091ba:	4628      	mov	r0, r5
 80091bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c0:	f000 f8fa 	bl	80093b8 <_malloc_usable_size_r>
 80091c4:	4284      	cmp	r4, r0
 80091c6:	4607      	mov	r7, r0
 80091c8:	d802      	bhi.n	80091d0 <_realloc_r+0x34>
 80091ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ce:	d812      	bhi.n	80091f6 <_realloc_r+0x5a>
 80091d0:	4621      	mov	r1, r4
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7ff f806 	bl	80081e4 <_malloc_r>
 80091d8:	4605      	mov	r5, r0
 80091da:	2800      	cmp	r0, #0
 80091dc:	d0ed      	beq.n	80091ba <_realloc_r+0x1e>
 80091de:	42bc      	cmp	r4, r7
 80091e0:	4622      	mov	r2, r4
 80091e2:	4631      	mov	r1, r6
 80091e4:	bf28      	it	cs
 80091e6:	463a      	movcs	r2, r7
 80091e8:	f7fe fe24 	bl	8007e34 <memcpy>
 80091ec:	4631      	mov	r1, r6
 80091ee:	4640      	mov	r0, r8
 80091f0:	f7fe ff8c 	bl	800810c <_free_r>
 80091f4:	e7e1      	b.n	80091ba <_realloc_r+0x1e>
 80091f6:	4635      	mov	r5, r6
 80091f8:	e7df      	b.n	80091ba <_realloc_r+0x1e>

080091fa <_raise_r>:
 80091fa:	291f      	cmp	r1, #31
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	d904      	bls.n	800920e <_raise_r+0x14>
 8009204:	2316      	movs	r3, #22
 8009206:	6003      	str	r3, [r0, #0]
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	bd38      	pop	{r3, r4, r5, pc}
 800920e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009210:	b112      	cbz	r2, 8009218 <_raise_r+0x1e>
 8009212:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009216:	b94b      	cbnz	r3, 800922c <_raise_r+0x32>
 8009218:	4620      	mov	r0, r4
 800921a:	f000 f831 	bl	8009280 <_getpid_r>
 800921e:	462a      	mov	r2, r5
 8009220:	4601      	mov	r1, r0
 8009222:	4620      	mov	r0, r4
 8009224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009228:	f000 b818 	b.w	800925c <_kill_r>
 800922c:	2b01      	cmp	r3, #1
 800922e:	d00a      	beq.n	8009246 <_raise_r+0x4c>
 8009230:	1c59      	adds	r1, r3, #1
 8009232:	d103      	bne.n	800923c <_raise_r+0x42>
 8009234:	2316      	movs	r3, #22
 8009236:	6003      	str	r3, [r0, #0]
 8009238:	2001      	movs	r0, #1
 800923a:	e7e7      	b.n	800920c <_raise_r+0x12>
 800923c:	2400      	movs	r4, #0
 800923e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009242:	4628      	mov	r0, r5
 8009244:	4798      	blx	r3
 8009246:	2000      	movs	r0, #0
 8009248:	e7e0      	b.n	800920c <_raise_r+0x12>
	...

0800924c <raise>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <raise+0xc>)
 800924e:	4601      	mov	r1, r0
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f7ff bfd2 	b.w	80091fa <_raise_r>
 8009256:	bf00      	nop
 8009258:	2000000c 	.word	0x2000000c

0800925c <_kill_r>:
 800925c:	b538      	push	{r3, r4, r5, lr}
 800925e:	4d07      	ldr	r5, [pc, #28]	; (800927c <_kill_r+0x20>)
 8009260:	2300      	movs	r3, #0
 8009262:	4604      	mov	r4, r0
 8009264:	4608      	mov	r0, r1
 8009266:	4611      	mov	r1, r2
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f7f8 fe43 	bl	8001ef4 <_kill>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d102      	bne.n	8009278 <_kill_r+0x1c>
 8009272:	682b      	ldr	r3, [r5, #0]
 8009274:	b103      	cbz	r3, 8009278 <_kill_r+0x1c>
 8009276:	6023      	str	r3, [r4, #0]
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	20000b44 	.word	0x20000b44

08009280 <_getpid_r>:
 8009280:	f7f8 be30 	b.w	8001ee4 <_getpid>

08009284 <__sread>:
 8009284:	b510      	push	{r4, lr}
 8009286:	460c      	mov	r4, r1
 8009288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800928c:	f000 f89c 	bl	80093c8 <_read_r>
 8009290:	2800      	cmp	r0, #0
 8009292:	bfab      	itete	ge
 8009294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009296:	89a3      	ldrhlt	r3, [r4, #12]
 8009298:	181b      	addge	r3, r3, r0
 800929a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800929e:	bfac      	ite	ge
 80092a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092a2:	81a3      	strhlt	r3, [r4, #12]
 80092a4:	bd10      	pop	{r4, pc}

080092a6 <__swrite>:
 80092a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092aa:	461f      	mov	r7, r3
 80092ac:	898b      	ldrh	r3, [r1, #12]
 80092ae:	05db      	lsls	r3, r3, #23
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	4616      	mov	r6, r2
 80092b6:	d505      	bpl.n	80092c4 <__swrite+0x1e>
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	2302      	movs	r3, #2
 80092be:	2200      	movs	r2, #0
 80092c0:	f000 f868 	bl	8009394 <_lseek_r>
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ce:	81a3      	strh	r3, [r4, #12]
 80092d0:	4632      	mov	r2, r6
 80092d2:	463b      	mov	r3, r7
 80092d4:	4628      	mov	r0, r5
 80092d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	f000 b817 	b.w	800930c <_write_r>

080092de <__sseek>:
 80092de:	b510      	push	{r4, lr}
 80092e0:	460c      	mov	r4, r1
 80092e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e6:	f000 f855 	bl	8009394 <_lseek_r>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	bf15      	itete	ne
 80092f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80092f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092fa:	81a3      	strheq	r3, [r4, #12]
 80092fc:	bf18      	it	ne
 80092fe:	81a3      	strhne	r3, [r4, #12]
 8009300:	bd10      	pop	{r4, pc}

08009302 <__sclose>:
 8009302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009306:	f000 b813 	b.w	8009330 <_close_r>
	...

0800930c <_write_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	; (800932c <_write_r+0x20>)
 8009310:	4604      	mov	r4, r0
 8009312:	4608      	mov	r0, r1
 8009314:	4611      	mov	r1, r2
 8009316:	2200      	movs	r2, #0
 8009318:	602a      	str	r2, [r5, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	f7f8 fe21 	bl	8001f62 <_write>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d102      	bne.n	800932a <_write_r+0x1e>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b103      	cbz	r3, 800932a <_write_r+0x1e>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd38      	pop	{r3, r4, r5, pc}
 800932c:	20000b44 	.word	0x20000b44

08009330 <_close_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	; (800934c <_close_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f8 fe2d 	bl	8001f9a <_close>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_close_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_close_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	20000b44 	.word	0x20000b44

08009350 <_fstat_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d07      	ldr	r5, [pc, #28]	; (8009370 <_fstat_r+0x20>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	4611      	mov	r1, r2
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	f7f8 fe28 	bl	8001fb2 <_fstat>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	d102      	bne.n	800936c <_fstat_r+0x1c>
 8009366:	682b      	ldr	r3, [r5, #0]
 8009368:	b103      	cbz	r3, 800936c <_fstat_r+0x1c>
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	bd38      	pop	{r3, r4, r5, pc}
 800936e:	bf00      	nop
 8009370:	20000b44 	.word	0x20000b44

08009374 <_isatty_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4d06      	ldr	r5, [pc, #24]	; (8009390 <_isatty_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7f8 fe27 	bl	8001fd2 <_isatty>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_isatty_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_isatty_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20000b44 	.word	0x20000b44

08009394 <_lseek_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	; (80093b4 <_lseek_r+0x20>)
 8009398:	4604      	mov	r4, r0
 800939a:	4608      	mov	r0, r1
 800939c:	4611      	mov	r1, r2
 800939e:	2200      	movs	r2, #0
 80093a0:	602a      	str	r2, [r5, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f7f8 fe20 	bl	8001fe8 <_lseek>
 80093a8:	1c43      	adds	r3, r0, #1
 80093aa:	d102      	bne.n	80093b2 <_lseek_r+0x1e>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b103      	cbz	r3, 80093b2 <_lseek_r+0x1e>
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	bd38      	pop	{r3, r4, r5, pc}
 80093b4:	20000b44 	.word	0x20000b44

080093b8 <_malloc_usable_size_r>:
 80093b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093bc:	1f18      	subs	r0, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	bfbc      	itt	lt
 80093c2:	580b      	ldrlt	r3, [r1, r0]
 80093c4:	18c0      	addlt	r0, r0, r3
 80093c6:	4770      	bx	lr

080093c8 <_read_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_read_r+0x20>)
 80093cc:	4604      	mov	r4, r0
 80093ce:	4608      	mov	r0, r1
 80093d0:	4611      	mov	r1, r2
 80093d2:	2200      	movs	r2, #0
 80093d4:	602a      	str	r2, [r5, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	f7f8 fda6 	bl	8001f28 <_read>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_read_r+0x1e>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_read_r+0x1e>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	20000b44 	.word	0x20000b44

080093ec <_init>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	bf00      	nop
 80093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093f2:	bc08      	pop	{r3}
 80093f4:	469e      	mov	lr, r3
 80093f6:	4770      	bx	lr

080093f8 <_fini>:
 80093f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fa:	bf00      	nop
 80093fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093fe:	bc08      	pop	{r3}
 8009400:	469e      	mov	lr, r3
 8009402:	4770      	bx	lr
