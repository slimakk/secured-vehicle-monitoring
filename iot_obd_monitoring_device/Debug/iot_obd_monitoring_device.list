
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b20c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800b3a0  0800b3a0  0001b3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b998  0800b998  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b998  0800b998  0001b998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9a0  0800b9a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9a0  0800b9a0  0001b9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9a4  0800b9a4  0001b9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b0  200001e0  0800bb84  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  0800bb84  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af7f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d29  00000000  00000000  0003b18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  000404c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002788b  00000000  00000000  00041938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dba2  00000000  00000000  000691c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40f5  00000000  00000000  00086d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016ae5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e68  00000000  00000000  0016aeac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b384 	.word	0x0800b384

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b384 	.word	0x0800b384

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <verify_checksum>:

	HAL_Delay(60);
}

static uint8_t verify_checksum (uint8_t *data, uint8_t lenght)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	e009      	b.n	8000f76 <verify_checksum+0x2a>
	{
		checksum += data[i];
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	4413      	add	r3, r2
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <verify_checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d101      	bne.n	8000f94 <verify_checksum+0x48>
	{
		return (TRUE);
 8000f90:	2301      	movs	r3, #1
 8000f92:	e000      	b.n	8000f96 <verify_checksum+0x4a>
	}
	return (FALSE);
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <kline_rx_callback>:

void kline_rx_callback(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <kline_rx_callback+0x94>)
 8000fac:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d107      	bne.n	8000fc4 <kline_rx_callback+0x20>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000fb4:	4821      	ldr	r0, [pc, #132]	; (800103c <kline_rx_callback+0x98>)
 8000fb6:	f005 faf9 	bl	80065ac <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <kline_rx_callback+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.msg_type = 0;
			obd_comm.current_value = obd2_pid_parse(rx_frame);
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8000fc2:	e035      	b.n	8001030 <kline_rx_callback+0x8c>
	else if (obd_comm.msg_type == 2)
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <kline_rx_callback+0x94>)
 8000fc6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d130      	bne.n	8001030 <kline_rx_callback+0x8c>
		if(verify_checksum(kline_rx_buf, pid_length + 5))
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <kline_rx_callback+0x9c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3305      	adds	r3, #5
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481a      	ldr	r0, [pc, #104]	; (8001044 <kline_rx_callback+0xa0>)
 8000fda:	f7ff ffb7 	bl	8000f4c <verify_checksum>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d025      	beq.n	8001030 <kline_rx_callback+0x8c>
			uint8_t j = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000fe8:	2302      	movs	r3, #2
 8000fea:	71bb      	strb	r3, [r7, #6]
 8000fec:	e00b      	b.n	8001006 <kline_rx_callback+0x62>
				rx_frame[j] = kline_rx_buf[i];
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4914      	ldr	r1, [pc, #80]	; (8001044 <kline_rx_callback+0xa0>)
 8000ff4:	5c89      	ldrb	r1, [r1, r2]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <kline_rx_callback+0xa4>)
 8000ff8:	54d1      	strb	r1, [r2, r3]
				j++;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	3301      	adds	r3, #1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	79ba      	ldrb	r2, [r7, #6]
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <kline_rx_callback+0x9c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3304      	adds	r3, #4
 800100e:	429a      	cmp	r2, r3
 8001010:	dded      	ble.n	8000fee <kline_rx_callback+0x4a>
			obd_comm.msg_type = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <kline_rx_callback+0x94>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.current_value = obd2_pid_parse(rx_frame);
 800101a:	480b      	ldr	r0, [pc, #44]	; (8001048 <kline_rx_callback+0xa4>)
 800101c:	f000 f870 	bl	8001100 <obd2_pid_parse>
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <kline_rx_callback+0x94>)
 8001026:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
			HAL_IWDG_Refresh(&hiwdg);
 800102a:	4808      	ldr	r0, [pc, #32]	; (800104c <kline_rx_callback+0xa8>)
 800102c:	f004 f85e 	bl	80050ec <HAL_IWDG_Refresh>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200002f8 	.word	0x200002f8
 800103c:	20000460 	.word	0x20000460
 8001040:	20000213 	.word	0x20000213
 8001044:	200001fc 	.word	0x200001fc
 8001048:	2000020c 	.word	0x2000020c
 800104c:	200002e8 	.word	0x200002e8

08001050 <obd2_pid_decode>:
extern OBD obd_comm;

static void obd2_pid_decode(uint8_t* rx_frame);

static void obd2_pid_decode(uint8_t* rx_frame)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	uint8_t number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3303      	adds	r3, #3
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	061b      	lsls	r3, r3, #24
 8001060:	b25a      	sxtb	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3304      	adds	r3, #4
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	041b      	lsls	r3, r3, #16
 800106a:	b25b      	sxtb	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b25a      	sxtb	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3305      	adds	r3, #5
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b25b      	sxtb	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	b25a      	sxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3306      	adds	r3, #6
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b25b      	sxtb	r3, r3
 800108a:	72fb      	strb	r3, [r7, #11]
	uint8_t j = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 32;
 8001090:	2320      	movs	r3, #32
 8001092:	73bb      	strb	r3, [r7, #14]
	uint8_t l = 64;
 8001094:	2340      	movs	r3, #64	; 0x40
 8001096:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8001098:	231f      	movs	r3, #31
 800109a:	733b      	strb	r3, [r7, #12]
	{
		uint8_t digit = number >> i;
 800109c:	7afa      	ldrb	r2, [r7, #11]
 800109e:	7b3b      	ldrb	r3, [r7, #12]
 80010a0:	fa42 f303 	asr.w	r3, r2, r3
 80010a4:	72bb      	strb	r3, [r7, #10]
		digit &= 1;
 80010a6:	7abb      	ldrb	r3, [r7, #10]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	72bb      	strb	r3, [r7, #10]
		if(obd_comm.pid == 0x00)
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <obd2_pid_decode+0xac>)
 80010b0:	785b      	ldrb	r3, [r3, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d108      	bne.n	80010c8 <obd2_pid_decode+0x78>
		{
			obd_comm.available_pids[j] = digit;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	4a10      	ldr	r2, [pc, #64]	; (80010fc <obd2_pid_decode+0xac>)
 80010ba:	4413      	add	r3, r2
 80010bc:	7aba      	ldrb	r2, [r7, #10]
 80010be:	70da      	strb	r2, [r3, #3]
			j++;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	3301      	adds	r3, #1
 80010c4:	73fb      	strb	r3, [r7, #15]
 80010c6:	e014      	b.n	80010f2 <obd2_pid_decode+0xa2>
		}
		else if(obd_comm.pid == 0x20)
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <obd2_pid_decode+0xac>)
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d108      	bne.n	80010e2 <obd2_pid_decode+0x92>
		{
			obd_comm.available_pids[k] = digit;
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <obd2_pid_decode+0xac>)
 80010d4:	4413      	add	r3, r2
 80010d6:	7aba      	ldrb	r2, [r7, #10]
 80010d8:	70da      	strb	r2, [r3, #3]
			k++;
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	3301      	adds	r3, #1
 80010de:	73bb      	strb	r3, [r7, #14]
 80010e0:	e007      	b.n	80010f2 <obd2_pid_decode+0xa2>
		}
		else
		{
			obd_comm.available_pids[l] = digit;
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <obd2_pid_decode+0xac>)
 80010e6:	4413      	add	r3, r2
 80010e8:	7aba      	ldrb	r2, [r7, #10]
 80010ea:	70da      	strb	r2, [r3, #3]
			l++;
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	3301      	adds	r3, #1
 80010f0:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	733b      	strb	r3, [r7, #12]
	{
 80010f8:	e7d0      	b.n	800109c <obd2_pid_decode+0x4c>
 80010fa:	bf00      	nop
 80010fc:	200002f8 	.word	0x200002f8

08001100 <obd2_pid_parse>:
		}
	}
}

float obd2_pid_parse(uint8_t* rx_frame)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3302      	adds	r3, #2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2ba6      	cmp	r3, #166	; 0xa6
 8001116:	f200 83b6 	bhi.w	8001886 <obd2_pid_parse+0x786>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <obd2_pid_parse+0x20>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	080013bd 	.word	0x080013bd
 8001124:	08001887 	.word	0x08001887
 8001128:	08001887 	.word	0x08001887
 800112c:	08001887 	.word	0x08001887
 8001130:	080013cb 	.word	0x080013cb
 8001134:	080013d3 	.word	0x080013d3
 8001138:	080013e9 	.word	0x080013e9
 800113c:	080013e9 	.word	0x080013e9
 8001140:	080013e9 	.word	0x080013e9
 8001144:	080013e9 	.word	0x080013e9
 8001148:	080013ef 	.word	0x080013ef
 800114c:	0800140b 	.word	0x0800140b
 8001150:	0800141f 	.word	0x0800141f
 8001154:	08001445 	.word	0x08001445
 8001158:	08001459 	.word	0x08001459
 800115c:	08001473 	.word	0x08001473
 8001160:	08001489 	.word	0x08001489
 8001164:	080014b3 	.word	0x080014b3
 8001168:	08001887 	.word	0x08001887
 800116c:	08001887 	.word	0x08001887
 8001170:	080014bb 	.word	0x080014bb
 8001174:	080014bb 	.word	0x080014bb
 8001178:	080014bb 	.word	0x080014bb
 800117c:	080014bb 	.word	0x080014bb
 8001180:	080014bb 	.word	0x080014bb
 8001184:	080014bb 	.word	0x080014bb
 8001188:	080014bb 	.word	0x080014bb
 800118c:	080014bb 	.word	0x080014bb
 8001190:	08001887 	.word	0x08001887
 8001194:	08001887 	.word	0x08001887
 8001198:	08001887 	.word	0x08001887
 800119c:	080014d9 	.word	0x080014d9
 80011a0:	080014f7 	.word	0x080014f7
 80011a4:	080014d9 	.word	0x080014d9
 80011a8:	08001505 	.word	0x08001505
 80011ac:	08001537 	.word	0x08001537
 80011b0:	0800155d 	.word	0x0800155d
 80011b4:	0800155d 	.word	0x0800155d
 80011b8:	0800155d 	.word	0x0800155d
 80011bc:	0800155d 	.word	0x0800155d
 80011c0:	0800155d 	.word	0x0800155d
 80011c4:	0800155d 	.word	0x0800155d
 80011c8:	0800155d 	.word	0x0800155d
 80011cc:	0800155d 	.word	0x0800155d
 80011d0:	08001565 	.word	0x08001565
 80011d4:	0800156d 	.word	0x0800156d
 80011d8:	08001573 	.word	0x08001573
 80011dc:	08001573 	.word	0x08001573
 80011e0:	0800157b 	.word	0x0800157b
 80011e4:	0800158f 	.word	0x0800158f
 80011e8:	080015ad 	.word	0x080015ad
 80011ec:	080015d3 	.word	0x080015d3
 80011f0:	080015e7 	.word	0x080015e7
 80011f4:	080015e7 	.word	0x080015e7
 80011f8:	080015e7 	.word	0x080015e7
 80011fc:	080015e7 	.word	0x080015e7
 8001200:	080015e7 	.word	0x080015e7
 8001204:	080015e7 	.word	0x080015e7
 8001208:	080015e7 	.word	0x080015e7
 800120c:	080015e7 	.word	0x080015e7
 8001210:	080015ef 	.word	0x080015ef
 8001214:	080015ef 	.word	0x080015ef
 8001218:	080015ef 	.word	0x080015ef
 800121c:	080015ef 	.word	0x080015ef
 8001220:	0800161b 	.word	0x0800161b
 8001224:	08001887 	.word	0x08001887
 8001228:	08001629 	.word	0x08001629
 800122c:	08001653 	.word	0x08001653
 8001230:	0800165b 	.word	0x0800165b
 8001234:	08001663 	.word	0x08001663
 8001238:	0800166b 	.word	0x0800166b
 800123c:	08001681 	.word	0x08001681
 8001240:	08001681 	.word	0x08001681
 8001244:	08001681 	.word	0x08001681
 8001248:	08001681 	.word	0x08001681
 800124c:	08001681 	.word	0x08001681
 8001250:	08001681 	.word	0x08001681
 8001254:	08001689 	.word	0x08001689
 8001258:	08001689 	.word	0x08001689
 800125c:	080016a7 	.word	0x080016a7
 8001260:	08001887 	.word	0x08001887
 8001264:	08001887 	.word	0x08001887
 8001268:	080016bb 	.word	0x080016bb
 800126c:	080016dd 	.word	0x080016dd
 8001270:	0800170f 	.word	0x0800170f
 8001274:	08001733 	.word	0x08001733
 8001278:	08001733 	.word	0x08001733
 800127c:	08001733 	.word	0x08001733
 8001280:	08001733 	.word	0x08001733
 8001284:	08001739 	.word	0x08001739
 8001288:	08001757 	.word	0x08001757
 800128c:	08001757 	.word	0x08001757
 8001290:	0800175f 	.word	0x0800175f
 8001294:	08001775 	.word	0x08001775
 8001298:	0800177b 	.word	0x0800177b
 800129c:	08001887 	.word	0x08001887
 80012a0:	08001887 	.word	0x08001887
 80012a4:	080017ad 	.word	0x080017ad
 80012a8:	080017ad 	.word	0x080017ad
 80012ac:	080017c3 	.word	0x080017c3
 80012b0:	080017e1 	.word	0x080017e1
 80012b4:	08001887 	.word	0x08001887
 80012b8:	080017f7 	.word	0x080017f7
 80012bc:	080017ff 	.word	0x080017ff
 80012c0:	080017ff 	.word	0x080017ff
 80012c4:	08001887 	.word	0x08001887
 80012c8:	08001887 	.word	0x08001887
 80012cc:	08001887 	.word	0x08001887
 80012d0:	08001887 	.word	0x08001887
 80012d4:	08001887 	.word	0x08001887
 80012d8:	08001887 	.word	0x08001887
 80012dc:	08001887 	.word	0x08001887
 80012e0:	08001887 	.word	0x08001887
 80012e4:	08001887 	.word	0x08001887
 80012e8:	08001887 	.word	0x08001887
 80012ec:	08001887 	.word	0x08001887
 80012f0:	08001887 	.word	0x08001887
 80012f4:	08001887 	.word	0x08001887
 80012f8:	08001887 	.word	0x08001887
 80012fc:	08001887 	.word	0x08001887
 8001300:	08001887 	.word	0x08001887
 8001304:	08001887 	.word	0x08001887
 8001308:	08001887 	.word	0x08001887
 800130c:	08001887 	.word	0x08001887
 8001310:	08001815 	.word	0x08001815
 8001314:	08001887 	.word	0x08001887
 8001318:	08001887 	.word	0x08001887
 800131c:	08001887 	.word	0x08001887
 8001320:	08001887 	.word	0x08001887
 8001324:	08001887 	.word	0x08001887
 8001328:	08001887 	.word	0x08001887
 800132c:	08001887 	.word	0x08001887
 8001330:	08001887 	.word	0x08001887
 8001334:	08001887 	.word	0x08001887
 8001338:	08001887 	.word	0x08001887
 800133c:	08001887 	.word	0x08001887
 8001340:	08001887 	.word	0x08001887
 8001344:	08001887 	.word	0x08001887
 8001348:	08001887 	.word	0x08001887
 800134c:	08001887 	.word	0x08001887
 8001350:	08001887 	.word	0x08001887
 8001354:	08001887 	.word	0x08001887
 8001358:	08001887 	.word	0x08001887
 800135c:	08001887 	.word	0x08001887
 8001360:	08001887 	.word	0x08001887
 8001364:	08001887 	.word	0x08001887
 8001368:	08001887 	.word	0x08001887
 800136c:	08001887 	.word	0x08001887
 8001370:	08001887 	.word	0x08001887
 8001374:	08001887 	.word	0x08001887
 8001378:	08001887 	.word	0x08001887
 800137c:	08001887 	.word	0x08001887
 8001380:	08001887 	.word	0x08001887
 8001384:	08001887 	.word	0x08001887
 8001388:	08001887 	.word	0x08001887
 800138c:	08001887 	.word	0x08001887
 8001390:	08001887 	.word	0x08001887
 8001394:	08001887 	.word	0x08001887
 8001398:	08001887 	.word	0x08001887
 800139c:	08001887 	.word	0x08001887
 80013a0:	08001887 	.word	0x08001887
 80013a4:	08001887 	.word	0x08001887
 80013a8:	08001887 	.word	0x08001887
 80013ac:	08001887 	.word	0x08001887
 80013b0:	08001887 	.word	0x08001887
 80013b4:	08001887 	.word	0x08001887
 80013b8:	08001841 	.word	0x08001841
	{
	case 0x00:
		obd2_pid_decode(rx_frame);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fe47 	bl	8001050 <obd2_pid_decode>
		value = 0;
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
		break;
 80013c8:	e260      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x04:
		value = (100/255)*rx_frame[3];
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
		break;
 80013d0:	e25c      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x05:
		value = rx_frame[3] - 40;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3303      	adds	r3, #3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3b28      	subs	r3, #40	; 0x28
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80013e6:	e251      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 80013e8:	4bb9      	ldr	r3, [pc, #740]	; (80016d0 <obd2_pid_parse+0x5d0>)
 80013ea:	60fb      	str	r3, [r7, #12]
		break;
 80013ec:	e24e      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0A:
		value = 3 * rx_frame[3];
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3303      	adds	r3, #3
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001408:	e240      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0B:
		value = rx_frame[3];
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3303      	adds	r3, #3
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001418:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800141c:	e236      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3303      	adds	r3, #3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	3204      	adds	r2, #4
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	4313      	orrs	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	da00      	bge.n	8001434 <obd2_pid_parse+0x334>
 8001432:	3303      	adds	r3, #3
 8001434:	109b      	asrs	r3, r3, #2
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001442:	e223      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0D:
		value = rx_frame[3];
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3303      	adds	r3, #3
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001452:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001456:	e219      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3303      	adds	r3, #3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	3b40      	subs	r3, #64	; 0x40
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001470:	e20c      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3303      	adds	r3, #3
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b28      	subs	r3, #40	; 0x28
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001486:	e201      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3303      	adds	r3, #3
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	3204      	adds	r2, #4
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4313      	orrs	r3, r2
 8001498:	4a8e      	ldr	r2, [pc, #568]	; (80016d4 <obd2_pid_parse+0x5d4>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014b0:	e1ec      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x11:
		value = (100/255)*rx_frame[3];
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
		break;
 80014b8:	e1e8      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3303      	adds	r3, #3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4a84      	ldr	r2, [pc, #528]	; (80016d4 <obd2_pid_parse+0x5d4>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	099b      	lsrs	r3, r3, #6
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014d6:	e1d9      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3303      	adds	r3, #3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	3204      	adds	r2, #4
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014f4:	e1ca      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x20:
		obd2_pid_decode(rx_frame);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fdaa 	bl	8001050 <obd2_pid_decode>
		value = 0;
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
		break;
 8001502:	e1c3      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3303      	adds	r3, #3
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	3204      	adds	r2, #4
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	4313      	orrs	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f805 	bl	8000524 <__aeabi_i2d>
 800151a:	a36b      	add	r3, pc, #428	; (adr r3, 80016c8 <obd2_pid_parse+0x5c8>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f86a 	bl	80005f8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fb3c 	bl	8000ba8 <__aeabi_d2f>
 8001530:	4603      	mov	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]
		break;
 8001534:	e1aa      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3303      	adds	r3, #3
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	3204      	adds	r2, #4
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	431a      	orrs	r2, r3
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001556:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800155a:	e197      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
		break;
 8001562:	e193      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
		break;
 800156a:	e18f      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <obd2_pid_parse+0x5d0>)
 800156e:	60fb      	str	r3, [r7, #12]
		break;
 8001570:	e18c      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
		break;
 8001578:	e188      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x30:
		value = rx_frame[3];
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3303      	adds	r3, #3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	ee07 3a90 	vmov	s15, r3
 8001584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001588:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800158c:	e17e      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3303      	adds	r3, #3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	3204      	adds	r2, #4
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	4313      	orrs	r3, r2
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015aa:	e16f      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3303      	adds	r3, #3
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	3204      	adds	r2, #4
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	da00      	bge.n	80015c2 <obd2_pid_parse+0x4c2>
 80015c0:	3303      	adds	r3, #3
 80015c2:	109b      	asrs	r3, r3, #2
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015cc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015d0:	e15c      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x33:
		value = rx_frame[3];
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3303      	adds	r3, #3
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	ee07 3a90 	vmov	s15, r3
 80015dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015e4:	e152      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
		break;
 80015ec:	e14e      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3303      	adds	r3, #3
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	3204      	adds	r2, #4
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <obd2_pid_parse+0x5d4>)
 8001600:	fb82 1203 	smull	r1, r2, r2, r3
 8001604:	1152      	asrs	r2, r2, #5
 8001606:	17db      	asrs	r3, r3, #31
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	3b28      	subs	r3, #40	; 0x28
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001618:	e138      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x40:
		obd2_pid_decode(rx_frame);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fd18 	bl	8001050 <obd2_pid_decode>
		value = 0;
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
		break;
 8001626:	e131      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3303      	adds	r3, #3
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	3204      	adds	r2, #4
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <obd2_pid_parse+0x5d8>)
 800163a:	fb82 1203 	smull	r1, r2, r2, r3
 800163e:	1192      	asrs	r2, r2, #6
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001650:	e11c      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
		break;
 8001658:	e118      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
		break;
 8001660:	e114      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
		break;
 8001668:	e110      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x46:
		value = rx_frame[3] - 40;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3303      	adds	r3, #3
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b28      	subs	r3, #40	; 0x28
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800167e:	e105      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
		break;
 8001686:	e101      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3303      	adds	r3, #3
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	3204      	adds	r2, #4
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016a4:	e0f2      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x4F:
		value = rx_frame[3];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3303      	adds	r3, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016b8:	e0e8      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x52:
		value = (100/255)*rx_frame[3];
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
		break;
 80016c0:	e0e4      	b.n	800188c <obd2_pid_parse+0x78c>
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	10624dd3 	.word	0x10624dd3
 80016cc:	3fb43958 	.word	0x3fb43958
 80016d0:	c2c80000 	.word	0xc2c80000
 80016d4:	51eb851f 	.word	0x51eb851f
 80016d8:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3303      	adds	r3, #3
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	3204      	adds	r2, #4
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	a373      	add	r3, pc, #460	; (adr r3, 80018c0 <obd2_pid_parse+0x7c0>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff7e 	bl	80005f8 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa50 	bl	8000ba8 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	60fb      	str	r3, [r7, #12]
		break;
 800170c:	e0be      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3303      	adds	r3, #3
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	3204      	adds	r2, #4
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001722:	3b7f      	subs	r3, #127	; 0x7f
 8001724:	ee07 3a90 	vmov	s15, r3
 8001728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001730:	e0ac      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <obd2_pid_parse+0x7b0>)
 8001734:	60fb      	str	r3, [r7, #12]
		break;
 8001736:	e0a9      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3303      	adds	r3, #3
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	3204      	adds	r2, #4
 8001744:	7812      	ldrb	r2, [r2, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001750:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001754:	e09a      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
		break;
 800175c:	e096      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x5C:
		value =  rx_frame[3] - 40;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3303      	adds	r3, #3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	3b28      	subs	r3, #40	; 0x28
 8001766:	ee07 3a90 	vmov	s15, r3
 800176a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001772:	e08b      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001774:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <obd2_pid_parse+0x7b4>)
 8001776:	60fb      	str	r3, [r7, #12]
		break;
 8001778:	e088      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3303      	adds	r3, #3
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	3204      	adds	r2, #4
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feca 	bl	8000524 <__aeabi_i2d>
 8001790:	a343      	add	r3, pc, #268	; (adr r3, 80018a0 <obd2_pid_parse+0x7a0>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe ff2f 	bl	80005f8 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff fa01 	bl	8000ba8 <__aeabi_d2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	60fb      	str	r3, [r7, #12]
		break;
 80017aa:	e06f      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3303      	adds	r3, #3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3b7d      	subs	r3, #125	; 0x7d
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017c0:	e064      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	3204      	adds	r2, #4
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017de:	e055      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x64:
		value = rx_frame[3] - 125;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3303      	adds	r3, #3
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3b7d      	subs	r3, #125	; 0x7d
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017f4:	e04a      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
		break;
 80017fc:	e046      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3303      	adds	r3, #3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	3b28      	subs	r3, #40	; 0x28
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001812:	e03b      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3303      	adds	r3, #3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	3204      	adds	r2, #4
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <obd2_pid_parse+0x7b8>)
 8001826:	fb82 1203 	smull	r1, r2, r2, r3
 800182a:	1152      	asrs	r2, r2, #5
 800182c:	17db      	asrs	r3, r3, #31
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	3b28      	subs	r3, #40	; 0x28
 8001832:	ee07 3a90 	vmov	s15, r3
 8001836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800183e:	e025      	b.n	800188c <obd2_pid_parse+0x78c>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3303      	adds	r3, #3
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	061a      	lsls	r2, r3, #24
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3304      	adds	r3, #4
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	041b      	lsls	r3, r3, #16
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3305      	adds	r3, #5
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	4313      	orrs	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	3206      	adds	r2, #6
 8001860:	7812      	ldrb	r2, [r2, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fe5d 	bl	8000524 <__aeabi_i2d>
 800186a:	a30f      	add	r3, pc, #60	; (adr r3, 80018a8 <obd2_pid_parse+0x7a8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fec2 	bl	80005f8 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f994 	bl	8000ba8 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	60fb      	str	r3, [r7, #12]
		break;
 8001884:	e002      	b.n	800188c <obd2_pid_parse+0x78c>
	default:
		value = 255;
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <obd2_pid_parse+0x7bc>)
 8001888:	60fb      	str	r3, [r7, #12]
		break;
 800188a:	bf00      	nop
	}
	return (value);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	ee07 3a90 	vmov	s15, r3
}
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fa99999 	.word	0x3fa99999
 80018a8:	9999999a 	.word	0x9999999a
 80018ac:	3fb99999 	.word	0x3fb99999
 80018b0:	c2c80000 	.word	0xc2c80000
 80018b4:	c3520000 	.word	0xc3520000
 80018b8:	51eb851f 	.word	0x51eb851f
 80018bc:	437f0000 	.word	0x437f0000
 80018c0:	47ae147b 	.word	0x47ae147b
 80018c4:	3f747ae1 	.word	0x3f747ae1

080018c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	obd_comm.msg_type = 0;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	f107 0214 	add.w	r2, r7, #20
 80018e0:	2100      	movs	r1, #0
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80018e4:	f002 fc40 	bl	8004168 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = obd2_pid_parse(rx_data);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc07 	bl	8001100 <obd2_pid_parse>
 80018f2:	eef0 7a40 	vmov.f32	s15, s0
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80018f8:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

	HAL_IWDG_Refresh(&hiwdg);
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80018fe:	f003 fbf5 	bl	80050ec <HAL_IWDG_Refresh>
}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002f8 	.word	0x200002f8
 8001910:	20000214 	.word	0x20000214
 8001914:	200002e8 	.word	0x200002e8

08001918 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	60da      	str	r2, [r3, #12]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <MX_ADC1_Init+0xbc>)
 800194c:	4a29      	ldr	r2, [pc, #164]	; (80019f4 <MX_ADC1_Init+0xc0>)
 800194e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001952:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001956:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001958:	4b25      	ldr	r3, [pc, #148]	; (80019f0 <MX_ADC1_Init+0xbc>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001964:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <MX_ADC1_Init+0xbc>)
 800196c:	2204      	movs	r2, #4
 800196e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001972:	2200      	movs	r2, #0
 8001974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001978:	2201      	movs	r2, #1
 800197a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <MX_ADC1_Init+0xbc>)
 800197e:	2201      	movs	r2, #1
 8001980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <MX_ADC1_Init+0xbc>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001992:	2200      	movs	r2, #0
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_ADC1_Init+0xbc>)
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_ADC1_Init+0xbc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_ADC1_Init+0xbc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ac:	4810      	ldr	r0, [pc, #64]	; (80019f0 <MX_ADC1_Init+0xbc>)
 80019ae:	f001 feb3 	bl	8003718 <HAL_ADC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80019b8:	f000 fc11 	bl	80021de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80019bc:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_ADC1_Init+0xc4>)
 80019be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019c0:	2306      	movs	r3, #6
 80019c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c8:	237f      	movs	r3, #127	; 0x7f
 80019ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019cc:	2304      	movs	r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_ADC1_Init+0xbc>)
 80019da:	f001 ffe5 	bl	80039a8 <HAL_ADC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80019e4:	f000 fbfb 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000023c 	.word	0x2000023c
 80019f4:	50040000 	.word	0x50040000
 80019f8:	3ac04000 	.word	0x3ac04000

080019fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0a0      	sub	sp, #128	; 0x80
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	225c      	movs	r2, #92	; 0x5c
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f006 fcc5 	bl	80083ac <memset>
  if(adcHandle->Instance==ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a3a      	ldr	r2, [pc, #232]	; (8001b10 <HAL_ADC_MspInit+0x114>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d16d      	bne.n	8001b08 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a30:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a44:	2307      	movs	r3, #7
 8001a46:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f004 f9f0 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001a66:	f000 fbba 	bl	80021de <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_ADC_MspInit+0x118>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a9e:	230b      	movs	r3, #11
 8001aa0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <HAL_ADC_MspInit+0x11c>)
 8001aae:	f003 f98b 	bl	8004dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ab4:	4a1a      	ldr	r2, [pc, #104]	; (8001b20 <HAL_ADC_MspInit+0x124>)
 8001ab6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ade:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001aee:	f002 ff85 	bl	80049fc <HAL_DMA_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001af8:	f000 fb71 	bl	80021de <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001b00:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b02:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <HAL_ADC_MspInit+0x120>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3780      	adds	r7, #128	; 0x80
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	50040000 	.word	0x50040000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	200002a0 	.word	0x200002a0
 8001b20:	40020008 	.word	0x40020008

08001b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_DMA_Init+0x48>)
 8001b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	; (8001b6c <MX_DMA_Init+0x48>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6493      	str	r3, [r2, #72]	; 0x48
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <MX_DMA_Init+0x48>)
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200b      	movs	r0, #11
 8001b48:	f002 ff21 	bl	800498e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f002 ff3a 	bl	80049c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200f      	movs	r0, #15
 8001b58:	f002 ff19 	bl	800498e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b5c:	200f      	movs	r0, #15
 8001b5e:	f002 ff32 	bl	80049c6 <HAL_NVIC_EnableIRQ>

}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a44      	ldr	r2, [pc, #272]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <MX_GPIO_Init+0x144>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	210c      	movs	r1, #12
 8001c02:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <MX_GPIO_Init+0x148>)
 8001c04:	f003 fa5a 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001c0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c12:	f003 fa53 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2104      	movs	r1, #4
 8001c1a:	4828      	ldr	r0, [pc, #160]	; (8001cbc <MX_GPIO_Init+0x14c>)
 8001c1c:	f003 fa4e 	bl	80050bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 8001c20:	230c      	movs	r3, #12
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4820      	ldr	r0, [pc, #128]	; (8001cb8 <MX_GPIO_Init+0x148>)
 8001c38:	f003 f8c6 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 8001c3c:	2350      	movs	r3, #80	; 0x50
 8001c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c52:	f003 f8b9 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 8001c56:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c72:	f003 f8a9 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8001c76:	2304      	movs	r3, #4
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480b      	ldr	r0, [pc, #44]	; (8001cbc <MX_GPIO_Init+0x14c>)
 8001c8e:	f003 f89b 	bl	8004dc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001c92:	2308      	movs	r3, #8
 8001c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_GPIO_Init+0x150>)
 8001ca6:	f003 f88f 	bl	8004dc8 <HAL_GPIO_Init>

}
 8001caa:	bf00      	nop
 8001cac:	3728      	adds	r7, #40	; 0x28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000800 	.word	0x48000800
 8001cbc:	48000c00 	.word	0x48000c00
 8001cc0:	48001c00 	.word	0x48001c00

08001cc4 <createJson>:
		buffer[i][1] = obd.current_value;
	}
}

static void createJson(char buff[1000], float array[][2], int num_of_values)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b0a5      	sub	sp, #148	; 0x94
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
    char json_string [10] = "{\n";
 8001cd0:	f640 237b 	movw	r3, #2683	; 0xa7b
 8001cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cd6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	809a      	strh	r2, [r3, #4]
    char temp[100];
    sprintf(buff, json_string);
 8001ce0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f006 ffd2 	bl	8008c90 <siprintf>
    for (int i = 0; i <= num_of_values - 1; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001cf2:	e053      	b.n	8001d9c <createJson+0xd8>
    {
        if(i == num_of_values - 1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <createJson+0x80>
        {
        	sprintf(temp, "\"0x%x\":%.2f}\n", (uint8_t)array[i][0], array[i][1]);
 8001d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	4413      	add	r3, r2
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d12:	edc7 7a00 	vstr	s15, [r7]
 8001d16:	783b      	ldrb	r3, [r7, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461c      	mov	r4, r3
 8001d1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4413      	add	r3, r2
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc0d 	bl	8000548 <__aeabi_f2d>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	f107 0014 	add.w	r0, r7, #20
 8001d36:	e9cd 2300 	strd	r2, r3, [sp]
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	491c      	ldr	r1, [pc, #112]	; (8001db0 <createJson+0xec>)
 8001d3e:	f006 ffa7 	bl	8008c90 <siprintf>
 8001d42:	e020      	b.n	8001d86 <createJson+0xc2>
        }
        else
        {
        	sprintf(temp, "\"0x%x\":%.2f,\n", (uint8_t)array[i][0], array[i][1]);
 8001d44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	edd3 7a00 	vldr	s15, [r3]
 8001d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d56:	edc7 7a00 	vstr	s15, [r7]
 8001d5a:	783b      	ldrb	r3, [r7, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461c      	mov	r4, r3
 8001d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbeb 	bl	8000548 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	f107 0014 	add.w	r0, r7, #20
 8001d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7e:	4622      	mov	r2, r4
 8001d80:	490c      	ldr	r1, [pc, #48]	; (8001db4 <createJson+0xf0>)
 8001d82:	f006 ff85 	bl	8008c90 <siprintf>
        }
        strcat(buff, temp);
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f006 ff9f 	bl	8008cd0 <strcat>
    for (int i = 0; i <= num_of_values - 1; i++)
 8001d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dca6      	bgt.n	8001cf4 <createJson+0x30>
    }
//    strcat(buff, "}\n");
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	378c      	adds	r7, #140	; 0x8c
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	0800b3a0 	.word	0x0800b3a0
 8001db4:	0800b3b0 	.word	0x0800b3b0

08001db8 <mqtt_start>:

static uint8_t mqtt_start(BG77 module)
{
 8001db8:	b084      	sub	sp, #16
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	f107 0c08 	add.w	ip, r7, #8
 8001dc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	}
//	else
//	{
//		return FALSE;
//	}
	mqtt_open(MQTT_IP,  MQTT_PORT, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f240 715b 	movw	r1, #1883	; 0x75b
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <mqtt_start+0x3c>)
 8001dce:	f000 ffd9 	bl	8002d84 <mqtt_open>
	HAL_Delay(10000);
 8001dd2:	f242 7010 	movw	r0, #10000	; 0x2710
 8001dd6:	f001 faef 	bl	80033b8 <HAL_Delay>
	mqtt_connect(0,"obd2", &module);
 8001dda:	f107 0208 	add.w	r2, r7, #8
 8001dde:	4906      	ldr	r1, [pc, #24]	; (8001df8 <mqtt_start+0x40>)
 8001de0:	2000      	movs	r0, #0
 8001de2:	f001 f863 	bl	8002eac <mqtt_connect>

	return (TRUE);
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001df0:	b004      	add	sp, #16
 8001df2:	4770      	bx	lr
 8001df4:	0800b3c0 	.word	0x0800b3c0
 8001df8:	0800b3d0 	.word	0x0800b3d0

08001dfc <mqtt_stop>:

static uint8_t mqtt_stop(BG77 module)
{
 8001dfc:	b084      	sub	sp, #16
 8001dfe:	b5b0      	push	{r4, r5, r7, lr}
 8001e00:	b090      	sub	sp, #64	; 0x40
 8001e02:	af10      	add	r7, sp, #64	; 0x40
 8001e04:	f107 0410 	add.w	r4, r7, #16
 8001e08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(mqtt_disconnect(0))
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f001 f8ed 	bl	8002fec <mqtt_disconnect>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d019      	beq.n	8001e4c <mqtt_stop+0x50>
	{
		if(mqtt_close(0, module))
 8001e18:	466d      	mov	r5, sp
 8001e1a:	f107 0418 	add.w	r4, r7, #24
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	cb0c      	ldmia	r3, {r2, r3}
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f001 f94f 	bl	80030dc <mqtt_close>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <mqtt_stop+0x4c>
		{
			return (FALSE);
 8001e44:	2300      	movs	r3, #0
 8001e46:	e002      	b.n	8001e4e <mqtt_stop+0x52>
		}
		else
		{
			return (TRUE);
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <mqtt_stop+0x52>
		}
	}
	else
	{
		return (TRUE);
 8001e4c:	2301      	movs	r3, #1
	}
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001e56:	b004      	add	sp, #16
 8001e58:	4770      	bx	lr
 8001e5a:	0000      	movs	r0, r0
 8001e5c:	0000      	movs	r0, r0
	...

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	f2ad 4d4c 	subw	sp, sp, #1100	; 0x44c
 8001e66:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	float mqtt_buf[3][2] = {{0x05,75.0},{0x0C, 50.0},{0x0D, 1500}};
 8001e68:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <main+0x2a0>)
 8001e6a:	f507 747b 	add.w	r4, r7, #1004	; 0x3ec
 8001e6e:	461d      	mov	r5, r3
 8001e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e78:	e884 0003 	stmia.w	r4, {r0, r1}
	char buffer[1000];
	uint32_t timer = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	uint32_t timer_t = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	uint8_t rand_or = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e8e:	f001 fa1f 	bl	80032d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e92:	f000 f93f 	bl	8002114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e96:	f7ff fe6b 	bl	8001b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e9a:	f7ff fe43 	bl	8001b24 <MX_DMA_Init>
  MX_ADC1_Init();
 8001e9e:	f7ff fd49 	bl	8001934 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001ea2:	f000 fc79 	bl	8002798 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001ea6:	f000 fcab 	bl	8002800 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001eaa:	f000 fcdd 	bl	8002868 <MX_USART3_UART_Init>
//  MX_IWDG_Init();
  MX_TIM6_Init();
 8001eae:	f000 fb6b 	bl	8002588 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001eb2:	f000 fb19 	bl	80024e8 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001eb6:	f000 fb9f 	bl	80025f8 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001eba:	f000 f97c 	bl	80021b6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  module.initialized = module_init(&module);
 8001ebe:	4891      	ldr	r0, [pc, #580]	; (8002104 <main+0x2a4>)
 8001ec0:	f000 feba 	bl	8002c38 <module_init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <main+0x2a4>)
 8001eca:	70da      	strb	r2, [r3, #3]
//  module.rssi = check_signal(module);
//  obd_comm.used_protocol = OBD2_Init();
//
//  acquire_vehicle_data(obd_comm, mqtt_buf);
  module.connected = mqtt_start(module);
 8001ecc:	4e8d      	ldr	r6, [pc, #564]	; (8002104 <main+0x2a4>)
 8001ece:	466d      	mov	r5, sp
 8001ed0:	f106 0410 	add.w	r4, r6, #16
 8001ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001eec:	f7ff ff64 	bl	8001db8 <mqtt_start>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4b83      	ldr	r3, [pc, #524]	; (8002104 <main+0x2a4>)
 8001ef6:	709a      	strb	r2, [r3, #2]

  createJson(buffer, mqtt_buf, 3);
 8001ef8:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2203      	movs	r2, #3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fedf 	bl	8001cc4 <createJson>

//  mqtt_publish(0,0,0,0,OBD_TOPIC, "Hello from the other side");

  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	4b7f      	ldr	r3, [pc, #508]	; (8002108 <main+0x2a8>)
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	2000      	movs	r0, #0
 8001f16:	f001 f95b 	bl	80031d0 <mqtt_publish>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((HAL_GetTick() - timer) >= 5000)
 8001f1a:	f001 fa41 	bl	80033a0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f240 80b1 	bls.w	8002092 <main+0x232>
	  {
		  if(rand_or == 0)
 8001f30:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d12a      	bne.n	8001f8e <main+0x12e>
		  {
			  mqtt_buf[0][1] += 1;
 8001f38:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f44:	edc7 7afc 	vstr	s15, [r7, #1008]	; 0x3f0
			  mqtt_buf[1][1] += 20.5;
 8001f48:	edd7 7afe 	vldr	s15, [r7, #1016]	; 0x3f8
 8001f4c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800210c <main+0x2ac>
 8001f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f54:	edc7 7afe 	vstr	s15, [r7, #1016]	; 0x3f8
			  mqtt_buf[2][1] += 21.8;
 8001f58:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	a35c      	add	r3, pc, #368	; (adr r3, 80020d8 <main+0x278>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe f98f 	bl	800028c <__adddf3>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4610      	mov	r0, r2
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fe17 	bl	8000ba8 <__aeabi_d2f>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001f80:	6013      	str	r3, [r2, #0]
			  rand_or++;
 8001f82:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001f86:	3301      	adds	r3, #1
 8001f88:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
 8001f8c:	e06c      	b.n	8002068 <main+0x208>
		  }
		  else if(rand_or == 1)
 8001f8e:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d135      	bne.n	8002002 <main+0x1a2>
		  {
			  mqtt_buf[0][1] += 2;
 8001f96:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8001f9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa2:	edc7 7afc 	vstr	s15, [r7, #1008]	; 0x3f0
			  mqtt_buf[1][1] += 12.2;
 8001fa6:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe facc 	bl	8000548 <__aeabi_f2d>
 8001fb0:	a34b      	add	r3, pc, #300	; (adr r3, 80020e0 <main+0x280>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	f7fe f969 	bl	800028c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fdf1 	bl	8000ba8 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  mqtt_buf[2][1] += 54.7;
 8001fcc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fab8 	bl	8000548 <__aeabi_f2d>
 8001fd8:	a343      	add	r3, pc, #268	; (adr r3, 80020e8 <main+0x288>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe f955 	bl	800028c <__adddf3>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fddd 	bl	8000ba8 <__aeabi_d2f>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8001ff4:	6013      	str	r3, [r2, #0]
			  rand_or++;
 8001ff6:	f897 340b 	ldrb.w	r3, [r7, #1035]	; 0x40b
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
 8002000:	e032      	b.n	8002068 <main+0x208>
		  }
		  else
		  {
			  mqtt_buf[0][1] -= 5.5;
 8002002:	edd7 7afc 	vldr	s15, [r7, #1008]	; 0x3f0
 8002006:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
 800200a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800200e:	edc7 7afc 	vstr	s15, [r7, #1008]	; 0x3f0
			  mqtt_buf[1][1] -= 15.7;
 8002012:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa96 	bl	8000548 <__aeabi_f2d>
 800201c:	a334      	add	r3, pc, #208	; (adr r3, 80020f0 <main+0x290>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe f931 	bl	8000288 <__aeabi_dsub>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fdbb 	bl	8000ba8 <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
 8002034:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
			  mqtt_buf[2][1] -= 28.9;
 8002038:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa82 	bl	8000548 <__aeabi_f2d>
 8002044:	a32c      	add	r3, pc, #176	; (adr r3, 80020f8 <main+0x298>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe f91d 	bl	8000288 <__aeabi_dsub>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fda7 	bl	8000ba8 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002060:	6013      	str	r3, [r2, #0]
			  rand_or = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
		  }
		  createJson(buffer, mqtt_buf, 3);
 8002068:	f507 717b 	add.w	r1, r7, #1004	; 0x3ec
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2203      	movs	r2, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe27 	bl	8001cc4 <createJson>
		  mqtt_publish(0,0,0,0,OBD_TOPIC, buffer);
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <main+0x2a8>)
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	2200      	movs	r2, #0
 8002082:	2100      	movs	r1, #0
 8002084:	2000      	movs	r0, #0
 8002086:	f001 f8a3 	bl	80031d0 <mqtt_publish>
		  timer = HAL_GetTick();
 800208a:	f001 f989 	bl	80033a0 <HAL_GetTick>
 800208e:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	  }
	  if((HAL_GetTick() - timer_t) >= 1000000)
 8002092:	f001 f985 	bl	80033a0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <main+0x2b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f67f af3a 	bls.w	8001f1a <main+0xba>
	  {
		  module.connected = mqtt_stop(module);
 80020a6:	4e17      	ldr	r6, [pc, #92]	; (8002104 <main+0x2a4>)
 80020a8:	466d      	mov	r5, sp
 80020aa:	f106 0410 	add.w	r4, r6, #16
 80020ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020be:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020c6:	f7ff fe99 	bl	8001dfc <mqtt_stop>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <main+0x2a4>)
 80020d0:	709a      	strb	r2, [r3, #2]
	  if((HAL_GetTick() - timer) >= 5000)
 80020d2:	e722      	b.n	8001f1a <main+0xba>
 80020d4:	f3af 8000 	nop.w
 80020d8:	cccccccd 	.word	0xcccccccd
 80020dc:	4035cccc 	.word	0x4035cccc
 80020e0:	66666666 	.word	0x66666666
 80020e4:	40286666 	.word	0x40286666
 80020e8:	9999999a 	.word	0x9999999a
 80020ec:	404b5999 	.word	0x404b5999
 80020f0:	66666666 	.word	0x66666666
 80020f4:	402f6666 	.word	0x402f6666
 80020f8:	66666666 	.word	0x66666666
 80020fc:	403ce666 	.word	0x403ce666
 8002100:	0800b3e4 	.word	0x0800b3e4
 8002104:	200003c8 	.word	0x200003c8
 8002108:	0800b3d8 	.word	0x0800b3d8
 800210c:	41a40000 	.word	0x41a40000
 8002110:	000f423f 	.word	0x000f423f

08002114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b096      	sub	sp, #88	; 0x58
 8002118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	2244      	movs	r2, #68	; 0x44
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f006 f942 	bl	80083ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002136:	f44f 7000 	mov.w	r0, #512	; 0x200
 800213a:	f002 fff5 	bl	8005128 <HAL_PWREx_ControlVoltageScaling>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002144:	f000 f84b 	bl	80021de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002148:	2309      	movs	r3, #9
 800214a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002152:	2301      	movs	r3, #1
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002156:	2302      	movs	r3, #2
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800215a:	2303      	movs	r3, #3
 800215c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002162:	230a      	movs	r3, #10
 8002164:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002166:	2307      	movs	r3, #7
 8002168:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800216a:	2302      	movs	r3, #2
 800216c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800216e:	2302      	movs	r3, #2
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4618      	mov	r0, r3
 8002178:	f003 f82c 	bl	80051d4 <HAL_RCC_OscConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002182:	f000 f82c 	bl	80021de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002186:	230f      	movs	r3, #15
 8002188:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218a:	2303      	movs	r3, #3
 800218c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800219a:	463b      	mov	r3, r7
 800219c:	2104      	movs	r1, #4
 800219e:	4618      	mov	r0, r3
 80021a0:	f003 fc2c 	bl	80059fc <HAL_RCC_ClockConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021aa:	f000 f818 	bl	80021de <Error_Handler>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3758      	adds	r7, #88	; 0x58
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2010      	movs	r0, #16
 80021c0:	f002 fbe5 	bl	800498e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80021c4:	2010      	movs	r0, #16
 80021c6:	f002 fbfe 	bl	80049c6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2026      	movs	r0, #38	; 0x26
 80021d0:	f002 fbdd 	bl	800498e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021d4:	2026      	movs	r0, #38	; 0x26
 80021d6:	f002 fbf6 	bl	80049c6 <HAL_NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}

080021de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e2:	b672      	cpsid	i
}
 80021e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <Error_Handler+0x8>

080021e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <HAL_MspInit+0x44>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	4a0e      	ldr	r2, [pc, #56]	; (800222c <HAL_MspInit+0x44>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6613      	str	r3, [r2, #96]	; 0x60
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_MspInit+0x44>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	607b      	str	r3, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_MspInit+0x44>)
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6593      	str	r3, [r2, #88]	; 0x58
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_MspInit+0x44>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f001 f87c 	bl	8003378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <DMA1_Channel1_IRQHandler+0x10>)
 800228a:	f002 fcee 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200002a0 	.word	0x200002a0

08002298 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <DMA1_Channel5_IRQHandler+0x10>)
 800229e:	f002 fce4 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000684 	.word	0x20000684

080022ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <DMA1_Channel6_IRQHandler+0x10>)
 80022b2:	f002 fcda 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200006cc 	.word	0x200006cc

080022c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <CAN1_RX0_IRQHandler+0x10>)
 80022c6:	f002 f861 	bl	800438c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000214 	.word	0x20000214

080022d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <CAN1_RX1_IRQHandler+0x10>)
 80022da:	f002 f857 	bl	800438c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000214 	.word	0x20000214

080022e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <USART1_IRQHandler+0x10>)
 80022ee:	f004 fe57 	bl	8006fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200004f8 	.word	0x200004f8

080022fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <USART2_IRQHandler+0x10>)
 8002302:	f004 fe4d 	bl	8006fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2000057c 	.word	0x2000057c

08002310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM6_DAC_IRQHandler+0x10>)
 8002316:	f004 f978 	bl	800660a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000460 	.word	0x20000460

08002324 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <TIM7_IRQHandler+0x10>)
 800232a:	f004 f96e 	bl	800660a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200004ac 	.word	0x200004ac

08002338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_kill>:

int _kill(int pid, int sig)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002352:	f005 fff3 	bl	800833c <__errno>
 8002356:	4603      	mov	r3, r0
 8002358:	2216      	movs	r2, #22
 800235a:	601a      	str	r2, [r3, #0]
	return -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_exit>:

void _exit (int status)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002370:	f04f 31ff 	mov.w	r1, #4294967295
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ffe7 	bl	8002348 <_kill>
	while (1) {}		/* Make sure we hang here */
 800237a:	e7fe      	b.n	800237a <_exit+0x12>

0800237c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e00a      	b.n	80023a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800238e:	f3af 8000 	nop.w
 8002392:	4601      	mov	r1, r0
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	60ba      	str	r2, [r7, #8]
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbf0      	blt.n	800238e <_read+0x12>
	}

return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	e009      	b.n	80023dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	60ba      	str	r2, [r7, #8]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf1      	blt.n	80023c8 <_write+0x12>
	}
	return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_close>:

int _close(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return -1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002416:	605a      	str	r2, [r3, #4]
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_isatty>:

int _isatty(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	return 1;
 800242e:	2301      	movs	r3, #1
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
	return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002460:	4a14      	ldr	r2, [pc, #80]	; (80024b4 <_sbrk+0x5c>)
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <_sbrk+0x60>)
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_sbrk+0x64>)
 8002476:	4a12      	ldr	r2, [pc, #72]	; (80024c0 <_sbrk+0x68>)
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d207      	bcs.n	8002498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002488:	f005 ff58 	bl	800833c <__errno>
 800248c:	4603      	mov	r3, r0
 800248e:	220c      	movs	r2, #12
 8002490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	e009      	b.n	80024ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249e:	4b07      	ldr	r3, [pc, #28]	; (80024bc <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	4a05      	ldr	r2, [pc, #20]	; (80024bc <_sbrk+0x64>)
 80024a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024aa:	68fb      	ldr	r3, [r7, #12]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20010000 	.word	0x20010000
 80024b8:	00000400 	.word	0x00000400
 80024bc:	20000410 	.word	0x20000410
 80024c0:	20000790 	.word	0x20000790

080024c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <SystemInit+0x20>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <SystemInit+0x20>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ee:	f107 0310 	add.w	r3, r7, #16
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002506:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <MX_TIM2_Init+0x98>)
 8002508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800250c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 800250e:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <MX_TIM2_Init+0x98>)
 8002510:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <MX_TIM2_Init+0x98>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <MX_TIM2_Init+0x98>)
 800251e:	4a19      	ldr	r2, [pc, #100]	; (8002584 <MX_TIM2_Init+0x9c>)
 8002520:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <MX_TIM2_Init+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <MX_TIM2_Init+0x98>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <MX_TIM2_Init+0x98>)
 8002530:	f003 ff90 	bl	8006454 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800253a:	f7ff fe50 	bl	80021de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <MX_TIM2_Init+0x98>)
 800254c:	f004 f97c 	bl	8006848 <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002556:	f7ff fe42 	bl	80021de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <MX_TIM2_Init+0x98>)
 8002568:	f004 fb5e 	bl	8006c28 <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002572:	f7ff fe34 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000414 	.word	0x20000414
 8002584:	000f423f 	.word	0x000f423f

08002588 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <MX_TIM6_Init+0x68>)
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <MX_TIM6_Init+0x6c>)
 800259c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025a0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 80025ac:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025b2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ba:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025bc:	f003 ff4a 	bl	8006454 <HAL_TIM_Base_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025c6:	f7ff fe0a 	bl	80021de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <MX_TIM6_Init+0x68>)
 80025d8:	f004 fb26 	bl	8006c28 <HAL_TIMEx_MasterConfigSynchronization>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80025e2:	f7ff fdfc 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000460 	.word	0x20000460
 80025f4:	40001000 	.word	0x40001000

080025f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <MX_TIM7_Init+0x68>)
 800260a:	4a16      	ldr	r2, [pc, #88]	; (8002664 <MX_TIM7_Init+0x6c>)
 800260c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800260e:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_TIM7_Init+0x68>)
 8002610:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002614:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <MX_TIM7_Init+0x68>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1999;
 800261c:	4b10      	ldr	r3, [pc, #64]	; (8002660 <MX_TIM7_Init+0x68>)
 800261e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002622:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MX_TIM7_Init+0x68>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800262a:	480d      	ldr	r0, [pc, #52]	; (8002660 <MX_TIM7_Init+0x68>)
 800262c:	f003 ff12 	bl	8006454 <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002636:	f7ff fdd2 	bl	80021de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_TIM7_Init+0x68>)
 8002648:	f004 faee 	bl	8006c28 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002652:	f7ff fdc4 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004ac 	.word	0x200004ac
 8002664:	40001400 	.word	0x40001400

08002668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d10c      	bne.n	8002694 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002692:	e032      	b.n	80026fa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_TIM_Base_MspInit+0xa0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d114      	bne.n	80026c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	6593      	str	r3, [r2, #88]	; 0x58
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2036      	movs	r0, #54	; 0x36
 80026bc:	f002 f967 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026c0:	2036      	movs	r0, #54	; 0x36
 80026c2:	f002 f980 	bl	80049c6 <HAL_NVIC_EnableIRQ>
}
 80026c6:	e018      	b.n	80026fa <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_TIM_Base_MspInit+0xa4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d113      	bne.n	80026fa <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026d8:	f043 0320 	orr.w	r3, r3, #32
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_TIM_Base_MspInit+0x9c>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2102      	movs	r1, #2
 80026ee:	2037      	movs	r0, #55	; 0x37
 80026f0:	f002 f94d 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026f4:	2037      	movs	r0, #55	; 0x37
 80026f6:	f002 f966 	bl	80049c6 <HAL_NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40001000 	.word	0x40001000
 800270c:	40001400 	.word	0x40001400

08002710 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10e      	bne.n	8002740 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(obd_comm.msg_type == 0)
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002724:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 800272c:	bf00      	nop
 800272e:	e003      	b.n	8002738 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
		{
			obd_comm.msg_type = 3;
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002732:	2203      	movs	r2, #3
 8002734:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}
		HAL_TIM_Base_Stop_IT(&htim6);
 8002738:	4814      	ldr	r0, [pc, #80]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800273a:	f003 ff37 	bl	80065ac <HAL_TIM_Base_Stop_IT>
	else if(htim->Instance == TIM7)
	{
		module.received = 1;
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 800273e:	e01c      	b.n	800277a <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if(htim->Instance == TIM2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002748:	d10c      	bne.n	8002764 <HAL_TIM_PeriodElapsedCallback+0x54>
		if(module.received == 1)
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_TIM_PeriodElapsedCallback+0x46>
			__NOP();
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <HAL_TIM_PeriodElapsedCallback+0x4c>
			module.received = 2;
 8002756:	4b0e      	ldr	r3, [pc, #56]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002758:	2202      	movs	r2, #2
 800275a:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop_IT(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f003 ff25 	bl	80065ac <HAL_TIM_Base_Stop_IT>
}
 8002762:	e00a      	b.n	800277a <HAL_TIM_PeriodElapsedCallback+0x6a>
	else if(htim->Instance == TIM7)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d105      	bne.n	800277a <HAL_TIM_PeriodElapsedCallback+0x6a>
		module.received = 1;
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002770:	2201      	movs	r2, #1
 8002772:	711a      	strb	r2, [r3, #4]
		HAL_TIM_Base_Stop_IT(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f003 ff19 	bl	80065ac <HAL_TIM_Base_Stop_IT>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40001000 	.word	0x40001000
 8002788:	200002f8 	.word	0x200002f8
 800278c:	20000460 	.word	0x20000460
 8002790:	200003c8 	.word	0x200003c8
 8002794:	40001400 	.word	0x40001400

08002798 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800279c:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <MX_USART1_UART_Init+0x64>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027a4:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80027a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_USART1_UART_Init+0x60>)
 80027e4:	f004 faa4 	bl	8006d30 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80027ee:	f7ff fcf6 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200004f8 	.word	0x200004f8
 80027fc:	40013800 	.word	0x40013800

08002800 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002806:	4a17      	ldr	r2, [pc, #92]	; (8002864 <MX_USART2_UART_Init+0x64>)
 8002808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_USART2_UART_Init+0x60>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_USART2_UART_Init+0x60>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <MX_USART2_UART_Init+0x60>)
 800282c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002830:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002834:	2200      	movs	r2, #0
 8002836:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_USART2_UART_Init+0x60>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002840:	2208      	movs	r2, #8
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_USART2_UART_Init+0x60>)
 8002846:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800284a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <MX_USART2_UART_Init+0x60>)
 800284e:	f004 fa6f 	bl	8006d30 <HAL_UART_Init>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002858:	f7ff fcc1 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	2000057c 	.word	0x2000057c
 8002864:	40004400 	.word	0x40004400

08002868 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <MX_USART3_UART_Init+0x5c>)
 8002870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 8002874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 8002882:	2200      	movs	r2, #0
 8002884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 800288e:	220c      	movs	r2, #12
 8002890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_USART3_UART_Init+0x58>)
 80028ac:	f004 fa40 	bl	8006d30 <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80028b6:	f7ff fc92 	bl	80021de <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000600 	.word	0x20000600
 80028c4:	40004800 	.word	0x40004800

080028c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0a4      	sub	sp, #144	; 0x90
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e0:	f107 0320 	add.w	r3, r7, #32
 80028e4:	225c      	movs	r2, #92	; 0x5c
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f005 fd5f 	bl	80083ac <memset>
  if(uartHandle->Instance==USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a99      	ldr	r2, [pc, #612]	; (8002b58 <HAL_UART_MspInit+0x290>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d16b      	bne.n	80029d0 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028f8:	2301      	movs	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028fc:	2300      	movs	r3, #0
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002900:	f107 0320 	add.w	r3, r7, #32
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fa9b 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002910:	f7ff fc65 	bl	80021de <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002914:	4b91      	ldr	r3, [pc, #580]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	4a90      	ldr	r2, [pc, #576]	; (8002b5c <HAL_UART_MspInit+0x294>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6613      	str	r3, [r2, #96]	; 0x60
 8002920:	4b8e      	ldr	r3, [pc, #568]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <HAL_UART_MspInit+0x294>)
 800292e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002930:	4a8a      	ldr	r2, [pc, #552]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002938:	4b88      	ldr	r3, [pc, #544]	; (8002b5c <HAL_UART_MspInit+0x294>)
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 8002944:	23c0      	movs	r3, #192	; 0xc0
 8002946:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002954:	2303      	movs	r3, #3
 8002956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800295a:	2307      	movs	r3, #7
 800295c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002964:	4619      	mov	r1, r3
 8002966:	487e      	ldr	r0, [pc, #504]	; (8002b60 <HAL_UART_MspInit+0x298>)
 8002968:	f002 fa2e 	bl	8004dc8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800296c:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 800296e:	4a7e      	ldr	r2, [pc, #504]	; (8002b68 <HAL_UART_MspInit+0x2a0>)
 8002970:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002972:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 8002974:	2202      	movs	r2, #2
 8002976:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002978:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800297e:	4b79      	ldr	r3, [pc, #484]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002984:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 8002986:	2280      	movs	r2, #128	; 0x80
 8002988:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800298a:	4b76      	ldr	r3, [pc, #472]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002990:	4b74      	ldr	r3, [pc, #464]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800299c:	4b71      	ldr	r3, [pc, #452]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029a2:	4870      	ldr	r0, [pc, #448]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 80029a4:	f002 f82a 	bl	80049fc <HAL_DMA_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80029ae:	f7ff fc16 	bl	80021de <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a6b      	ldr	r2, [pc, #428]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 80029b6:	671a      	str	r2, [r3, #112]	; 0x70
 80029b8:	4a6a      	ldr	r2, [pc, #424]	; (8002b64 <HAL_UART_MspInit+0x29c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80029be:	2200      	movs	r2, #0
 80029c0:	2101      	movs	r1, #1
 80029c2:	2025      	movs	r0, #37	; 0x25
 80029c4:	f001 ffe3 	bl	800498e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80029c8:	2025      	movs	r0, #37	; 0x25
 80029ca:	f001 fffc 	bl	80049c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029ce:	e0bf      	b.n	8002b50 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a65      	ldr	r2, [pc, #404]	; (8002b6c <HAL_UART_MspInit+0x2a4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d17a      	bne.n	8002ad0 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80029da:	2302      	movs	r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80029de:	2300      	movs	r3, #0
 80029e0:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fa2a 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80029f2:	f7ff fbf4 	bl	80021de <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f6:	4b59      	ldr	r3, [pc, #356]	; (8002b5c <HAL_UART_MspInit+0x294>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	4a58      	ldr	r2, [pc, #352]	; (8002b5c <HAL_UART_MspInit+0x294>)
 80029fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
 8002a02:	4b56      	ldr	r3, [pc, #344]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a52      	ldr	r2, [pc, #328]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 8002a26:	230b      	movs	r3, #11
 8002a28:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a3c:	2307      	movs	r3, #7
 8002a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f002 f9bc 	bl	8004dc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 8002a50:	2304      	movs	r3, #4
 8002a52:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a66:	2307      	movs	r3, #7
 8002a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f002 f9a7 	bl	8004dc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a7c:	4a3d      	ldr	r2, [pc, #244]	; (8002b74 <HAL_UART_MspInit+0x2ac>)
 8002a7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002a80:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a82:	2202      	movs	r2, #2
 8002a84:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8c:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a94:	2280      	movs	r2, #128	; 0x80
 8002a96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a98:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aaa:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ab2:	482f      	ldr	r0, [pc, #188]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002ab4:	f001 ffa2 	bl	80049fc <HAL_DMA_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8002abe:	f7ff fb8e 	bl	80021de <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002ac6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ac8:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <HAL_UART_MspInit+0x2a8>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002ace:	e03f      	b.n	8002b50 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_UART_MspInit+0x2b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d13a      	bne.n	8002b50 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ada:	2304      	movs	r3, #4
 8002adc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae2:	f107 0320 	add.w	r3, r7, #32
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f9aa 	bl	8005e40 <HAL_RCCEx_PeriphCLKConfig>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002af2:	f7ff fb74 	bl	80021de <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
 8002b02:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_UART_MspInit+0x294>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002b26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b3e:	2307      	movs	r3, #7
 8002b40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	480c      	ldr	r0, [pc, #48]	; (8002b7c <HAL_UART_MspInit+0x2b4>)
 8002b4c:	f002 f93c 	bl	8004dc8 <HAL_GPIO_Init>
}
 8002b50:	bf00      	nop
 8002b52:	3790      	adds	r7, #144	; 0x90
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	20000684 	.word	0x20000684
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40004400 	.word	0x40004400
 8002b70:	200006cc 	.word	0x200006cc
 8002b74:	4002006c 	.word	0x4002006c
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	48000800 	.word	0x48000800

08002b80 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_UART_RxCpltCallback+0x2c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 8002b90:	f7fe fa08 	bl	8000fa4 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 8002b94:	e005      	b.n	8002ba2 <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_UART_RxCpltCallback+0x30>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 8002b9e:	f000 f8c7 	bl	8002d30 <nb_rx_callback>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200004f8 	.word	0x200004f8
 8002bb0:	2000057c 	.word	0x2000057c

08002bb4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 8002bc0:	f000 f8b6 	bl	8002d30 <nb_rx_callback>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	__NOP();
 8002bd4:	bf00      	nop
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002be8:	f7ff fc6c 	bl	80024c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bec:	480c      	ldr	r0, [pc, #48]	; (8002c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bee:	490d      	ldr	r1, [pc, #52]	; (8002c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	; (8002c28 <LoopForever+0xe>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf4:	e002      	b.n	8002bfc <LoopCopyDataInit>

08002bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfa:	3304      	adds	r3, #4

08002bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c00:	d3f9      	bcc.n	8002bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c04:	4c0a      	ldr	r4, [pc, #40]	; (8002c30 <LoopForever+0x16>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c08:	e001      	b.n	8002c0e <LoopFillZerobss>

08002c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c0c:	3204      	adds	r2, #4

08002c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c10:	d3fb      	bcc.n	8002c0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c12:	f005 fb99 	bl	8008348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c16:	f7ff f923 	bl	8001e60 <main>

08002c1a <LoopForever>:

LoopForever:
    b LoopForever
 8002c1a:	e7fe      	b.n	8002c1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c24:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c28:	0800b9a8 	.word	0x0800b9a8
  ldr r2, =_sbss
 8002c2c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c30:	20000790 	.word	0x20000790

08002c34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c34:	e7fe      	b.n	8002c34 <ADC1_IRQHandler>
	...

08002c38 <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	pointer to a BG77 struct
 */
uint8_t module_init(BG77 *module)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	uint8_t repeat = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
	power_on();
 8002c44:	f000 fb20 	bl	8003288 <power_on>
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 8002c48:	e007      	b.n	8002c5a <module_init+0x22>
	{
		if(repeat > MAX_REPEAT)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b0a      	cmp	r3, #10
 8002c4e:	d901      	bls.n	8002c54 <module_init+0x1c>
		{
			return (FALSE);
 8002c50:	2300      	movs	r3, #0
 8002c52:	e019      	b.n	8002c88 <module_init+0x50>
		}
		repeat++;
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3301      	adds	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
	while(send_command("AT\r\n", "OK", DEFAULT_TIMEOUT, NB) != (TRUE))
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <module_init+0x58>)
 8002c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c60:	490c      	ldr	r1, [pc, #48]	; (8002c94 <module_init+0x5c>)
 8002c62:	480d      	ldr	r0, [pc, #52]	; (8002c98 <module_init+0x60>)
 8002c64:	f000 f81c 	bl	8002ca0 <send_command>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d1ed      	bne.n	8002c4a <module_init+0x12>
	}
	if(send_command("ATE0\r\n", "OK", DEFAULT_TIMEOUT, NB))
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <module_init+0x58>)
 8002c70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <module_init+0x5c>)
 8002c76:	4809      	ldr	r0, [pc, #36]	; (8002c9c <module_init+0x64>)
 8002c78:	f000 f812 	bl	8002ca0 <send_command>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <module_init+0x4e>
	{
		return (TRUE);
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <module_init+0x50>
	}
	return (FALSE);
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	2000057c 	.word	0x2000057c
 8002c94:	0800b3fc 	.word	0x0800b3fc
 8002c98:	0800b400 	.word	0x0800b400
 8002c9c:	0800b408 	.word	0x0800b408

08002ca0 <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval (TRUE) if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <send_command+0x80>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	711a      	strb	r2, [r3, #4]
	clear_rx_buff();
 8002cb6:	f000 fafb 	bl	80032b0 <clear_rx_buff>
//	__HAL_UART_SEND_REQ(NB, UART_RXDATA_FLUSH_REQUEST);
	uint8_t length = strlen(command);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7fd fa88 	bl	80001d0 <strlen>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	75fb      	strb	r3, [r7, #23]
	HAL_UART_Receive_IT(interface, &rx_data, 1);
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4917      	ldr	r1, [pc, #92]	; (8002d24 <send_command+0x84>)
 8002cc8:	6838      	ldr	r0, [r7, #0]
 8002cca:	f004 f913 	bl	8006ef4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	68f9      	ldr	r1, [r7, #12]
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f004 f878 	bl	8006dcc <HAL_UART_Transmit>
//	HAL_TIM_Base_Start_IT(NB_TIMER);
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <send_command+0x88>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0201 	mvn.w	r2, #1
 8002ce4:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 8002ce6:	4810      	ldr	r0, [pc, #64]	; (8002d28 <send_command+0x88>)
 8002ce8:	f003 fc0c 	bl	8006504 <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 8002cec:	e000      	b.n	8002cf0 <send_command+0x50>
	{
		__NOP();
 8002cee:	bf00      	nop
	while(module.received == 0)
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <send_command+0x80>)
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0fa      	beq.n	8002cee <send_command+0x4e>
	}
	if(module.received != 1)
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <send_command+0x80>)
 8002cfa:	791b      	ldrb	r3, [r3, #4]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d001      	beq.n	8002d04 <send_command+0x64>
	{
		return (FALSE);
 8002d00:	2300      	movs	r3, #0
 8002d02:	e009      	b.n	8002d18 <send_command+0x78>
	}
	if(strstr((char *)rx_buffer, reply) != NULL)
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4809      	ldr	r0, [pc, #36]	; (8002d2c <send_command+0x8c>)
 8002d08:	f005 fff1 	bl	8008cee <strstr>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <send_command+0x76>
	{
		return (TRUE);
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <send_command+0x78>
	}
	return (FALSE);
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	200003c8 	.word	0x200003c8
 8002d24:	20000714 	.word	0x20000714
 8002d28:	200004ac 	.word	0x200004ac
 8002d2c:	20000718 	.word	0x20000718

08002d30 <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	rx_buffer[module.rx_index++] = rx_data;
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <nb_rx_callback+0x40>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	b2d1      	uxtb	r1, r2
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <nb_rx_callback+0x40>)
 8002d3e:	7011      	strb	r1, [r2, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <nb_rx_callback+0x44>)
 8002d44:	7819      	ldrb	r1, [r3, #0]
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <nb_rx_callback+0x48>)
 8002d48:	5499      	strb	r1, [r3, r2]
	HAL_TIM_Base_Stop_IT(UART_TIMER);
 8002d4a:	480c      	ldr	r0, [pc, #48]	; (8002d7c <nb_rx_callback+0x4c>)
 8002d4c:	f003 fc2e 	bl	80065ac <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_CLEAR_FLAG(UART_TIMER, TIM_SR_UIF);
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <nb_rx_callback+0x4c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0201 	mvn.w	r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(UART_TIMER);
 8002d5a:	4808      	ldr	r0, [pc, #32]	; (8002d7c <nb_rx_callback+0x4c>)
 8002d5c:	f003 fbd2 	bl	8006504 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(NB, &rx_data, 1);
 8002d60:	2201      	movs	r2, #1
 8002d62:	4904      	ldr	r1, [pc, #16]	; (8002d74 <nb_rx_callback+0x44>)
 8002d64:	4806      	ldr	r0, [pc, #24]	; (8002d80 <nb_rx_callback+0x50>)
 8002d66:	f004 f8c5 	bl	8006ef4 <HAL_UART_Receive_IT>
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200003c8 	.word	0x200003c8
 8002d74:	20000714 	.word	0x20000714
 8002d78:	20000718 	.word	0x20000718
 8002d7c:	200004ac 	.word	0x200004ac
 8002d80:	2000057c 	.word	0x2000057c

08002d84 <mqtt_open>:
 *	@param	port			Port of desired MQTT broker
 *	@param	id				Connection ID (0-5)
 *	@retval	(TRUE) or (FALSE) depending on the response
 * */
uint8_t mqtt_open(const char* broker_address, uint16_t port, uint8_t id)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0c8      	sub	sp, #288	; 0x120
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d8e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002d92:	6018      	str	r0, [r3, #0]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002d9c:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8002da0:	4602      	mov	r2, r0
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002da8:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8002dac:	460a      	mov	r2, r1
 8002dae:	701a      	strb	r2, [r3, #0]
//	wake_up();
	char command [COMMAND_SIZE];
	uint8_t ret [2] = {255};
 8002db0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002db4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command, "AT+QMTOPEN=%d,\"%s\",%d\r\n", id, broker_address, port);
 8002dc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002dc6:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8002dca:	7819      	ldrb	r1, [r3, #0]
 8002dcc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002dd0:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dde:	f107 0010 	add.w	r0, r7, #16
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	460a      	mov	r2, r1
 8002de8:	492a      	ldr	r1, [pc, #168]	; (8002e94 <mqtt_open+0x110>)
 8002dea:	f005 ff51 	bl	8008c90 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 8002dee:	f107 0010 	add.w	r0, r7, #16
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <mqtt_open+0x114>)
 8002df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df8:	4928      	ldr	r1, [pc, #160]	; (8002e9c <mqtt_open+0x118>)
 8002dfa:	f7ff ff51 	bl	8002ca0 <send_command>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <mqtt_open+0x84>
	{
		return (FALSE);
 8002e04:	2300      	movs	r3, #0
 8002e06:	e040      	b.n	8002e8a <mqtt_open+0x106>
	}
	char *token = strtok((char*)rx_buffer, " ");
 8002e08:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <mqtt_open+0x11c>)
 8002e0a:	4826      	ldr	r0, [pc, #152]	; (8002ea4 <mqtt_open+0x120>)
 8002e0c:	f005 ff86 	bl	8008d1c <strtok>
 8002e10:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 8002e14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <mqtt_open+0x9c>
	{
		return (FALSE);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e034      	b.n	8002e8a <mqtt_open+0x106>
	}
	token = strtok(NULL, ",");
 8002e20:	4921      	ldr	r1, [pc, #132]	; (8002ea8 <mqtt_open+0x124>)
 8002e22:	2000      	movs	r0, #0
 8002e24:	f005 ff7a 	bl	8008d1c <strtok>
 8002e28:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 8002e2c:	e01b      	b.n	8002e66 <mqtt_open+0xe2>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 8002e2e:	f107 0308 	add.w	r3, r7, #8
 8002e32:	220a      	movs	r2, #10
 8002e34:	4619      	mov	r1, r3
 8002e36:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8002e3a:	f006 f84d 	bl	8008ed8 <strtol>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e44:	b2d1      	uxtb	r1, r2
 8002e46:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8002e4a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002e4e:	54d1      	strb	r1, [r2, r3]
		token = strtok(NULL, ",");
 8002e50:	4915      	ldr	r1, [pc, #84]	; (8002ea8 <mqtt_open+0x124>)
 8002e52:	2000      	movs	r0, #0
 8002e54:	f005 ff62 	bl	8008d1c <strtok>
 8002e58:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8002e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e60:	3301      	adds	r3, #1
 8002e62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 8002e66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1df      	bne.n	8002e2e <mqtt_open+0xaa>
	}
	if(ret[1] == 0)
 8002e6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <mqtt_open+0xfc>
	{
		return (TRUE);
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e004      	b.n	8002e8a <mqtt_open+0x106>
	}
	return (ret[1]);
 8002e80:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e88:	785b      	ldrb	r3, [r3, #1]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	0800b44c 	.word	0x0800b44c
 8002e98:	2000057c 	.word	0x2000057c
 8002e9c:	0800b3fc 	.word	0x0800b3fc
 8002ea0:	0800b41c 	.word	0x0800b41c
 8002ea4:	20000718 	.word	0x20000718
 8002ea8:	0800b420 	.word	0x0800b420

08002eac <mqtt_connect>:
 * @param	module		pointer to a BG77 struct
 * @retval	return code for the command
 */
//TODO
uint8_t mqtt_connect(uint8_t id, const char* client_id, BG77 *module)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0c8      	sub	sp, #288	; 0x120
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002eb6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eba:	6019      	str	r1, [r3, #0]
 8002ebc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ec0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002eca:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ece:	4602      	mov	r2, r0
 8002ed0:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [3] = {255};
 8002ed2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002eda:	4a3d      	ldr	r2, [pc, #244]	; (8002fd0 <mqtt_connect+0x124>)
 8002edc:	8812      	ldrh	r2, [r2, #0]
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	709a      	strb	r2, [r3, #2]
	uint8_t i = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	sprintf(command, "AT+QMTCONN=%d,\"%s\"\r\n",id,client_id);
 8002eea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002eee:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ef2:	781a      	ldrb	r2, [r3, #0]
 8002ef4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ef8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002efc:	f107 0018 	add.w	r0, r7, #24
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <mqtt_connect+0x128>)
 8002f04:	f005 fec4 	bl	8008c90 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 8002f08:	f107 0018 	add.w	r0, r7, #24
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <mqtt_connect+0x12c>)
 8002f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f12:	4932      	ldr	r1, [pc, #200]	; (8002fdc <mqtt_connect+0x130>)
 8002f14:	f7ff fec4 	bl	8002ca0 <send_command>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <mqtt_connect+0x76>
	{
		return (FALSE);
 8002f1e:	2300      	movs	r3, #0
 8002f20:	e050      	b.n	8002fc4 <mqtt_connect+0x118>
	}
	char *token = strtok((char *)rx_buffer, " ");
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <mqtt_connect+0x134>)
 8002f24:	482f      	ldr	r0, [pc, #188]	; (8002fe4 <mqtt_connect+0x138>)
 8002f26:	f005 fef9 	bl	8008d1c <strtok>
 8002f2a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	if(!token)
 8002f2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <mqtt_connect+0x8e>
	{
		return (FALSE);
 8002f36:	2300      	movs	r3, #0
 8002f38:	e044      	b.n	8002fc4 <mqtt_connect+0x118>
	}
	token = strtok(NULL, ",");
 8002f3a:	492b      	ldr	r1, [pc, #172]	; (8002fe8 <mqtt_connect+0x13c>)
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f005 feed 	bl	8008d1c <strtok>
 8002f42:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 8002f46:	e01b      	b.n	8002f80 <mqtt_connect+0xd4>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8002f54:	f005 ffc0 	bl	8008ed8 <strtol>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f5e:	b2d1      	uxtb	r1, r2
 8002f60:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002f64:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002f68:	54d1      	strb	r1, [r2, r3]
		i++;
 8002f6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		token = strtok(NULL, ",");
 8002f74:	491c      	ldr	r1, [pc, #112]	; (8002fe8 <mqtt_connect+0x13c>)
 8002f76:	2000      	movs	r0, #0
 8002f78:	f005 fed0 	bl	8008d1c <strtok>
 8002f7c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	while(token != NULL)
 8002f80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1df      	bne.n	8002f48 <mqtt_connect+0x9c>
	}
	if(ret[1] == (0 | 1))
 8002f88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d115      	bne.n	8002fc2 <mqtt_connect+0x116>
	{
		switch(ret[2])
 8002f96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002f9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f9e:	789b      	ldrb	r3, [r3, #2]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <mqtt_connect+0xfc>
		{
			case 0:
				return (TRUE);
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e00d      	b.n	8002fc4 <mqtt_connect+0x118>
				break;
			default:
				module->error = ret[2];
 8002fa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fb0:	789a      	ldrb	r2, [r3, #2]
 8002fb2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	71da      	strb	r2, [r3, #7]
				return (FALSE);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e000      	b.n	8002fc4 <mqtt_connect+0x118>
		}
	}
	return (FALSE);
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	0800b47c 	.word	0x0800b47c
 8002fd4:	0800b464 	.word	0x0800b464
 8002fd8:	2000057c 	.word	0x2000057c
 8002fdc:	0800b3fc 	.word	0x0800b3fc
 8002fe0:	0800b41c 	.word	0x0800b41c
 8002fe4:	20000718 	.word	0x20000718
 8002fe8:	0800b420 	.word	0x0800b420

08002fec <mqtt_disconnect>:
 *	@brief	Disconnects for MQTT broker
 *	@param	id	 	Connection ID (0-5)
 *	@retval	(TRUE) if the disconnect is successful
 */
uint8_t mqtt_disconnect(uint8_t id)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0c6      	sub	sp, #280	; 0x118
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ff8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002ffc:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t ret [2] = {255};
 8002ffe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	sprintf(command,"AT+QMTDISC=%d\r\n",id);
 8003010:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003014:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	f107 0310 	add.w	r3, r7, #16
 800301e:	4929      	ldr	r1, [pc, #164]	; (80030c4 <mqtt_disconnect+0xd8>)
 8003020:	4618      	mov	r0, r3
 8003022:	f005 fe35 	bl	8008c90 <siprintf>
	if(!(send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 8003026:	f107 0010 	add.w	r0, r7, #16
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <mqtt_disconnect+0xdc>)
 800302c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003030:	4926      	ldr	r1, [pc, #152]	; (80030cc <mqtt_disconnect+0xe0>)
 8003032:	f7ff fe35 	bl	8002ca0 <send_command>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <mqtt_disconnect+0x54>
	{
		return (FALSE);
 800303c:	2300      	movs	r3, #0
 800303e:	e03c      	b.n	80030ba <mqtt_disconnect+0xce>
	}
	char *token = strtok((char *)rx_buffer, " ");
 8003040:	4923      	ldr	r1, [pc, #140]	; (80030d0 <mqtt_disconnect+0xe4>)
 8003042:	4824      	ldr	r0, [pc, #144]	; (80030d4 <mqtt_disconnect+0xe8>)
 8003044:	f005 fe6a 	bl	8008d1c <strtok>
 8003048:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 800304c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <mqtt_disconnect+0x6c>
	{
		return (FALSE);
 8003054:	2300      	movs	r3, #0
 8003056:	e030      	b.n	80030ba <mqtt_disconnect+0xce>
	}
	token = strtok(NULL, ",");
 8003058:	491f      	ldr	r1, [pc, #124]	; (80030d8 <mqtt_disconnect+0xec>)
 800305a:	2000      	movs	r0, #0
 800305c:	f005 fe5e 	bl	8008d1c <strtok>
 8003060:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 8003064:	e01b      	b.n	800309e <mqtt_disconnect+0xb2>
	{
		char *ptr;
		ret[i] = strtol(token, &ptr, 10);
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	220a      	movs	r2, #10
 800306c:	4619      	mov	r1, r3
 800306e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003072:	f005 ff31 	bl	8008ed8 <strtol>
 8003076:	4602      	mov	r2, r0
 8003078:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800307c:	b2d1      	uxtb	r1, r2
 800307e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8003082:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003086:	54d1      	strb	r1, [r2, r3]
		token = strtok(NULL, ",");
 8003088:	4913      	ldr	r1, [pc, #76]	; (80030d8 <mqtt_disconnect+0xec>)
 800308a:	2000      	movs	r0, #0
 800308c:	f005 fe46 	bl	8008d1c <strtok>
 8003090:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003098:	3301      	adds	r3, #1
 800309a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 800309e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1df      	bne.n	8003066 <mqtt_disconnect+0x7a>
	}
	if(ret[1] == 0)
 80030a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80030aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <mqtt_disconnect+0xcc>
	{
		return (TRUE);
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <mqtt_disconnect+0xce>
	}
	return (FALSE);
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	0800b480 	.word	0x0800b480
 80030c8:	2000057c 	.word	0x2000057c
 80030cc:	0800b3fc 	.word	0x0800b3fc
 80030d0:	0800b41c 	.word	0x0800b41c
 80030d4:	20000718 	.word	0x20000718
 80030d8:	0800b420 	.word	0x0800b420

080030dc <mqtt_close>:
 *	@param	id	 	Connection ID (0-5)
 *	@param	module	BG77 struct
 *	@retval	0 if the closure is successful, else or 1
 */
uint8_t mqtt_close(uint8_t id, BG77 module)
{
 80030dc:	b082      	sub	sp, #8
 80030de:	b580      	push	{r7, lr}
 80030e0:	b0c6      	sub	sp, #280	; 0x118
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4601      	mov	r1, r0
 80030e6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80030ea:	e880 000c 	stmia.w	r0, {r2, r3}
 80030ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80030f2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80030f6:	460a      	mov	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
	char command [COMMAND_SIZE];
	uint8_t i = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t ret = 255;
 8003100:	23ff      	movs	r3, #255	; 0xff
 8003102:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	sprintf(command,"AT+QMTCLOSE=%d\r\n",id);
 8003106:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800310a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	f107 0310 	add.w	r3, r7, #16
 8003114:	4928      	ldr	r1, [pc, #160]	; (80031b8 <mqtt_close+0xdc>)
 8003116:	4618      	mov	r0, r3
 8003118:	f005 fdba 	bl	8008c90 <siprintf>
	if((send_command(command, "OK", DEFAULT_TIMEOUT, NB)))
 800311c:	f107 0010 	add.w	r0, r7, #16
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <mqtt_close+0xe0>)
 8003122:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003126:	4926      	ldr	r1, [pc, #152]	; (80031c0 <mqtt_close+0xe4>)
 8003128:	f7ff fdba 	bl	8002ca0 <send_command>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <mqtt_close+0x5a>
	{
		return (1);
 8003132:	2301      	movs	r3, #1
 8003134:	e037      	b.n	80031a6 <mqtt_close+0xca>
	}
	char *token = strtok((char *)rx_buffer, " ");
 8003136:	4923      	ldr	r1, [pc, #140]	; (80031c4 <mqtt_close+0xe8>)
 8003138:	4823      	ldr	r0, [pc, #140]	; (80031c8 <mqtt_close+0xec>)
 800313a:	f005 fdef 	bl	8008d1c <strtok>
 800313e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	if(!token)
 8003142:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <mqtt_close+0x72>
	{
		return (1);
 800314a:	2301      	movs	r3, #1
 800314c:	e02b      	b.n	80031a6 <mqtt_close+0xca>
	}
	token = strtok(NULL, ",");
 800314e:	491f      	ldr	r1, [pc, #124]	; (80031cc <mqtt_close+0xf0>)
 8003150:	2000      	movs	r0, #0
 8003152:	f005 fde3 	bl	8008d1c <strtok>
 8003156:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	while(token != NULL)
 800315a:	e019      	b.n	8003190 <mqtt_close+0xb4>
	{
		if(i == 1)
 800315c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10a      	bne.n	800317a <mqtt_close+0x9e>
		{
			char *ptr;
			ret = strtol(token, &ptr, 10);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	220a      	movs	r2, #10
 800316a:	4619      	mov	r1, r3
 800316c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003170:	f005 feb2 	bl	8008ed8 <strtol>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		}
		token = strtok(NULL, ",");
 800317a:	4914      	ldr	r1, [pc, #80]	; (80031cc <mqtt_close+0xf0>)
 800317c:	2000      	movs	r0, #0
 800317e:	f005 fdcd 	bl	8008d1c <strtok>
 8003182:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		i++;
 8003186:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800318a:	3301      	adds	r3, #1
 800318c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while(token != NULL)
 8003190:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e1      	bne.n	800315c <mqtt_close+0x80>
	}
	if(ret == 0)
 8003198:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <mqtt_close+0xc8>
	{
		return (0);
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <mqtt_close+0xca>
	}
	return (1);
 80031a4:	2301      	movs	r3, #1
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80031ac:	46bd      	mov	sp, r7
 80031ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031b2:	b002      	add	sp, #8
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	0800b490 	.word	0x0800b490
 80031bc:	2000057c 	.word	0x2000057c
 80031c0:	0800b3fc 	.word	0x0800b3fc
 80031c4:	0800b41c 	.word	0x0800b41c
 80031c8:	20000718 	.word	0x20000718
 80031cc:	0800b420 	.word	0x0800b420

080031d0 <mqtt_publish>:
 *	@param	topic	MQTT topic
 *	@param	msg		data to be published
 *	@retval	(TRUE) if the publication is successful
 */
uint8_t mqtt_publish(uint8_t id, uint8_t msg_id, uint8_t qos, uint8_t retain, const char *topic, const char *msg)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b0c6      	sub	sp, #280	; 0x118
 80031d4:	af04      	add	r7, sp, #16
 80031d6:	4605      	mov	r5, r0
 80031d8:	460c      	mov	r4, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031e2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80031e6:	462a      	mov	r2, r5
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031ee:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80031f2:	4622      	mov	r2, r4
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031fa:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80031fe:	4602      	mov	r2, r0
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800320a:	460a      	mov	r2, r1
 800320c:	701a      	strb	r2, [r3, #0]
	char command[COMMAND_SIZE];
	sprintf(command, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",\"%s\"\r\n",id, msg_id, qos, retain, topic, msg);
 800320e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003212:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8003216:	781c      	ldrb	r4, [r3, #0]
 8003218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800321c:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8003220:	781d      	ldrb	r5, [r3, #0]
 8003222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003226:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8003230:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	f107 0008 	add.w	r0, r7, #8
 800323a:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800323e:	9103      	str	r1, [sp, #12]
 8003240:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003244:	9102      	str	r1, [sp, #8]
 8003246:	9201      	str	r2, [sp, #4]
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	462b      	mov	r3, r5
 800324c:	4622      	mov	r2, r4
 800324e:	490b      	ldr	r1, [pc, #44]	; (800327c <mqtt_publish+0xac>)
 8003250:	f005 fd1e 	bl	8008c90 <siprintf>
	if(send_command(command, "OK", DEFAULT_TIMEOUT, NB))
 8003254:	f107 0008 	add.w	r0, r7, #8
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <mqtt_publish+0xb0>)
 800325a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800325e:	4909      	ldr	r1, [pc, #36]	; (8003284 <mqtt_publish+0xb4>)
 8003260:	f7ff fd1e 	bl	8002ca0 <send_command>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <mqtt_publish+0x9e>
	{
		return (TRUE);
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <mqtt_publish+0xa0>
	}
	return (FALSE);
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003276:	46bd      	mov	sp, r7
 8003278:	bdb0      	pop	{r4, r5, r7, pc}
 800327a:	bf00      	nop
 800327c:	0800b4d8 	.word	0x0800b4d8
 8003280:	2000057c 	.word	0x2000057c
 8003284:	0800b3fc 	.word	0x0800b3fc

08003288 <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 800328c:	2201      	movs	r2, #1
 800328e:	2120      	movs	r1, #32
 8003290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003294:	f001 ff12 	bl	80050bc <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8003298:	f44f 7016 	mov.w	r0, #600	; 0x258
 800329c:	f000 f88c 	bl	80033b8 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 80032a0:	2200      	movs	r2, #0
 80032a2:	2120      	movs	r1, #32
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a8:	f001 ff08 	bl	80050bc <HAL_GPIO_WritePin>
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 80032b4:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <clear_rx_buff+0x18>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	701a      	strb	r2, [r3, #0]
	memset(rx_buffer, 0, sizeof(rx_buffer));
 80032ba:	2264      	movs	r2, #100	; 0x64
 80032bc:	2100      	movs	r1, #0
 80032be:	4803      	ldr	r0, [pc, #12]	; (80032cc <clear_rx_buff+0x1c>)
 80032c0:	f005 f874 	bl	80083ac <memset>
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200003c8 	.word	0x200003c8
 80032cc:	20000718 	.word	0x20000718

080032d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032da:	2003      	movs	r0, #3
 80032dc:	f001 fb4c 	bl	8004978 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032e0:	200f      	movs	r0, #15
 80032e2:	f000 f80d 	bl	8003300 <HAL_InitTick>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	71fb      	strb	r3, [r7, #7]
 80032f0:	e001      	b.n	80032f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032f2:	f7fe ff79 	bl	80021e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032f6:	79fb      	ldrb	r3, [r7, #7]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_InitTick+0x6c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_InitTick+0x70>)
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_InitTick+0x6c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003322:	fbb3 f3f1 	udiv	r3, r3, r1
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	4618      	mov	r0, r3
 800332c:	f001 fb59 	bl	80049e2 <HAL_SYSTICK_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d809      	bhi.n	8003350 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800333c:	2200      	movs	r2, #0
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f001 fb23 	bl	800498e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_InitTick+0x74>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e007      	b.n	8003360 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e004      	b.n	8003360 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e001      	b.n	8003360 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003360:	7bfb      	ldrb	r3, [r7, #15]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000008 	.word	0x20000008
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800337c:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_IncTick+0x20>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_IncTick+0x24>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4413      	add	r3, r2
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <HAL_IncTick+0x24>)
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000008 	.word	0x20000008
 800339c:	2000077c 	.word	0x2000077c

080033a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return uwTick;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_GetTick+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000077c 	.word	0x2000077c

080033b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7ff ffee 	bl	80033a0 <HAL_GetTick>
 80033c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d005      	beq.n	80033de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_Delay+0x44>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033de:	bf00      	nop
 80033e0:	f7ff ffde 	bl	80033a0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d8f7      	bhi.n	80033e0 <HAL_Delay+0x28>
  {
  }
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000008 	.word	0x20000008

08003400 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3360      	adds	r3, #96	; 0x60
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <LL_ADC_SetOffset+0x44>)
 800348a:	4013      	ands	r3, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	03fff000 	.word	0x03fff000

080034b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3360      	adds	r3, #96	; 0x60
 80034be:	461a      	mov	r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3360      	adds	r3, #96	; 0x60
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	431a      	orrs	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3330      	adds	r3, #48	; 0x30
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	4413      	add	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	211f      	movs	r1, #31
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	401a      	ands	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0e9b      	lsrs	r3, r3, #26
 800354a:	f003 011f 	and.w	r1, r3, #31
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	431a      	orrs	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800356a:	b480      	push	{r7}
 800356c:	b087      	sub	sp, #28
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3314      	adds	r3, #20
 800357a:	461a      	mov	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	0e5b      	lsrs	r3, r3, #25
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0d1b      	lsrs	r3, r3, #20
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2107      	movs	r1, #7
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	0d1b      	lsrs	r3, r3, #20
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	431a      	orrs	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0318 	and.w	r3, r3, #24
 80035e2:	4908      	ldr	r1, [pc, #32]	; (8003604 <LL_ADC_SetChannelSingleDiff+0x44>)
 80035e4:	40d9      	lsrs	r1, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	400b      	ands	r3, r1
 80035ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	0007ffff 	.word	0x0007ffff

08003608 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6093      	str	r3, [r2, #8]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003640:	d101      	bne.n	8003646 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003690:	d101      	bne.n	8003696 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <LL_ADC_IsEnabled+0x18>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <LL_ADC_IsEnabled+0x1a>
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d101      	bne.n	80036e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d101      	bne.n	8003708 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e12c      	b.n	800398c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fe f95b 	bl	80019fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff67 	bl	800362c <LL_ADC_IsDeepPowerDownEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff4d 	bl	8003608 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff82 	bl	800367c <LL_ADC_IsInternalRegulatorEnabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d115      	bne.n	80037aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff66 	bl	8003654 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003788:	4b82      	ldr	r3, [pc, #520]	; (8003994 <HAL_ADC_Init+0x27c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	4a82      	ldr	r2, [pc, #520]	; (8003998 <HAL_ADC_Init+0x280>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	3301      	adds	r3, #1
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800379c:	e002      	b.n	80037a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3b01      	subs	r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f9      	bne.n	800379e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff ff64 	bl	800367c <LL_ADC_IsInternalRegulatorEnabled>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff75 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 80037e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 80c5 	bne.w	800397a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 80c1 	bne.w	800397a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003800:	f043 0202 	orr.w	r2, r3, #2
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff49 	bl	80036a4 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003818:	4860      	ldr	r0, [pc, #384]	; (800399c <HAL_ADC_Init+0x284>)
 800381a:	f7ff ff43 	bl	80036a4 <LL_ADC_IsEnabled>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4619      	mov	r1, r3
 800382a:	485d      	ldr	r0, [pc, #372]	; (80039a0 <HAL_ADC_Init+0x288>)
 800382c:	f7ff fde8 	bl	8003400 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7e5b      	ldrb	r3, [r3, #25]
 8003834:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800383a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003840:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003846:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d106      	bne.n	800386c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	3b01      	subs	r3, #1
 8003864:	045b      	lsls	r3, r3, #17
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <HAL_ADC_Init+0x28c>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff12 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 80038a6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff1f 	bl	80036f0 <LL_ADC_INJ_IsConversionOngoing>
 80038b2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d13d      	bne.n	8003936 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d13a      	bne.n	8003936 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038c4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038cc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038dc:	f023 0302 	bic.w	r3, r3, #2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d118      	bne.n	8003926 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038fe:	f023 0304 	bic.w	r3, r3, #4
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003916:	430a      	orrs	r2, r1
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	611a      	str	r2, [r3, #16]
 8003924:	e007      	b.n	8003936 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d10c      	bne.n	8003958 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f023 010f 	bic.w	r1, r3, #15
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	1e5a      	subs	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
 8003956:	e007      	b.n	8003968 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 020f 	bic.w	r2, r2, #15
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f023 0303 	bic.w	r3, r3, #3
 8003970:	f043 0201 	orr.w	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	655a      	str	r2, [r3, #84]	; 0x54
 8003978:	e007      	b.n	800398a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800398a:	7ffb      	ldrb	r3, [r7, #31]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000000 	.word	0x20000000
 8003998:	053e2d63 	.word	0x053e2d63
 800399c:	50040000 	.word	0x50040000
 80039a0:	50040300 	.word	0x50040300
 80039a4:	fff0c007 	.word	0xfff0c007

080039a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b0b6      	sub	sp, #216	; 0xd8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x22>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e3b9      	b.n	800413e <HAL_ADC_ConfigChannel+0x796>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fe77 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 839e 	bne.w	8004120 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d824      	bhi.n	8003a36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	3b02      	subs	r3, #2
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d81b      	bhi.n	8003a2e <HAL_ADC_ConfigChannel+0x86>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_ADC_ConfigChannel+0x54>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a15 	.word	0x08003a15
 8003a04:	08003a1d 	.word	0x08003a1d
 8003a08:	08003a25 	.word	0x08003a25
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	220c      	movs	r2, #12
 8003a10:	605a      	str	r2, [r3, #4]
          break;
 8003a12:	e011      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2212      	movs	r2, #18
 8003a18:	605a      	str	r2, [r3, #4]
          break;
 8003a1a:	e00d      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2218      	movs	r2, #24
 8003a20:	605a      	str	r2, [r3, #4]
          break;
 8003a22:	e009      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a2a:	605a      	str	r2, [r3, #4]
          break;
 8003a2c:	e004      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2206      	movs	r2, #6
 8003a32:	605a      	str	r2, [r3, #4]
          break;
 8003a34:	e000      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003a36:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	f7ff fd64 	bl	8003512 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fe3b 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 8003a54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fe47 	bl	80036f0 <LL_ADC_INJ_IsConversionOngoing>
 8003a62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 81a6 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 81a1 	bne.w	8003dbc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6819      	ldr	r1, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f7ff fd6f 	bl	800356a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	08db      	lsrs	r3, r3, #3
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d00a      	beq.n	8003ac4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6919      	ldr	r1, [r3, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003abe:	f7ff fcd3 	bl	8003468 <LL_ADC_SetOffset>
 8003ac2:	e17b      	b.n	8003dbc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fcf0 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x148>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fce5 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	0e9b      	lsrs	r3, r3, #26
 8003aea:	f003 021f 	and.w	r2, r3, #31
 8003aee:	e01e      	b.n	8003b2e <HAL_ADC_ConfigChannel+0x186>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fcda 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b06:	fa93 f3a3 	rbit	r3, r3
 8003b0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003b1e:	2320      	movs	r3, #32
 8003b20:	e004      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003b22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x19e>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	0e9b      	lsrs	r3, r3, #26
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	e018      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x1d0>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003b6a:	2320      	movs	r3, #32
 8003b6c:	e004      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003b6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d106      	bne.n	8003b8a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff fca9 	bl	80034dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fc8d 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x20e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fc82 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003bac:	4603      	mov	r3, r0
 8003bae:	0e9b      	lsrs	r3, r3, #26
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	e01e      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x24c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2101      	movs	r1, #1
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff fc77 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003bcc:	fa93 f3a3 	rbit	r3, r3
 8003bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003bd4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003be4:	2320      	movs	r3, #32
 8003be6:	e004      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003be8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x264>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	0e9b      	lsrs	r3, r3, #26
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	e018      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x296>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c18:	fa93 f3a3 	rbit	r3, r3
 8003c1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003c20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e004      	b.n	8003c3e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003c34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c38:	fab3 f383 	clz	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d106      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff fc46 	bl	80034dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2102      	movs	r1, #2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fc2a 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x2d4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fc1f 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003c72:	4603      	mov	r3, r0
 8003c74:	0e9b      	lsrs	r3, r3, #26
 8003c76:	f003 021f 	and.w	r2, r3, #31
 8003c7a:	e01e      	b.n	8003cba <HAL_ADC_ConfigChannel+0x312>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fc14 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003caa:	2320      	movs	r3, #32
 8003cac:	e004      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_ADC_ConfigChannel+0x32a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	0e9b      	lsrs	r3, r3, #26
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	e016      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x358>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cde:	fa93 f3a3 	rbit	r3, r3
 8003ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	e004      	b.n	8003d00 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d106      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fbe5 	bl	80034dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2103      	movs	r1, #3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fbc9 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x396>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2103      	movs	r1, #3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fbbe 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003d34:	4603      	mov	r3, r0
 8003d36:	0e9b      	lsrs	r3, r3, #26
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	e017      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x3c6>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2103      	movs	r1, #3
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fbb3 	bl	80034b0 <LL_ADC_GetOffsetChannel>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d58:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x3de>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	0e9b      	lsrs	r3, r3, #26
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	e011      	b.n	8003daa <HAL_ADC_ConfigChannel+0x402>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003d9e:	2320      	movs	r3, #32
 8003da0:	e003      	b.n	8003daa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d106      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2103      	movs	r1, #3
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fb90 	bl	80034dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fc6f 	bl	80036a4 <LL_ADC_IsEnabled>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f040 813f 	bne.w	800404c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7ff fbf0 	bl	80035c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a8e      	ldr	r2, [pc, #568]	; (8004020 <HAL_ADC_ConfigChannel+0x678>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	f040 8130 	bne.w	800404c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x46c>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	3301      	adds	r3, #1
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e019      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x4a0>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	e003      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003e30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e32:	fab3 f383 	clz	r3, r3
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2b09      	cmp	r3, #9
 8003e40:	bf94      	ite	ls
 8003e42:	2301      	movls	r3, #1
 8003e44:	2300      	movhi	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d079      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d107      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x4c0>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	0e9b      	lsrs	r3, r3, #26
 8003e5e:	3301      	adds	r3, #1
 8003e60:	069b      	lsls	r3, r3, #26
 8003e62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e66:	e015      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x4ec>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e003      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	069b      	lsls	r3, r3, #26
 8003e90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d109      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x50c>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2101      	movs	r1, #1
 8003eae:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb2:	e017      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x53c>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003ecc:	2320      	movs	r3, #32
 8003ece:	e003      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2101      	movs	r1, #1
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	ea42 0103 	orr.w	r1, r2, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x562>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	3301      	adds	r3, #1
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	051b      	lsls	r3, r3, #20
 8003f08:	e018      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x594>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003f22:	2320      	movs	r3, #32
 8003f24:	e003      	b.n	8003f2e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f003 021f 	and.w	r2, r3, #31
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	e080      	b.n	8004042 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x5b4>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	0e9b      	lsrs	r3, r3, #26
 8003f52:	3301      	adds	r3, #1
 8003f54:	069b      	lsls	r3, r3, #26
 8003f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f5a:	e015      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x5e0>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	fa93 f3a3 	rbit	r3, r3
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003f74:	2320      	movs	r3, #32
 8003f76:	e003      	b.n	8003f80 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	069b      	lsls	r3, r3, #26
 8003f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d109      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x600>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa6:	e017      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x630>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	61fb      	str	r3, [r7, #28]
  return result;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e003      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f003 031f 	and.w	r3, r3, #31
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd8:	ea42 0103 	orr.w	r1, r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x65c>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f003 021f 	and.w	r2, r3, #31
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	3b1e      	subs	r3, #30
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004002:	e01d      	b.n	8004040 <HAL_ADC_ConfigChannel+0x698>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	613b      	str	r3, [r7, #16]
  return result;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800401c:	2320      	movs	r3, #32
 800401e:	e005      	b.n	800402c <HAL_ADC_ConfigChannel+0x684>
 8004020:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f003 021f 	and.w	r2, r3, #31
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	3b1e      	subs	r3, #30
 800403a:	051b      	lsls	r3, r3, #20
 800403c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004040:	430b      	orrs	r3, r1
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	6892      	ldr	r2, [r2, #8]
 8004046:	4619      	mov	r1, r3
 8004048:	f7ff fa8f 	bl	800356a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_ADC_ConfigChannel+0x7a0>)
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d06c      	beq.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004058:	483c      	ldr	r0, [pc, #240]	; (800414c <HAL_ADC_ConfigChannel+0x7a4>)
 800405a:	f7ff f9f7 	bl	800344c <LL_ADC_GetCommonPathInternalCh>
 800405e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3a      	ldr	r2, [pc, #232]	; (8004150 <HAL_ADC_ConfigChannel+0x7a8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d127      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800406c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004070:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d121      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a35      	ldr	r2, [pc, #212]	; (8004154 <HAL_ADC_ConfigChannel+0x7ac>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d157      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408a:	4619      	mov	r1, r3
 800408c:	482f      	ldr	r0, [pc, #188]	; (800414c <HAL_ADC_ConfigChannel+0x7a4>)
 800408e:	f7ff f9ca 	bl	8003426 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_ADC_ConfigChannel+0x7b0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	4a30      	ldr	r2, [pc, #192]	; (800415c <HAL_ADC_ConfigChannel+0x7b4>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	099b      	lsrs	r3, r3, #6
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ac:	e002      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f9      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040ba:	e03a      	b.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a27      	ldr	r2, [pc, #156]	; (8004160 <HAL_ADC_ConfigChannel+0x7b8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d113      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x746>
 80040c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10d      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_ADC_ConfigChannel+0x7ac>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d12a      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e4:	4619      	mov	r1, r3
 80040e6:	4819      	ldr	r0, [pc, #100]	; (800414c <HAL_ADC_ConfigChannel+0x7a4>)
 80040e8:	f7ff f99d 	bl	8003426 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040ec:	e021      	b.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <HAL_ADC_ConfigChannel+0x7bc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d11c      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80040f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a12      	ldr	r2, [pc, #72]	; (8004154 <HAL_ADC_ConfigChannel+0x7ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d111      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800410e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004112:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004116:	4619      	mov	r1, r3
 8004118:	480c      	ldr	r0, [pc, #48]	; (800414c <HAL_ADC_ConfigChannel+0x7a4>)
 800411a:	f7ff f984 	bl	8003426 <LL_ADC_SetCommonPathInternalCh>
 800411e:	e008      	b.n	8004132 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800413a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800413e:	4618      	mov	r0, r3
 8004140:	37d8      	adds	r7, #216	; 0xd8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	80080000 	.word	0x80080000
 800414c:	50040300 	.word	0x50040300
 8004150:	c7520000 	.word	0xc7520000
 8004154:	50040000 	.word	0x50040000
 8004158:	20000000 	.word	0x20000000
 800415c:	053e2d63 	.word	0x053e2d63
 8004160:	cb840000 	.word	0xcb840000
 8004164:	80000001 	.word	0x80000001

08004168 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800417c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d003      	beq.n	800418c <HAL_CAN_GetRxMessage+0x24>
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b02      	cmp	r3, #2
 8004188:	f040 80f3 	bne.w	8004372 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0e7      	b.n	8004380 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e0d8      	b.n	8004380 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	331b      	adds	r3, #27
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	4413      	add	r3, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0204 	and.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10c      	bne.n	8004206 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	331b      	adds	r3, #27
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	0d5b      	lsrs	r3, r3, #21
 80041fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e00b      	b.n	800421e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	331b      	adds	r3, #27
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	08db      	lsrs	r3, r3, #3
 8004216:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	331b      	adds	r3, #27
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4413      	add	r3, r2
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0202 	and.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	331b      	adds	r3, #27
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4413      	add	r3, r2
 8004240:	3304      	adds	r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	331b      	adds	r3, #27
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	b2da      	uxtb	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	331b      	adds	r3, #27
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	4413      	add	r3, r2
 8004270:	3304      	adds	r3, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4413      	add	r3, r2
 8004286:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	4413      	add	r3, r2
 800429c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	0a1a      	lsrs	r2, r3, #8
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	0c1a      	lsrs	r2, r3, #16
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	3302      	adds	r3, #2
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0e1a      	lsrs	r2, r3, #24
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	3303      	adds	r3, #3
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	3304      	adds	r3, #4
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4413      	add	r3, r2
 8004302:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	0a1a      	lsrs	r2, r3, #8
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	3305      	adds	r3, #5
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	4413      	add	r3, r2
 800431c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0c1a      	lsrs	r2, r3, #16
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	3306      	adds	r3, #6
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	4413      	add	r3, r2
 8004336:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e1a      	lsrs	r2, r3, #24
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	3307      	adds	r3, #7
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0220 	orr.w	r2, r2, #32
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e007      	b.n	800436e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f042 0220 	orr.w	r2, r2, #32
 800436c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	e006      	b.n	8004380 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004394:	2300      	movs	r3, #0
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d07c      	beq.n	80044cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2201      	movs	r2, #1
 80043e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f983 	bl	80046fa <HAL_CAN_TxMailbox0CompleteCallback>
 80043f4:	e016      	b.n	8004424 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
 8004408:	e00c      	b.n	8004424 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
 800441c:	e002      	b.n	8004424 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f989 	bl	8004736 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d024      	beq.n	8004478 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004436:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f963 	bl	800470e <HAL_CAN_TxMailbox1CompleteCallback>
 8004448:	e016      	b.n	8004478 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
 800445c:	e00c      	b.n	8004478 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
 8004470:	e002      	b.n	8004478 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f969 	bl	800474a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d024      	beq.n	80044cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800448a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f943 	bl	8004722 <HAL_CAN_TxMailbox2CompleteCallback>
 800449c:	e016      	b.n	80044cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e00c      	b.n	80044cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e002      	b.n	80044cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f949 	bl	800475e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00c      	beq.n	80044f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2210      	movs	r2, #16
 80044ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2208      	movs	r2, #8
 800450a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f930 	bl	8004772 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd f9cc 	bl	80018c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00c      	beq.n	8004554 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2210      	movs	r2, #16
 8004552:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f912 	bl	800479a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d009      	beq.n	8004594 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8f9 	bl	8004786 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d006      	beq.n	80045b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2210      	movs	r2, #16
 80045ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f8fc 	bl	80047ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00b      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d006      	beq.n	80045d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2208      	movs	r2, #8
 80045d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8f5 	bl	80047c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d07b      	beq.n	80046da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d072      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800460e:	2b00      	cmp	r3, #0
 8004610:	d008      	beq.n	8004624 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	f043 0302 	orr.w	r3, r3, #2
 8004622:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	2b00      	cmp	r3, #0
 800462c:	d008      	beq.n	8004640 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004646:	2b00      	cmp	r3, #0
 8004648:	d043      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004650:	2b00      	cmp	r3, #0
 8004652:	d03e      	beq.n	80046d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465a:	2b60      	cmp	r3, #96	; 0x60
 800465c:	d02b      	beq.n	80046b6 <HAL_CAN_IRQHandler+0x32a>
 800465e:	2b60      	cmp	r3, #96	; 0x60
 8004660:	d82e      	bhi.n	80046c0 <HAL_CAN_IRQHandler+0x334>
 8004662:	2b50      	cmp	r3, #80	; 0x50
 8004664:	d022      	beq.n	80046ac <HAL_CAN_IRQHandler+0x320>
 8004666:	2b50      	cmp	r3, #80	; 0x50
 8004668:	d82a      	bhi.n	80046c0 <HAL_CAN_IRQHandler+0x334>
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d019      	beq.n	80046a2 <HAL_CAN_IRQHandler+0x316>
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d826      	bhi.n	80046c0 <HAL_CAN_IRQHandler+0x334>
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d010      	beq.n	8004698 <HAL_CAN_IRQHandler+0x30c>
 8004676:	2b30      	cmp	r3, #48	; 0x30
 8004678:	d822      	bhi.n	80046c0 <HAL_CAN_IRQHandler+0x334>
 800467a:	2b10      	cmp	r3, #16
 800467c:	d002      	beq.n	8004684 <HAL_CAN_IRQHandler+0x2f8>
 800467e:	2b20      	cmp	r3, #32
 8004680:	d005      	beq.n	800468e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004682:	e01d      	b.n	80046c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f043 0308 	orr.w	r3, r3, #8
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800468c:	e019      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	f043 0310 	orr.w	r3, r3, #16
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004696:	e014      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	f043 0320 	orr.w	r3, r3, #32
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046a0:	e00f      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046aa:	e00a      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046b4:	e005      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046be:	e000      	b.n	80046c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80046c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2204      	movs	r2, #4
 80046d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7fd f913 	bl	8001918 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046f2:	bf00      	nop
 80046f4:	3728      	adds	r7, #40	; 0x28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <__NVIC_SetPriorityGrouping+0x44>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047f4:	4013      	ands	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800480a:	4a04      	ldr	r2, [pc, #16]	; (800481c <__NVIC_SetPriorityGrouping+0x44>)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	60d3      	str	r3, [r2, #12]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <__NVIC_GetPriorityGrouping+0x18>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 0307 	and.w	r3, r3, #7
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	2b00      	cmp	r3, #0
 800484c:	db0b      	blt.n	8004866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	f003 021f 	and.w	r2, r3, #31
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <__NVIC_EnableIRQ+0x38>)
 8004856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2001      	movs	r0, #1
 800485e:	fa00 f202 	lsl.w	r2, r0, r2
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	e000e100 	.word	0xe000e100

08004878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db0a      	blt.n	80048a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	490c      	ldr	r1, [pc, #48]	; (80048c4 <__NVIC_SetPriority+0x4c>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	440b      	add	r3, r1
 800489c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a0:	e00a      	b.n	80048b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <__NVIC_SetPriority+0x50>)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3b04      	subs	r3, #4
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	440b      	add	r3, r1
 80048b6:	761a      	strb	r2, [r3, #24]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000e100 	.word	0xe000e100
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f1c3 0307 	rsb	r3, r3, #7
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf28      	it	cs
 80048ea:	2304      	movcs	r3, #4
 80048ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d902      	bls.n	80048fc <NVIC_EncodePriority+0x30>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3b03      	subs	r3, #3
 80048fa:	e000      	b.n	80048fe <NVIC_EncodePriority+0x32>
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	401a      	ands	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43d9      	mvns	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	4313      	orrs	r3, r2
         );
}
 8004926:	4618      	mov	r0, r3
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004944:	d301      	bcc.n	800494a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004946:	2301      	movs	r3, #1
 8004948:	e00f      	b.n	800496a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800494a:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <SysTick_Config+0x40>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004952:	210f      	movs	r1, #15
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	f7ff ff8e 	bl	8004878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <SysTick_Config+0x40>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004962:	4b04      	ldr	r3, [pc, #16]	; (8004974 <SysTick_Config+0x40>)
 8004964:	2207      	movs	r2, #7
 8004966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	e000e010 	.word	0xe000e010

08004978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff29 	bl	80047d8 <__NVIC_SetPriorityGrouping>
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	4603      	mov	r3, r0
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049a0:	f7ff ff3e 	bl	8004820 <__NVIC_GetPriorityGrouping>
 80049a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	6978      	ldr	r0, [r7, #20]
 80049ac:	f7ff ff8e 	bl	80048cc <NVIC_EncodePriority>
 80049b0:	4602      	mov	r2, r0
 80049b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff ff5d 	bl	8004878 <__NVIC_SetPriority>
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff31 	bl	800483c <__NVIC_EnableIRQ>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ffa2 	bl	8004934 <SysTick_Config>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e098      	b.n	8004b40 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <HAL_DMA_Init+0x150>)
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d80f      	bhi.n	8004a3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <HAL_DMA_Init+0x154>)
 8004a22:	4413      	add	r3, r2
 8004a24:	4a4b      	ldr	r2, [pc, #300]	; (8004b54 <HAL_DMA_Init+0x158>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	009a      	lsls	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a48      	ldr	r2, [pc, #288]	; (8004b58 <HAL_DMA_Init+0x15c>)
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
 8004a38:	e00e      	b.n	8004a58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	4b46      	ldr	r3, [pc, #280]	; (8004b5c <HAL_DMA_Init+0x160>)
 8004a42:	4413      	add	r3, r2
 8004a44:	4a43      	ldr	r2, [pc, #268]	; (8004b54 <HAL_DMA_Init+0x158>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	009a      	lsls	r2, r3, #2
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a42      	ldr	r2, [pc, #264]	; (8004b60 <HAL_DMA_Init+0x164>)
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab2:	d039      	beq.n	8004b28 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	4a27      	ldr	r2, [pc, #156]	; (8004b58 <HAL_DMA_Init+0x15c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d11a      	bne.n	8004af4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004abe:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_DMA_Init+0x168>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	f003 031c 	and.w	r3, r3, #28
 8004aca:	210f      	movs	r1, #15
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	4924      	ldr	r1, [pc, #144]	; (8004b64 <HAL_DMA_Init+0x168>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <HAL_DMA_Init+0x168>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6859      	ldr	r1, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	f003 031c 	and.w	r3, r3, #28
 8004ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aec:	491d      	ldr	r1, [pc, #116]	; (8004b64 <HAL_DMA_Init+0x168>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	600b      	str	r3, [r1, #0]
 8004af2:	e019      	b.n	8004b28 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <HAL_DMA_Init+0x16c>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f003 031c 	and.w	r3, r3, #28
 8004b00:	210f      	movs	r1, #15
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	4917      	ldr	r1, [pc, #92]	; (8004b68 <HAL_DMA_Init+0x16c>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <HAL_DMA_Init+0x16c>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6859      	ldr	r1, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f003 031c 	and.w	r3, r3, #28
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	4911      	ldr	r1, [pc, #68]	; (8004b68 <HAL_DMA_Init+0x16c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40020407 	.word	0x40020407
 8004b50:	bffdfff8 	.word	0xbffdfff8
 8004b54:	cccccccd 	.word	0xcccccccd
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	bffdfbf8 	.word	0xbffdfbf8
 8004b60:	40020400 	.word	0x40020400
 8004b64:	400200a8 	.word	0x400200a8
 8004b68:	400204a8 	.word	0x400204a8

08004b6c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d008      	beq.n	8004b96 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2204      	movs	r2, #4
 8004b88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e022      	b.n	8004bdc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 020e 	bic.w	r2, r2, #14
 8004ba4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	f003 021c 	and.w	r2, r3, #28
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d005      	beq.n	8004c0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2204      	movs	r2, #4
 8004c04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
 8004c0a:	e029      	b.n	8004c60 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 020e 	bic.w	r2, r2, #14
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f003 021c 	and.w	r2, r3, #28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
    }
  }
  return status;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f003 031c 	and.w	r3, r3, #28
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d026      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d021      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0204 	bic.w	r2, r2, #4
 8004cbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f003 021c 	and.w	r2, r3, #28
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2104      	movs	r1, #4
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d071      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004ce2:	e06c      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	f003 031c 	and.w	r3, r3, #28
 8004cec:	2202      	movs	r2, #2
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d029      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 020a 	bic.w	r2, r2, #10
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f003 021c 	and.w	r2, r3, #28
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2102      	movs	r1, #2
 8004d36:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d038      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004d54:	e033      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f003 031c 	and.w	r3, r3, #28
 8004d5e:	2208      	movs	r2, #8
 8004d60:	409a      	lsls	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02a      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 020e 	bic.w	r2, r2, #14
 8004d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	f003 021c 	and.w	r2, r3, #28
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f202 	lsl.w	r2, r1, r2
 8004d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
}
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dd6:	e154      	b.n	8005082 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	2101      	movs	r1, #1
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	fa01 f303 	lsl.w	r3, r1, r3
 8004de4:	4013      	ands	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8146 	beq.w	800507c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d005      	beq.n	8004e08 <HAL_GPIO_Init+0x40>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d130      	bne.n	8004e6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3e:	2201      	movs	r2, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43db      	mvns	r3, r3
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	f003 0201 	and.w	r2, r3, #1
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d017      	beq.n	8004ea6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	2203      	movs	r2, #3
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d123      	bne.n	8004efa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	08da      	lsrs	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3208      	adds	r2, #8
 8004ef4:	6939      	ldr	r1, [r7, #16]
 8004ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0203 	and.w	r2, r3, #3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80a0 	beq.w	800507c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3c:	4b58      	ldr	r3, [pc, #352]	; (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f40:	4a57      	ldr	r2, [pc, #348]	; (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6613      	str	r3, [r2, #96]	; 0x60
 8004f48:	4b55      	ldr	r3, [pc, #340]	; (80050a0 <HAL_GPIO_Init+0x2d8>)
 8004f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f54:	4a53      	ldr	r2, [pc, #332]	; (80050a4 <HAL_GPIO_Init+0x2dc>)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	220f      	movs	r2, #15
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f7e:	d019      	beq.n	8004fb4 <HAL_GPIO_Init+0x1ec>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a49      	ldr	r2, [pc, #292]	; (80050a8 <HAL_GPIO_Init+0x2e0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_GPIO_Init+0x1e8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a48      	ldr	r2, [pc, #288]	; (80050ac <HAL_GPIO_Init+0x2e4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00d      	beq.n	8004fac <HAL_GPIO_Init+0x1e4>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a47      	ldr	r2, [pc, #284]	; (80050b0 <HAL_GPIO_Init+0x2e8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <HAL_GPIO_Init+0x1e0>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	; (80050b4 <HAL_GPIO_Init+0x2ec>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_GPIO_Init+0x1dc>
 8004fa0:	2304      	movs	r3, #4
 8004fa2:	e008      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fa4:	2307      	movs	r3, #7
 8004fa6:	e006      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e004      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e002      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_GPIO_Init+0x1ee>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f002 0203 	and.w	r2, r2, #3
 8004fbc:	0092      	lsls	r2, r2, #2
 8004fbe:	4093      	lsls	r3, r2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fc6:	4937      	ldr	r1, [pc, #220]	; (80050a4 <HAL_GPIO_Init+0x2dc>)
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	089b      	lsrs	r3, r3, #2
 8004fcc:	3302      	adds	r3, #2
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fd4:	4b38      	ldr	r3, [pc, #224]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	43db      	mvns	r3, r3
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	43db      	mvns	r3, r3
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4013      	ands	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800504c:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005052:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	43db      	mvns	r3, r3
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <HAL_GPIO_Init+0x2f0>)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f aea3 	bne.w	8004dd8 <HAL_GPIO_Init+0x10>
  }
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40010000 	.word	0x40010000
 80050a8:	48000400 	.word	0x48000400
 80050ac:	48000800 	.word	0x48000800
 80050b0:	48000c00 	.word	0x48000c00
 80050b4:	48001000 	.word	0x48001000
 80050b8:	40010400 	.word	0x40010400

080050bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
 80050c8:	4613      	mov	r3, r2
 80050ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050cc:	787b      	ldrb	r3, [r7, #1]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050d8:	e002      	b.n	80050e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050da:	887a      	ldrh	r2, [r7, #2]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80050fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_PWREx_GetVoltageRange+0x18>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40007000 	.word	0x40007000

08005128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005136:	d130      	bne.n	800519a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005138:	4b23      	ldr	r3, [pc, #140]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d038      	beq.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005146:	4b20      	ldr	r3, [pc, #128]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800514e:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005150:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005156:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2232      	movs	r2, #50	; 0x32
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0c9b      	lsrs	r3, r3, #18
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516c:	e002      	b.n	8005174 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3b01      	subs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005180:	d102      	bne.n	8005188 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f2      	bne.n	800516e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	d110      	bne.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e00f      	b.n	80051ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a6:	d007      	beq.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051b0:	4a05      	ldr	r2, [pc, #20]	; (80051c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40007000 	.word	0x40007000
 80051cc:	20000000 	.word	0x20000000
 80051d0:	431bde83 	.word	0x431bde83

080051d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f000 bc02 	b.w	80059ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e8:	4b96      	ldr	r3, [pc, #600]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 030c 	and.w	r3, r3, #12
 80051f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f2:	4b94      	ldr	r3, [pc, #592]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80e4 	beq.w	80053d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_RCC_OscConfig+0x4c>
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b0c      	cmp	r3, #12
 8005214:	f040 808b 	bne.w	800532e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b01      	cmp	r3, #1
 800521c:	f040 8087 	bne.w	800532e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005220:	4b88      	ldr	r3, [pc, #544]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_RCC_OscConfig+0x64>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e3d9      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_RCC_OscConfig+0x7e>
 8005248:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005250:	e005      	b.n	800525e <HAL_RCC_OscConfig+0x8a>
 8005252:	4b7c      	ldr	r3, [pc, #496]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800525e:	4293      	cmp	r3, r2
 8005260:	d223      	bcs.n	80052aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fd8a 	bl	8005d80 <RCC_SetFlashLatencyFromMSIRange>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e3ba      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005276:	4b73      	ldr	r3, [pc, #460]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a72      	ldr	r2, [pc, #456]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800527c:	f043 0308 	orr.w	r3, r3, #8
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b70      	ldr	r3, [pc, #448]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	496d      	ldr	r1, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005294:	4b6b      	ldr	r3, [pc, #428]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	4968      	ldr	r1, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	e025      	b.n	80052f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052aa:	4b66      	ldr	r3, [pc, #408]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a65      	ldr	r2, [pc, #404]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052b0:	f043 0308 	orr.w	r3, r3, #8
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b63      	ldr	r3, [pc, #396]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4960      	ldr	r1, [pc, #384]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052c8:	4b5e      	ldr	r3, [pc, #376]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	495b      	ldr	r1, [pc, #364]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd4a 	bl	8005d80 <RCC_SetFlashLatencyFromMSIRange>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e37a      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f6:	f000 fc81 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b51      	ldr	r3, [pc, #324]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	4950      	ldr	r1, [pc, #320]	; (8005448 <HAL_RCC_OscConfig+0x274>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a4e      	ldr	r2, [pc, #312]	; (800544c <HAL_RCC_OscConfig+0x278>)
 8005314:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005316:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <HAL_RCC_OscConfig+0x27c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fd fff0 	bl	8003300 <HAL_InitTick>
 8005320:	4603      	mov	r3, r0
 8005322:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d052      	beq.n	80053d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	e35e      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d032      	beq.n	800539c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005336:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a42      	ldr	r2, [pc, #264]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005342:	f7fe f82d 	bl	80033a0 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800534a:	f7fe f829 	bl	80033a0 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e347      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800535c:	4b39      	ldr	r3, [pc, #228]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005368:	4b36      	ldr	r3, [pc, #216]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a35      	ldr	r2, [pc, #212]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800536e:	f043 0308 	orr.w	r3, r3, #8
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4b33      	ldr	r3, [pc, #204]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4930      	ldr	r1, [pc, #192]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	492b      	ldr	r1, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
 800539a:	e01a      	b.n	80053d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800539c:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053a8:	f7fd fffa 	bl	80033a0 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b0:	f7fd fff6 	bl	80033a0 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e314      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1dc>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d073      	beq.n	80054c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_OscConfig+0x21c>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d10e      	bne.n	8005408 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d10b      	bne.n	8005408 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	4b14      	ldr	r3, [pc, #80]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d063      	beq.n	80054c4 <HAL_RCC_OscConfig+0x2f0>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d15f      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e2f1      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d106      	bne.n	8005420 <HAL_RCC_OscConfig+0x24c>
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e025      	b.n	800546c <HAL_RCC_OscConfig+0x298>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005428:	d114      	bne.n	8005454 <HAL_RCC_OscConfig+0x280>
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a02      	ldr	r2, [pc, #8]	; (8005444 <HAL_RCC_OscConfig+0x270>)
 800543c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	e013      	b.n	800546c <HAL_RCC_OscConfig+0x298>
 8005444:	40021000 	.word	0x40021000
 8005448:	0800b518 	.word	0x0800b518
 800544c:	20000000 	.word	0x20000000
 8005450:	20000004 	.word	0x20000004
 8005454:	4ba0      	ldr	r3, [pc, #640]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a9f      	ldr	r2, [pc, #636]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b9d      	ldr	r3, [pc, #628]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a9c      	ldr	r2, [pc, #624]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fd ff94 	bl	80033a0 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fd ff90 	bl	80033a0 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e2ae      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548e:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x2a8>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fd ff80 	bl	80033a0 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fd ff7c 	bl	80033a0 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e29a      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b6:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2d0>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d060      	beq.n	8005594 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_OscConfig+0x310>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b0c      	cmp	r3, #12
 80054dc:	d119      	bne.n	8005512 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d116      	bne.n	8005512 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e4:	4b7c      	ldr	r3, [pc, #496]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_OscConfig+0x328>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e277      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	061b      	lsls	r3, r3, #24
 800550a:	4973      	ldr	r1, [pc, #460]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800550c:	4313      	orrs	r3, r2
 800550e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005510:	e040      	b.n	8005594 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d023      	beq.n	8005562 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551a:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6e      	ldr	r2, [pc, #440]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fd ff3b 	bl	80033a0 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552e:	f7fd ff37 	bl	80033a0 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e255      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005540:	4b65      	ldr	r3, [pc, #404]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b62      	ldr	r3, [pc, #392]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	061b      	lsls	r3, r3, #24
 800555a:	495f      	ldr	r1, [pc, #380]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800555c:	4313      	orrs	r3, r2
 800555e:	604b      	str	r3, [r1, #4]
 8005560:	e018      	b.n	8005594 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005562:	4b5d      	ldr	r3, [pc, #372]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a5c      	ldr	r2, [pc, #368]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fd ff17 	bl	80033a0 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005576:	f7fd ff13 	bl	80033a0 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e231      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b00      	cmp	r3, #0
 800559e:	d03c      	beq.n	800561a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01c      	beq.n	80055e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a8:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fd fef2 	bl	80033a0 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fd feee 	bl	80033a0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e20c      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d2:	4b41      	ldr	r3, [pc, #260]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80055d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ef      	beq.n	80055c0 <HAL_RCC_OscConfig+0x3ec>
 80055e0:	e01b      	b.n	800561a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e2:	4b3d      	ldr	r3, [pc, #244]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80055e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e8:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80055ea:	f023 0301 	bic.w	r3, r3, #1
 80055ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fd fed5 	bl	80033a0 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fd fed1 	bl	80033a0 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1ef      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800560e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ef      	bne.n	80055fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80a6 	beq.w	8005774 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005628:	2300      	movs	r3, #0
 800562a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800562c:	4b2a      	ldr	r3, [pc, #168]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005638:	4b27      	ldr	r3, [pc, #156]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	4a26      	ldr	r2, [pc, #152]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005642:	6593      	str	r3, [r2, #88]	; 0x58
 8005644:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005650:	2301      	movs	r3, #1
 8005652:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_RCC_OscConfig+0x508>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565c:	2b00      	cmp	r3, #0
 800565e:	d118      	bne.n	8005692 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_OscConfig+0x508>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_RCC_OscConfig+0x508>)
 8005666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566c:	f7fd fe98 	bl	80033a0 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005674:	f7fd fe94 	bl	80033a0 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e1b2      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_RCC_OscConfig+0x508>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d108      	bne.n	80056ac <HAL_RCC_OscConfig+0x4d8>
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 800569c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a0:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056aa:	e029      	b.n	8005700 <HAL_RCC_OscConfig+0x52c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d115      	bne.n	80056e0 <HAL_RCC_OscConfig+0x50c>
 80056b4:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80056b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ba:	4a07      	ldr	r2, [pc, #28]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80056bc:	f043 0304 	orr.w	r3, r3, #4
 80056c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	4a03      	ldr	r2, [pc, #12]	; (80056d8 <HAL_RCC_OscConfig+0x504>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d4:	e014      	b.n	8005700 <HAL_RCC_OscConfig+0x52c>
 80056d6:	bf00      	nop
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
 80056e0:	4b9a      	ldr	r3, [pc, #616]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	4a99      	ldr	r2, [pc, #612]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f0:	4b96      	ldr	r3, [pc, #600]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	4a95      	ldr	r2, [pc, #596]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d016      	beq.n	8005736 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd fe4a 	bl	80033a0 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800570e:	e00a      	b.n	8005726 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005710:	f7fd fe46 	bl	80033a0 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e162      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005726:	4b89      	ldr	r3, [pc, #548]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0ed      	beq.n	8005710 <HAL_RCC_OscConfig+0x53c>
 8005734:	e015      	b.n	8005762 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005736:	f7fd fe33 	bl	80033a0 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800573c:	e00a      	b.n	8005754 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573e:	f7fd fe2f 	bl	80033a0 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	f241 3288 	movw	r2, #5000	; 0x1388
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e14b      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005754:	4b7d      	ldr	r3, [pc, #500]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1ed      	bne.n	800573e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005762:	7ffb      	ldrb	r3, [r7, #31]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d105      	bne.n	8005774 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005768:	4b78      	ldr	r3, [pc, #480]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800576a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576c:	4a77      	ldr	r2, [pc, #476]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005772:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d03c      	beq.n	80057fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01c      	beq.n	80057c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005788:	4b70      	ldr	r3, [pc, #448]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800578a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800578e:	4a6f      	ldr	r2, [pc, #444]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005798:	f7fd fe02 	bl	80033a0 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a0:	f7fd fdfe 	bl	80033a0 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e11c      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057b2:	4b66      	ldr	r3, [pc, #408]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80057b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0ef      	beq.n	80057a0 <HAL_RCC_OscConfig+0x5cc>
 80057c0:	e01b      	b.n	80057fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057c2:	4b62      	ldr	r3, [pc, #392]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80057c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057c8:	4a60      	ldr	r2, [pc, #384]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fd fde5 	bl	80033a0 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057da:	f7fd fde1 	bl	80033a0 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0ff      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057ec:	4b57      	ldr	r3, [pc, #348]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80057ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1ef      	bne.n	80057da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80f3 	beq.w	80059ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	2b02      	cmp	r3, #2
 800580a:	f040 80c9 	bne.w	80059a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800580e:	4b4f      	ldr	r3, [pc, #316]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	429a      	cmp	r2, r3
 8005820:	d12c      	bne.n	800587c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	3b01      	subs	r3, #1
 800582e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d123      	bne.n	800587c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d11b      	bne.n	800587c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d113      	bne.n	800587c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	3b01      	subs	r3, #1
 8005862:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d109      	bne.n	800587c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	3b01      	subs	r3, #1
 8005876:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d06b      	beq.n	8005954 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b0c      	cmp	r3, #12
 8005880:	d062      	beq.n	8005948 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005882:	4b32      	ldr	r3, [pc, #200]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0ac      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2d      	ldr	r2, [pc, #180]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800589e:	f7fd fd7f 	bl	80033a0 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fd fd7b 	bl	80033a0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e099      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058c4:	4b21      	ldr	r3, [pc, #132]	; (800594c <HAL_RCC_OscConfig+0x778>)
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <HAL_RCC_OscConfig+0x77c>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058d4:	3a01      	subs	r2, #1
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	4311      	orrs	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058de:	0212      	lsls	r2, r2, #8
 80058e0:	4311      	orrs	r1, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058e6:	0852      	lsrs	r2, r2, #1
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0552      	lsls	r2, r2, #21
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058f2:	0852      	lsrs	r2, r2, #1
 80058f4:	3a01      	subs	r2, #1
 80058f6:	0652      	lsls	r2, r2, #25
 80058f8:	4311      	orrs	r1, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058fe:	06d2      	lsls	r2, r2, #27
 8005900:	430a      	orrs	r2, r1
 8005902:	4912      	ldr	r1, [pc, #72]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800590e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_RCC_OscConfig+0x778>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a0c      	ldr	r2, [pc, #48]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800591a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800591e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005920:	f7fd fd3e 	bl	80033a0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fd fd3a 	bl	80033a0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e058      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <HAL_RCC_OscConfig+0x778>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005946:	e050      	b.n	80059ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e04f      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
 800594c:	40021000 	.word	0x40021000
 8005950:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d144      	bne.n	80059ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005960:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 8005966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800596a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800596c:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 8005972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005978:	f7fd fd12 	bl	80033a0 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005980:	f7fd fd0e 	bl	80033a0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e02c      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x7ac>
 800599e:	e024      	b.n	80059ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d01f      	beq.n	80059e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a6:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 80059ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b2:	f7fd fcf5 	bl	80033a0 <HAL_GetTick>
 80059b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059b8:	e008      	b.n	80059cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ba:	f7fd fcf1 	bl	80033a0 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e00f      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f0      	bne.n	80059ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	4905      	ldr	r1, [pc, #20]	; (80059f4 <HAL_RCC_OscConfig+0x820>)
 80059de:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <HAL_RCC_OscConfig+0x824>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60cb      	str	r3, [r1, #12]
 80059e4:	e001      	b.n	80059ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000
 80059f8:	feeefffc 	.word	0xfeeefffc

080059fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0e7      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a10:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d910      	bls.n	8005a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	4970      	ldr	r1, [pc, #448]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2e:	4b6e      	ldr	r3, [pc, #440]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0cf      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d010      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	4b66      	ldr	r3, [pc, #408]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d908      	bls.n	8005a6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a5c:	4b63      	ldr	r3, [pc, #396]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4960      	ldr	r1, [pc, #384]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d04c      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d107      	bne.n	8005a92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a82:	4b5a      	ldr	r3, [pc, #360]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d121      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0a6      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d107      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a9a:	4b54      	ldr	r3, [pc, #336]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d115      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e09a      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ab2:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e08e      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e086      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad2:	4b46      	ldr	r3, [pc, #280]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 0203 	bic.w	r2, r3, #3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4943      	ldr	r1, [pc, #268]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae4:	f7fd fc5c 	bl	80033a0 <HAL_GetTick>
 8005ae8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	e00a      	b.n	8005b02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aec:	f7fd fc58 	bl	80033a0 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e06e      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	4b3a      	ldr	r3, [pc, #232]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 020c 	and.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1eb      	bne.n	8005aec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d010      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	4b31      	ldr	r3, [pc, #196]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d208      	bcs.n	8005b42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b30:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	492b      	ldr	r1, [pc, #172]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d210      	bcs.n	8005b72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b50:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f023 0207 	bic.w	r2, r3, #7
 8005b58:	4923      	ldr	r1, [pc, #140]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b60:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <HAL_RCC_ClockConfig+0x1ec>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d001      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e036      	b.n	8005be0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b7e:	4b1b      	ldr	r3, [pc, #108]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	4918      	ldr	r1, [pc, #96]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9c:	4b13      	ldr	r3, [pc, #76]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4910      	ldr	r1, [pc, #64]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bb0:	f000 f824 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	; (8005bec <HAL_RCC_ClockConfig+0x1f0>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	490b      	ldr	r1, [pc, #44]	; (8005bf0 <HAL_RCC_ClockConfig+0x1f4>)
 8005bc2:	5ccb      	ldrb	r3, [r1, r3]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <HAL_RCC_ClockConfig+0x1f8>)
 8005bce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bd0:	4b09      	ldr	r3, [pc, #36]	; (8005bf8 <HAL_RCC_ClockConfig+0x1fc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7fd fb93 	bl	8003300 <HAL_InitTick>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	72fb      	strb	r3, [r7, #11]

  return status;
 8005bde:	7afb      	ldrb	r3, [r7, #11]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40022000 	.word	0x40022000
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	0800b518 	.word	0x0800b518
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	20000004 	.word	0x20000004

08005bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b089      	sub	sp, #36	; 0x24
 8005c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	2300      	movs	r3, #0
 8005c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c0a:	4b3e      	ldr	r3, [pc, #248]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c14:	4b3b      	ldr	r3, [pc, #236]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x34>
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b0c      	cmp	r3, #12
 8005c28:	d121      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d11e      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c30:	4b34      	ldr	r3, [pc, #208]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	61fb      	str	r3, [r7, #28]
 8005c4a:	e005      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c4c:	4b2d      	ldr	r3, [pc, #180]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c58:	4a2b      	ldr	r2, [pc, #172]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c6c:	e00a      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d102      	bne.n	8005c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e004      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b08      	cmp	r3, #8
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c80:	4b22      	ldr	r3, [pc, #136]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d134      	bne.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d003      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8005ca0:	e005      	b.n	8005cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ca4:	617b      	str	r3, [r7, #20]
      break;
 8005ca6:	e005      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ca8:	4b18      	ldr	r3, [pc, #96]	; (8005d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8005caa:	617b      	str	r3, [r7, #20]
      break;
 8005cac:	e002      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	617b      	str	r3, [r7, #20]
      break;
 8005cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cb4:	4b13      	ldr	r3, [pc, #76]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	fb03 f202 	mul.w	r2, r3, r2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	0e5b      	lsrs	r3, r3, #25
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3724      	adds	r7, #36	; 0x24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	0800b530 	.word	0x0800b530
 8005d0c:	00f42400 	.word	0x00f42400

08005d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d16:	681b      	ldr	r3, [r3, #0]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000000 	.word	0x20000000

08005d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d2c:	f7ff fff0 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	4904      	ldr	r1, [pc, #16]	; (8005d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	f003 031f 	and.w	r3, r3, #31
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	0800b528 	.word	0x0800b528

08005d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d58:	f7ff ffda 	bl	8005d10 <HAL_RCC_GetHCLKFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b06      	ldr	r3, [pc, #24]	; (8005d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	0adb      	lsrs	r3, r3, #11
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	4904      	ldr	r1, [pc, #16]	; (8005d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	0800b528 	.word	0x0800b528

08005d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d98:	f7ff f9b8 	bl	800510c <HAL_PWREx_GetVoltageRange>
 8005d9c:	6178      	str	r0, [r7, #20]
 8005d9e:	e014      	b.n	8005dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005da0:	4b25      	ldr	r3, [pc, #148]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	4a24      	ldr	r2, [pc, #144]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005daa:	6593      	str	r3, [r2, #88]	; 0x58
 8005dac:	4b22      	ldr	r3, [pc, #136]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005db8:	f7ff f9a8 	bl	800510c <HAL_PWREx_GetVoltageRange>
 8005dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dbe:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd0:	d10b      	bne.n	8005dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d919      	bls.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2ba0      	cmp	r3, #160	; 0xa0
 8005ddc:	d902      	bls.n	8005de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dde:	2302      	movs	r3, #2
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e013      	b.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005de4:	2301      	movs	r3, #1
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	e010      	b.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d902      	bls.n	8005df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005df0:	2303      	movs	r3, #3
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	e00a      	b.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d102      	bne.n	8005e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e004      	b.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d101      	bne.n	8005e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e08:	2301      	movs	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f023 0207 	bic.w	r2, r3, #7
 8005e14:	4909      	ldr	r1, [pc, #36]	; (8005e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e1c:	4b07      	ldr	r3, [pc, #28]	; (8005e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d001      	beq.n	8005e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40022000 	.word	0x40022000

08005e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e48:	2300      	movs	r3, #0
 8005e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d031      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e64:	d01a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005e66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e6a:	d814      	bhi.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d009      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e74:	d10f      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005e76:	4b5d      	ldr	r3, [pc, #372]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	4a5c      	ldr	r2, [pc, #368]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e82:	e00c      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f9f0 	bl	8006270 <RCCEx_PLLSAI1_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e94:	e003      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	74fb      	strb	r3, [r7, #19]
      break;
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea4:	4b51      	ldr	r3, [pc, #324]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	494e      	ldr	r1, [pc, #312]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005eba:	e001      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	7cfb      	ldrb	r3, [r7, #19]
 8005ebe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 809e 	beq.w	800600a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ed2:	4b46      	ldr	r3, [pc, #280]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00d      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee8:	4b40      	ldr	r3, [pc, #256]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	4a3f      	ldr	r2, [pc, #252]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef4:	4b3d      	ldr	r3, [pc, #244]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f00:	2301      	movs	r3, #1
 8005f02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f04:	4b3a      	ldr	r3, [pc, #232]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a39      	ldr	r2, [pc, #228]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f10:	f7fd fa46 	bl	80033a0 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f16:	e009      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f18:	f7fd fa42 	bl	80033a0 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d902      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	74fb      	strb	r3, [r7, #19]
        break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f2c:	4b30      	ldr	r3, [pc, #192]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ef      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d15a      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01e      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d019      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f66:	4b21      	ldr	r3, [pc, #132]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f76:	4b1d      	ldr	r3, [pc, #116]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f86:	4a19      	ldr	r2, [pc, #100]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d016      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd fa02 	bl	80033a0 <HAL_GetTick>
 8005f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9e:	e00b      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa0:	f7fd f9fe 	bl	80033a0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d902      	bls.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d0ec      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fda:	4904      	ldr	r1, [pc, #16]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fe2:	e009      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005fea:	bf00      	nop
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff8:	7c7b      	ldrb	r3, [r7, #17]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d105      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffe:	4b9b      	ldr	r3, [pc, #620]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006002:	4a9a      	ldr	r2, [pc, #616]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006016:	4b95      	ldr	r3, [pc, #596]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800601c:	f023 0203 	bic.w	r2, r3, #3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	4991      	ldr	r1, [pc, #580]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006038:	4b8c      	ldr	r3, [pc, #560]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800603a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603e:	f023 020c 	bic.w	r2, r3, #12
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	4989      	ldr	r1, [pc, #548]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800605a:	4b84      	ldr	r3, [pc, #528]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800605c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	4980      	ldr	r1, [pc, #512]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0320 	and.w	r3, r3, #32
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800607c:	4b7b      	ldr	r3, [pc, #492]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	4978      	ldr	r1, [pc, #480]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800609e:	4b73      	ldr	r3, [pc, #460]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ac:	496f      	ldr	r1, [pc, #444]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060c0:	4b6a      	ldr	r3, [pc, #424]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	4967      	ldr	r1, [pc, #412]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060e2:	4b62      	ldr	r3, [pc, #392]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	495e      	ldr	r1, [pc, #376]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006104:	4b59      	ldr	r3, [pc, #356]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	4956      	ldr	r1, [pc, #344]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006114:	4313      	orrs	r3, r2
 8006116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006126:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	494d      	ldr	r1, [pc, #308]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d028      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006156:	4945      	ldr	r1, [pc, #276]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006166:	d106      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	4b40      	ldr	r3, [pc, #256]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a3f      	ldr	r2, [pc, #252]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006172:	60d3      	str	r3, [r2, #12]
 8006174:	e011      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800617e:	d10c      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3304      	adds	r3, #4
 8006184:	2101      	movs	r1, #1
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f872 	bl	8006270 <RCCEx_PLLSAI1_Config>
 800618c:	4603      	mov	r3, r0
 800618e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8006196:	7cfb      	ldrb	r3, [r7, #19]
 8006198:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d028      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061a6:	4b31      	ldr	r3, [pc, #196]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b4:	492d      	ldr	r1, [pc, #180]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c4:	d106      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	4a28      	ldr	r2, [pc, #160]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80061cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d0:	60d3      	str	r3, [r2, #12]
 80061d2:	e011      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3304      	adds	r3, #4
 80061e2:	2101      	movs	r1, #1
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 f843 	bl	8006270 <RCCEx_PLLSAI1_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ee:	7cfb      	ldrb	r3, [r7, #19]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01c      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006204:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006212:	4916      	ldr	r1, [pc, #88]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006222:	d10c      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f820 	bl	8006270 <RCCEx_PLLSAI1_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006234:	7cfb      	ldrb	r3, [r7, #19]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800624a:	4b08      	ldr	r3, [pc, #32]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006258:	4904      	ldr	r1, [pc, #16]	; (800626c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006260:	7cbb      	ldrb	r3, [r7, #18]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40021000 	.word	0x40021000

08006270 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800627e:	4b74      	ldr	r3, [pc, #464]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d018      	beq.n	80062bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800628a:	4b71      	ldr	r3, [pc, #452]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0203 	and.w	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d10d      	bne.n	80062b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
       ||
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80062a2:	4b6b      	ldr	r3, [pc, #428]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	091b      	lsrs	r3, r3, #4
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
       ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d047      	beq.n	8006346 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	73fb      	strb	r3, [r7, #15]
 80062ba:	e044      	b.n	8006346 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d018      	beq.n	80062f6 <RCCEx_PLLSAI1_Config+0x86>
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d825      	bhi.n	8006314 <RCCEx_PLLSAI1_Config+0xa4>
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d002      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x62>
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d009      	beq.n	80062e4 <RCCEx_PLLSAI1_Config+0x74>
 80062d0:	e020      	b.n	8006314 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062d2:	4b5f      	ldr	r3, [pc, #380]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d11d      	bne.n	800631a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e2:	e01a      	b.n	800631a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062e4:	4b5a      	ldr	r3, [pc, #360]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d116      	bne.n	800631e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f4:	e013      	b.n	800631e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062f6:	4b56      	ldr	r3, [pc, #344]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10f      	bne.n	8006322 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006302:	4b53      	ldr	r3, [pc, #332]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006312:	e006      	b.n	8006322 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	73fb      	strb	r3, [r7, #15]
      break;
 8006318:	e004      	b.n	8006324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006322:	bf00      	nop
    }

    if(status == HAL_OK)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10d      	bne.n	8006346 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800632a:	4b49      	ldr	r3, [pc, #292]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	3b01      	subs	r3, #1
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	430b      	orrs	r3, r1
 8006340:	4943      	ldr	r1, [pc, #268]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006342:	4313      	orrs	r3, r2
 8006344:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d17c      	bne.n	8006446 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800634c:	4b40      	ldr	r3, [pc, #256]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a3f      	ldr	r2, [pc, #252]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006358:	f7fd f822 	bl	80033a0 <HAL_GetTick>
 800635c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800635e:	e009      	b.n	8006374 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006360:	f7fd f81e 	bl	80033a0 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d902      	bls.n	8006374 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	73fb      	strb	r3, [r7, #15]
        break;
 8006372:	e005      	b.n	8006380 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006374:	4b36      	ldr	r3, [pc, #216]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1ef      	bne.n	8006360 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d15f      	bne.n	8006446 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d110      	bne.n	80063ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800638c:	4b30      	ldr	r3, [pc, #192]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006394:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6892      	ldr	r2, [r2, #8]
 800639c:	0211      	lsls	r1, r2, #8
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68d2      	ldr	r2, [r2, #12]
 80063a2:	06d2      	lsls	r2, r2, #27
 80063a4:	430a      	orrs	r2, r1
 80063a6:	492a      	ldr	r1, [pc, #168]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	610b      	str	r3, [r1, #16]
 80063ac:	e027      	b.n	80063fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d112      	bne.n	80063da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b4:	4b26      	ldr	r3, [pc, #152]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80063bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6892      	ldr	r2, [r2, #8]
 80063c4:	0211      	lsls	r1, r2, #8
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6912      	ldr	r2, [r2, #16]
 80063ca:	0852      	lsrs	r2, r2, #1
 80063cc:	3a01      	subs	r2, #1
 80063ce:	0552      	lsls	r2, r2, #21
 80063d0:	430a      	orrs	r2, r1
 80063d2:	491f      	ldr	r1, [pc, #124]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	610b      	str	r3, [r1, #16]
 80063d8:	e011      	b.n	80063fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063da:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6892      	ldr	r2, [r2, #8]
 80063ea:	0211      	lsls	r1, r2, #8
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6952      	ldr	r2, [r2, #20]
 80063f0:	0852      	lsrs	r2, r2, #1
 80063f2:	3a01      	subs	r2, #1
 80063f4:	0652      	lsls	r2, r2, #25
 80063f6:	430a      	orrs	r2, r1
 80063f8:	4915      	ldr	r1, [pc, #84]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a13      	ldr	r2, [pc, #76]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006404:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006408:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fc ffc9 	bl	80033a0 <HAL_GetTick>
 800640e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006410:	e009      	b.n	8006426 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006412:	f7fc ffc5 	bl	80033a0 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d902      	bls.n	8006426 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	73fb      	strb	r3, [r7, #15]
          break;
 8006424:	e005      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ef      	beq.n	8006412 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006438:	4b05      	ldr	r3, [pc, #20]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	4903      	ldr	r1, [pc, #12]	; (8006450 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006442:	4313      	orrs	r3, r2
 8006444:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006446:	7bfb      	ldrb	r3, [r7, #15]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40021000 	.word	0x40021000

08006454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e049      	b.n	80064fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fc f8f4 	bl	8002668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f000 faca 	bl	8006a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e03b      	b.n	8006594 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0x4e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d004      	beq.n	8006552 <HAL_TIM_Base_Start_IT+0x4e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <HAL_TIM_Base_Start_IT+0xa0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d115      	bne.n	800657e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	4b13      	ldr	r3, [pc, #76]	; (80065a8 <HAL_TIM_Base_Start_IT+0xa4>)
 800655a:	4013      	ands	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b06      	cmp	r3, #6
 8006562:	d015      	beq.n	8006590 <HAL_TIM_Base_Start_IT+0x8c>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656a:	d011      	beq.n	8006590 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	e008      	b.n	8006590 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0201 	orr.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e000      	b.n	8006592 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	40012c00 	.word	0x40012c00
 80065a4:	40014000 	.word	0x40014000
 80065a8:	00010007 	.word	0x00010007

080065ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ce:	4013      	ands	r3, r2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <HAL_TIM_Base_Stop_IT+0x48>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6a1a      	ldr	r2, [r3, #32]
 80065da:	f240 4344 	movw	r3, #1092	; 0x444
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_Base_Stop_IT+0x48>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0201 	bic.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b02      	cmp	r3, #2
 800661e:	d122      	bne.n	8006666 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d11b      	bne.n	8006666 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f06f 0202 	mvn.w	r2, #2
 8006636:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	f003 0303 	and.w	r3, r3, #3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9ce 	bl	80069ee <HAL_TIM_IC_CaptureCallback>
 8006652:	e005      	b.n	8006660 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9c0 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f9d1 	bl	8006a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d122      	bne.n	80066ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d11b      	bne.n	80066ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0204 	mvn.w	r2, #4
 800668a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9a4 	bl	80069ee <HAL_TIM_IC_CaptureCallback>
 80066a6:	e005      	b.n	80066b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f996 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9a7 	bl	8006a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d122      	bne.n	800670e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d11b      	bne.n	800670e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f06f 0208 	mvn.w	r2, #8
 80066de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f97a 	bl	80069ee <HAL_TIM_IC_CaptureCallback>
 80066fa:	e005      	b.n	8006708 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f96c 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f97d 	bl	8006a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d122      	bne.n	8006762 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d11b      	bne.n	8006762 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f06f 0210 	mvn.w	r2, #16
 8006732:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2208      	movs	r2, #8
 8006738:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f950 	bl	80069ee <HAL_TIM_IC_CaptureCallback>
 800674e:	e005      	b.n	800675c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f942 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f953 	bl	8006a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d10e      	bne.n	800678e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f06f 0201 	mvn.w	r2, #1
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7fb ffc1 	bl	8002710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d10e      	bne.n	80067ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d107      	bne.n	80067ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 faa7 	bl	8006d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fa9a 	bl	8006d1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d10e      	bne.n	8006814 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d107      	bne.n	8006814 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f901 	bl	8006a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b20      	cmp	r3, #32
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0220 	mvn.w	r2, #32
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa5a 	bl	8006cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_TIM_ConfigClockSource+0x1c>
 8006860:	2302      	movs	r3, #2
 8006862:	e0b6      	b.n	80069d2 <HAL_TIM_ConfigClockSource+0x18a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d03e      	beq.n	8006920 <HAL_TIM_ConfigClockSource+0xd8>
 80068a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a6:	f200 8087 	bhi.w	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ae:	f000 8086 	beq.w	80069be <HAL_TIM_ConfigClockSource+0x176>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d87f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068b8:	2b70      	cmp	r3, #112	; 0x70
 80068ba:	d01a      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0xaa>
 80068bc:	2b70      	cmp	r3, #112	; 0x70
 80068be:	d87b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068c0:	2b60      	cmp	r3, #96	; 0x60
 80068c2:	d050      	beq.n	8006966 <HAL_TIM_ConfigClockSource+0x11e>
 80068c4:	2b60      	cmp	r3, #96	; 0x60
 80068c6:	d877      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068c8:	2b50      	cmp	r3, #80	; 0x50
 80068ca:	d03c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xfe>
 80068cc:	2b50      	cmp	r3, #80	; 0x50
 80068ce:	d873      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d058      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0x13e>
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d86f      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068d8:	2b30      	cmp	r3, #48	; 0x30
 80068da:	d064      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15e>
 80068dc:	2b30      	cmp	r3, #48	; 0x30
 80068de:	d86b      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068e0:	2b20      	cmp	r3, #32
 80068e2:	d060      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15e>
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d867      	bhi.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05c      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15e>
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d05a      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0x15e>
 80068f0:	e062      	b.n	80069b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	6899      	ldr	r1, [r3, #8]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f000 f971 	bl	8006be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	609a      	str	r2, [r3, #8]
      break;
 800691e:	e04f      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	6899      	ldr	r1, [r3, #8]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f000 f95a 	bl	8006be8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006942:	609a      	str	r2, [r3, #8]
      break;
 8006944:	e03c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6859      	ldr	r1, [r3, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	461a      	mov	r2, r3
 8006954:	f000 f8ce 	bl	8006af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2150      	movs	r1, #80	; 0x50
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f927 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006964:	e02c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	461a      	mov	r2, r3
 8006974:	f000 f8ed 	bl	8006b52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2160      	movs	r1, #96	; 0x60
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f917 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 8006984:	e01c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6859      	ldr	r1, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	461a      	mov	r2, r3
 8006994:	f000 f8ae 	bl	8006af4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2140      	movs	r1, #64	; 0x40
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f907 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80069a4:	e00c      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4619      	mov	r1, r3
 80069b0:	4610      	mov	r0, r2
 80069b2:	f000 f8fe 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80069b6:	e003      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
      break;
 80069bc:	e000      	b.n	80069c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <TIM_Base_SetConfig+0xbc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_Base_SetConfig+0x20>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4a:	d108      	bne.n	8006a5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <TIM_Base_SetConfig+0xbc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_Base_SetConfig+0x52>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a6c:	d007      	beq.n	8006a7e <TIM_Base_SetConfig+0x52>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <TIM_Base_SetConfig+0xc0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_Base_SetConfig+0x52>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <TIM_Base_SetConfig+0xc4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <TIM_Base_SetConfig+0xbc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_Base_SetConfig+0xa0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0b      	ldr	r2, [pc, #44]	; (8006aec <TIM_Base_SetConfig+0xc0>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0xa0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <TIM_Base_SetConfig+0xc4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400

08006af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f023 030a 	bic.w	r3, r3, #10
 8006b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0210 	bic.w	r2, r3, #16
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	031b      	lsls	r3, r3, #12
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f043 0307 	orr.w	r3, r3, #7
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	609a      	str	r2, [r3, #8]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
 8006bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	021a      	lsls	r2, r3, #8
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	609a      	str	r2, [r3, #8]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e04f      	b.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a21      	ldr	r2, [pc, #132]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d108      	bne.n	8006c7c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c70:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a14      	ldr	r2, [pc, #80]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d009      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10c      	bne.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40014000 	.word	0x40014000

08006cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e040      	b.n	8006dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fb fdb8 	bl	80028c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2224      	movs	r2, #36	; 0x24
 8006d5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fc02 	bl	8007578 <UART_SetConfig>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e022      	b.n	8006dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fe50 	bl	8007a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f042 0201 	orr.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fed7 	bl	8007b70 <UART_CheckIdleState>
 8006dc2:	4603      	mov	r3, r0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	f040 8082 	bne.w	8006eea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <HAL_UART_Transmit+0x26>
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e07a      	b.n	8006eec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d101      	bne.n	8006e04 <HAL_UART_Transmit+0x38>
 8006e00:	2302      	movs	r3, #2
 8006e02:	e073      	b.n	8006eec <HAL_UART_Transmit+0x120>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2221      	movs	r2, #33	; 0x21
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e1a:	f7fc fac1 	bl	80033a0 <HAL_GetTick>
 8006e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	88fa      	ldrh	r2, [r7, #6]
 8006e24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	88fa      	ldrh	r2, [r7, #6]
 8006e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e38:	d108      	bne.n	8006e4c <HAL_UART_Transmit+0x80>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	e003      	b.n	8006e54 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e5c:	e02d      	b.n	8006eba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	2200      	movs	r2, #0
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 feca 	bl	8007c02 <UART_WaitOnFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e039      	b.n	8006eec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10b      	bne.n	8006e96 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	881a      	ldrh	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e8a:	b292      	uxth	r2, r2
 8006e8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	3302      	adds	r3, #2
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	e008      	b.n	8006ea8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	781a      	ldrb	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1cb      	bne.n	8006e5e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	2140      	movs	r1, #64	; 0x40
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 fe96 	bl	8007c02 <UART_WaitOnFlagUntilTimeout>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e005      	b.n	8006eec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e000      	b.n	8006eec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006eea:	2302      	movs	r3, #2
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08a      	sub	sp, #40	; 0x28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d142      	bne.n	8006f90 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_UART_Receive_IT+0x22>
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e03b      	b.n	8006f92 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Receive_IT+0x34>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e034      	b.n	8006f92 <HAL_UART_Receive_IT+0x9e>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <HAL_UART_Receive_IT+0xa8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01f      	beq.n	8006f80 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	69f9      	ldr	r1, [r7, #28]
 8006f72:	6a3a      	ldr	r2, [r7, #32]
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 ff00 	bl	8007d8c <UART_Start_Receive_IT>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	e000      	b.n	8006f92 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3728      	adds	r7, #40	; 0x28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40008000 	.word	0x40008000

08006fa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b0ba      	sub	sp, #232	; 0xe8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006fc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006fca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006fce:	4013      	ands	r3, r2
 8006fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006fd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d115      	bne.n	8007008 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00f      	beq.n	8007008 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fec:	f003 0320 	and.w	r3, r3, #32
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 82a6 	beq.w	800754a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
      }
      return;
 8007006:	e2a0      	b.n	800754a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8117 	beq.w	8007240 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800701e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007022:	4b85      	ldr	r3, [pc, #532]	; (8007238 <HAL_UART_IRQHandler+0x298>)
 8007024:	4013      	ands	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 810a 	beq.w	8007240 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d011      	beq.n	800705c <HAL_UART_IRQHandler+0xbc>
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2201      	movs	r2, #1
 800704a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007052:	f043 0201 	orr.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800705c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_UART_IRQHandler+0xec>
 8007068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2202      	movs	r2, #2
 800707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007082:	f043 0204 	orr.w	r2, r3, #4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d011      	beq.n	80070bc <HAL_UART_IRQHandler+0x11c>
 8007098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2204      	movs	r2, #4
 80070aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b2:	f043 0202 	orr.w	r2, r3, #2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80070bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d017      	beq.n	80070f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2208      	movs	r2, #8
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070ee:	f043 0208 	orr.w	r2, r3, #8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007100:	2b00      	cmp	r3, #0
 8007102:	d012      	beq.n	800712a <HAL_UART_IRQHandler+0x18a>
 8007104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00c      	beq.n	800712a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 820c 	beq.w	800754e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d007      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007164:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d005      	beq.n	8007182 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800717a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800717e:	2b00      	cmp	r3, #0
 8007180:	d04f      	beq.n	8007222 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fecc 	bl	8007f20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d141      	bne.n	800721a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3308      	adds	r3, #8
 800719c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80071c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80071ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80071da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1d9      	bne.n	8007196 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d013      	beq.n	8007212 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	4a13      	ldr	r2, [pc, #76]	; (800723c <HAL_UART_IRQHandler+0x29c>)
 80071f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fd fcf6 	bl	8004be8 <HAL_DMA_Abort_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007210:	e00f      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9a6 	bl	8007564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007218:	e00b      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f9a2 	bl	8007564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007220:	e007      	b.n	8007232 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f99e 	bl	8007564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007230:	e18d      	b.n	800754e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007232:	bf00      	nop
    return;
 8007234:	e18b      	b.n	800754e <HAL_UART_IRQHandler+0x5ae>
 8007236:	bf00      	nop
 8007238:	04000120 	.word	0x04000120
 800723c:	08007fe7 	.word	0x08007fe7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007244:	2b01      	cmp	r3, #1
 8007246:	f040 8146 	bne.w	80074d6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f003 0310 	and.w	r3, r3, #16
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 813f 	beq.w	80074d6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8138 	beq.w	80074d6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2210      	movs	r2, #16
 800726c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	f040 80b4 	bne.w	80073e6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800728a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 815f 	beq.w	8007552 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800729a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800729e:	429a      	cmp	r2, r3
 80072a0:	f080 8157 	bcs.w	8007552 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 8085 	bne.w	80073ca <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80072d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80072ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1da      	bne.n	80072c0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3308      	adds	r3, #8
 8007310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800731a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3308      	adds	r3, #8
 800732a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800732e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007332:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007336:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e1      	bne.n	800730a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3308      	adds	r3, #8
 800734c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800736a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800736c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e3      	bne.n	8007346 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2220      	movs	r2, #32
 8007382:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800739a:	f023 0310 	bic.w	r3, r3, #16
 800739e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80073ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e4      	bne.n	800738a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fd fbd1 	bl	8004b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	b29b      	uxth	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fb fbe8 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073e4:	e0b5      	b.n	8007552 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80a7 	beq.w	8007556 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 80a2 	beq.w	8007556 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741a:	e853 3f00 	ldrex	r3, [r3]
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007434:	647b      	str	r3, [r7, #68]	; 0x44
 8007436:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800743a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e4      	bne.n	8007412 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	623b      	str	r3, [r7, #32]
   return(result);
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800746c:	633a      	str	r2, [r7, #48]	; 0x30
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e3      	bne.n	8007448 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60fb      	str	r3, [r7, #12]
   return(result);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	617b      	str	r3, [r7, #20]
   return(result);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e4      	bne.n	8007492 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074cc:	4619      	mov	r1, r3
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fb fb70 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074d4:	e03f      	b.n	8007556 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00e      	beq.n	8007500 <HAL_UART_IRQHandler+0x560>
 80074e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d008      	beq.n	8007500 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80074f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 ff14 	bl	8008326 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074fe:	e02d      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007514:	2b00      	cmp	r3, #0
 8007516:	d008      	beq.n	800752a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01c      	beq.n	800755a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
    }
    return;
 8007528:	e017      	b.n	800755a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d012      	beq.n	800755c <HAL_UART_IRQHandler+0x5bc>
 8007536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd65 	bl	8008012 <UART_EndTransmit_IT>
    return;
 8007548:	e008      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
      return;
 800754a:	bf00      	nop
 800754c:	e006      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
    return;
 800754e:	bf00      	nop
 8007550:	e004      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007552:	bf00      	nop
 8007554:	e002      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007556:	bf00      	nop
 8007558:	e000      	b.n	800755c <HAL_UART_IRQHandler+0x5bc>
    return;
 800755a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800755c:	37e8      	adds	r7, #232	; 0xe8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop

08007564 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800757c:	b08a      	sub	sp, #40	; 0x28
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	431a      	orrs	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b9e      	ldr	r3, [pc, #632]	; (8007820 <UART_SetConfig+0x2a8>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075b0:	430b      	orrs	r3, r1
 80075b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a93      	ldr	r2, [pc, #588]	; (8007824 <UART_SetConfig+0x2ac>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e0:	4313      	orrs	r3, r2
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	430a      	orrs	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a8a      	ldr	r2, [pc, #552]	; (8007828 <UART_SetConfig+0x2b0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d126      	bne.n	8007650 <UART_SetConfig+0xd8>
 8007602:	4b8a      	ldr	r3, [pc, #552]	; (800782c <UART_SetConfig+0x2b4>)
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0xd0>
 8007610:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <UART_SetConfig+0xa0>)
 8007612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007616:	bf00      	nop
 8007618:	08007629 	.word	0x08007629
 800761c:	08007639 	.word	0x08007639
 8007620:	08007631 	.word	0x08007631
 8007624:	08007641 	.word	0x08007641
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e0ab      	b.n	8007788 <UART_SetConfig+0x210>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007636:	e0a7      	b.n	8007788 <UART_SetConfig+0x210>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763e:	e0a3      	b.n	8007788 <UART_SetConfig+0x210>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007646:	e09f      	b.n	8007788 <UART_SetConfig+0x210>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764e:	e09b      	b.n	8007788 <UART_SetConfig+0x210>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a76      	ldr	r2, [pc, #472]	; (8007830 <UART_SetConfig+0x2b8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d138      	bne.n	80076cc <UART_SetConfig+0x154>
 800765a:	4b74      	ldr	r3, [pc, #464]	; (800782c <UART_SetConfig+0x2b4>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	f003 030c 	and.w	r3, r3, #12
 8007664:	2b0c      	cmp	r3, #12
 8007666:	d82d      	bhi.n	80076c4 <UART_SetConfig+0x14c>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0xf8>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	080076a5 	.word	0x080076a5
 8007674:	080076c5 	.word	0x080076c5
 8007678:	080076c5 	.word	0x080076c5
 800767c:	080076c5 	.word	0x080076c5
 8007680:	080076b5 	.word	0x080076b5
 8007684:	080076c5 	.word	0x080076c5
 8007688:	080076c5 	.word	0x080076c5
 800768c:	080076c5 	.word	0x080076c5
 8007690:	080076ad 	.word	0x080076ad
 8007694:	080076c5 	.word	0x080076c5
 8007698:	080076c5 	.word	0x080076c5
 800769c:	080076c5 	.word	0x080076c5
 80076a0:	080076bd 	.word	0x080076bd
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076aa:	e06d      	b.n	8007788 <UART_SetConfig+0x210>
 80076ac:	2302      	movs	r3, #2
 80076ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076b2:	e069      	b.n	8007788 <UART_SetConfig+0x210>
 80076b4:	2304      	movs	r3, #4
 80076b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ba:	e065      	b.n	8007788 <UART_SetConfig+0x210>
 80076bc:	2308      	movs	r3, #8
 80076be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c2:	e061      	b.n	8007788 <UART_SetConfig+0x210>
 80076c4:	2310      	movs	r3, #16
 80076c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ca:	e05d      	b.n	8007788 <UART_SetConfig+0x210>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a58      	ldr	r2, [pc, #352]	; (8007834 <UART_SetConfig+0x2bc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d125      	bne.n	8007722 <UART_SetConfig+0x1aa>
 80076d6:	4b55      	ldr	r3, [pc, #340]	; (800782c <UART_SetConfig+0x2b4>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076e0:	2b30      	cmp	r3, #48	; 0x30
 80076e2:	d016      	beq.n	8007712 <UART_SetConfig+0x19a>
 80076e4:	2b30      	cmp	r3, #48	; 0x30
 80076e6:	d818      	bhi.n	800771a <UART_SetConfig+0x1a2>
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d00a      	beq.n	8007702 <UART_SetConfig+0x18a>
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d814      	bhi.n	800771a <UART_SetConfig+0x1a2>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <UART_SetConfig+0x182>
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d008      	beq.n	800770a <UART_SetConfig+0x192>
 80076f8:	e00f      	b.n	800771a <UART_SetConfig+0x1a2>
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007700:	e042      	b.n	8007788 <UART_SetConfig+0x210>
 8007702:	2302      	movs	r3, #2
 8007704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007708:	e03e      	b.n	8007788 <UART_SetConfig+0x210>
 800770a:	2304      	movs	r3, #4
 800770c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007710:	e03a      	b.n	8007788 <UART_SetConfig+0x210>
 8007712:	2308      	movs	r3, #8
 8007714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007718:	e036      	b.n	8007788 <UART_SetConfig+0x210>
 800771a:	2310      	movs	r3, #16
 800771c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007720:	e032      	b.n	8007788 <UART_SetConfig+0x210>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a3f      	ldr	r2, [pc, #252]	; (8007824 <UART_SetConfig+0x2ac>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d12a      	bne.n	8007782 <UART_SetConfig+0x20a>
 800772c:	4b3f      	ldr	r3, [pc, #252]	; (800782c <UART_SetConfig+0x2b4>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800773a:	d01a      	beq.n	8007772 <UART_SetConfig+0x1fa>
 800773c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007740:	d81b      	bhi.n	800777a <UART_SetConfig+0x202>
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d00c      	beq.n	8007762 <UART_SetConfig+0x1ea>
 8007748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800774c:	d815      	bhi.n	800777a <UART_SetConfig+0x202>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <UART_SetConfig+0x1e2>
 8007752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007756:	d008      	beq.n	800776a <UART_SetConfig+0x1f2>
 8007758:	e00f      	b.n	800777a <UART_SetConfig+0x202>
 800775a:	2300      	movs	r3, #0
 800775c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007760:	e012      	b.n	8007788 <UART_SetConfig+0x210>
 8007762:	2302      	movs	r3, #2
 8007764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007768:	e00e      	b.n	8007788 <UART_SetConfig+0x210>
 800776a:	2304      	movs	r3, #4
 800776c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007770:	e00a      	b.n	8007788 <UART_SetConfig+0x210>
 8007772:	2308      	movs	r3, #8
 8007774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007778:	e006      	b.n	8007788 <UART_SetConfig+0x210>
 800777a:	2310      	movs	r3, #16
 800777c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007780:	e002      	b.n	8007788 <UART_SetConfig+0x210>
 8007782:	2310      	movs	r3, #16
 8007784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a25      	ldr	r2, [pc, #148]	; (8007824 <UART_SetConfig+0x2ac>)
 800778e:	4293      	cmp	r3, r2
 8007790:	f040 808a 	bne.w	80078a8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007798:	2b08      	cmp	r3, #8
 800779a:	d824      	bhi.n	80077e6 <UART_SetConfig+0x26e>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x22c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077e7 	.word	0x080077e7
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077d7 	.word	0x080077d7
 80077b8:	080077e7 	.word	0x080077e7
 80077bc:	080077e7 	.word	0x080077e7
 80077c0:	080077e7 	.word	0x080077e7
 80077c4:	080077df 	.word	0x080077df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c8:	f7fe faae 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 80077cc:	61f8      	str	r0, [r7, #28]
        break;
 80077ce:	e010      	b.n	80077f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077d0:	4b19      	ldr	r3, [pc, #100]	; (8007838 <UART_SetConfig+0x2c0>)
 80077d2:	61fb      	str	r3, [r7, #28]
        break;
 80077d4:	e00d      	b.n	80077f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077d6:	f7fe fa11 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 80077da:	61f8      	str	r0, [r7, #28]
        break;
 80077dc:	e009      	b.n	80077f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e2:	61fb      	str	r3, [r7, #28]
        break;
 80077e4:	e005      	b.n	80077f2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 8109 	beq.w	8007a0c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4413      	add	r3, r2
 8007804:	69fa      	ldr	r2, [r7, #28]
 8007806:	429a      	cmp	r2, r3
 8007808:	d305      	bcc.n	8007816 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	429a      	cmp	r2, r3
 8007814:	d912      	bls.n	800783c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800781c:	e0f6      	b.n	8007a0c <UART_SetConfig+0x494>
 800781e:	bf00      	nop
 8007820:	efff69f3 	.word	0xefff69f3
 8007824:	40008000 	.word	0x40008000
 8007828:	40013800 	.word	0x40013800
 800782c:	40021000 	.word	0x40021000
 8007830:	40004400 	.word	0x40004400
 8007834:	40004800 	.word	0x40004800
 8007838:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2200      	movs	r2, #0
 8007840:	461c      	mov	r4, r3
 8007842:	4615      	mov	r5, r2
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	022b      	lsls	r3, r5, #8
 800784e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007852:	0222      	lsls	r2, r4, #8
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	6849      	ldr	r1, [r1, #4]
 8007858:	0849      	lsrs	r1, r1, #1
 800785a:	2000      	movs	r0, #0
 800785c:	4688      	mov	r8, r1
 800785e:	4681      	mov	r9, r0
 8007860:	eb12 0a08 	adds.w	sl, r2, r8
 8007864:	eb43 0b09 	adc.w	fp, r3, r9
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007876:	4650      	mov	r0, sl
 8007878:	4659      	mov	r1, fp
 800787a:	f7f9 f9e5 	bl	8000c48 <__aeabi_uldivmod>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4613      	mov	r3, r2
 8007884:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800788c:	d308      	bcc.n	80078a0 <UART_SetConfig+0x328>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007894:	d204      	bcs.n	80078a0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	e0b5      	b.n	8007a0c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078a6:	e0b1      	b.n	8007a0c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b0:	d15d      	bne.n	800796e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80078b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d827      	bhi.n	800790a <UART_SetConfig+0x392>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x348>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	0800790b 	.word	0x0800790b
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	0800790b 	.word	0x0800790b
 80078d8:	0800790b 	.word	0x0800790b
 80078dc:	0800790b 	.word	0x0800790b
 80078e0:	08007903 	.word	0x08007903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fe fa20 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 80078e8:	61f8      	str	r0, [r7, #28]
        break;
 80078ea:	e014      	b.n	8007916 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ec:	f7fe fa32 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 80078f0:	61f8      	str	r0, [r7, #28]
        break;
 80078f2:	e010      	b.n	8007916 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f4:	4b4c      	ldr	r3, [pc, #304]	; (8007a28 <UART_SetConfig+0x4b0>)
 80078f6:	61fb      	str	r3, [r7, #28]
        break;
 80078f8:	e00d      	b.n	8007916 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fa:	f7fe f97f 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 80078fe:	61f8      	str	r0, [r7, #28]
        break;
 8007900:	e009      	b.n	8007916 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	61fb      	str	r3, [r7, #28]
        break;
 8007908:	e005      	b.n	8007916 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d077      	beq.n	8007a0c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	005a      	lsls	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	085b      	lsrs	r3, r3, #1
 8007926:	441a      	add	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007930:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2b0f      	cmp	r3, #15
 8007936:	d916      	bls.n	8007966 <UART_SetConfig+0x3ee>
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793e:	d212      	bcs.n	8007966 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f023 030f 	bic.w	r3, r3, #15
 8007948:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	b29b      	uxth	r3, r3
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	b29a      	uxth	r2, r3
 8007956:	8afb      	ldrh	r3, [r7, #22]
 8007958:	4313      	orrs	r3, r2
 800795a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	8afa      	ldrh	r2, [r7, #22]
 8007962:	60da      	str	r2, [r3, #12]
 8007964:	e052      	b.n	8007a0c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800796c:	e04e      	b.n	8007a0c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800796e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007972:	2b08      	cmp	r3, #8
 8007974:	d827      	bhi.n	80079c6 <UART_SetConfig+0x44e>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <UART_SetConfig+0x404>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	080079a1 	.word	0x080079a1
 8007980:	080079a9 	.word	0x080079a9
 8007984:	080079b1 	.word	0x080079b1
 8007988:	080079c7 	.word	0x080079c7
 800798c:	080079b7 	.word	0x080079b7
 8007990:	080079c7 	.word	0x080079c7
 8007994:	080079c7 	.word	0x080079c7
 8007998:	080079c7 	.word	0x080079c7
 800799c:	080079bf 	.word	0x080079bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a0:	f7fe f9c2 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 80079a4:	61f8      	str	r0, [r7, #28]
        break;
 80079a6:	e014      	b.n	80079d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a8:	f7fe f9d4 	bl	8005d54 <HAL_RCC_GetPCLK2Freq>
 80079ac:	61f8      	str	r0, [r7, #28]
        break;
 80079ae:	e010      	b.n	80079d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079b0:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <UART_SetConfig+0x4b0>)
 80079b2:	61fb      	str	r3, [r7, #28]
        break;
 80079b4:	e00d      	b.n	80079d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079b6:	f7fe f921 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 80079ba:	61f8      	str	r0, [r7, #28]
        break;
 80079bc:	e009      	b.n	80079d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c2:	61fb      	str	r3, [r7, #28]
        break;
 80079c4:	e005      	b.n	80079d2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079d0:	bf00      	nop
    }

    if (pclk != 0U)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d019      	beq.n	8007a0c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	085a      	lsrs	r2, r3, #1
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	441a      	add	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b0f      	cmp	r3, #15
 80079f0:	d909      	bls.n	8007a06 <UART_SetConfig+0x48e>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f8:	d205      	bcs.n	8007a06 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60da      	str	r2, [r3, #12]
 8007a04:	e002      	b.n	8007a0c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007a18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3728      	adds	r7, #40	; 0x28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a26:	bf00      	nop
 8007a28:	00f42400 	.word	0x00f42400

08007a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00a      	beq.n	8007a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00a      	beq.n	8007a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00a      	beq.n	8007a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	430a      	orrs	r2, r1
 8007aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00a      	beq.n	8007ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d01a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b2a:	d10a      	bne.n	8007b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b80:	f7fb fc0e 	bl	80033a0 <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0308 	and.w	r3, r3, #8
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d10e      	bne.n	8007bb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f82d 	bl	8007c02 <UART_WaitOnFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e023      	b.n	8007bfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d10e      	bne.n	8007bde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f817 	bl	8007c02 <UART_WaitOnFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e00d      	b.n	8007bfa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2220      	movs	r2, #32
 8007be2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b09c      	sub	sp, #112	; 0x70
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c12:	e0a5      	b.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	f000 80a1 	beq.w	8007d60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c1e:	f7fb fbbf 	bl	80033a0 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d302      	bcc.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d13e      	bne.n	8007cb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c48:	667b      	str	r3, [r7, #100]	; 0x64
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e6      	bne.n	8007c34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	f023 0301 	bic.w	r3, r3, #1
 8007c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c86:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e5      	bne.n	8007c66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e067      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d04f      	beq.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cce:	d147      	bne.n	8007d60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3308      	adds	r3, #8
 8007d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d2c:	623a      	str	r2, [r7, #32]
 8007d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	69f9      	ldr	r1, [r7, #28]
 8007d32:	6a3a      	ldr	r2, [r7, #32]
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e5      	bne.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e010      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	69da      	ldr	r2, [r3, #28]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	bf0c      	ite	eq
 8007d70:	2301      	moveq	r3, #1
 8007d72:	2300      	movne	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	461a      	mov	r2, r3
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	f43f af4a 	beq.w	8007c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3770      	adds	r7, #112	; 0x70
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b097      	sub	sp, #92	; 0x5c
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	88fa      	ldrh	r2, [r7, #6]
 8007da4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dbe:	d10e      	bne.n	8007dde <UART_Start_Receive_IT+0x52>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d105      	bne.n	8007dd4 <UART_Start_Receive_IT+0x48>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dd2:	e02d      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	22ff      	movs	r2, #255	; 0xff
 8007dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ddc:	e028      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10d      	bne.n	8007e02 <UART_Start_Receive_IT+0x76>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <UART_Start_Receive_IT+0x6c>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	22ff      	movs	r2, #255	; 0xff
 8007df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007df6:	e01b      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	227f      	movs	r2, #127	; 0x7f
 8007dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e00:	e016      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e0a:	d10d      	bne.n	8007e28 <UART_Start_Receive_IT+0x9c>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d104      	bne.n	8007e1e <UART_Start_Receive_IT+0x92>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	227f      	movs	r2, #127	; 0x7f
 8007e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e1c:	e008      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	223f      	movs	r2, #63	; 0x3f
 8007e22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e26:	e003      	b.n	8007e30 <UART_Start_Receive_IT+0xa4>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2222      	movs	r2, #34	; 0x22
 8007e3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3308      	adds	r3, #8
 8007e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e48:	e853 3f00 	ldrex	r3, [r3]
 8007e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	657b      	str	r3, [r7, #84]	; 0x54
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e5      	bne.n	8007e3e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7a:	d107      	bne.n	8007e8c <UART_Start_Receive_IT+0x100>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <UART_Start_Receive_IT+0x18c>)
 8007e88:	665a      	str	r2, [r3, #100]	; 0x64
 8007e8a:	e002      	b.n	8007e92 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4a23      	ldr	r2, [pc, #140]	; (8007f1c <UART_Start_Receive_IT+0x190>)
 8007e90:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d019      	beq.n	8007ed6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e6      	bne.n	8007ea2 <UART_Start_Receive_IT+0x116>
 8007ed4:	e018      	b.n	8007f08 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f043 0320 	orr.w	r3, r3, #32
 8007eea:	653b      	str	r3, [r7, #80]	; 0x50
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef4:	623b      	str	r3, [r7, #32]
 8007ef6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69f9      	ldr	r1, [r7, #28]
 8007efa:	6a3a      	ldr	r2, [r7, #32]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e6      	bne.n	8007ed6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	375c      	adds	r7, #92	; 0x5c
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	080081c7 	.word	0x080081c7
 8007f1c:	08008067 	.word	0x08008067

08007f20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b095      	sub	sp, #84	; 0x54
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	643b      	str	r3, [r7, #64]	; 0x40
 8007f48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f4e:	e841 2300 	strex	r3, r2, [r1]
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1e6      	bne.n	8007f28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	3308      	adds	r3, #8
 8007f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f023 0301 	bic.w	r3, r3, #1
 8007f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e5      	bne.n	8007f5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d118      	bne.n	8007fc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f023 0310 	bic.w	r3, r3, #16
 8007faa:	647b      	str	r3, [r7, #68]	; 0x44
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb4:	61bb      	str	r3, [r7, #24]
 8007fb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	69ba      	ldr	r2, [r7, #24]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007fda:	bf00      	nop
 8007fdc:	3754      	adds	r7, #84	; 0x54
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f7ff faad 	bl	8007564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800800a:	bf00      	nop
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	60bb      	str	r3, [r7, #8]
   return(result);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802e:	61fb      	str	r3, [r7, #28]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	61bb      	str	r3, [r7, #24]
 800803a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6979      	ldr	r1, [r7, #20]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2220      	movs	r2, #32
 8008050:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7fa fdb7 	bl	8002bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800805e:	bf00      	nop
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b096      	sub	sp, #88	; 0x58
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008074:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800807c:	2b22      	cmp	r3, #34	; 0x22
 800807e:	f040 8094 	bne.w	80081aa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008088:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800808c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008090:	b2d9      	uxtb	r1, r3
 8008092:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008096:	b2da      	uxtb	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	400a      	ands	r2, r1
 800809e:	b2d2      	uxtb	r2, r2
 80080a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	1c5a      	adds	r2, r3, #1
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d179      	bne.n	80081be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e8:	647b      	str	r3, [r7, #68]	; 0x44
 80080ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	623b      	str	r3, [r7, #32]
   return(result);
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3308      	adds	r3, #8
 800811a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800811c:	633a      	str	r2, [r7, #48]	; 0x30
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2220      	movs	r2, #32
 8008134:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008140:	2b01      	cmp	r3, #1
 8008142:	d12e      	bne.n	80081a2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	e853 3f00 	ldrex	r3, [r3]
 8008156:	60fb      	str	r3, [r7, #12]
   return(result);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0310 	bic.w	r3, r3, #16
 800815e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	461a      	mov	r2, r3
 8008166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	69b9      	ldr	r1, [r7, #24]
 800816e:	69fa      	ldr	r2, [r7, #28]
 8008170:	e841 2300 	strex	r3, r2, [r1]
 8008174:	617b      	str	r3, [r7, #20]
   return(result);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1e6      	bne.n	800814a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f003 0310 	and.w	r3, r3, #16
 8008186:	2b10      	cmp	r3, #16
 8008188:	d103      	bne.n	8008192 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2210      	movs	r2, #16
 8008190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fa fd0a 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081a0:	e00d      	b.n	80081be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fa fcec 	bl	8002b80 <HAL_UART_RxCpltCallback>
}
 80081a8:	e009      	b.n	80081be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	8b1b      	ldrh	r3, [r3, #24]
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f042 0208 	orr.w	r2, r2, #8
 80081ba:	b292      	uxth	r2, r2
 80081bc:	831a      	strh	r2, [r3, #24]
}
 80081be:	bf00      	nop
 80081c0:	3758      	adds	r7, #88	; 0x58
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b096      	sub	sp, #88	; 0x58
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80081d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081dc:	2b22      	cmp	r3, #34	; 0x22
 80081de:	f040 8094 	bne.w	800830a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80081f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80081f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081fa:	4013      	ands	r3, r2
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008200:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	1c9a      	adds	r2, r3, #2
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d179      	bne.n	800831e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800823e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008248:	643b      	str	r3, [r7, #64]	; 0x40
 800824a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800824e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008250:	e841 2300 	strex	r3, r2, [r1]
 8008254:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e6      	bne.n	800822a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3308      	adds	r3, #8
 8008262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	61fb      	str	r3, [r7, #28]
   return(result);
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	64bb      	str	r3, [r7, #72]	; 0x48
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e5      	bne.n	800825c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d12e      	bne.n	8008302 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	e853 3f00 	ldrex	r3, [r3]
 80082b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	f023 0310 	bic.w	r3, r3, #16
 80082be:	647b      	str	r3, [r7, #68]	; 0x44
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	461a      	mov	r2, r3
 80082c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082cc:	6979      	ldr	r1, [r7, #20]
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	e841 2300 	strex	r3, r2, [r1]
 80082d4:	613b      	str	r3, [r7, #16]
   return(result);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1e6      	bne.n	80082aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	f003 0310 	and.w	r3, r3, #16
 80082e6:	2b10      	cmp	r3, #16
 80082e8:	d103      	bne.n	80082f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2210      	movs	r2, #16
 80082f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7fa fc5a 	bl	8002bb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008300:	e00d      	b.n	800831e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f7fa fc3c 	bl	8002b80 <HAL_UART_RxCpltCallback>
}
 8008308:	e009      	b.n	800831e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	8b1b      	ldrh	r3, [r3, #24]
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0208 	orr.w	r2, r2, #8
 800831a:	b292      	uxth	r2, r2
 800831c:	831a      	strh	r2, [r3, #24]
}
 800831e:	bf00      	nop
 8008320:	3758      	adds	r7, #88	; 0x58
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008326:	b480      	push	{r7}
 8008328:	b083      	sub	sp, #12
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800832e:	bf00      	nop
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <__errno>:
 800833c:	4b01      	ldr	r3, [pc, #4]	; (8008344 <__errno+0x8>)
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	2000000c 	.word	0x2000000c

08008348 <__libc_init_array>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	4d0d      	ldr	r5, [pc, #52]	; (8008380 <__libc_init_array+0x38>)
 800834c:	4c0d      	ldr	r4, [pc, #52]	; (8008384 <__libc_init_array+0x3c>)
 800834e:	1b64      	subs	r4, r4, r5
 8008350:	10a4      	asrs	r4, r4, #2
 8008352:	2600      	movs	r6, #0
 8008354:	42a6      	cmp	r6, r4
 8008356:	d109      	bne.n	800836c <__libc_init_array+0x24>
 8008358:	4d0b      	ldr	r5, [pc, #44]	; (8008388 <__libc_init_array+0x40>)
 800835a:	4c0c      	ldr	r4, [pc, #48]	; (800838c <__libc_init_array+0x44>)
 800835c:	f003 f812 	bl	800b384 <_init>
 8008360:	1b64      	subs	r4, r4, r5
 8008362:	10a4      	asrs	r4, r4, #2
 8008364:	2600      	movs	r6, #0
 8008366:	42a6      	cmp	r6, r4
 8008368:	d105      	bne.n	8008376 <__libc_init_array+0x2e>
 800836a:	bd70      	pop	{r4, r5, r6, pc}
 800836c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008370:	4798      	blx	r3
 8008372:	3601      	adds	r6, #1
 8008374:	e7ee      	b.n	8008354 <__libc_init_array+0xc>
 8008376:	f855 3b04 	ldr.w	r3, [r5], #4
 800837a:	4798      	blx	r3
 800837c:	3601      	adds	r6, #1
 800837e:	e7f2      	b.n	8008366 <__libc_init_array+0x1e>
 8008380:	0800b9a0 	.word	0x0800b9a0
 8008384:	0800b9a0 	.word	0x0800b9a0
 8008388:	0800b9a0 	.word	0x0800b9a0
 800838c:	0800b9a4 	.word	0x0800b9a4

08008390 <memcpy>:
 8008390:	440a      	add	r2, r1
 8008392:	4291      	cmp	r1, r2
 8008394:	f100 33ff 	add.w	r3, r0, #4294967295
 8008398:	d100      	bne.n	800839c <memcpy+0xc>
 800839a:	4770      	bx	lr
 800839c:	b510      	push	{r4, lr}
 800839e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a6:	4291      	cmp	r1, r2
 80083a8:	d1f9      	bne.n	800839e <memcpy+0xe>
 80083aa:	bd10      	pop	{r4, pc}

080083ac <memset>:
 80083ac:	4402      	add	r2, r0
 80083ae:	4603      	mov	r3, r0
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d100      	bne.n	80083b6 <memset+0xa>
 80083b4:	4770      	bx	lr
 80083b6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ba:	e7f9      	b.n	80083b0 <memset+0x4>

080083bc <__cvt>:
 80083bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c0:	ec55 4b10 	vmov	r4, r5, d0
 80083c4:	2d00      	cmp	r5, #0
 80083c6:	460e      	mov	r6, r1
 80083c8:	4619      	mov	r1, r3
 80083ca:	462b      	mov	r3, r5
 80083cc:	bfbb      	ittet	lt
 80083ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80083d2:	461d      	movlt	r5, r3
 80083d4:	2300      	movge	r3, #0
 80083d6:	232d      	movlt	r3, #45	; 0x2d
 80083d8:	700b      	strb	r3, [r1, #0]
 80083da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80083e0:	4691      	mov	r9, r2
 80083e2:	f023 0820 	bic.w	r8, r3, #32
 80083e6:	bfbc      	itt	lt
 80083e8:	4622      	movlt	r2, r4
 80083ea:	4614      	movlt	r4, r2
 80083ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083f0:	d005      	beq.n	80083fe <__cvt+0x42>
 80083f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80083f6:	d100      	bne.n	80083fa <__cvt+0x3e>
 80083f8:	3601      	adds	r6, #1
 80083fa:	2102      	movs	r1, #2
 80083fc:	e000      	b.n	8008400 <__cvt+0x44>
 80083fe:	2103      	movs	r1, #3
 8008400:	ab03      	add	r3, sp, #12
 8008402:	9301      	str	r3, [sp, #4]
 8008404:	ab02      	add	r3, sp, #8
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	ec45 4b10 	vmov	d0, r4, r5
 800840c:	4653      	mov	r3, sl
 800840e:	4632      	mov	r2, r6
 8008410:	f000 fe16 	bl	8009040 <_dtoa_r>
 8008414:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008418:	4607      	mov	r7, r0
 800841a:	d102      	bne.n	8008422 <__cvt+0x66>
 800841c:	f019 0f01 	tst.w	r9, #1
 8008420:	d022      	beq.n	8008468 <__cvt+0xac>
 8008422:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008426:	eb07 0906 	add.w	r9, r7, r6
 800842a:	d110      	bne.n	800844e <__cvt+0x92>
 800842c:	783b      	ldrb	r3, [r7, #0]
 800842e:	2b30      	cmp	r3, #48	; 0x30
 8008430:	d10a      	bne.n	8008448 <__cvt+0x8c>
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4620      	mov	r0, r4
 8008438:	4629      	mov	r1, r5
 800843a:	f7f8 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800843e:	b918      	cbnz	r0, 8008448 <__cvt+0x8c>
 8008440:	f1c6 0601 	rsb	r6, r6, #1
 8008444:	f8ca 6000 	str.w	r6, [sl]
 8008448:	f8da 3000 	ldr.w	r3, [sl]
 800844c:	4499      	add	r9, r3
 800844e:	2200      	movs	r2, #0
 8008450:	2300      	movs	r3, #0
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	f7f8 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800845a:	b108      	cbz	r0, 8008460 <__cvt+0xa4>
 800845c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008460:	2230      	movs	r2, #48	; 0x30
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	454b      	cmp	r3, r9
 8008466:	d307      	bcc.n	8008478 <__cvt+0xbc>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800846c:	1bdb      	subs	r3, r3, r7
 800846e:	4638      	mov	r0, r7
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	b004      	add	sp, #16
 8008474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008478:	1c59      	adds	r1, r3, #1
 800847a:	9103      	str	r1, [sp, #12]
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e7f0      	b.n	8008462 <__cvt+0xa6>

08008480 <__exponent>:
 8008480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008482:	4603      	mov	r3, r0
 8008484:	2900      	cmp	r1, #0
 8008486:	bfb8      	it	lt
 8008488:	4249      	neglt	r1, r1
 800848a:	f803 2b02 	strb.w	r2, [r3], #2
 800848e:	bfb4      	ite	lt
 8008490:	222d      	movlt	r2, #45	; 0x2d
 8008492:	222b      	movge	r2, #43	; 0x2b
 8008494:	2909      	cmp	r1, #9
 8008496:	7042      	strb	r2, [r0, #1]
 8008498:	dd2a      	ble.n	80084f0 <__exponent+0x70>
 800849a:	f10d 0407 	add.w	r4, sp, #7
 800849e:	46a4      	mov	ip, r4
 80084a0:	270a      	movs	r7, #10
 80084a2:	46a6      	mov	lr, r4
 80084a4:	460a      	mov	r2, r1
 80084a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80084aa:	fb07 1516 	mls	r5, r7, r6, r1
 80084ae:	3530      	adds	r5, #48	; 0x30
 80084b0:	2a63      	cmp	r2, #99	; 0x63
 80084b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80084b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80084ba:	4631      	mov	r1, r6
 80084bc:	dcf1      	bgt.n	80084a2 <__exponent+0x22>
 80084be:	3130      	adds	r1, #48	; 0x30
 80084c0:	f1ae 0502 	sub.w	r5, lr, #2
 80084c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80084c8:	1c44      	adds	r4, r0, #1
 80084ca:	4629      	mov	r1, r5
 80084cc:	4561      	cmp	r1, ip
 80084ce:	d30a      	bcc.n	80084e6 <__exponent+0x66>
 80084d0:	f10d 0209 	add.w	r2, sp, #9
 80084d4:	eba2 020e 	sub.w	r2, r2, lr
 80084d8:	4565      	cmp	r5, ip
 80084da:	bf88      	it	hi
 80084dc:	2200      	movhi	r2, #0
 80084de:	4413      	add	r3, r2
 80084e0:	1a18      	subs	r0, r3, r0
 80084e2:	b003      	add	sp, #12
 80084e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80084ee:	e7ed      	b.n	80084cc <__exponent+0x4c>
 80084f0:	2330      	movs	r3, #48	; 0x30
 80084f2:	3130      	adds	r1, #48	; 0x30
 80084f4:	7083      	strb	r3, [r0, #2]
 80084f6:	70c1      	strb	r1, [r0, #3]
 80084f8:	1d03      	adds	r3, r0, #4
 80084fa:	e7f1      	b.n	80084e0 <__exponent+0x60>

080084fc <_printf_float>:
 80084fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	ed2d 8b02 	vpush	{d8}
 8008504:	b08d      	sub	sp, #52	; 0x34
 8008506:	460c      	mov	r4, r1
 8008508:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800850c:	4616      	mov	r6, r2
 800850e:	461f      	mov	r7, r3
 8008510:	4605      	mov	r5, r0
 8008512:	f001 fb95 	bl	8009c40 <_localeconv_r>
 8008516:	f8d0 a000 	ldr.w	sl, [r0]
 800851a:	4650      	mov	r0, sl
 800851c:	f7f7 fe58 	bl	80001d0 <strlen>
 8008520:	2300      	movs	r3, #0
 8008522:	930a      	str	r3, [sp, #40]	; 0x28
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	f8d8 3000 	ldr.w	r3, [r8]
 800852c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008530:	3307      	adds	r3, #7
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	f103 0208 	add.w	r2, r3, #8
 800853a:	f8c8 2000 	str.w	r2, [r8]
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008546:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800854a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	f8cd 8018 	str.w	r8, [sp, #24]
 8008554:	ee08 0a10 	vmov	s16, r0
 8008558:	4b9f      	ldr	r3, [pc, #636]	; (80087d8 <_printf_float+0x2dc>)
 800855a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	f7f8 fae3 	bl	8000b2c <__aeabi_dcmpun>
 8008566:	bb88      	cbnz	r0, 80085cc <_printf_float+0xd0>
 8008568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800856c:	4b9a      	ldr	r3, [pc, #616]	; (80087d8 <_printf_float+0x2dc>)
 800856e:	f04f 32ff 	mov.w	r2, #4294967295
 8008572:	f7f8 fabd 	bl	8000af0 <__aeabi_dcmple>
 8008576:	bb48      	cbnz	r0, 80085cc <_printf_float+0xd0>
 8008578:	2200      	movs	r2, #0
 800857a:	2300      	movs	r3, #0
 800857c:	4640      	mov	r0, r8
 800857e:	4649      	mov	r1, r9
 8008580:	f7f8 faac 	bl	8000adc <__aeabi_dcmplt>
 8008584:	b110      	cbz	r0, 800858c <_printf_float+0x90>
 8008586:	232d      	movs	r3, #45	; 0x2d
 8008588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800858c:	4b93      	ldr	r3, [pc, #588]	; (80087dc <_printf_float+0x2e0>)
 800858e:	4894      	ldr	r0, [pc, #592]	; (80087e0 <_printf_float+0x2e4>)
 8008590:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008594:	bf94      	ite	ls
 8008596:	4698      	movls	r8, r3
 8008598:	4680      	movhi	r8, r0
 800859a:	2303      	movs	r3, #3
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	9b05      	ldr	r3, [sp, #20]
 80085a0:	f023 0204 	bic.w	r2, r3, #4
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	f04f 0900 	mov.w	r9, #0
 80085aa:	9700      	str	r7, [sp, #0]
 80085ac:	4633      	mov	r3, r6
 80085ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80085b0:	4621      	mov	r1, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f9d8 	bl	8008968 <_printf_common>
 80085b8:	3001      	adds	r0, #1
 80085ba:	f040 8090 	bne.w	80086de <_printf_float+0x1e2>
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	b00d      	add	sp, #52	; 0x34
 80085c4:	ecbd 8b02 	vpop	{d8}
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f8 faaa 	bl	8000b2c <__aeabi_dcmpun>
 80085d8:	b140      	cbz	r0, 80085ec <_printf_float+0xf0>
 80085da:	464b      	mov	r3, r9
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfbc      	itt	lt
 80085e0:	232d      	movlt	r3, #45	; 0x2d
 80085e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80085e6:	487f      	ldr	r0, [pc, #508]	; (80087e4 <_printf_float+0x2e8>)
 80085e8:	4b7f      	ldr	r3, [pc, #508]	; (80087e8 <_printf_float+0x2ec>)
 80085ea:	e7d1      	b.n	8008590 <_printf_float+0x94>
 80085ec:	6863      	ldr	r3, [r4, #4]
 80085ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80085f2:	9206      	str	r2, [sp, #24]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	d13f      	bne.n	8008678 <_printf_float+0x17c>
 80085f8:	2306      	movs	r3, #6
 80085fa:	6063      	str	r3, [r4, #4]
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	6861      	ldr	r1, [r4, #4]
 8008600:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008604:	2300      	movs	r3, #0
 8008606:	9303      	str	r3, [sp, #12]
 8008608:	ab0a      	add	r3, sp, #40	; 0x28
 800860a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800860e:	ab09      	add	r3, sp, #36	; 0x24
 8008610:	ec49 8b10 	vmov	d0, r8, r9
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	6022      	str	r2, [r4, #0]
 8008618:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800861c:	4628      	mov	r0, r5
 800861e:	f7ff fecd 	bl	80083bc <__cvt>
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008626:	2b47      	cmp	r3, #71	; 0x47
 8008628:	4680      	mov	r8, r0
 800862a:	d108      	bne.n	800863e <_printf_float+0x142>
 800862c:	1cc8      	adds	r0, r1, #3
 800862e:	db02      	blt.n	8008636 <_printf_float+0x13a>
 8008630:	6863      	ldr	r3, [r4, #4]
 8008632:	4299      	cmp	r1, r3
 8008634:	dd41      	ble.n	80086ba <_printf_float+0x1be>
 8008636:	f1ab 0b02 	sub.w	fp, fp, #2
 800863a:	fa5f fb8b 	uxtb.w	fp, fp
 800863e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008642:	d820      	bhi.n	8008686 <_printf_float+0x18a>
 8008644:	3901      	subs	r1, #1
 8008646:	465a      	mov	r2, fp
 8008648:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800864c:	9109      	str	r1, [sp, #36]	; 0x24
 800864e:	f7ff ff17 	bl	8008480 <__exponent>
 8008652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008654:	1813      	adds	r3, r2, r0
 8008656:	2a01      	cmp	r2, #1
 8008658:	4681      	mov	r9, r0
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	dc02      	bgt.n	8008664 <_printf_float+0x168>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	07d2      	lsls	r2, r2, #31
 8008662:	d501      	bpl.n	8008668 <_printf_float+0x16c>
 8008664:	3301      	adds	r3, #1
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800866c:	2b00      	cmp	r3, #0
 800866e:	d09c      	beq.n	80085aa <_printf_float+0xae>
 8008670:	232d      	movs	r3, #45	; 0x2d
 8008672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008676:	e798      	b.n	80085aa <_printf_float+0xae>
 8008678:	9a06      	ldr	r2, [sp, #24]
 800867a:	2a47      	cmp	r2, #71	; 0x47
 800867c:	d1be      	bne.n	80085fc <_printf_float+0x100>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1bc      	bne.n	80085fc <_printf_float+0x100>
 8008682:	2301      	movs	r3, #1
 8008684:	e7b9      	b.n	80085fa <_printf_float+0xfe>
 8008686:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800868a:	d118      	bne.n	80086be <_printf_float+0x1c2>
 800868c:	2900      	cmp	r1, #0
 800868e:	6863      	ldr	r3, [r4, #4]
 8008690:	dd0b      	ble.n	80086aa <_printf_float+0x1ae>
 8008692:	6121      	str	r1, [r4, #16]
 8008694:	b913      	cbnz	r3, 800869c <_printf_float+0x1a0>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	07d0      	lsls	r0, r2, #31
 800869a:	d502      	bpl.n	80086a2 <_printf_float+0x1a6>
 800869c:	3301      	adds	r3, #1
 800869e:	440b      	add	r3, r1
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80086a4:	f04f 0900 	mov.w	r9, #0
 80086a8:	e7de      	b.n	8008668 <_printf_float+0x16c>
 80086aa:	b913      	cbnz	r3, 80086b2 <_printf_float+0x1b6>
 80086ac:	6822      	ldr	r2, [r4, #0]
 80086ae:	07d2      	lsls	r2, r2, #31
 80086b0:	d501      	bpl.n	80086b6 <_printf_float+0x1ba>
 80086b2:	3302      	adds	r3, #2
 80086b4:	e7f4      	b.n	80086a0 <_printf_float+0x1a4>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e7f2      	b.n	80086a0 <_printf_float+0x1a4>
 80086ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80086be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c0:	4299      	cmp	r1, r3
 80086c2:	db05      	blt.n	80086d0 <_printf_float+0x1d4>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	6121      	str	r1, [r4, #16]
 80086c8:	07d8      	lsls	r0, r3, #31
 80086ca:	d5ea      	bpl.n	80086a2 <_printf_float+0x1a6>
 80086cc:	1c4b      	adds	r3, r1, #1
 80086ce:	e7e7      	b.n	80086a0 <_printf_float+0x1a4>
 80086d0:	2900      	cmp	r1, #0
 80086d2:	bfd4      	ite	le
 80086d4:	f1c1 0202 	rsble	r2, r1, #2
 80086d8:	2201      	movgt	r2, #1
 80086da:	4413      	add	r3, r2
 80086dc:	e7e0      	b.n	80086a0 <_printf_float+0x1a4>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	055a      	lsls	r2, r3, #21
 80086e2:	d407      	bmi.n	80086f4 <_printf_float+0x1f8>
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	4642      	mov	r2, r8
 80086e8:	4631      	mov	r1, r6
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b8      	blx	r7
 80086ee:	3001      	adds	r0, #1
 80086f0:	d12c      	bne.n	800874c <_printf_float+0x250>
 80086f2:	e764      	b.n	80085be <_printf_float+0xc2>
 80086f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80086f8:	f240 80e0 	bls.w	80088bc <_printf_float+0x3c0>
 80086fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	f7f8 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008708:	2800      	cmp	r0, #0
 800870a:	d034      	beq.n	8008776 <_printf_float+0x27a>
 800870c:	4a37      	ldr	r2, [pc, #220]	; (80087ec <_printf_float+0x2f0>)
 800870e:	2301      	movs	r3, #1
 8008710:	4631      	mov	r1, r6
 8008712:	4628      	mov	r0, r5
 8008714:	47b8      	blx	r7
 8008716:	3001      	adds	r0, #1
 8008718:	f43f af51 	beq.w	80085be <_printf_float+0xc2>
 800871c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008720:	429a      	cmp	r2, r3
 8008722:	db02      	blt.n	800872a <_printf_float+0x22e>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	07d8      	lsls	r0, r3, #31
 8008728:	d510      	bpl.n	800874c <_printf_float+0x250>
 800872a:	ee18 3a10 	vmov	r3, s16
 800872e:	4652      	mov	r2, sl
 8008730:	4631      	mov	r1, r6
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	f43f af41 	beq.w	80085be <_printf_float+0xc2>
 800873c:	f04f 0800 	mov.w	r8, #0
 8008740:	f104 091a 	add.w	r9, r4, #26
 8008744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008746:	3b01      	subs	r3, #1
 8008748:	4543      	cmp	r3, r8
 800874a:	dc09      	bgt.n	8008760 <_printf_float+0x264>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	079b      	lsls	r3, r3, #30
 8008750:	f100 8105 	bmi.w	800895e <_printf_float+0x462>
 8008754:	68e0      	ldr	r0, [r4, #12]
 8008756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008758:	4298      	cmp	r0, r3
 800875a:	bfb8      	it	lt
 800875c:	4618      	movlt	r0, r3
 800875e:	e730      	b.n	80085c2 <_printf_float+0xc6>
 8008760:	2301      	movs	r3, #1
 8008762:	464a      	mov	r2, r9
 8008764:	4631      	mov	r1, r6
 8008766:	4628      	mov	r0, r5
 8008768:	47b8      	blx	r7
 800876a:	3001      	adds	r0, #1
 800876c:	f43f af27 	beq.w	80085be <_printf_float+0xc2>
 8008770:	f108 0801 	add.w	r8, r8, #1
 8008774:	e7e6      	b.n	8008744 <_printf_float+0x248>
 8008776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	dc39      	bgt.n	80087f0 <_printf_float+0x2f4>
 800877c:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <_printf_float+0x2f0>)
 800877e:	2301      	movs	r3, #1
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	47b8      	blx	r7
 8008786:	3001      	adds	r0, #1
 8008788:	f43f af19 	beq.w	80085be <_printf_float+0xc2>
 800878c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008790:	4313      	orrs	r3, r2
 8008792:	d102      	bne.n	800879a <_printf_float+0x29e>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	07d9      	lsls	r1, r3, #31
 8008798:	d5d8      	bpl.n	800874c <_printf_float+0x250>
 800879a:	ee18 3a10 	vmov	r3, s16
 800879e:	4652      	mov	r2, sl
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f af09 	beq.w	80085be <_printf_float+0xc2>
 80087ac:	f04f 0900 	mov.w	r9, #0
 80087b0:	f104 0a1a 	add.w	sl, r4, #26
 80087b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b6:	425b      	negs	r3, r3
 80087b8:	454b      	cmp	r3, r9
 80087ba:	dc01      	bgt.n	80087c0 <_printf_float+0x2c4>
 80087bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087be:	e792      	b.n	80086e6 <_printf_float+0x1ea>
 80087c0:	2301      	movs	r3, #1
 80087c2:	4652      	mov	r2, sl
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f aef7 	beq.w	80085be <_printf_float+0xc2>
 80087d0:	f109 0901 	add.w	r9, r9, #1
 80087d4:	e7ee      	b.n	80087b4 <_printf_float+0x2b8>
 80087d6:	bf00      	nop
 80087d8:	7fefffff 	.word	0x7fefffff
 80087dc:	0800b564 	.word	0x0800b564
 80087e0:	0800b568 	.word	0x0800b568
 80087e4:	0800b570 	.word	0x0800b570
 80087e8:	0800b56c 	.word	0x0800b56c
 80087ec:	0800b574 	.word	0x0800b574
 80087f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bfa8      	it	ge
 80087f8:	461a      	movge	r2, r3
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	4691      	mov	r9, r2
 80087fe:	dc37      	bgt.n	8008870 <_printf_float+0x374>
 8008800:	f04f 0b00 	mov.w	fp, #0
 8008804:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008808:	f104 021a 	add.w	r2, r4, #26
 800880c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800880e:	9305      	str	r3, [sp, #20]
 8008810:	eba3 0309 	sub.w	r3, r3, r9
 8008814:	455b      	cmp	r3, fp
 8008816:	dc33      	bgt.n	8008880 <_printf_float+0x384>
 8008818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800881c:	429a      	cmp	r2, r3
 800881e:	db3b      	blt.n	8008898 <_printf_float+0x39c>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	07da      	lsls	r2, r3, #31
 8008824:	d438      	bmi.n	8008898 <_printf_float+0x39c>
 8008826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008828:	9a05      	ldr	r2, [sp, #20]
 800882a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800882c:	1a9a      	subs	r2, r3, r2
 800882e:	eba3 0901 	sub.w	r9, r3, r1
 8008832:	4591      	cmp	r9, r2
 8008834:	bfa8      	it	ge
 8008836:	4691      	movge	r9, r2
 8008838:	f1b9 0f00 	cmp.w	r9, #0
 800883c:	dc35      	bgt.n	80088aa <_printf_float+0x3ae>
 800883e:	f04f 0800 	mov.w	r8, #0
 8008842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008846:	f104 0a1a 	add.w	sl, r4, #26
 800884a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800884e:	1a9b      	subs	r3, r3, r2
 8008850:	eba3 0309 	sub.w	r3, r3, r9
 8008854:	4543      	cmp	r3, r8
 8008856:	f77f af79 	ble.w	800874c <_printf_float+0x250>
 800885a:	2301      	movs	r3, #1
 800885c:	4652      	mov	r2, sl
 800885e:	4631      	mov	r1, r6
 8008860:	4628      	mov	r0, r5
 8008862:	47b8      	blx	r7
 8008864:	3001      	adds	r0, #1
 8008866:	f43f aeaa 	beq.w	80085be <_printf_float+0xc2>
 800886a:	f108 0801 	add.w	r8, r8, #1
 800886e:	e7ec      	b.n	800884a <_printf_float+0x34e>
 8008870:	4613      	mov	r3, r2
 8008872:	4631      	mov	r1, r6
 8008874:	4642      	mov	r2, r8
 8008876:	4628      	mov	r0, r5
 8008878:	47b8      	blx	r7
 800887a:	3001      	adds	r0, #1
 800887c:	d1c0      	bne.n	8008800 <_printf_float+0x304>
 800887e:	e69e      	b.n	80085be <_printf_float+0xc2>
 8008880:	2301      	movs	r3, #1
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	9205      	str	r2, [sp, #20]
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f ae97 	beq.w	80085be <_printf_float+0xc2>
 8008890:	9a05      	ldr	r2, [sp, #20]
 8008892:	f10b 0b01 	add.w	fp, fp, #1
 8008896:	e7b9      	b.n	800880c <_printf_float+0x310>
 8008898:	ee18 3a10 	vmov	r3, s16
 800889c:	4652      	mov	r2, sl
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	d1be      	bne.n	8008826 <_printf_float+0x32a>
 80088a8:	e689      	b.n	80085be <_printf_float+0xc2>
 80088aa:	9a05      	ldr	r2, [sp, #20]
 80088ac:	464b      	mov	r3, r9
 80088ae:	4442      	add	r2, r8
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	d1c1      	bne.n	800883e <_printf_float+0x342>
 80088ba:	e680      	b.n	80085be <_printf_float+0xc2>
 80088bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088be:	2a01      	cmp	r2, #1
 80088c0:	dc01      	bgt.n	80088c6 <_printf_float+0x3ca>
 80088c2:	07db      	lsls	r3, r3, #31
 80088c4:	d538      	bpl.n	8008938 <_printf_float+0x43c>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4642      	mov	r2, r8
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f ae74 	beq.w	80085be <_printf_float+0xc2>
 80088d6:	ee18 3a10 	vmov	r3, s16
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f ae6b 	beq.w	80085be <_printf_float+0xc2>
 80088e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	f7f8 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f4:	b9d8      	cbnz	r0, 800892e <_printf_float+0x432>
 80088f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f8:	f108 0201 	add.w	r2, r8, #1
 80088fc:	3b01      	subs	r3, #1
 80088fe:	4631      	mov	r1, r6
 8008900:	4628      	mov	r0, r5
 8008902:	47b8      	blx	r7
 8008904:	3001      	adds	r0, #1
 8008906:	d10e      	bne.n	8008926 <_printf_float+0x42a>
 8008908:	e659      	b.n	80085be <_printf_float+0xc2>
 800890a:	2301      	movs	r3, #1
 800890c:	4652      	mov	r2, sl
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	f43f ae52 	beq.w	80085be <_printf_float+0xc2>
 800891a:	f108 0801 	add.w	r8, r8, #1
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	3b01      	subs	r3, #1
 8008922:	4543      	cmp	r3, r8
 8008924:	dcf1      	bgt.n	800890a <_printf_float+0x40e>
 8008926:	464b      	mov	r3, r9
 8008928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800892c:	e6dc      	b.n	80086e8 <_printf_float+0x1ec>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f104 0a1a 	add.w	sl, r4, #26
 8008936:	e7f2      	b.n	800891e <_printf_float+0x422>
 8008938:	2301      	movs	r3, #1
 800893a:	4642      	mov	r2, r8
 800893c:	e7df      	b.n	80088fe <_printf_float+0x402>
 800893e:	2301      	movs	r3, #1
 8008940:	464a      	mov	r2, r9
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f ae38 	beq.w	80085be <_printf_float+0xc2>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	68e3      	ldr	r3, [r4, #12]
 8008954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008956:	1a5b      	subs	r3, r3, r1
 8008958:	4543      	cmp	r3, r8
 800895a:	dcf0      	bgt.n	800893e <_printf_float+0x442>
 800895c:	e6fa      	b.n	8008754 <_printf_float+0x258>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0919 	add.w	r9, r4, #25
 8008966:	e7f4      	b.n	8008952 <_printf_float+0x456>

08008968 <_printf_common>:
 8008968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	4616      	mov	r6, r2
 800896e:	4699      	mov	r9, r3
 8008970:	688a      	ldr	r2, [r1, #8]
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008978:	4293      	cmp	r3, r2
 800897a:	bfb8      	it	lt
 800897c:	4613      	movlt	r3, r2
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008984:	4607      	mov	r7, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b10a      	cbz	r2, 800898e <_printf_common+0x26>
 800898a:	3301      	adds	r3, #1
 800898c:	6033      	str	r3, [r6, #0]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	0699      	lsls	r1, r3, #26
 8008992:	bf42      	ittt	mi
 8008994:	6833      	ldrmi	r3, [r6, #0]
 8008996:	3302      	addmi	r3, #2
 8008998:	6033      	strmi	r3, [r6, #0]
 800899a:	6825      	ldr	r5, [r4, #0]
 800899c:	f015 0506 	ands.w	r5, r5, #6
 80089a0:	d106      	bne.n	80089b0 <_printf_common+0x48>
 80089a2:	f104 0a19 	add.w	sl, r4, #25
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	6832      	ldr	r2, [r6, #0]
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dc26      	bgt.n	80089fe <_printf_common+0x96>
 80089b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089b4:	1e13      	subs	r3, r2, #0
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	bf18      	it	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	0692      	lsls	r2, r2, #26
 80089be:	d42b      	bmi.n	8008a18 <_printf_common+0xb0>
 80089c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089c4:	4649      	mov	r1, r9
 80089c6:	4638      	mov	r0, r7
 80089c8:	47c0      	blx	r8
 80089ca:	3001      	adds	r0, #1
 80089cc:	d01e      	beq.n	8008a0c <_printf_common+0xa4>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	68e5      	ldr	r5, [r4, #12]
 80089d2:	6832      	ldr	r2, [r6, #0]
 80089d4:	f003 0306 	and.w	r3, r3, #6
 80089d8:	2b04      	cmp	r3, #4
 80089da:	bf08      	it	eq
 80089dc:	1aad      	subeq	r5, r5, r2
 80089de:	68a3      	ldr	r3, [r4, #8]
 80089e0:	6922      	ldr	r2, [r4, #16]
 80089e2:	bf0c      	ite	eq
 80089e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e8:	2500      	movne	r5, #0
 80089ea:	4293      	cmp	r3, r2
 80089ec:	bfc4      	itt	gt
 80089ee:	1a9b      	subgt	r3, r3, r2
 80089f0:	18ed      	addgt	r5, r5, r3
 80089f2:	2600      	movs	r6, #0
 80089f4:	341a      	adds	r4, #26
 80089f6:	42b5      	cmp	r5, r6
 80089f8:	d11a      	bne.n	8008a30 <_printf_common+0xc8>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e008      	b.n	8008a10 <_printf_common+0xa8>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4652      	mov	r2, sl
 8008a02:	4649      	mov	r1, r9
 8008a04:	4638      	mov	r0, r7
 8008a06:	47c0      	blx	r8
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d103      	bne.n	8008a14 <_printf_common+0xac>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	3501      	adds	r5, #1
 8008a16:	e7c6      	b.n	80089a6 <_printf_common+0x3e>
 8008a18:	18e1      	adds	r1, r4, r3
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	2030      	movs	r0, #48	; 0x30
 8008a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a22:	4422      	add	r2, r4
 8008a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	e7c7      	b.n	80089c0 <_printf_common+0x58>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4622      	mov	r2, r4
 8008a34:	4649      	mov	r1, r9
 8008a36:	4638      	mov	r0, r7
 8008a38:	47c0      	blx	r8
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d0e6      	beq.n	8008a0c <_printf_common+0xa4>
 8008a3e:	3601      	adds	r6, #1
 8008a40:	e7d9      	b.n	80089f6 <_printf_common+0x8e>
	...

08008a44 <_printf_i>:
 8008a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	7e0f      	ldrb	r7, [r1, #24]
 8008a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a4c:	2f78      	cmp	r7, #120	; 0x78
 8008a4e:	4691      	mov	r9, r2
 8008a50:	4680      	mov	r8, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	469a      	mov	sl, r3
 8008a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a5a:	d807      	bhi.n	8008a6c <_printf_i+0x28>
 8008a5c:	2f62      	cmp	r7, #98	; 0x62
 8008a5e:	d80a      	bhi.n	8008a76 <_printf_i+0x32>
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	f000 80d8 	beq.w	8008c16 <_printf_i+0x1d2>
 8008a66:	2f58      	cmp	r7, #88	; 0x58
 8008a68:	f000 80a3 	beq.w	8008bb2 <_printf_i+0x16e>
 8008a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a74:	e03a      	b.n	8008aec <_printf_i+0xa8>
 8008a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a7a:	2b15      	cmp	r3, #21
 8008a7c:	d8f6      	bhi.n	8008a6c <_printf_i+0x28>
 8008a7e:	a101      	add	r1, pc, #4	; (adr r1, 8008a84 <_printf_i+0x40>)
 8008a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a84:	08008add 	.word	0x08008add
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008a6d 	.word	0x08008a6d
 8008a90:	08008a6d 	.word	0x08008a6d
 8008a94:	08008a6d 	.word	0x08008a6d
 8008a98:	08008a6d 	.word	0x08008a6d
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008a6d 	.word	0x08008a6d
 8008aa4:	08008a6d 	.word	0x08008a6d
 8008aa8:	08008a6d 	.word	0x08008a6d
 8008aac:	08008a6d 	.word	0x08008a6d
 8008ab0:	08008bfd 	.word	0x08008bfd
 8008ab4:	08008b21 	.word	0x08008b21
 8008ab8:	08008bdf 	.word	0x08008bdf
 8008abc:	08008a6d 	.word	0x08008a6d
 8008ac0:	08008a6d 	.word	0x08008a6d
 8008ac4:	08008c1f 	.word	0x08008c1f
 8008ac8:	08008a6d 	.word	0x08008a6d
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008a6d 	.word	0x08008a6d
 8008ad4:	08008a6d 	.word	0x08008a6d
 8008ad8:	08008be7 	.word	0x08008be7
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	1d1a      	adds	r2, r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	602a      	str	r2, [r5, #0]
 8008ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0a3      	b.n	8008c38 <_printf_i+0x1f4>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	6829      	ldr	r1, [r5, #0]
 8008af4:	0606      	lsls	r6, r0, #24
 8008af6:	f101 0304 	add.w	r3, r1, #4
 8008afa:	d50a      	bpl.n	8008b12 <_printf_i+0xce>
 8008afc:	680e      	ldr	r6, [r1, #0]
 8008afe:	602b      	str	r3, [r5, #0]
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	da03      	bge.n	8008b0c <_printf_i+0xc8>
 8008b04:	232d      	movs	r3, #45	; 0x2d
 8008b06:	4276      	negs	r6, r6
 8008b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b0c:	485e      	ldr	r0, [pc, #376]	; (8008c88 <_printf_i+0x244>)
 8008b0e:	230a      	movs	r3, #10
 8008b10:	e019      	b.n	8008b46 <_printf_i+0x102>
 8008b12:	680e      	ldr	r6, [r1, #0]
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b1a:	bf18      	it	ne
 8008b1c:	b236      	sxthne	r6, r6
 8008b1e:	e7ef      	b.n	8008b00 <_printf_i+0xbc>
 8008b20:	682b      	ldr	r3, [r5, #0]
 8008b22:	6820      	ldr	r0, [r4, #0]
 8008b24:	1d19      	adds	r1, r3, #4
 8008b26:	6029      	str	r1, [r5, #0]
 8008b28:	0601      	lsls	r1, r0, #24
 8008b2a:	d501      	bpl.n	8008b30 <_printf_i+0xec>
 8008b2c:	681e      	ldr	r6, [r3, #0]
 8008b2e:	e002      	b.n	8008b36 <_printf_i+0xf2>
 8008b30:	0646      	lsls	r6, r0, #25
 8008b32:	d5fb      	bpl.n	8008b2c <_printf_i+0xe8>
 8008b34:	881e      	ldrh	r6, [r3, #0]
 8008b36:	4854      	ldr	r0, [pc, #336]	; (8008c88 <_printf_i+0x244>)
 8008b38:	2f6f      	cmp	r7, #111	; 0x6f
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2308      	moveq	r3, #8
 8008b3e:	230a      	movne	r3, #10
 8008b40:	2100      	movs	r1, #0
 8008b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b46:	6865      	ldr	r5, [r4, #4]
 8008b48:	60a5      	str	r5, [r4, #8]
 8008b4a:	2d00      	cmp	r5, #0
 8008b4c:	bfa2      	ittt	ge
 8008b4e:	6821      	ldrge	r1, [r4, #0]
 8008b50:	f021 0104 	bicge.w	r1, r1, #4
 8008b54:	6021      	strge	r1, [r4, #0]
 8008b56:	b90e      	cbnz	r6, 8008b5c <_printf_i+0x118>
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	d04d      	beq.n	8008bf8 <_printf_i+0x1b4>
 8008b5c:	4615      	mov	r5, r2
 8008b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b62:	fb03 6711 	mls	r7, r3, r1, r6
 8008b66:	5dc7      	ldrb	r7, [r0, r7]
 8008b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b6c:	4637      	mov	r7, r6
 8008b6e:	42bb      	cmp	r3, r7
 8008b70:	460e      	mov	r6, r1
 8008b72:	d9f4      	bls.n	8008b5e <_printf_i+0x11a>
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d10b      	bne.n	8008b90 <_printf_i+0x14c>
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	07de      	lsls	r6, r3, #31
 8008b7c:	d508      	bpl.n	8008b90 <_printf_i+0x14c>
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	6861      	ldr	r1, [r4, #4]
 8008b82:	4299      	cmp	r1, r3
 8008b84:	bfde      	ittt	le
 8008b86:	2330      	movle	r3, #48	; 0x30
 8008b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b90:	1b52      	subs	r2, r2, r5
 8008b92:	6122      	str	r2, [r4, #16]
 8008b94:	f8cd a000 	str.w	sl, [sp]
 8008b98:	464b      	mov	r3, r9
 8008b9a:	aa03      	add	r2, sp, #12
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f7ff fee2 	bl	8008968 <_printf_common>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d14c      	bne.n	8008c42 <_printf_i+0x1fe>
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	b004      	add	sp, #16
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	4835      	ldr	r0, [pc, #212]	; (8008c88 <_printf_i+0x244>)
 8008bb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bb8:	6829      	ldr	r1, [r5, #0]
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bc0:	6029      	str	r1, [r5, #0]
 8008bc2:	061d      	lsls	r5, r3, #24
 8008bc4:	d514      	bpl.n	8008bf0 <_printf_i+0x1ac>
 8008bc6:	07df      	lsls	r7, r3, #31
 8008bc8:	bf44      	itt	mi
 8008bca:	f043 0320 	orrmi.w	r3, r3, #32
 8008bce:	6023      	strmi	r3, [r4, #0]
 8008bd0:	b91e      	cbnz	r6, 8008bda <_printf_i+0x196>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	f023 0320 	bic.w	r3, r3, #32
 8008bd8:	6023      	str	r3, [r4, #0]
 8008bda:	2310      	movs	r3, #16
 8008bdc:	e7b0      	b.n	8008b40 <_printf_i+0xfc>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	f043 0320 	orr.w	r3, r3, #32
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	2378      	movs	r3, #120	; 0x78
 8008be8:	4828      	ldr	r0, [pc, #160]	; (8008c8c <_printf_i+0x248>)
 8008bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bee:	e7e3      	b.n	8008bb8 <_printf_i+0x174>
 8008bf0:	0659      	lsls	r1, r3, #25
 8008bf2:	bf48      	it	mi
 8008bf4:	b2b6      	uxthmi	r6, r6
 8008bf6:	e7e6      	b.n	8008bc6 <_printf_i+0x182>
 8008bf8:	4615      	mov	r5, r2
 8008bfa:	e7bb      	b.n	8008b74 <_printf_i+0x130>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	6826      	ldr	r6, [r4, #0]
 8008c00:	6961      	ldr	r1, [r4, #20]
 8008c02:	1d18      	adds	r0, r3, #4
 8008c04:	6028      	str	r0, [r5, #0]
 8008c06:	0635      	lsls	r5, r6, #24
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	d501      	bpl.n	8008c10 <_printf_i+0x1cc>
 8008c0c:	6019      	str	r1, [r3, #0]
 8008c0e:	e002      	b.n	8008c16 <_printf_i+0x1d2>
 8008c10:	0670      	lsls	r0, r6, #25
 8008c12:	d5fb      	bpl.n	8008c0c <_printf_i+0x1c8>
 8008c14:	8019      	strh	r1, [r3, #0]
 8008c16:	2300      	movs	r3, #0
 8008c18:	6123      	str	r3, [r4, #16]
 8008c1a:	4615      	mov	r5, r2
 8008c1c:	e7ba      	b.n	8008b94 <_printf_i+0x150>
 8008c1e:	682b      	ldr	r3, [r5, #0]
 8008c20:	1d1a      	adds	r2, r3, #4
 8008c22:	602a      	str	r2, [r5, #0]
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	6862      	ldr	r2, [r4, #4]
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f7f7 fad8 	bl	80001e0 <memchr>
 8008c30:	b108      	cbz	r0, 8008c36 <_printf_i+0x1f2>
 8008c32:	1b40      	subs	r0, r0, r5
 8008c34:	6060      	str	r0, [r4, #4]
 8008c36:	6863      	ldr	r3, [r4, #4]
 8008c38:	6123      	str	r3, [r4, #16]
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c40:	e7a8      	b.n	8008b94 <_printf_i+0x150>
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	462a      	mov	r2, r5
 8008c46:	4649      	mov	r1, r9
 8008c48:	4640      	mov	r0, r8
 8008c4a:	47d0      	blx	sl
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d0ab      	beq.n	8008ba8 <_printf_i+0x164>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	079b      	lsls	r3, r3, #30
 8008c54:	d413      	bmi.n	8008c7e <_printf_i+0x23a>
 8008c56:	68e0      	ldr	r0, [r4, #12]
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	4298      	cmp	r0, r3
 8008c5c:	bfb8      	it	lt
 8008c5e:	4618      	movlt	r0, r3
 8008c60:	e7a4      	b.n	8008bac <_printf_i+0x168>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4632      	mov	r2, r6
 8008c66:	4649      	mov	r1, r9
 8008c68:	4640      	mov	r0, r8
 8008c6a:	47d0      	blx	sl
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d09b      	beq.n	8008ba8 <_printf_i+0x164>
 8008c70:	3501      	adds	r5, #1
 8008c72:	68e3      	ldr	r3, [r4, #12]
 8008c74:	9903      	ldr	r1, [sp, #12]
 8008c76:	1a5b      	subs	r3, r3, r1
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	dcf2      	bgt.n	8008c62 <_printf_i+0x21e>
 8008c7c:	e7eb      	b.n	8008c56 <_printf_i+0x212>
 8008c7e:	2500      	movs	r5, #0
 8008c80:	f104 0619 	add.w	r6, r4, #25
 8008c84:	e7f5      	b.n	8008c72 <_printf_i+0x22e>
 8008c86:	bf00      	nop
 8008c88:	0800b576 	.word	0x0800b576
 8008c8c:	0800b587 	.word	0x0800b587

08008c90 <siprintf>:
 8008c90:	b40e      	push	{r1, r2, r3}
 8008c92:	b500      	push	{lr}
 8008c94:	b09c      	sub	sp, #112	; 0x70
 8008c96:	ab1d      	add	r3, sp, #116	; 0x74
 8008c98:	9002      	str	r0, [sp, #8]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ca0:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <siprintf+0x38>)
 8008ca2:	9107      	str	r1, [sp, #28]
 8008ca4:	9104      	str	r1, [sp, #16]
 8008ca6:	4909      	ldr	r1, [pc, #36]	; (8008ccc <siprintf+0x3c>)
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	a902      	add	r1, sp, #8
 8008cb4:	f001 fcb8 	bl	800a628 <_svfiprintf_r>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	b01c      	add	sp, #112	; 0x70
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	2000000c 	.word	0x2000000c
 8008ccc:	ffff0208 	.word	0xffff0208

08008cd0 <strcat>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	7814      	ldrb	r4, [r2, #0]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	3201      	adds	r2, #1
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	d1fa      	bne.n	8008cd4 <strcat+0x4>
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	d1f9      	bne.n	8008ce0 <strcat+0x10>
 8008cec:	bd10      	pop	{r4, pc}

08008cee <strstr>:
 8008cee:	780a      	ldrb	r2, [r1, #0]
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	b96a      	cbnz	r2, 8008d10 <strstr+0x22>
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d109      	bne.n	8008d0e <strstr+0x20>
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0f6      	beq.n	8008cf4 <strstr+0x6>
 8008d06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008d0a:	429e      	cmp	r6, r3
 8008d0c:	d0f7      	beq.n	8008cfe <strstr+0x10>
 8008d0e:	3001      	adds	r0, #1
 8008d10:	7803      	ldrb	r3, [r0, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1ef      	bne.n	8008cf6 <strstr+0x8>
 8008d16:	4618      	mov	r0, r3
 8008d18:	e7ec      	b.n	8008cf4 <strstr+0x6>
	...

08008d1c <strtok>:
 8008d1c:	4b16      	ldr	r3, [pc, #88]	; (8008d78 <strtok+0x5c>)
 8008d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d20:	681e      	ldr	r6, [r3, #0]
 8008d22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008d24:	4605      	mov	r5, r0
 8008d26:	b9fc      	cbnz	r4, 8008d68 <strtok+0x4c>
 8008d28:	2050      	movs	r0, #80	; 0x50
 8008d2a:	9101      	str	r1, [sp, #4]
 8008d2c:	f000 ff8c 	bl	8009c48 <malloc>
 8008d30:	9901      	ldr	r1, [sp, #4]
 8008d32:	65b0      	str	r0, [r6, #88]	; 0x58
 8008d34:	4602      	mov	r2, r0
 8008d36:	b920      	cbnz	r0, 8008d42 <strtok+0x26>
 8008d38:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <strtok+0x60>)
 8008d3a:	4811      	ldr	r0, [pc, #68]	; (8008d80 <strtok+0x64>)
 8008d3c:	2157      	movs	r1, #87	; 0x57
 8008d3e:	f000 f8d5 	bl	8008eec <__assert_func>
 8008d42:	e9c0 4400 	strd	r4, r4, [r0]
 8008d46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008d4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008d4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008d52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008d56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008d5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008d5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008d62:	6184      	str	r4, [r0, #24]
 8008d64:	7704      	strb	r4, [r0, #28]
 8008d66:	6244      	str	r4, [r0, #36]	; 0x24
 8008d68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	b002      	add	sp, #8
 8008d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d74:	f000 b806 	b.w	8008d84 <__strtok_r>
 8008d78:	2000000c 	.word	0x2000000c
 8008d7c:	0800b598 	.word	0x0800b598
 8008d80:	0800b5af 	.word	0x0800b5af

08008d84 <__strtok_r>:
 8008d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d86:	b908      	cbnz	r0, 8008d8c <__strtok_r+0x8>
 8008d88:	6810      	ldr	r0, [r2, #0]
 8008d8a:	b188      	cbz	r0, 8008db0 <__strtok_r+0x2c>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008d94:	460f      	mov	r7, r1
 8008d96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008d9a:	b91e      	cbnz	r6, 8008da4 <__strtok_r+0x20>
 8008d9c:	b965      	cbnz	r5, 8008db8 <__strtok_r+0x34>
 8008d9e:	6015      	str	r5, [r2, #0]
 8008da0:	4628      	mov	r0, r5
 8008da2:	e005      	b.n	8008db0 <__strtok_r+0x2c>
 8008da4:	42b5      	cmp	r5, r6
 8008da6:	d1f6      	bne.n	8008d96 <__strtok_r+0x12>
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f0      	bne.n	8008d8e <__strtok_r+0xa>
 8008dac:	6014      	str	r4, [r2, #0]
 8008dae:	7003      	strb	r3, [r0, #0]
 8008db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db2:	461c      	mov	r4, r3
 8008db4:	e00c      	b.n	8008dd0 <__strtok_r+0x4c>
 8008db6:	b915      	cbnz	r5, 8008dbe <__strtok_r+0x3a>
 8008db8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008dbc:	460e      	mov	r6, r1
 8008dbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008dc2:	42ab      	cmp	r3, r5
 8008dc4:	d1f7      	bne.n	8008db6 <__strtok_r+0x32>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0f3      	beq.n	8008db2 <__strtok_r+0x2e>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	e7ed      	b.n	8008db0 <__strtok_r+0x2c>

08008dd4 <_strtol_l.constprop.0>:
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dda:	d001      	beq.n	8008de0 <_strtol_l.constprop.0+0xc>
 8008ddc:	2b24      	cmp	r3, #36	; 0x24
 8008dde:	d906      	bls.n	8008dee <_strtol_l.constprop.0+0x1a>
 8008de0:	f7ff faac 	bl	800833c <__errno>
 8008de4:	2316      	movs	r3, #22
 8008de6:	6003      	str	r3, [r0, #0]
 8008de8:	2000      	movs	r0, #0
 8008dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ed4 <_strtol_l.constprop.0+0x100>
 8008df2:	460d      	mov	r5, r1
 8008df4:	462e      	mov	r6, r5
 8008df6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dfa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008dfe:	f017 0708 	ands.w	r7, r7, #8
 8008e02:	d1f7      	bne.n	8008df4 <_strtol_l.constprop.0+0x20>
 8008e04:	2c2d      	cmp	r4, #45	; 0x2d
 8008e06:	d132      	bne.n	8008e6e <_strtol_l.constprop.0+0x9a>
 8008e08:	782c      	ldrb	r4, [r5, #0]
 8008e0a:	2701      	movs	r7, #1
 8008e0c:	1cb5      	adds	r5, r6, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d05b      	beq.n	8008eca <_strtol_l.constprop.0+0xf6>
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	d109      	bne.n	8008e2a <_strtol_l.constprop.0+0x56>
 8008e16:	2c30      	cmp	r4, #48	; 0x30
 8008e18:	d107      	bne.n	8008e2a <_strtol_l.constprop.0+0x56>
 8008e1a:	782c      	ldrb	r4, [r5, #0]
 8008e1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e20:	2c58      	cmp	r4, #88	; 0x58
 8008e22:	d14d      	bne.n	8008ec0 <_strtol_l.constprop.0+0xec>
 8008e24:	786c      	ldrb	r4, [r5, #1]
 8008e26:	2310      	movs	r3, #16
 8008e28:	3502      	adds	r5, #2
 8008e2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e32:	f04f 0c00 	mov.w	ip, #0
 8008e36:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e3a:	4666      	mov	r6, ip
 8008e3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e40:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008e44:	f1be 0f09 	cmp.w	lr, #9
 8008e48:	d816      	bhi.n	8008e78 <_strtol_l.constprop.0+0xa4>
 8008e4a:	4674      	mov	r4, lr
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	dd24      	ble.n	8008e9a <_strtol_l.constprop.0+0xc6>
 8008e50:	f1bc 0f00 	cmp.w	ip, #0
 8008e54:	db1e      	blt.n	8008e94 <_strtol_l.constprop.0+0xc0>
 8008e56:	45b1      	cmp	r9, r6
 8008e58:	d31c      	bcc.n	8008e94 <_strtol_l.constprop.0+0xc0>
 8008e5a:	d101      	bne.n	8008e60 <_strtol_l.constprop.0+0x8c>
 8008e5c:	45a2      	cmp	sl, r4
 8008e5e:	db19      	blt.n	8008e94 <_strtol_l.constprop.0+0xc0>
 8008e60:	fb06 4603 	mla	r6, r6, r3, r4
 8008e64:	f04f 0c01 	mov.w	ip, #1
 8008e68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e6c:	e7e8      	b.n	8008e40 <_strtol_l.constprop.0+0x6c>
 8008e6e:	2c2b      	cmp	r4, #43	; 0x2b
 8008e70:	bf04      	itt	eq
 8008e72:	782c      	ldrbeq	r4, [r5, #0]
 8008e74:	1cb5      	addeq	r5, r6, #2
 8008e76:	e7ca      	b.n	8008e0e <_strtol_l.constprop.0+0x3a>
 8008e78:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008e7c:	f1be 0f19 	cmp.w	lr, #25
 8008e80:	d801      	bhi.n	8008e86 <_strtol_l.constprop.0+0xb2>
 8008e82:	3c37      	subs	r4, #55	; 0x37
 8008e84:	e7e2      	b.n	8008e4c <_strtol_l.constprop.0+0x78>
 8008e86:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008e8a:	f1be 0f19 	cmp.w	lr, #25
 8008e8e:	d804      	bhi.n	8008e9a <_strtol_l.constprop.0+0xc6>
 8008e90:	3c57      	subs	r4, #87	; 0x57
 8008e92:	e7db      	b.n	8008e4c <_strtol_l.constprop.0+0x78>
 8008e94:	f04f 3cff 	mov.w	ip, #4294967295
 8008e98:	e7e6      	b.n	8008e68 <_strtol_l.constprop.0+0x94>
 8008e9a:	f1bc 0f00 	cmp.w	ip, #0
 8008e9e:	da05      	bge.n	8008eac <_strtol_l.constprop.0+0xd8>
 8008ea0:	2322      	movs	r3, #34	; 0x22
 8008ea2:	6003      	str	r3, [r0, #0]
 8008ea4:	4646      	mov	r6, r8
 8008ea6:	b942      	cbnz	r2, 8008eba <_strtol_l.constprop.0+0xe6>
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	e79e      	b.n	8008dea <_strtol_l.constprop.0+0x16>
 8008eac:	b107      	cbz	r7, 8008eb0 <_strtol_l.constprop.0+0xdc>
 8008eae:	4276      	negs	r6, r6
 8008eb0:	2a00      	cmp	r2, #0
 8008eb2:	d0f9      	beq.n	8008ea8 <_strtol_l.constprop.0+0xd4>
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	d000      	beq.n	8008ebc <_strtol_l.constprop.0+0xe8>
 8008eba:	1e69      	subs	r1, r5, #1
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	e7f3      	b.n	8008ea8 <_strtol_l.constprop.0+0xd4>
 8008ec0:	2430      	movs	r4, #48	; 0x30
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1b1      	bne.n	8008e2a <_strtol_l.constprop.0+0x56>
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	e7af      	b.n	8008e2a <_strtol_l.constprop.0+0x56>
 8008eca:	2c30      	cmp	r4, #48	; 0x30
 8008ecc:	d0a5      	beq.n	8008e1a <_strtol_l.constprop.0+0x46>
 8008ece:	230a      	movs	r3, #10
 8008ed0:	e7ab      	b.n	8008e2a <_strtol_l.constprop.0+0x56>
 8008ed2:	bf00      	nop
 8008ed4:	0800b649 	.word	0x0800b649

08008ed8 <strtol>:
 8008ed8:	4613      	mov	r3, r2
 8008eda:	460a      	mov	r2, r1
 8008edc:	4601      	mov	r1, r0
 8008ede:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <strtol+0x10>)
 8008ee0:	6800      	ldr	r0, [r0, #0]
 8008ee2:	f7ff bf77 	b.w	8008dd4 <_strtol_l.constprop.0>
 8008ee6:	bf00      	nop
 8008ee8:	2000000c 	.word	0x2000000c

08008eec <__assert_func>:
 8008eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eee:	4614      	mov	r4, r2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <__assert_func+0x2c>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	68d8      	ldr	r0, [r3, #12]
 8008efa:	b14c      	cbz	r4, 8008f10 <__assert_func+0x24>
 8008efc:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <__assert_func+0x30>)
 8008efe:	9100      	str	r1, [sp, #0]
 8008f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f04:	4906      	ldr	r1, [pc, #24]	; (8008f20 <__assert_func+0x34>)
 8008f06:	462b      	mov	r3, r5
 8008f08:	f000 fe88 	bl	8009c1c <fiprintf>
 8008f0c:	f001 fec4 	bl	800ac98 <abort>
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <__assert_func+0x38>)
 8008f12:	461c      	mov	r4, r3
 8008f14:	e7f3      	b.n	8008efe <__assert_func+0x12>
 8008f16:	bf00      	nop
 8008f18:	2000000c 	.word	0x2000000c
 8008f1c:	0800b60c 	.word	0x0800b60c
 8008f20:	0800b619 	.word	0x0800b619
 8008f24:	0800b647 	.word	0x0800b647

08008f28 <quorem>:
 8008f28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	6903      	ldr	r3, [r0, #16]
 8008f2e:	690c      	ldr	r4, [r1, #16]
 8008f30:	42a3      	cmp	r3, r4
 8008f32:	4607      	mov	r7, r0
 8008f34:	f2c0 8081 	blt.w	800903a <quorem+0x112>
 8008f38:	3c01      	subs	r4, #1
 8008f3a:	f101 0814 	add.w	r8, r1, #20
 8008f3e:	f100 0514 	add.w	r5, r0, #20
 8008f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f50:	3301      	adds	r3, #1
 8008f52:	429a      	cmp	r2, r3
 8008f54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f60:	d331      	bcc.n	8008fc6 <quorem+0x9e>
 8008f62:	f04f 0e00 	mov.w	lr, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	46ac      	mov	ip, r5
 8008f6a:	46f2      	mov	sl, lr
 8008f6c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f70:	b293      	uxth	r3, r2
 8008f72:	fb06 e303 	mla	r3, r6, r3, lr
 8008f76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f80:	f8dc a000 	ldr.w	sl, [ip]
 8008f84:	0c12      	lsrs	r2, r2, #16
 8008f86:	fa13 f38a 	uxtah	r3, r3, sl
 8008f8a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f8e:	9300      	str	r3, [sp, #0]
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f96:	b292      	uxth	r2, r2
 8008f98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fa0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008fa4:	4581      	cmp	r9, r0
 8008fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008faa:	f84c 3b04 	str.w	r3, [ip], #4
 8008fae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008fb2:	d2db      	bcs.n	8008f6c <quorem+0x44>
 8008fb4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008fb8:	b92b      	cbnz	r3, 8008fc6 <quorem+0x9e>
 8008fba:	9b01      	ldr	r3, [sp, #4]
 8008fbc:	3b04      	subs	r3, #4
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	d32e      	bcc.n	8009022 <quorem+0xfa>
 8008fc4:	613c      	str	r4, [r7, #16]
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	f001 f8da 	bl	800a180 <__mcmp>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	db24      	blt.n	800901a <quorem+0xf2>
 8008fd0:	3601      	adds	r6, #1
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f04f 0c00 	mov.w	ip, #0
 8008fd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fdc:	f8d0 e000 	ldr.w	lr, [r0]
 8008fe0:	b293      	uxth	r3, r2
 8008fe2:	ebac 0303 	sub.w	r3, ip, r3
 8008fe6:	0c12      	lsrs	r2, r2, #16
 8008fe8:	fa13 f38e 	uxtah	r3, r3, lr
 8008fec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ff0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ffa:	45c1      	cmp	r9, r8
 8008ffc:	f840 3b04 	str.w	r3, [r0], #4
 8009000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009004:	d2e8      	bcs.n	8008fd8 <quorem+0xb0>
 8009006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800900a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800900e:	b922      	cbnz	r2, 800901a <quorem+0xf2>
 8009010:	3b04      	subs	r3, #4
 8009012:	429d      	cmp	r5, r3
 8009014:	461a      	mov	r2, r3
 8009016:	d30a      	bcc.n	800902e <quorem+0x106>
 8009018:	613c      	str	r4, [r7, #16]
 800901a:	4630      	mov	r0, r6
 800901c:	b003      	add	sp, #12
 800901e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	3b04      	subs	r3, #4
 8009026:	2a00      	cmp	r2, #0
 8009028:	d1cc      	bne.n	8008fc4 <quorem+0x9c>
 800902a:	3c01      	subs	r4, #1
 800902c:	e7c7      	b.n	8008fbe <quorem+0x96>
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	3b04      	subs	r3, #4
 8009032:	2a00      	cmp	r2, #0
 8009034:	d1f0      	bne.n	8009018 <quorem+0xf0>
 8009036:	3c01      	subs	r4, #1
 8009038:	e7eb      	b.n	8009012 <quorem+0xea>
 800903a:	2000      	movs	r0, #0
 800903c:	e7ee      	b.n	800901c <quorem+0xf4>
	...

08009040 <_dtoa_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	ed2d 8b04 	vpush	{d8-d9}
 8009048:	ec57 6b10 	vmov	r6, r7, d0
 800904c:	b093      	sub	sp, #76	; 0x4c
 800904e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009050:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009054:	9106      	str	r1, [sp, #24]
 8009056:	ee10 aa10 	vmov	sl, s0
 800905a:	4604      	mov	r4, r0
 800905c:	9209      	str	r2, [sp, #36]	; 0x24
 800905e:	930c      	str	r3, [sp, #48]	; 0x30
 8009060:	46bb      	mov	fp, r7
 8009062:	b975      	cbnz	r5, 8009082 <_dtoa_r+0x42>
 8009064:	2010      	movs	r0, #16
 8009066:	f000 fdef 	bl	8009c48 <malloc>
 800906a:	4602      	mov	r2, r0
 800906c:	6260      	str	r0, [r4, #36]	; 0x24
 800906e:	b920      	cbnz	r0, 800907a <_dtoa_r+0x3a>
 8009070:	4ba7      	ldr	r3, [pc, #668]	; (8009310 <_dtoa_r+0x2d0>)
 8009072:	21ea      	movs	r1, #234	; 0xea
 8009074:	48a7      	ldr	r0, [pc, #668]	; (8009314 <_dtoa_r+0x2d4>)
 8009076:	f7ff ff39 	bl	8008eec <__assert_func>
 800907a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800907e:	6005      	str	r5, [r0, #0]
 8009080:	60c5      	str	r5, [r0, #12]
 8009082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009084:	6819      	ldr	r1, [r3, #0]
 8009086:	b151      	cbz	r1, 800909e <_dtoa_r+0x5e>
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	604a      	str	r2, [r1, #4]
 800908c:	2301      	movs	r3, #1
 800908e:	4093      	lsls	r3, r2
 8009090:	608b      	str	r3, [r1, #8]
 8009092:	4620      	mov	r0, r4
 8009094:	f000 fe32 	bl	8009cfc <_Bfree>
 8009098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	1e3b      	subs	r3, r7, #0
 80090a0:	bfaa      	itet	ge
 80090a2:	2300      	movge	r3, #0
 80090a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80090a8:	f8c8 3000 	strge.w	r3, [r8]
 80090ac:	4b9a      	ldr	r3, [pc, #616]	; (8009318 <_dtoa_r+0x2d8>)
 80090ae:	bfbc      	itt	lt
 80090b0:	2201      	movlt	r2, #1
 80090b2:	f8c8 2000 	strlt.w	r2, [r8]
 80090b6:	ea33 030b 	bics.w	r3, r3, fp
 80090ba:	d11b      	bne.n	80090f4 <_dtoa_r+0xb4>
 80090bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090be:	f242 730f 	movw	r3, #9999	; 0x270f
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090c8:	4333      	orrs	r3, r6
 80090ca:	f000 8592 	beq.w	8009bf2 <_dtoa_r+0xbb2>
 80090ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090d0:	b963      	cbnz	r3, 80090ec <_dtoa_r+0xac>
 80090d2:	4b92      	ldr	r3, [pc, #584]	; (800931c <_dtoa_r+0x2dc>)
 80090d4:	e022      	b.n	800911c <_dtoa_r+0xdc>
 80090d6:	4b92      	ldr	r3, [pc, #584]	; (8009320 <_dtoa_r+0x2e0>)
 80090d8:	9301      	str	r3, [sp, #4]
 80090da:	3308      	adds	r3, #8
 80090dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	b013      	add	sp, #76	; 0x4c
 80090e4:	ecbd 8b04 	vpop	{d8-d9}
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	4b8b      	ldr	r3, [pc, #556]	; (800931c <_dtoa_r+0x2dc>)
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	3303      	adds	r3, #3
 80090f2:	e7f3      	b.n	80090dc <_dtoa_r+0x9c>
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4650      	mov	r0, sl
 80090fa:	4659      	mov	r1, fp
 80090fc:	f7f7 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009100:	ec4b ab19 	vmov	d9, sl, fp
 8009104:	4680      	mov	r8, r0
 8009106:	b158      	cbz	r0, 8009120 <_dtoa_r+0xe0>
 8009108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800910a:	2301      	movs	r3, #1
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 856b 	beq.w	8009bec <_dtoa_r+0xbac>
 8009116:	4883      	ldr	r0, [pc, #524]	; (8009324 <_dtoa_r+0x2e4>)
 8009118:	6018      	str	r0, [r3, #0]
 800911a:	1e43      	subs	r3, r0, #1
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	e7df      	b.n	80090e0 <_dtoa_r+0xa0>
 8009120:	ec4b ab10 	vmov	d0, sl, fp
 8009124:	aa10      	add	r2, sp, #64	; 0x40
 8009126:	a911      	add	r1, sp, #68	; 0x44
 8009128:	4620      	mov	r0, r4
 800912a:	f001 f8cf 	bl	800a2cc <__d2b>
 800912e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009132:	ee08 0a10 	vmov	s16, r0
 8009136:	2d00      	cmp	r5, #0
 8009138:	f000 8084 	beq.w	8009244 <_dtoa_r+0x204>
 800913c:	ee19 3a90 	vmov	r3, s19
 8009140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009144:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009148:	4656      	mov	r6, sl
 800914a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800914e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009152:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009156:	4b74      	ldr	r3, [pc, #464]	; (8009328 <_dtoa_r+0x2e8>)
 8009158:	2200      	movs	r2, #0
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 f893 	bl	8000288 <__aeabi_dsub>
 8009162:	a365      	add	r3, pc, #404	; (adr r3, 80092f8 <_dtoa_r+0x2b8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	a364      	add	r3, pc, #400	; (adr r3, 8009300 <_dtoa_r+0x2c0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f88b 	bl	800028c <__adddf3>
 8009176:	4606      	mov	r6, r0
 8009178:	4628      	mov	r0, r5
 800917a:	460f      	mov	r7, r1
 800917c:	f7f7 f9d2 	bl	8000524 <__aeabi_i2d>
 8009180:	a361      	add	r3, pc, #388	; (adr r3, 8009308 <_dtoa_r+0x2c8>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f7 fa37 	bl	80005f8 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 f87b 	bl	800028c <__adddf3>
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	f7f7 fcdd 	bl	8000b58 <__aeabi_d2iz>
 800919e:	2200      	movs	r2, #0
 80091a0:	9000      	str	r0, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 fc98 	bl	8000adc <__aeabi_dcmplt>
 80091ac:	b150      	cbz	r0, 80091c4 <_dtoa_r+0x184>
 80091ae:	9800      	ldr	r0, [sp, #0]
 80091b0:	f7f7 f9b8 	bl	8000524 <__aeabi_i2d>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f7 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80091bc:	b910      	cbnz	r0, 80091c4 <_dtoa_r+0x184>
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	9b00      	ldr	r3, [sp, #0]
 80091c6:	2b16      	cmp	r3, #22
 80091c8:	d85a      	bhi.n	8009280 <_dtoa_r+0x240>
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	4b57      	ldr	r3, [pc, #348]	; (800932c <_dtoa_r+0x2ec>)
 80091ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f7f7 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d050      	beq.n	8009284 <_dtoa_r+0x244>
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80091ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ee:	1b5d      	subs	r5, r3, r5
 80091f0:	1e6b      	subs	r3, r5, #1
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	bf45      	ittet	mi
 80091f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80091fa:	9304      	strmi	r3, [sp, #16]
 80091fc:	2300      	movpl	r3, #0
 80091fe:	2300      	movmi	r3, #0
 8009200:	bf4c      	ite	mi
 8009202:	9305      	strmi	r3, [sp, #20]
 8009204:	9304      	strpl	r3, [sp, #16]
 8009206:	9b00      	ldr	r3, [sp, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	db3d      	blt.n	8009288 <_dtoa_r+0x248>
 800920c:	9b05      	ldr	r3, [sp, #20]
 800920e:	9a00      	ldr	r2, [sp, #0]
 8009210:	920a      	str	r2, [sp, #40]	; 0x28
 8009212:	4413      	add	r3, r2
 8009214:	9305      	str	r3, [sp, #20]
 8009216:	2300      	movs	r3, #0
 8009218:	9307      	str	r3, [sp, #28]
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	2b09      	cmp	r3, #9
 800921e:	f200 8089 	bhi.w	8009334 <_dtoa_r+0x2f4>
 8009222:	2b05      	cmp	r3, #5
 8009224:	bfc4      	itt	gt
 8009226:	3b04      	subgt	r3, #4
 8009228:	9306      	strgt	r3, [sp, #24]
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	f1a3 0302 	sub.w	r3, r3, #2
 8009230:	bfcc      	ite	gt
 8009232:	2500      	movgt	r5, #0
 8009234:	2501      	movle	r5, #1
 8009236:	2b03      	cmp	r3, #3
 8009238:	f200 8087 	bhi.w	800934a <_dtoa_r+0x30a>
 800923c:	e8df f003 	tbb	[pc, r3]
 8009240:	59383a2d 	.word	0x59383a2d
 8009244:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009248:	441d      	add	r5, r3
 800924a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800924e:	2b20      	cmp	r3, #32
 8009250:	bfc1      	itttt	gt
 8009252:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009256:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800925a:	fa0b f303 	lslgt.w	r3, fp, r3
 800925e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009262:	bfda      	itte	le
 8009264:	f1c3 0320 	rsble	r3, r3, #32
 8009268:	fa06 f003 	lslle.w	r0, r6, r3
 800926c:	4318      	orrgt	r0, r3
 800926e:	f7f7 f949 	bl	8000504 <__aeabi_ui2d>
 8009272:	2301      	movs	r3, #1
 8009274:	4606      	mov	r6, r0
 8009276:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800927a:	3d01      	subs	r5, #1
 800927c:	930e      	str	r3, [sp, #56]	; 0x38
 800927e:	e76a      	b.n	8009156 <_dtoa_r+0x116>
 8009280:	2301      	movs	r3, #1
 8009282:	e7b2      	b.n	80091ea <_dtoa_r+0x1aa>
 8009284:	900b      	str	r0, [sp, #44]	; 0x2c
 8009286:	e7b1      	b.n	80091ec <_dtoa_r+0x1ac>
 8009288:	9b04      	ldr	r3, [sp, #16]
 800928a:	9a00      	ldr	r2, [sp, #0]
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	4253      	negs	r3, r2
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	; 0x28
 8009298:	e7bf      	b.n	800921a <_dtoa_r+0x1da>
 800929a:	2300      	movs	r3, #0
 800929c:	9308      	str	r3, [sp, #32]
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dc55      	bgt.n	8009350 <_dtoa_r+0x310>
 80092a4:	2301      	movs	r3, #1
 80092a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092aa:	461a      	mov	r2, r3
 80092ac:	9209      	str	r2, [sp, #36]	; 0x24
 80092ae:	e00c      	b.n	80092ca <_dtoa_r+0x28a>
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7f3      	b.n	800929c <_dtoa_r+0x25c>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092b8:	9308      	str	r3, [sp, #32]
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	4413      	add	r3, r2
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	3301      	adds	r3, #1
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	9303      	str	r3, [sp, #12]
 80092c6:	bfb8      	it	lt
 80092c8:	2301      	movlt	r3, #1
 80092ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80092cc:	2200      	movs	r2, #0
 80092ce:	6042      	str	r2, [r0, #4]
 80092d0:	2204      	movs	r2, #4
 80092d2:	f102 0614 	add.w	r6, r2, #20
 80092d6:	429e      	cmp	r6, r3
 80092d8:	6841      	ldr	r1, [r0, #4]
 80092da:	d93d      	bls.n	8009358 <_dtoa_r+0x318>
 80092dc:	4620      	mov	r0, r4
 80092de:	f000 fccd 	bl	8009c7c <_Balloc>
 80092e2:	9001      	str	r0, [sp, #4]
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d13b      	bne.n	8009360 <_dtoa_r+0x320>
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <_dtoa_r+0x2f0>)
 80092ea:	4602      	mov	r2, r0
 80092ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80092f0:	e6c0      	b.n	8009074 <_dtoa_r+0x34>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7df      	b.n	80092b6 <_dtoa_r+0x276>
 80092f6:	bf00      	nop
 80092f8:	636f4361 	.word	0x636f4361
 80092fc:	3fd287a7 	.word	0x3fd287a7
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	509f79fb 	.word	0x509f79fb
 800930c:	3fd34413 	.word	0x3fd34413
 8009310:	0800b598 	.word	0x0800b598
 8009314:	0800b756 	.word	0x0800b756
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	0800b752 	.word	0x0800b752
 8009320:	0800b749 	.word	0x0800b749
 8009324:	0800b575 	.word	0x0800b575
 8009328:	3ff80000 	.word	0x3ff80000
 800932c:	0800b850 	.word	0x0800b850
 8009330:	0800b7b1 	.word	0x0800b7b1
 8009334:	2501      	movs	r5, #1
 8009336:	2300      	movs	r3, #0
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9508      	str	r5, [sp, #32]
 800933c:	f04f 33ff 	mov.w	r3, #4294967295
 8009340:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	2312      	movs	r3, #18
 8009348:	e7b0      	b.n	80092ac <_dtoa_r+0x26c>
 800934a:	2301      	movs	r3, #1
 800934c:	9308      	str	r3, [sp, #32]
 800934e:	e7f5      	b.n	800933c <_dtoa_r+0x2fc>
 8009350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009352:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009356:	e7b8      	b.n	80092ca <_dtoa_r+0x28a>
 8009358:	3101      	adds	r1, #1
 800935a:	6041      	str	r1, [r0, #4]
 800935c:	0052      	lsls	r2, r2, #1
 800935e:	e7b8      	b.n	80092d2 <_dtoa_r+0x292>
 8009360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009362:	9a01      	ldr	r2, [sp, #4]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	2b0e      	cmp	r3, #14
 800936a:	f200 809d 	bhi.w	80094a8 <_dtoa_r+0x468>
 800936e:	2d00      	cmp	r5, #0
 8009370:	f000 809a 	beq.w	80094a8 <_dtoa_r+0x468>
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd32      	ble.n	80093e0 <_dtoa_r+0x3a0>
 800937a:	4ab7      	ldr	r2, [pc, #732]	; (8009658 <_dtoa_r+0x618>)
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009384:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	05d8      	lsls	r0, r3, #23
 800938c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009390:	d516      	bpl.n	80093c0 <_dtoa_r+0x380>
 8009392:	4bb2      	ldr	r3, [pc, #712]	; (800965c <_dtoa_r+0x61c>)
 8009394:	ec51 0b19 	vmov	r0, r1, d9
 8009398:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800939c:	f7f7 fa56 	bl	800084c <__aeabi_ddiv>
 80093a0:	f007 070f 	and.w	r7, r7, #15
 80093a4:	4682      	mov	sl, r0
 80093a6:	468b      	mov	fp, r1
 80093a8:	2503      	movs	r5, #3
 80093aa:	4eac      	ldr	r6, [pc, #688]	; (800965c <_dtoa_r+0x61c>)
 80093ac:	b957      	cbnz	r7, 80093c4 <_dtoa_r+0x384>
 80093ae:	4642      	mov	r2, r8
 80093b0:	464b      	mov	r3, r9
 80093b2:	4650      	mov	r0, sl
 80093b4:	4659      	mov	r1, fp
 80093b6:	f7f7 fa49 	bl	800084c <__aeabi_ddiv>
 80093ba:	4682      	mov	sl, r0
 80093bc:	468b      	mov	fp, r1
 80093be:	e028      	b.n	8009412 <_dtoa_r+0x3d2>
 80093c0:	2502      	movs	r5, #2
 80093c2:	e7f2      	b.n	80093aa <_dtoa_r+0x36a>
 80093c4:	07f9      	lsls	r1, r7, #31
 80093c6:	d508      	bpl.n	80093da <_dtoa_r+0x39a>
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80093d0:	f7f7 f912 	bl	80005f8 <__aeabi_dmul>
 80093d4:	3501      	adds	r5, #1
 80093d6:	4680      	mov	r8, r0
 80093d8:	4689      	mov	r9, r1
 80093da:	107f      	asrs	r7, r7, #1
 80093dc:	3608      	adds	r6, #8
 80093de:	e7e5      	b.n	80093ac <_dtoa_r+0x36c>
 80093e0:	f000 809b 	beq.w	800951a <_dtoa_r+0x4da>
 80093e4:	9b00      	ldr	r3, [sp, #0]
 80093e6:	4f9d      	ldr	r7, [pc, #628]	; (800965c <_dtoa_r+0x61c>)
 80093e8:	425e      	negs	r6, r3
 80093ea:	4b9b      	ldr	r3, [pc, #620]	; (8009658 <_dtoa_r+0x618>)
 80093ec:	f006 020f 	and.w	r2, r6, #15
 80093f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	ec51 0b19 	vmov	r0, r1, d9
 80093fc:	f7f7 f8fc 	bl	80005f8 <__aeabi_dmul>
 8009400:	1136      	asrs	r6, r6, #4
 8009402:	4682      	mov	sl, r0
 8009404:	468b      	mov	fp, r1
 8009406:	2300      	movs	r3, #0
 8009408:	2502      	movs	r5, #2
 800940a:	2e00      	cmp	r6, #0
 800940c:	d17a      	bne.n	8009504 <_dtoa_r+0x4c4>
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1d3      	bne.n	80093ba <_dtoa_r+0x37a>
 8009412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8082 	beq.w	800951e <_dtoa_r+0x4de>
 800941a:	4b91      	ldr	r3, [pc, #580]	; (8009660 <_dtoa_r+0x620>)
 800941c:	2200      	movs	r2, #0
 800941e:	4650      	mov	r0, sl
 8009420:	4659      	mov	r1, fp
 8009422:	f7f7 fb5b 	bl	8000adc <__aeabi_dcmplt>
 8009426:	2800      	cmp	r0, #0
 8009428:	d079      	beq.n	800951e <_dtoa_r+0x4de>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d076      	beq.n	800951e <_dtoa_r+0x4de>
 8009430:	9b02      	ldr	r3, [sp, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	dd36      	ble.n	80094a4 <_dtoa_r+0x464>
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	4650      	mov	r0, sl
 800943a:	4659      	mov	r1, fp
 800943c:	1e5f      	subs	r7, r3, #1
 800943e:	2200      	movs	r2, #0
 8009440:	4b88      	ldr	r3, [pc, #544]	; (8009664 <_dtoa_r+0x624>)
 8009442:	f7f7 f8d9 	bl	80005f8 <__aeabi_dmul>
 8009446:	9e02      	ldr	r6, [sp, #8]
 8009448:	4682      	mov	sl, r0
 800944a:	468b      	mov	fp, r1
 800944c:	3501      	adds	r5, #1
 800944e:	4628      	mov	r0, r5
 8009450:	f7f7 f868 	bl	8000524 <__aeabi_i2d>
 8009454:	4652      	mov	r2, sl
 8009456:	465b      	mov	r3, fp
 8009458:	f7f7 f8ce 	bl	80005f8 <__aeabi_dmul>
 800945c:	4b82      	ldr	r3, [pc, #520]	; (8009668 <_dtoa_r+0x628>)
 800945e:	2200      	movs	r2, #0
 8009460:	f7f6 ff14 	bl	800028c <__adddf3>
 8009464:	46d0      	mov	r8, sl
 8009466:	46d9      	mov	r9, fp
 8009468:	4682      	mov	sl, r0
 800946a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800946e:	2e00      	cmp	r6, #0
 8009470:	d158      	bne.n	8009524 <_dtoa_r+0x4e4>
 8009472:	4b7e      	ldr	r3, [pc, #504]	; (800966c <_dtoa_r+0x62c>)
 8009474:	2200      	movs	r2, #0
 8009476:	4640      	mov	r0, r8
 8009478:	4649      	mov	r1, r9
 800947a:	f7f6 ff05 	bl	8000288 <__aeabi_dsub>
 800947e:	4652      	mov	r2, sl
 8009480:	465b      	mov	r3, fp
 8009482:	4680      	mov	r8, r0
 8009484:	4689      	mov	r9, r1
 8009486:	f7f7 fb47 	bl	8000b18 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f040 8295 	bne.w	80099ba <_dtoa_r+0x97a>
 8009490:	4652      	mov	r2, sl
 8009492:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	f7f7 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f040 8289 	bne.w	80099b6 <_dtoa_r+0x976>
 80094a4:	ec5b ab19 	vmov	sl, fp, d9
 80094a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f2c0 8148 	blt.w	8009740 <_dtoa_r+0x700>
 80094b0:	9a00      	ldr	r2, [sp, #0]
 80094b2:	2a0e      	cmp	r2, #14
 80094b4:	f300 8144 	bgt.w	8009740 <_dtoa_r+0x700>
 80094b8:	4b67      	ldr	r3, [pc, #412]	; (8009658 <_dtoa_r+0x618>)
 80094ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80094c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f280 80d5 	bge.w	8009674 <_dtoa_r+0x634>
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f300 80d1 	bgt.w	8009674 <_dtoa_r+0x634>
 80094d2:	f040 826f 	bne.w	80099b4 <_dtoa_r+0x974>
 80094d6:	4b65      	ldr	r3, [pc, #404]	; (800966c <_dtoa_r+0x62c>)
 80094d8:	2200      	movs	r2, #0
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	4652      	mov	r2, sl
 80094e4:	465b      	mov	r3, fp
 80094e6:	f7f7 fb0d 	bl	8000b04 <__aeabi_dcmpge>
 80094ea:	9e03      	ldr	r6, [sp, #12]
 80094ec:	4637      	mov	r7, r6
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f040 8245 	bne.w	800997e <_dtoa_r+0x93e>
 80094f4:	9d01      	ldr	r5, [sp, #4]
 80094f6:	2331      	movs	r3, #49	; 0x31
 80094f8:	f805 3b01 	strb.w	r3, [r5], #1
 80094fc:	9b00      	ldr	r3, [sp, #0]
 80094fe:	3301      	adds	r3, #1
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	e240      	b.n	8009986 <_dtoa_r+0x946>
 8009504:	07f2      	lsls	r2, r6, #31
 8009506:	d505      	bpl.n	8009514 <_dtoa_r+0x4d4>
 8009508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800950c:	f7f7 f874 	bl	80005f8 <__aeabi_dmul>
 8009510:	3501      	adds	r5, #1
 8009512:	2301      	movs	r3, #1
 8009514:	1076      	asrs	r6, r6, #1
 8009516:	3708      	adds	r7, #8
 8009518:	e777      	b.n	800940a <_dtoa_r+0x3ca>
 800951a:	2502      	movs	r5, #2
 800951c:	e779      	b.n	8009412 <_dtoa_r+0x3d2>
 800951e:	9f00      	ldr	r7, [sp, #0]
 8009520:	9e03      	ldr	r6, [sp, #12]
 8009522:	e794      	b.n	800944e <_dtoa_r+0x40e>
 8009524:	9901      	ldr	r1, [sp, #4]
 8009526:	4b4c      	ldr	r3, [pc, #304]	; (8009658 <_dtoa_r+0x618>)
 8009528:	4431      	add	r1, r6
 800952a:	910d      	str	r1, [sp, #52]	; 0x34
 800952c:	9908      	ldr	r1, [sp, #32]
 800952e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009532:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009536:	2900      	cmp	r1, #0
 8009538:	d043      	beq.n	80095c2 <_dtoa_r+0x582>
 800953a:	494d      	ldr	r1, [pc, #308]	; (8009670 <_dtoa_r+0x630>)
 800953c:	2000      	movs	r0, #0
 800953e:	f7f7 f985 	bl	800084c <__aeabi_ddiv>
 8009542:	4652      	mov	r2, sl
 8009544:	465b      	mov	r3, fp
 8009546:	f7f6 fe9f 	bl	8000288 <__aeabi_dsub>
 800954a:	9d01      	ldr	r5, [sp, #4]
 800954c:	4682      	mov	sl, r0
 800954e:	468b      	mov	fp, r1
 8009550:	4649      	mov	r1, r9
 8009552:	4640      	mov	r0, r8
 8009554:	f7f7 fb00 	bl	8000b58 <__aeabi_d2iz>
 8009558:	4606      	mov	r6, r0
 800955a:	f7f6 ffe3 	bl	8000524 <__aeabi_i2d>
 800955e:	4602      	mov	r2, r0
 8009560:	460b      	mov	r3, r1
 8009562:	4640      	mov	r0, r8
 8009564:	4649      	mov	r1, r9
 8009566:	f7f6 fe8f 	bl	8000288 <__aeabi_dsub>
 800956a:	3630      	adds	r6, #48	; 0x30
 800956c:	f805 6b01 	strb.w	r6, [r5], #1
 8009570:	4652      	mov	r2, sl
 8009572:	465b      	mov	r3, fp
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	f7f7 fab0 	bl	8000adc <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	d163      	bne.n	8009648 <_dtoa_r+0x608>
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	4936      	ldr	r1, [pc, #216]	; (8009660 <_dtoa_r+0x620>)
 8009586:	2000      	movs	r0, #0
 8009588:	f7f6 fe7e 	bl	8000288 <__aeabi_dsub>
 800958c:	4652      	mov	r2, sl
 800958e:	465b      	mov	r3, fp
 8009590:	f7f7 faa4 	bl	8000adc <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	f040 80b5 	bne.w	8009704 <_dtoa_r+0x6c4>
 800959a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959c:	429d      	cmp	r5, r3
 800959e:	d081      	beq.n	80094a4 <_dtoa_r+0x464>
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <_dtoa_r+0x624>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	4650      	mov	r0, sl
 80095a6:	4659      	mov	r1, fp
 80095a8:	f7f7 f826 	bl	80005f8 <__aeabi_dmul>
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <_dtoa_r+0x624>)
 80095ae:	4682      	mov	sl, r0
 80095b0:	468b      	mov	fp, r1
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	2200      	movs	r2, #0
 80095b8:	f7f7 f81e 	bl	80005f8 <__aeabi_dmul>
 80095bc:	4680      	mov	r8, r0
 80095be:	4689      	mov	r9, r1
 80095c0:	e7c6      	b.n	8009550 <_dtoa_r+0x510>
 80095c2:	4650      	mov	r0, sl
 80095c4:	4659      	mov	r1, fp
 80095c6:	f7f7 f817 	bl	80005f8 <__aeabi_dmul>
 80095ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095cc:	9d01      	ldr	r5, [sp, #4]
 80095ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d0:	4682      	mov	sl, r0
 80095d2:	468b      	mov	fp, r1
 80095d4:	4649      	mov	r1, r9
 80095d6:	4640      	mov	r0, r8
 80095d8:	f7f7 fabe 	bl	8000b58 <__aeabi_d2iz>
 80095dc:	4606      	mov	r6, r0
 80095de:	f7f6 ffa1 	bl	8000524 <__aeabi_i2d>
 80095e2:	3630      	adds	r6, #48	; 0x30
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f6 fe4c 	bl	8000288 <__aeabi_dsub>
 80095f0:	f805 6b01 	strb.w	r6, [r5], #1
 80095f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095f6:	429d      	cmp	r5, r3
 80095f8:	4680      	mov	r8, r0
 80095fa:	4689      	mov	r9, r1
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	d124      	bne.n	800964c <_dtoa_r+0x60c>
 8009602:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <_dtoa_r+0x630>)
 8009604:	4650      	mov	r0, sl
 8009606:	4659      	mov	r1, fp
 8009608:	f7f6 fe40 	bl	800028c <__adddf3>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4640      	mov	r0, r8
 8009612:	4649      	mov	r1, r9
 8009614:	f7f7 fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8009618:	2800      	cmp	r0, #0
 800961a:	d173      	bne.n	8009704 <_dtoa_r+0x6c4>
 800961c:	4652      	mov	r2, sl
 800961e:	465b      	mov	r3, fp
 8009620:	4913      	ldr	r1, [pc, #76]	; (8009670 <_dtoa_r+0x630>)
 8009622:	2000      	movs	r0, #0
 8009624:	f7f6 fe30 	bl	8000288 <__aeabi_dsub>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4640      	mov	r0, r8
 800962e:	4649      	mov	r1, r9
 8009630:	f7f7 fa54 	bl	8000adc <__aeabi_dcmplt>
 8009634:	2800      	cmp	r0, #0
 8009636:	f43f af35 	beq.w	80094a4 <_dtoa_r+0x464>
 800963a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800963c:	1e6b      	subs	r3, r5, #1
 800963e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009640:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009644:	2b30      	cmp	r3, #48	; 0x30
 8009646:	d0f8      	beq.n	800963a <_dtoa_r+0x5fa>
 8009648:	9700      	str	r7, [sp, #0]
 800964a:	e049      	b.n	80096e0 <_dtoa_r+0x6a0>
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <_dtoa_r+0x624>)
 800964e:	f7f6 ffd3 	bl	80005f8 <__aeabi_dmul>
 8009652:	4680      	mov	r8, r0
 8009654:	4689      	mov	r9, r1
 8009656:	e7bd      	b.n	80095d4 <_dtoa_r+0x594>
 8009658:	0800b850 	.word	0x0800b850
 800965c:	0800b828 	.word	0x0800b828
 8009660:	3ff00000 	.word	0x3ff00000
 8009664:	40240000 	.word	0x40240000
 8009668:	401c0000 	.word	0x401c0000
 800966c:	40140000 	.word	0x40140000
 8009670:	3fe00000 	.word	0x3fe00000
 8009674:	9d01      	ldr	r5, [sp, #4]
 8009676:	4656      	mov	r6, sl
 8009678:	465f      	mov	r7, fp
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	4630      	mov	r0, r6
 8009680:	4639      	mov	r1, r7
 8009682:	f7f7 f8e3 	bl	800084c <__aeabi_ddiv>
 8009686:	f7f7 fa67 	bl	8000b58 <__aeabi_d2iz>
 800968a:	4682      	mov	sl, r0
 800968c:	f7f6 ff4a 	bl	8000524 <__aeabi_i2d>
 8009690:	4642      	mov	r2, r8
 8009692:	464b      	mov	r3, r9
 8009694:	f7f6 ffb0 	bl	80005f8 <__aeabi_dmul>
 8009698:	4602      	mov	r2, r0
 800969a:	460b      	mov	r3, r1
 800969c:	4630      	mov	r0, r6
 800969e:	4639      	mov	r1, r7
 80096a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80096a4:	f7f6 fdf0 	bl	8000288 <__aeabi_dsub>
 80096a8:	f805 6b01 	strb.w	r6, [r5], #1
 80096ac:	9e01      	ldr	r6, [sp, #4]
 80096ae:	9f03      	ldr	r7, [sp, #12]
 80096b0:	1bae      	subs	r6, r5, r6
 80096b2:	42b7      	cmp	r7, r6
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	d135      	bne.n	8009726 <_dtoa_r+0x6e6>
 80096ba:	f7f6 fde7 	bl	800028c <__adddf3>
 80096be:	4642      	mov	r2, r8
 80096c0:	464b      	mov	r3, r9
 80096c2:	4606      	mov	r6, r0
 80096c4:	460f      	mov	r7, r1
 80096c6:	f7f7 fa27 	bl	8000b18 <__aeabi_dcmpgt>
 80096ca:	b9d0      	cbnz	r0, 8009702 <_dtoa_r+0x6c2>
 80096cc:	4642      	mov	r2, r8
 80096ce:	464b      	mov	r3, r9
 80096d0:	4630      	mov	r0, r6
 80096d2:	4639      	mov	r1, r7
 80096d4:	f7f7 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d8:	b110      	cbz	r0, 80096e0 <_dtoa_r+0x6a0>
 80096da:	f01a 0f01 	tst.w	sl, #1
 80096de:	d110      	bne.n	8009702 <_dtoa_r+0x6c2>
 80096e0:	4620      	mov	r0, r4
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	f000 fb09 	bl	8009cfc <_Bfree>
 80096ea:	2300      	movs	r3, #0
 80096ec:	9800      	ldr	r0, [sp, #0]
 80096ee:	702b      	strb	r3, [r5, #0]
 80096f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096f2:	3001      	adds	r0, #1
 80096f4:	6018      	str	r0, [r3, #0]
 80096f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f43f acf1 	beq.w	80090e0 <_dtoa_r+0xa0>
 80096fe:	601d      	str	r5, [r3, #0]
 8009700:	e4ee      	b.n	80090e0 <_dtoa_r+0xa0>
 8009702:	9f00      	ldr	r7, [sp, #0]
 8009704:	462b      	mov	r3, r5
 8009706:	461d      	mov	r5, r3
 8009708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800970c:	2a39      	cmp	r2, #57	; 0x39
 800970e:	d106      	bne.n	800971e <_dtoa_r+0x6de>
 8009710:	9a01      	ldr	r2, [sp, #4]
 8009712:	429a      	cmp	r2, r3
 8009714:	d1f7      	bne.n	8009706 <_dtoa_r+0x6c6>
 8009716:	9901      	ldr	r1, [sp, #4]
 8009718:	2230      	movs	r2, #48	; 0x30
 800971a:	3701      	adds	r7, #1
 800971c:	700a      	strb	r2, [r1, #0]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	3201      	adds	r2, #1
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	e790      	b.n	8009648 <_dtoa_r+0x608>
 8009726:	4ba6      	ldr	r3, [pc, #664]	; (80099c0 <_dtoa_r+0x980>)
 8009728:	2200      	movs	r2, #0
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	2200      	movs	r2, #0
 8009730:	2300      	movs	r3, #0
 8009732:	4606      	mov	r6, r0
 8009734:	460f      	mov	r7, r1
 8009736:	f7f7 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800973a:	2800      	cmp	r0, #0
 800973c:	d09d      	beq.n	800967a <_dtoa_r+0x63a>
 800973e:	e7cf      	b.n	80096e0 <_dtoa_r+0x6a0>
 8009740:	9a08      	ldr	r2, [sp, #32]
 8009742:	2a00      	cmp	r2, #0
 8009744:	f000 80d7 	beq.w	80098f6 <_dtoa_r+0x8b6>
 8009748:	9a06      	ldr	r2, [sp, #24]
 800974a:	2a01      	cmp	r2, #1
 800974c:	f300 80ba 	bgt.w	80098c4 <_dtoa_r+0x884>
 8009750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009752:	2a00      	cmp	r2, #0
 8009754:	f000 80b2 	beq.w	80098bc <_dtoa_r+0x87c>
 8009758:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800975c:	9e07      	ldr	r6, [sp, #28]
 800975e:	9d04      	ldr	r5, [sp, #16]
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	441a      	add	r2, r3
 8009764:	9204      	str	r2, [sp, #16]
 8009766:	9a05      	ldr	r2, [sp, #20]
 8009768:	2101      	movs	r1, #1
 800976a:	441a      	add	r2, r3
 800976c:	4620      	mov	r0, r4
 800976e:	9205      	str	r2, [sp, #20]
 8009770:	f000 fb7c 	bl	8009e6c <__i2b>
 8009774:	4607      	mov	r7, r0
 8009776:	2d00      	cmp	r5, #0
 8009778:	dd0c      	ble.n	8009794 <_dtoa_r+0x754>
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	dd09      	ble.n	8009794 <_dtoa_r+0x754>
 8009780:	42ab      	cmp	r3, r5
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	bfa8      	it	ge
 8009786:	462b      	movge	r3, r5
 8009788:	1ad2      	subs	r2, r2, r3
 800978a:	9204      	str	r2, [sp, #16]
 800978c:	9a05      	ldr	r2, [sp, #20]
 800978e:	1aed      	subs	r5, r5, r3
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	9b07      	ldr	r3, [sp, #28]
 8009796:	b31b      	cbz	r3, 80097e0 <_dtoa_r+0x7a0>
 8009798:	9b08      	ldr	r3, [sp, #32]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80af 	beq.w	80098fe <_dtoa_r+0x8be>
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	dd13      	ble.n	80097cc <_dtoa_r+0x78c>
 80097a4:	4639      	mov	r1, r7
 80097a6:	4632      	mov	r2, r6
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fc1f 	bl	8009fec <__pow5mult>
 80097ae:	ee18 2a10 	vmov	r2, s16
 80097b2:	4601      	mov	r1, r0
 80097b4:	4607      	mov	r7, r0
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 fb6e 	bl	8009e98 <__multiply>
 80097bc:	ee18 1a10 	vmov	r1, s16
 80097c0:	4680      	mov	r8, r0
 80097c2:	4620      	mov	r0, r4
 80097c4:	f000 fa9a 	bl	8009cfc <_Bfree>
 80097c8:	ee08 8a10 	vmov	s16, r8
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	1b9a      	subs	r2, r3, r6
 80097d0:	d006      	beq.n	80097e0 <_dtoa_r+0x7a0>
 80097d2:	ee18 1a10 	vmov	r1, s16
 80097d6:	4620      	mov	r0, r4
 80097d8:	f000 fc08 	bl	8009fec <__pow5mult>
 80097dc:	ee08 0a10 	vmov	s16, r0
 80097e0:	2101      	movs	r1, #1
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 fb42 	bl	8009e6c <__i2b>
 80097e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	4606      	mov	r6, r0
 80097ee:	f340 8088 	ble.w	8009902 <_dtoa_r+0x8c2>
 80097f2:	461a      	mov	r2, r3
 80097f4:	4601      	mov	r1, r0
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fbf8 	bl	8009fec <__pow5mult>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	4606      	mov	r6, r0
 8009802:	f340 8081 	ble.w	8009908 <_dtoa_r+0x8c8>
 8009806:	f04f 0800 	mov.w	r8, #0
 800980a:	6933      	ldr	r3, [r6, #16]
 800980c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009810:	6918      	ldr	r0, [r3, #16]
 8009812:	f000 fadb 	bl	8009dcc <__hi0bits>
 8009816:	f1c0 0020 	rsb	r0, r0, #32
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	4418      	add	r0, r3
 800981e:	f010 001f 	ands.w	r0, r0, #31
 8009822:	f000 8092 	beq.w	800994a <_dtoa_r+0x90a>
 8009826:	f1c0 0320 	rsb	r3, r0, #32
 800982a:	2b04      	cmp	r3, #4
 800982c:	f340 808a 	ble.w	8009944 <_dtoa_r+0x904>
 8009830:	f1c0 001c 	rsb	r0, r0, #28
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	4403      	add	r3, r0
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	4403      	add	r3, r0
 800983e:	4405      	add	r5, r0
 8009840:	9305      	str	r3, [sp, #20]
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd07      	ble.n	8009858 <_dtoa_r+0x818>
 8009848:	ee18 1a10 	vmov	r1, s16
 800984c:	461a      	mov	r2, r3
 800984e:	4620      	mov	r0, r4
 8009850:	f000 fc26 	bl	800a0a0 <__lshift>
 8009854:	ee08 0a10 	vmov	s16, r0
 8009858:	9b05      	ldr	r3, [sp, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	dd05      	ble.n	800986a <_dtoa_r+0x82a>
 800985e:	4631      	mov	r1, r6
 8009860:	461a      	mov	r2, r3
 8009862:	4620      	mov	r0, r4
 8009864:	f000 fc1c 	bl	800a0a0 <__lshift>
 8009868:	4606      	mov	r6, r0
 800986a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d06e      	beq.n	800994e <_dtoa_r+0x90e>
 8009870:	ee18 0a10 	vmov	r0, s16
 8009874:	4631      	mov	r1, r6
 8009876:	f000 fc83 	bl	800a180 <__mcmp>
 800987a:	2800      	cmp	r0, #0
 800987c:	da67      	bge.n	800994e <_dtoa_r+0x90e>
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	ee18 1a10 	vmov	r1, s16
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	220a      	movs	r2, #10
 800988a:	2300      	movs	r3, #0
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fa57 	bl	8009d40 <__multadd>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	ee08 0a10 	vmov	s16, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 81b1 	beq.w	8009c00 <_dtoa_r+0xbc0>
 800989e:	2300      	movs	r3, #0
 80098a0:	4639      	mov	r1, r7
 80098a2:	220a      	movs	r2, #10
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fa4b 	bl	8009d40 <__multadd>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	4607      	mov	r7, r0
 80098b0:	f300 808e 	bgt.w	80099d0 <_dtoa_r+0x990>
 80098b4:	9b06      	ldr	r3, [sp, #24]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	dc51      	bgt.n	800995e <_dtoa_r+0x91e>
 80098ba:	e089      	b.n	80099d0 <_dtoa_r+0x990>
 80098bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80098c2:	e74b      	b.n	800975c <_dtoa_r+0x71c>
 80098c4:	9b03      	ldr	r3, [sp, #12]
 80098c6:	1e5e      	subs	r6, r3, #1
 80098c8:	9b07      	ldr	r3, [sp, #28]
 80098ca:	42b3      	cmp	r3, r6
 80098cc:	bfbf      	itttt	lt
 80098ce:	9b07      	ldrlt	r3, [sp, #28]
 80098d0:	9607      	strlt	r6, [sp, #28]
 80098d2:	1af2      	sublt	r2, r6, r3
 80098d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80098d6:	bfb6      	itet	lt
 80098d8:	189b      	addlt	r3, r3, r2
 80098da:	1b9e      	subge	r6, r3, r6
 80098dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	bfb8      	it	lt
 80098e2:	2600      	movlt	r6, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfb7      	itett	lt
 80098e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80098ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80098f0:	1a9d      	sublt	r5, r3, r2
 80098f2:	2300      	movlt	r3, #0
 80098f4:	e734      	b.n	8009760 <_dtoa_r+0x720>
 80098f6:	9e07      	ldr	r6, [sp, #28]
 80098f8:	9d04      	ldr	r5, [sp, #16]
 80098fa:	9f08      	ldr	r7, [sp, #32]
 80098fc:	e73b      	b.n	8009776 <_dtoa_r+0x736>
 80098fe:	9a07      	ldr	r2, [sp, #28]
 8009900:	e767      	b.n	80097d2 <_dtoa_r+0x792>
 8009902:	9b06      	ldr	r3, [sp, #24]
 8009904:	2b01      	cmp	r3, #1
 8009906:	dc18      	bgt.n	800993a <_dtoa_r+0x8fa>
 8009908:	f1ba 0f00 	cmp.w	sl, #0
 800990c:	d115      	bne.n	800993a <_dtoa_r+0x8fa>
 800990e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009912:	b993      	cbnz	r3, 800993a <_dtoa_r+0x8fa>
 8009914:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009918:	0d1b      	lsrs	r3, r3, #20
 800991a:	051b      	lsls	r3, r3, #20
 800991c:	b183      	cbz	r3, 8009940 <_dtoa_r+0x900>
 800991e:	9b04      	ldr	r3, [sp, #16]
 8009920:	3301      	adds	r3, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	9b05      	ldr	r3, [sp, #20]
 8009926:	3301      	adds	r3, #1
 8009928:	9305      	str	r3, [sp, #20]
 800992a:	f04f 0801 	mov.w	r8, #1
 800992e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009930:	2b00      	cmp	r3, #0
 8009932:	f47f af6a 	bne.w	800980a <_dtoa_r+0x7ca>
 8009936:	2001      	movs	r0, #1
 8009938:	e76f      	b.n	800981a <_dtoa_r+0x7da>
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	e7f6      	b.n	800992e <_dtoa_r+0x8ee>
 8009940:	4698      	mov	r8, r3
 8009942:	e7f4      	b.n	800992e <_dtoa_r+0x8ee>
 8009944:	f43f af7d 	beq.w	8009842 <_dtoa_r+0x802>
 8009948:	4618      	mov	r0, r3
 800994a:	301c      	adds	r0, #28
 800994c:	e772      	b.n	8009834 <_dtoa_r+0x7f4>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	dc37      	bgt.n	80099c4 <_dtoa_r+0x984>
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	2b02      	cmp	r3, #2
 8009958:	dd34      	ble.n	80099c4 <_dtoa_r+0x984>
 800995a:	9b03      	ldr	r3, [sp, #12]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	9b02      	ldr	r3, [sp, #8]
 8009960:	b96b      	cbnz	r3, 800997e <_dtoa_r+0x93e>
 8009962:	4631      	mov	r1, r6
 8009964:	2205      	movs	r2, #5
 8009966:	4620      	mov	r0, r4
 8009968:	f000 f9ea 	bl	8009d40 <__multadd>
 800996c:	4601      	mov	r1, r0
 800996e:	4606      	mov	r6, r0
 8009970:	ee18 0a10 	vmov	r0, s16
 8009974:	f000 fc04 	bl	800a180 <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	f73f adbb 	bgt.w	80094f4 <_dtoa_r+0x4b4>
 800997e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009980:	9d01      	ldr	r5, [sp, #4]
 8009982:	43db      	mvns	r3, r3
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	f04f 0800 	mov.w	r8, #0
 800998a:	4631      	mov	r1, r6
 800998c:	4620      	mov	r0, r4
 800998e:	f000 f9b5 	bl	8009cfc <_Bfree>
 8009992:	2f00      	cmp	r7, #0
 8009994:	f43f aea4 	beq.w	80096e0 <_dtoa_r+0x6a0>
 8009998:	f1b8 0f00 	cmp.w	r8, #0
 800999c:	d005      	beq.n	80099aa <_dtoa_r+0x96a>
 800999e:	45b8      	cmp	r8, r7
 80099a0:	d003      	beq.n	80099aa <_dtoa_r+0x96a>
 80099a2:	4641      	mov	r1, r8
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 f9a9 	bl	8009cfc <_Bfree>
 80099aa:	4639      	mov	r1, r7
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f9a5 	bl	8009cfc <_Bfree>
 80099b2:	e695      	b.n	80096e0 <_dtoa_r+0x6a0>
 80099b4:	2600      	movs	r6, #0
 80099b6:	4637      	mov	r7, r6
 80099b8:	e7e1      	b.n	800997e <_dtoa_r+0x93e>
 80099ba:	9700      	str	r7, [sp, #0]
 80099bc:	4637      	mov	r7, r6
 80099be:	e599      	b.n	80094f4 <_dtoa_r+0x4b4>
 80099c0:	40240000 	.word	0x40240000
 80099c4:	9b08      	ldr	r3, [sp, #32]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80ca 	beq.w	8009b60 <_dtoa_r+0xb20>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	9302      	str	r3, [sp, #8]
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	dd05      	ble.n	80099e0 <_dtoa_r+0x9a0>
 80099d4:	4639      	mov	r1, r7
 80099d6:	462a      	mov	r2, r5
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fb61 	bl	800a0a0 <__lshift>
 80099de:	4607      	mov	r7, r0
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	d05b      	beq.n	8009a9e <_dtoa_r+0xa5e>
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 f947 	bl	8009c7c <_Balloc>
 80099ee:	4605      	mov	r5, r0
 80099f0:	b928      	cbnz	r0, 80099fe <_dtoa_r+0x9be>
 80099f2:	4b87      	ldr	r3, [pc, #540]	; (8009c10 <_dtoa_r+0xbd0>)
 80099f4:	4602      	mov	r2, r0
 80099f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80099fa:	f7ff bb3b 	b.w	8009074 <_dtoa_r+0x34>
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	3202      	adds	r2, #2
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	f107 010c 	add.w	r1, r7, #12
 8009a08:	300c      	adds	r0, #12
 8009a0a:	f7fe fcc1 	bl	8008390 <memcpy>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4629      	mov	r1, r5
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fb44 	bl	800a0a0 <__lshift>
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	f103 0901 	add.w	r9, r3, #1
 8009a1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009a22:	4413      	add	r3, r2
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	f00a 0301 	and.w	r3, sl, #1
 8009a2a:	46b8      	mov	r8, r7
 8009a2c:	9304      	str	r3, [sp, #16]
 8009a2e:	4607      	mov	r7, r0
 8009a30:	4631      	mov	r1, r6
 8009a32:	ee18 0a10 	vmov	r0, s16
 8009a36:	f7ff fa77 	bl	8008f28 <quorem>
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	9002      	str	r0, [sp, #8]
 8009a3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a42:	ee18 0a10 	vmov	r0, s16
 8009a46:	f000 fb9b 	bl	800a180 <__mcmp>
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	9003      	str	r0, [sp, #12]
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fbb1 	bl	800a1b8 <__mdiff>
 8009a56:	68c2      	ldr	r2, [r0, #12]
 8009a58:	f109 3bff 	add.w	fp, r9, #4294967295
 8009a5c:	4605      	mov	r5, r0
 8009a5e:	bb02      	cbnz	r2, 8009aa2 <_dtoa_r+0xa62>
 8009a60:	4601      	mov	r1, r0
 8009a62:	ee18 0a10 	vmov	r0, s16
 8009a66:	f000 fb8b 	bl	800a180 <__mcmp>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4620      	mov	r0, r4
 8009a70:	9207      	str	r2, [sp, #28]
 8009a72:	f000 f943 	bl	8009cfc <_Bfree>
 8009a76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a7a:	ea43 0102 	orr.w	r1, r3, r2
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	430b      	orrs	r3, r1
 8009a82:	464d      	mov	r5, r9
 8009a84:	d10f      	bne.n	8009aa6 <_dtoa_r+0xa66>
 8009a86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a8a:	d02a      	beq.n	8009ae2 <_dtoa_r+0xaa2>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dd02      	ble.n	8009a98 <_dtoa_r+0xa58>
 8009a92:	9b02      	ldr	r3, [sp, #8]
 8009a94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a98:	f88b a000 	strb.w	sl, [fp]
 8009a9c:	e775      	b.n	800998a <_dtoa_r+0x94a>
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	e7ba      	b.n	8009a18 <_dtoa_r+0x9d8>
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	e7e2      	b.n	8009a6c <_dtoa_r+0xa2c>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	db04      	blt.n	8009ab6 <_dtoa_r+0xa76>
 8009aac:	9906      	ldr	r1, [sp, #24]
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	9904      	ldr	r1, [sp, #16]
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	d122      	bne.n	8009afc <_dtoa_r+0xabc>
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	ddee      	ble.n	8009a98 <_dtoa_r+0xa58>
 8009aba:	ee18 1a10 	vmov	r1, s16
 8009abe:	2201      	movs	r2, #1
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 faed 	bl	800a0a0 <__lshift>
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	ee08 0a10 	vmov	s16, r0
 8009acc:	f000 fb58 	bl	800a180 <__mcmp>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	dc03      	bgt.n	8009adc <_dtoa_r+0xa9c>
 8009ad4:	d1e0      	bne.n	8009a98 <_dtoa_r+0xa58>
 8009ad6:	f01a 0f01 	tst.w	sl, #1
 8009ada:	d0dd      	beq.n	8009a98 <_dtoa_r+0xa58>
 8009adc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ae0:	d1d7      	bne.n	8009a92 <_dtoa_r+0xa52>
 8009ae2:	2339      	movs	r3, #57	; 0x39
 8009ae4:	f88b 3000 	strb.w	r3, [fp]
 8009ae8:	462b      	mov	r3, r5
 8009aea:	461d      	mov	r5, r3
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009af2:	2a39      	cmp	r2, #57	; 0x39
 8009af4:	d071      	beq.n	8009bda <_dtoa_r+0xb9a>
 8009af6:	3201      	adds	r2, #1
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	e746      	b.n	800998a <_dtoa_r+0x94a>
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	dd07      	ble.n	8009b10 <_dtoa_r+0xad0>
 8009b00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b04:	d0ed      	beq.n	8009ae2 <_dtoa_r+0xaa2>
 8009b06:	f10a 0301 	add.w	r3, sl, #1
 8009b0a:	f88b 3000 	strb.w	r3, [fp]
 8009b0e:	e73c      	b.n	800998a <_dtoa_r+0x94a>
 8009b10:	9b05      	ldr	r3, [sp, #20]
 8009b12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009b16:	4599      	cmp	r9, r3
 8009b18:	d047      	beq.n	8009baa <_dtoa_r+0xb6a>
 8009b1a:	ee18 1a10 	vmov	r1, s16
 8009b1e:	2300      	movs	r3, #0
 8009b20:	220a      	movs	r2, #10
 8009b22:	4620      	mov	r0, r4
 8009b24:	f000 f90c 	bl	8009d40 <__multadd>
 8009b28:	45b8      	cmp	r8, r7
 8009b2a:	ee08 0a10 	vmov	s16, r0
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	f04f 020a 	mov.w	r2, #10
 8009b36:	4641      	mov	r1, r8
 8009b38:	4620      	mov	r0, r4
 8009b3a:	d106      	bne.n	8009b4a <_dtoa_r+0xb0a>
 8009b3c:	f000 f900 	bl	8009d40 <__multadd>
 8009b40:	4680      	mov	r8, r0
 8009b42:	4607      	mov	r7, r0
 8009b44:	f109 0901 	add.w	r9, r9, #1
 8009b48:	e772      	b.n	8009a30 <_dtoa_r+0x9f0>
 8009b4a:	f000 f8f9 	bl	8009d40 <__multadd>
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4680      	mov	r8, r0
 8009b52:	2300      	movs	r3, #0
 8009b54:	220a      	movs	r2, #10
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 f8f2 	bl	8009d40 <__multadd>
 8009b5c:	4607      	mov	r7, r0
 8009b5e:	e7f1      	b.n	8009b44 <_dtoa_r+0xb04>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	9302      	str	r3, [sp, #8]
 8009b64:	9d01      	ldr	r5, [sp, #4]
 8009b66:	ee18 0a10 	vmov	r0, s16
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	f7ff f9dc 	bl	8008f28 <quorem>
 8009b70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	f805 ab01 	strb.w	sl, [r5], #1
 8009b7a:	1aea      	subs	r2, r5, r3
 8009b7c:	9b02      	ldr	r3, [sp, #8]
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	dd09      	ble.n	8009b96 <_dtoa_r+0xb56>
 8009b82:	ee18 1a10 	vmov	r1, s16
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 f8d8 	bl	8009d40 <__multadd>
 8009b90:	ee08 0a10 	vmov	s16, r0
 8009b94:	e7e7      	b.n	8009b66 <_dtoa_r+0xb26>
 8009b96:	9b02      	ldr	r3, [sp, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfc8      	it	gt
 8009b9c:	461d      	movgt	r5, r3
 8009b9e:	9b01      	ldr	r3, [sp, #4]
 8009ba0:	bfd8      	it	le
 8009ba2:	2501      	movle	r5, #1
 8009ba4:	441d      	add	r5, r3
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	ee18 1a10 	vmov	r1, s16
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 fa75 	bl	800a0a0 <__lshift>
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	ee08 0a10 	vmov	s16, r0
 8009bbc:	f000 fae0 	bl	800a180 <__mcmp>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dc91      	bgt.n	8009ae8 <_dtoa_r+0xaa8>
 8009bc4:	d102      	bne.n	8009bcc <_dtoa_r+0xb8c>
 8009bc6:	f01a 0f01 	tst.w	sl, #1
 8009bca:	d18d      	bne.n	8009ae8 <_dtoa_r+0xaa8>
 8009bcc:	462b      	mov	r3, r5
 8009bce:	461d      	mov	r5, r3
 8009bd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bd4:	2a30      	cmp	r2, #48	; 0x30
 8009bd6:	d0fa      	beq.n	8009bce <_dtoa_r+0xb8e>
 8009bd8:	e6d7      	b.n	800998a <_dtoa_r+0x94a>
 8009bda:	9a01      	ldr	r2, [sp, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d184      	bne.n	8009aea <_dtoa_r+0xaaa>
 8009be0:	9b00      	ldr	r3, [sp, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	2331      	movs	r3, #49	; 0x31
 8009be8:	7013      	strb	r3, [r2, #0]
 8009bea:	e6ce      	b.n	800998a <_dtoa_r+0x94a>
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <_dtoa_r+0xbd4>)
 8009bee:	f7ff ba95 	b.w	800911c <_dtoa_r+0xdc>
 8009bf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f47f aa6e 	bne.w	80090d6 <_dtoa_r+0x96>
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <_dtoa_r+0xbd8>)
 8009bfc:	f7ff ba8e 	b.w	800911c <_dtoa_r+0xdc>
 8009c00:	9b02      	ldr	r3, [sp, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dcae      	bgt.n	8009b64 <_dtoa_r+0xb24>
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	f73f aea8 	bgt.w	800995e <_dtoa_r+0x91e>
 8009c0e:	e7a9      	b.n	8009b64 <_dtoa_r+0xb24>
 8009c10:	0800b7b1 	.word	0x0800b7b1
 8009c14:	0800b574 	.word	0x0800b574
 8009c18:	0800b749 	.word	0x0800b749

08009c1c <fiprintf>:
 8009c1c:	b40e      	push	{r1, r2, r3}
 8009c1e:	b503      	push	{r0, r1, lr}
 8009c20:	4601      	mov	r1, r0
 8009c22:	ab03      	add	r3, sp, #12
 8009c24:	4805      	ldr	r0, [pc, #20]	; (8009c3c <fiprintf+0x20>)
 8009c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2a:	6800      	ldr	r0, [r0, #0]
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	f000 fe25 	bl	800a87c <_vfiprintf_r>
 8009c32:	b002      	add	sp, #8
 8009c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c38:	b003      	add	sp, #12
 8009c3a:	4770      	bx	lr
 8009c3c:	2000000c 	.word	0x2000000c

08009c40 <_localeconv_r>:
 8009c40:	4800      	ldr	r0, [pc, #0]	; (8009c44 <_localeconv_r+0x4>)
 8009c42:	4770      	bx	lr
 8009c44:	20000160 	.word	0x20000160

08009c48 <malloc>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <malloc+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f000 bc1b 	b.w	800a488 <_malloc_r>
 8009c52:	bf00      	nop
 8009c54:	2000000c 	.word	0x2000000c

08009c58 <__ascii_mbtowc>:
 8009c58:	b082      	sub	sp, #8
 8009c5a:	b901      	cbnz	r1, 8009c5e <__ascii_mbtowc+0x6>
 8009c5c:	a901      	add	r1, sp, #4
 8009c5e:	b142      	cbz	r2, 8009c72 <__ascii_mbtowc+0x1a>
 8009c60:	b14b      	cbz	r3, 8009c76 <__ascii_mbtowc+0x1e>
 8009c62:	7813      	ldrb	r3, [r2, #0]
 8009c64:	600b      	str	r3, [r1, #0]
 8009c66:	7812      	ldrb	r2, [r2, #0]
 8009c68:	1e10      	subs	r0, r2, #0
 8009c6a:	bf18      	it	ne
 8009c6c:	2001      	movne	r0, #1
 8009c6e:	b002      	add	sp, #8
 8009c70:	4770      	bx	lr
 8009c72:	4610      	mov	r0, r2
 8009c74:	e7fb      	b.n	8009c6e <__ascii_mbtowc+0x16>
 8009c76:	f06f 0001 	mvn.w	r0, #1
 8009c7a:	e7f8      	b.n	8009c6e <__ascii_mbtowc+0x16>

08009c7c <_Balloc>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009c80:	4604      	mov	r4, r0
 8009c82:	460d      	mov	r5, r1
 8009c84:	b976      	cbnz	r6, 8009ca4 <_Balloc+0x28>
 8009c86:	2010      	movs	r0, #16
 8009c88:	f7ff ffde 	bl	8009c48 <malloc>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6260      	str	r0, [r4, #36]	; 0x24
 8009c90:	b920      	cbnz	r0, 8009c9c <_Balloc+0x20>
 8009c92:	4b18      	ldr	r3, [pc, #96]	; (8009cf4 <_Balloc+0x78>)
 8009c94:	4818      	ldr	r0, [pc, #96]	; (8009cf8 <_Balloc+0x7c>)
 8009c96:	2166      	movs	r1, #102	; 0x66
 8009c98:	f7ff f928 	bl	8008eec <__assert_func>
 8009c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ca0:	6006      	str	r6, [r0, #0]
 8009ca2:	60c6      	str	r6, [r0, #12]
 8009ca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009ca6:	68f3      	ldr	r3, [r6, #12]
 8009ca8:	b183      	cbz	r3, 8009ccc <_Balloc+0x50>
 8009caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cb2:	b9b8      	cbnz	r0, 8009ce4 <_Balloc+0x68>
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8009cba:	1d72      	adds	r2, r6, #5
 8009cbc:	0092      	lsls	r2, r2, #2
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fb60 	bl	800a384 <_calloc_r>
 8009cc4:	b160      	cbz	r0, 8009ce0 <_Balloc+0x64>
 8009cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cca:	e00e      	b.n	8009cea <_Balloc+0x6e>
 8009ccc:	2221      	movs	r2, #33	; 0x21
 8009cce:	2104      	movs	r1, #4
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 fb57 	bl	800a384 <_calloc_r>
 8009cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd8:	60f0      	str	r0, [r6, #12]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1e4      	bne.n	8009caa <_Balloc+0x2e>
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	6802      	ldr	r2, [r0, #0]
 8009ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cea:	2300      	movs	r3, #0
 8009cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cf0:	e7f7      	b.n	8009ce2 <_Balloc+0x66>
 8009cf2:	bf00      	nop
 8009cf4:	0800b598 	.word	0x0800b598
 8009cf8:	0800b7cc 	.word	0x0800b7cc

08009cfc <_Bfree>:
 8009cfc:	b570      	push	{r4, r5, r6, lr}
 8009cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d00:	4605      	mov	r5, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	b976      	cbnz	r6, 8009d24 <_Bfree+0x28>
 8009d06:	2010      	movs	r0, #16
 8009d08:	f7ff ff9e 	bl	8009c48 <malloc>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	6268      	str	r0, [r5, #36]	; 0x24
 8009d10:	b920      	cbnz	r0, 8009d1c <_Bfree+0x20>
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <_Bfree+0x3c>)
 8009d14:	4809      	ldr	r0, [pc, #36]	; (8009d3c <_Bfree+0x40>)
 8009d16:	218a      	movs	r1, #138	; 0x8a
 8009d18:	f7ff f8e8 	bl	8008eec <__assert_func>
 8009d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d20:	6006      	str	r6, [r0, #0]
 8009d22:	60c6      	str	r6, [r0, #12]
 8009d24:	b13c      	cbz	r4, 8009d36 <_Bfree+0x3a>
 8009d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d28:	6862      	ldr	r2, [r4, #4]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d30:	6021      	str	r1, [r4, #0]
 8009d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	0800b598 	.word	0x0800b598
 8009d3c:	0800b7cc 	.word	0x0800b7cc

08009d40 <__multadd>:
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	690d      	ldr	r5, [r1, #16]
 8009d46:	4607      	mov	r7, r0
 8009d48:	460c      	mov	r4, r1
 8009d4a:	461e      	mov	r6, r3
 8009d4c:	f101 0c14 	add.w	ip, r1, #20
 8009d50:	2000      	movs	r0, #0
 8009d52:	f8dc 3000 	ldr.w	r3, [ip]
 8009d56:	b299      	uxth	r1, r3
 8009d58:	fb02 6101 	mla	r1, r2, r1, r6
 8009d5c:	0c1e      	lsrs	r6, r3, #16
 8009d5e:	0c0b      	lsrs	r3, r1, #16
 8009d60:	fb02 3306 	mla	r3, r2, r6, r3
 8009d64:	b289      	uxth	r1, r1
 8009d66:	3001      	adds	r0, #1
 8009d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d6c:	4285      	cmp	r5, r0
 8009d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8009d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d76:	dcec      	bgt.n	8009d52 <__multadd+0x12>
 8009d78:	b30e      	cbz	r6, 8009dbe <__multadd+0x7e>
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	dc19      	bgt.n	8009db4 <__multadd+0x74>
 8009d80:	6861      	ldr	r1, [r4, #4]
 8009d82:	4638      	mov	r0, r7
 8009d84:	3101      	adds	r1, #1
 8009d86:	f7ff ff79 	bl	8009c7c <_Balloc>
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	b928      	cbnz	r0, 8009d9a <__multadd+0x5a>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	4b0c      	ldr	r3, [pc, #48]	; (8009dc4 <__multadd+0x84>)
 8009d92:	480d      	ldr	r0, [pc, #52]	; (8009dc8 <__multadd+0x88>)
 8009d94:	21b5      	movs	r1, #181	; 0xb5
 8009d96:	f7ff f8a9 	bl	8008eec <__assert_func>
 8009d9a:	6922      	ldr	r2, [r4, #16]
 8009d9c:	3202      	adds	r2, #2
 8009d9e:	f104 010c 	add.w	r1, r4, #12
 8009da2:	0092      	lsls	r2, r2, #2
 8009da4:	300c      	adds	r0, #12
 8009da6:	f7fe faf3 	bl	8008390 <memcpy>
 8009daa:	4621      	mov	r1, r4
 8009dac:	4638      	mov	r0, r7
 8009dae:	f7ff ffa5 	bl	8009cfc <_Bfree>
 8009db2:	4644      	mov	r4, r8
 8009db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009db8:	3501      	adds	r5, #1
 8009dba:	615e      	str	r6, [r3, #20]
 8009dbc:	6125      	str	r5, [r4, #16]
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc4:	0800b7b1 	.word	0x0800b7b1
 8009dc8:	0800b7cc 	.word	0x0800b7cc

08009dcc <__hi0bits>:
 8009dcc:	0c03      	lsrs	r3, r0, #16
 8009dce:	041b      	lsls	r3, r3, #16
 8009dd0:	b9d3      	cbnz	r3, 8009e08 <__hi0bits+0x3c>
 8009dd2:	0400      	lsls	r0, r0, #16
 8009dd4:	2310      	movs	r3, #16
 8009dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009dda:	bf04      	itt	eq
 8009ddc:	0200      	lsleq	r0, r0, #8
 8009dde:	3308      	addeq	r3, #8
 8009de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009de4:	bf04      	itt	eq
 8009de6:	0100      	lsleq	r0, r0, #4
 8009de8:	3304      	addeq	r3, #4
 8009dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009dee:	bf04      	itt	eq
 8009df0:	0080      	lsleq	r0, r0, #2
 8009df2:	3302      	addeq	r3, #2
 8009df4:	2800      	cmp	r0, #0
 8009df6:	db05      	blt.n	8009e04 <__hi0bits+0x38>
 8009df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009dfc:	f103 0301 	add.w	r3, r3, #1
 8009e00:	bf08      	it	eq
 8009e02:	2320      	moveq	r3, #32
 8009e04:	4618      	mov	r0, r3
 8009e06:	4770      	bx	lr
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e7e4      	b.n	8009dd6 <__hi0bits+0xa>

08009e0c <__lo0bits>:
 8009e0c:	6803      	ldr	r3, [r0, #0]
 8009e0e:	f013 0207 	ands.w	r2, r3, #7
 8009e12:	4601      	mov	r1, r0
 8009e14:	d00b      	beq.n	8009e2e <__lo0bits+0x22>
 8009e16:	07da      	lsls	r2, r3, #31
 8009e18:	d423      	bmi.n	8009e62 <__lo0bits+0x56>
 8009e1a:	0798      	lsls	r0, r3, #30
 8009e1c:	bf49      	itett	mi
 8009e1e:	085b      	lsrmi	r3, r3, #1
 8009e20:	089b      	lsrpl	r3, r3, #2
 8009e22:	2001      	movmi	r0, #1
 8009e24:	600b      	strmi	r3, [r1, #0]
 8009e26:	bf5c      	itt	pl
 8009e28:	600b      	strpl	r3, [r1, #0]
 8009e2a:	2002      	movpl	r0, #2
 8009e2c:	4770      	bx	lr
 8009e2e:	b298      	uxth	r0, r3
 8009e30:	b9a8      	cbnz	r0, 8009e5e <__lo0bits+0x52>
 8009e32:	0c1b      	lsrs	r3, r3, #16
 8009e34:	2010      	movs	r0, #16
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	b90a      	cbnz	r2, 8009e3e <__lo0bits+0x32>
 8009e3a:	3008      	adds	r0, #8
 8009e3c:	0a1b      	lsrs	r3, r3, #8
 8009e3e:	071a      	lsls	r2, r3, #28
 8009e40:	bf04      	itt	eq
 8009e42:	091b      	lsreq	r3, r3, #4
 8009e44:	3004      	addeq	r0, #4
 8009e46:	079a      	lsls	r2, r3, #30
 8009e48:	bf04      	itt	eq
 8009e4a:	089b      	lsreq	r3, r3, #2
 8009e4c:	3002      	addeq	r0, #2
 8009e4e:	07da      	lsls	r2, r3, #31
 8009e50:	d403      	bmi.n	8009e5a <__lo0bits+0x4e>
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	f100 0001 	add.w	r0, r0, #1
 8009e58:	d005      	beq.n	8009e66 <__lo0bits+0x5a>
 8009e5a:	600b      	str	r3, [r1, #0]
 8009e5c:	4770      	bx	lr
 8009e5e:	4610      	mov	r0, r2
 8009e60:	e7e9      	b.n	8009e36 <__lo0bits+0x2a>
 8009e62:	2000      	movs	r0, #0
 8009e64:	4770      	bx	lr
 8009e66:	2020      	movs	r0, #32
 8009e68:	4770      	bx	lr
	...

08009e6c <__i2b>:
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	460c      	mov	r4, r1
 8009e70:	2101      	movs	r1, #1
 8009e72:	f7ff ff03 	bl	8009c7c <_Balloc>
 8009e76:	4602      	mov	r2, r0
 8009e78:	b928      	cbnz	r0, 8009e86 <__i2b+0x1a>
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <__i2b+0x24>)
 8009e7c:	4805      	ldr	r0, [pc, #20]	; (8009e94 <__i2b+0x28>)
 8009e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e82:	f7ff f833 	bl	8008eec <__assert_func>
 8009e86:	2301      	movs	r3, #1
 8009e88:	6144      	str	r4, [r0, #20]
 8009e8a:	6103      	str	r3, [r0, #16]
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800b7b1 	.word	0x0800b7b1
 8009e94:	0800b7cc 	.word	0x0800b7cc

08009e98 <__multiply>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4691      	mov	r9, r2
 8009e9e:	690a      	ldr	r2, [r1, #16]
 8009ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	bfb8      	it	lt
 8009ea8:	460b      	movlt	r3, r1
 8009eaa:	460c      	mov	r4, r1
 8009eac:	bfbc      	itt	lt
 8009eae:	464c      	movlt	r4, r9
 8009eb0:	4699      	movlt	r9, r3
 8009eb2:	6927      	ldr	r7, [r4, #16]
 8009eb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009eb8:	68a3      	ldr	r3, [r4, #8]
 8009eba:	6861      	ldr	r1, [r4, #4]
 8009ebc:	eb07 060a 	add.w	r6, r7, sl
 8009ec0:	42b3      	cmp	r3, r6
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	bfb8      	it	lt
 8009ec6:	3101      	addlt	r1, #1
 8009ec8:	f7ff fed8 	bl	8009c7c <_Balloc>
 8009ecc:	b930      	cbnz	r0, 8009edc <__multiply+0x44>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	4b44      	ldr	r3, [pc, #272]	; (8009fe4 <__multiply+0x14c>)
 8009ed2:	4845      	ldr	r0, [pc, #276]	; (8009fe8 <__multiply+0x150>)
 8009ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8009ed8:	f7ff f808 	bl	8008eec <__assert_func>
 8009edc:	f100 0514 	add.w	r5, r0, #20
 8009ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ee4:	462b      	mov	r3, r5
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	d321      	bcc.n	8009f30 <__multiply+0x98>
 8009eec:	f104 0314 	add.w	r3, r4, #20
 8009ef0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ef4:	f109 0314 	add.w	r3, r9, #20
 8009ef8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009efc:	9202      	str	r2, [sp, #8]
 8009efe:	1b3a      	subs	r2, r7, r4
 8009f00:	3a15      	subs	r2, #21
 8009f02:	f022 0203 	bic.w	r2, r2, #3
 8009f06:	3204      	adds	r2, #4
 8009f08:	f104 0115 	add.w	r1, r4, #21
 8009f0c:	428f      	cmp	r7, r1
 8009f0e:	bf38      	it	cc
 8009f10:	2204      	movcc	r2, #4
 8009f12:	9201      	str	r2, [sp, #4]
 8009f14:	9a02      	ldr	r2, [sp, #8]
 8009f16:	9303      	str	r3, [sp, #12]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d80c      	bhi.n	8009f36 <__multiply+0x9e>
 8009f1c:	2e00      	cmp	r6, #0
 8009f1e:	dd03      	ble.n	8009f28 <__multiply+0x90>
 8009f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d05a      	beq.n	8009fde <__multiply+0x146>
 8009f28:	6106      	str	r6, [r0, #16]
 8009f2a:	b005      	add	sp, #20
 8009f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	f843 2b04 	str.w	r2, [r3], #4
 8009f34:	e7d8      	b.n	8009ee8 <__multiply+0x50>
 8009f36:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f3a:	f1ba 0f00 	cmp.w	sl, #0
 8009f3e:	d024      	beq.n	8009f8a <__multiply+0xf2>
 8009f40:	f104 0e14 	add.w	lr, r4, #20
 8009f44:	46a9      	mov	r9, r5
 8009f46:	f04f 0c00 	mov.w	ip, #0
 8009f4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8009f52:	fa1f fb82 	uxth.w	fp, r2
 8009f56:	b289      	uxth	r1, r1
 8009f58:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009f60:	f8d9 2000 	ldr.w	r2, [r9]
 8009f64:	4461      	add	r1, ip
 8009f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f72:	b289      	uxth	r1, r1
 8009f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f78:	4577      	cmp	r7, lr
 8009f7a:	f849 1b04 	str.w	r1, [r9], #4
 8009f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f82:	d8e2      	bhi.n	8009f4a <__multiply+0xb2>
 8009f84:	9a01      	ldr	r2, [sp, #4]
 8009f86:	f845 c002 	str.w	ip, [r5, r2]
 8009f8a:	9a03      	ldr	r2, [sp, #12]
 8009f8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f90:	3304      	adds	r3, #4
 8009f92:	f1b9 0f00 	cmp.w	r9, #0
 8009f96:	d020      	beq.n	8009fda <__multiply+0x142>
 8009f98:	6829      	ldr	r1, [r5, #0]
 8009f9a:	f104 0c14 	add.w	ip, r4, #20
 8009f9e:	46ae      	mov	lr, r5
 8009fa0:	f04f 0a00 	mov.w	sl, #0
 8009fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8009fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fac:	fb09 220b 	mla	r2, r9, fp, r2
 8009fb0:	4492      	add	sl, r2
 8009fb2:	b289      	uxth	r1, r1
 8009fb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8009fbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8009fc4:	0c12      	lsrs	r2, r2, #16
 8009fc6:	fb09 1102 	mla	r1, r9, r2, r1
 8009fca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009fce:	4567      	cmp	r7, ip
 8009fd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fd4:	d8e6      	bhi.n	8009fa4 <__multiply+0x10c>
 8009fd6:	9a01      	ldr	r2, [sp, #4]
 8009fd8:	50a9      	str	r1, [r5, r2]
 8009fda:	3504      	adds	r5, #4
 8009fdc:	e79a      	b.n	8009f14 <__multiply+0x7c>
 8009fde:	3e01      	subs	r6, #1
 8009fe0:	e79c      	b.n	8009f1c <__multiply+0x84>
 8009fe2:	bf00      	nop
 8009fe4:	0800b7b1 	.word	0x0800b7b1
 8009fe8:	0800b7cc 	.word	0x0800b7cc

08009fec <__pow5mult>:
 8009fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff0:	4615      	mov	r5, r2
 8009ff2:	f012 0203 	ands.w	r2, r2, #3
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	460f      	mov	r7, r1
 8009ffa:	d007      	beq.n	800a00c <__pow5mult+0x20>
 8009ffc:	4c25      	ldr	r4, [pc, #148]	; (800a094 <__pow5mult+0xa8>)
 8009ffe:	3a01      	subs	r2, #1
 800a000:	2300      	movs	r3, #0
 800a002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a006:	f7ff fe9b 	bl	8009d40 <__multadd>
 800a00a:	4607      	mov	r7, r0
 800a00c:	10ad      	asrs	r5, r5, #2
 800a00e:	d03d      	beq.n	800a08c <__pow5mult+0xa0>
 800a010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a012:	b97c      	cbnz	r4, 800a034 <__pow5mult+0x48>
 800a014:	2010      	movs	r0, #16
 800a016:	f7ff fe17 	bl	8009c48 <malloc>
 800a01a:	4602      	mov	r2, r0
 800a01c:	6270      	str	r0, [r6, #36]	; 0x24
 800a01e:	b928      	cbnz	r0, 800a02c <__pow5mult+0x40>
 800a020:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <__pow5mult+0xac>)
 800a022:	481e      	ldr	r0, [pc, #120]	; (800a09c <__pow5mult+0xb0>)
 800a024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a028:	f7fe ff60 	bl	8008eec <__assert_func>
 800a02c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a030:	6004      	str	r4, [r0, #0]
 800a032:	60c4      	str	r4, [r0, #12]
 800a034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a03c:	b94c      	cbnz	r4, 800a052 <__pow5mult+0x66>
 800a03e:	f240 2171 	movw	r1, #625	; 0x271
 800a042:	4630      	mov	r0, r6
 800a044:	f7ff ff12 	bl	8009e6c <__i2b>
 800a048:	2300      	movs	r3, #0
 800a04a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a04e:	4604      	mov	r4, r0
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	f04f 0900 	mov.w	r9, #0
 800a056:	07eb      	lsls	r3, r5, #31
 800a058:	d50a      	bpl.n	800a070 <__pow5mult+0x84>
 800a05a:	4639      	mov	r1, r7
 800a05c:	4622      	mov	r2, r4
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff1a 	bl	8009e98 <__multiply>
 800a064:	4639      	mov	r1, r7
 800a066:	4680      	mov	r8, r0
 800a068:	4630      	mov	r0, r6
 800a06a:	f7ff fe47 	bl	8009cfc <_Bfree>
 800a06e:	4647      	mov	r7, r8
 800a070:	106d      	asrs	r5, r5, #1
 800a072:	d00b      	beq.n	800a08c <__pow5mult+0xa0>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	b938      	cbnz	r0, 800a088 <__pow5mult+0x9c>
 800a078:	4622      	mov	r2, r4
 800a07a:	4621      	mov	r1, r4
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ff0b 	bl	8009e98 <__multiply>
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	f8c0 9000 	str.w	r9, [r0]
 800a088:	4604      	mov	r4, r0
 800a08a:	e7e4      	b.n	800a056 <__pow5mult+0x6a>
 800a08c:	4638      	mov	r0, r7
 800a08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a092:	bf00      	nop
 800a094:	0800b918 	.word	0x0800b918
 800a098:	0800b598 	.word	0x0800b598
 800a09c:	0800b7cc 	.word	0x0800b7cc

0800a0a0 <__lshift>:
 800a0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	6849      	ldr	r1, [r1, #4]
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	4691      	mov	r9, r2
 800a0b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0b8:	f108 0601 	add.w	r6, r8, #1
 800a0bc:	42b3      	cmp	r3, r6
 800a0be:	db0b      	blt.n	800a0d8 <__lshift+0x38>
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff fddb 	bl	8009c7c <_Balloc>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	b948      	cbnz	r0, 800a0de <__lshift+0x3e>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	4b2a      	ldr	r3, [pc, #168]	; (800a178 <__lshift+0xd8>)
 800a0ce:	482b      	ldr	r0, [pc, #172]	; (800a17c <__lshift+0xdc>)
 800a0d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a0d4:	f7fe ff0a 	bl	8008eec <__assert_func>
 800a0d8:	3101      	adds	r1, #1
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	e7ee      	b.n	800a0bc <__lshift+0x1c>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f100 0114 	add.w	r1, r0, #20
 800a0e4:	f100 0210 	add.w	r2, r0, #16
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	4553      	cmp	r3, sl
 800a0ec:	db37      	blt.n	800a15e <__lshift+0xbe>
 800a0ee:	6920      	ldr	r0, [r4, #16]
 800a0f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0f4:	f104 0314 	add.w	r3, r4, #20
 800a0f8:	f019 091f 	ands.w	r9, r9, #31
 800a0fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a104:	d02f      	beq.n	800a166 <__lshift+0xc6>
 800a106:	f1c9 0e20 	rsb	lr, r9, #32
 800a10a:	468a      	mov	sl, r1
 800a10c:	f04f 0c00 	mov.w	ip, #0
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	fa02 f209 	lsl.w	r2, r2, r9
 800a116:	ea42 020c 	orr.w	r2, r2, ip
 800a11a:	f84a 2b04 	str.w	r2, [sl], #4
 800a11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a122:	4298      	cmp	r0, r3
 800a124:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a128:	d8f2      	bhi.n	800a110 <__lshift+0x70>
 800a12a:	1b03      	subs	r3, r0, r4
 800a12c:	3b15      	subs	r3, #21
 800a12e:	f023 0303 	bic.w	r3, r3, #3
 800a132:	3304      	adds	r3, #4
 800a134:	f104 0215 	add.w	r2, r4, #21
 800a138:	4290      	cmp	r0, r2
 800a13a:	bf38      	it	cc
 800a13c:	2304      	movcc	r3, #4
 800a13e:	f841 c003 	str.w	ip, [r1, r3]
 800a142:	f1bc 0f00 	cmp.w	ip, #0
 800a146:	d001      	beq.n	800a14c <__lshift+0xac>
 800a148:	f108 0602 	add.w	r6, r8, #2
 800a14c:	3e01      	subs	r6, #1
 800a14e:	4638      	mov	r0, r7
 800a150:	612e      	str	r6, [r5, #16]
 800a152:	4621      	mov	r1, r4
 800a154:	f7ff fdd2 	bl	8009cfc <_Bfree>
 800a158:	4628      	mov	r0, r5
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a162:	3301      	adds	r3, #1
 800a164:	e7c1      	b.n	800a0ea <__lshift+0x4a>
 800a166:	3904      	subs	r1, #4
 800a168:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a170:	4298      	cmp	r0, r3
 800a172:	d8f9      	bhi.n	800a168 <__lshift+0xc8>
 800a174:	e7ea      	b.n	800a14c <__lshift+0xac>
 800a176:	bf00      	nop
 800a178:	0800b7b1 	.word	0x0800b7b1
 800a17c:	0800b7cc 	.word	0x0800b7cc

0800a180 <__mcmp>:
 800a180:	b530      	push	{r4, r5, lr}
 800a182:	6902      	ldr	r2, [r0, #16]
 800a184:	690c      	ldr	r4, [r1, #16]
 800a186:	1b12      	subs	r2, r2, r4
 800a188:	d10e      	bne.n	800a1a8 <__mcmp+0x28>
 800a18a:	f100 0314 	add.w	r3, r0, #20
 800a18e:	3114      	adds	r1, #20
 800a190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a19c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a1a0:	42a5      	cmp	r5, r4
 800a1a2:	d003      	beq.n	800a1ac <__mcmp+0x2c>
 800a1a4:	d305      	bcc.n	800a1b2 <__mcmp+0x32>
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	bd30      	pop	{r4, r5, pc}
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	d3f3      	bcc.n	800a198 <__mcmp+0x18>
 800a1b0:	e7fa      	b.n	800a1a8 <__mcmp+0x28>
 800a1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b6:	e7f7      	b.n	800a1a8 <__mcmp+0x28>

0800a1b8 <__mdiff>:
 800a1b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	460c      	mov	r4, r1
 800a1be:	4606      	mov	r6, r0
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	4690      	mov	r8, r2
 800a1c6:	f7ff ffdb 	bl	800a180 <__mcmp>
 800a1ca:	1e05      	subs	r5, r0, #0
 800a1cc:	d110      	bne.n	800a1f0 <__mdiff+0x38>
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f7ff fd53 	bl	8009c7c <_Balloc>
 800a1d6:	b930      	cbnz	r0, 800a1e6 <__mdiff+0x2e>
 800a1d8:	4b3a      	ldr	r3, [pc, #232]	; (800a2c4 <__mdiff+0x10c>)
 800a1da:	4602      	mov	r2, r0
 800a1dc:	f240 2132 	movw	r1, #562	; 0x232
 800a1e0:	4839      	ldr	r0, [pc, #228]	; (800a2c8 <__mdiff+0x110>)
 800a1e2:	f7fe fe83 	bl	8008eec <__assert_func>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a1ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f0:	bfa4      	itt	ge
 800a1f2:	4643      	movge	r3, r8
 800a1f4:	46a0      	movge	r8, r4
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a1fc:	bfa6      	itte	ge
 800a1fe:	461c      	movge	r4, r3
 800a200:	2500      	movge	r5, #0
 800a202:	2501      	movlt	r5, #1
 800a204:	f7ff fd3a 	bl	8009c7c <_Balloc>
 800a208:	b920      	cbnz	r0, 800a214 <__mdiff+0x5c>
 800a20a:	4b2e      	ldr	r3, [pc, #184]	; (800a2c4 <__mdiff+0x10c>)
 800a20c:	4602      	mov	r2, r0
 800a20e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a212:	e7e5      	b.n	800a1e0 <__mdiff+0x28>
 800a214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a218:	6926      	ldr	r6, [r4, #16]
 800a21a:	60c5      	str	r5, [r0, #12]
 800a21c:	f104 0914 	add.w	r9, r4, #20
 800a220:	f108 0514 	add.w	r5, r8, #20
 800a224:	f100 0e14 	add.w	lr, r0, #20
 800a228:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a22c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a230:	f108 0210 	add.w	r2, r8, #16
 800a234:	46f2      	mov	sl, lr
 800a236:	2100      	movs	r1, #0
 800a238:	f859 3b04 	ldr.w	r3, [r9], #4
 800a23c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a240:	fa1f f883 	uxth.w	r8, r3
 800a244:	fa11 f18b 	uxtah	r1, r1, fp
 800a248:	0c1b      	lsrs	r3, r3, #16
 800a24a:	eba1 0808 	sub.w	r8, r1, r8
 800a24e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a256:	fa1f f888 	uxth.w	r8, r8
 800a25a:	1419      	asrs	r1, r3, #16
 800a25c:	454e      	cmp	r6, r9
 800a25e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a262:	f84a 3b04 	str.w	r3, [sl], #4
 800a266:	d8e7      	bhi.n	800a238 <__mdiff+0x80>
 800a268:	1b33      	subs	r3, r6, r4
 800a26a:	3b15      	subs	r3, #21
 800a26c:	f023 0303 	bic.w	r3, r3, #3
 800a270:	3304      	adds	r3, #4
 800a272:	3415      	adds	r4, #21
 800a274:	42a6      	cmp	r6, r4
 800a276:	bf38      	it	cc
 800a278:	2304      	movcc	r3, #4
 800a27a:	441d      	add	r5, r3
 800a27c:	4473      	add	r3, lr
 800a27e:	469e      	mov	lr, r3
 800a280:	462e      	mov	r6, r5
 800a282:	4566      	cmp	r6, ip
 800a284:	d30e      	bcc.n	800a2a4 <__mdiff+0xec>
 800a286:	f10c 0203 	add.w	r2, ip, #3
 800a28a:	1b52      	subs	r2, r2, r5
 800a28c:	f022 0203 	bic.w	r2, r2, #3
 800a290:	3d03      	subs	r5, #3
 800a292:	45ac      	cmp	ip, r5
 800a294:	bf38      	it	cc
 800a296:	2200      	movcc	r2, #0
 800a298:	441a      	add	r2, r3
 800a29a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a29e:	b17b      	cbz	r3, 800a2c0 <__mdiff+0x108>
 800a2a0:	6107      	str	r7, [r0, #16]
 800a2a2:	e7a3      	b.n	800a1ec <__mdiff+0x34>
 800a2a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a2a8:	fa11 f288 	uxtah	r2, r1, r8
 800a2ac:	1414      	asrs	r4, r2, #16
 800a2ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2b2:	b292      	uxth	r2, r2
 800a2b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a2b8:	f84e 2b04 	str.w	r2, [lr], #4
 800a2bc:	1421      	asrs	r1, r4, #16
 800a2be:	e7e0      	b.n	800a282 <__mdiff+0xca>
 800a2c0:	3f01      	subs	r7, #1
 800a2c2:	e7ea      	b.n	800a29a <__mdiff+0xe2>
 800a2c4:	0800b7b1 	.word	0x0800b7b1
 800a2c8:	0800b7cc 	.word	0x0800b7cc

0800a2cc <__d2b>:
 800a2cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	ec57 6b10 	vmov	r6, r7, d0
 800a2d8:	4690      	mov	r8, r2
 800a2da:	f7ff fccf 	bl	8009c7c <_Balloc>
 800a2de:	4604      	mov	r4, r0
 800a2e0:	b930      	cbnz	r0, 800a2f0 <__d2b+0x24>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	4b25      	ldr	r3, [pc, #148]	; (800a37c <__d2b+0xb0>)
 800a2e6:	4826      	ldr	r0, [pc, #152]	; (800a380 <__d2b+0xb4>)
 800a2e8:	f240 310a 	movw	r1, #778	; 0x30a
 800a2ec:	f7fe fdfe 	bl	8008eec <__assert_func>
 800a2f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a2f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2f8:	bb35      	cbnz	r5, 800a348 <__d2b+0x7c>
 800a2fa:	2e00      	cmp	r6, #0
 800a2fc:	9301      	str	r3, [sp, #4]
 800a2fe:	d028      	beq.n	800a352 <__d2b+0x86>
 800a300:	4668      	mov	r0, sp
 800a302:	9600      	str	r6, [sp, #0]
 800a304:	f7ff fd82 	bl	8009e0c <__lo0bits>
 800a308:	9900      	ldr	r1, [sp, #0]
 800a30a:	b300      	cbz	r0, 800a34e <__d2b+0x82>
 800a30c:	9a01      	ldr	r2, [sp, #4]
 800a30e:	f1c0 0320 	rsb	r3, r0, #32
 800a312:	fa02 f303 	lsl.w	r3, r2, r3
 800a316:	430b      	orrs	r3, r1
 800a318:	40c2      	lsrs	r2, r0
 800a31a:	6163      	str	r3, [r4, #20]
 800a31c:	9201      	str	r2, [sp, #4]
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	61a3      	str	r3, [r4, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	bf14      	ite	ne
 800a326:	2202      	movne	r2, #2
 800a328:	2201      	moveq	r2, #1
 800a32a:	6122      	str	r2, [r4, #16]
 800a32c:	b1d5      	cbz	r5, 800a364 <__d2b+0x98>
 800a32e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a332:	4405      	add	r5, r0
 800a334:	f8c9 5000 	str.w	r5, [r9]
 800a338:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a33c:	f8c8 0000 	str.w	r0, [r8]
 800a340:	4620      	mov	r0, r4
 800a342:	b003      	add	sp, #12
 800a344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a348:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a34c:	e7d5      	b.n	800a2fa <__d2b+0x2e>
 800a34e:	6161      	str	r1, [r4, #20]
 800a350:	e7e5      	b.n	800a31e <__d2b+0x52>
 800a352:	a801      	add	r0, sp, #4
 800a354:	f7ff fd5a 	bl	8009e0c <__lo0bits>
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	6163      	str	r3, [r4, #20]
 800a35c:	2201      	movs	r2, #1
 800a35e:	6122      	str	r2, [r4, #16]
 800a360:	3020      	adds	r0, #32
 800a362:	e7e3      	b.n	800a32c <__d2b+0x60>
 800a364:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a368:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a36c:	f8c9 0000 	str.w	r0, [r9]
 800a370:	6918      	ldr	r0, [r3, #16]
 800a372:	f7ff fd2b 	bl	8009dcc <__hi0bits>
 800a376:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a37a:	e7df      	b.n	800a33c <__d2b+0x70>
 800a37c:	0800b7b1 	.word	0x0800b7b1
 800a380:	0800b7cc 	.word	0x0800b7cc

0800a384 <_calloc_r>:
 800a384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a386:	fba1 2402 	umull	r2, r4, r1, r2
 800a38a:	b94c      	cbnz	r4, 800a3a0 <_calloc_r+0x1c>
 800a38c:	4611      	mov	r1, r2
 800a38e:	9201      	str	r2, [sp, #4]
 800a390:	f000 f87a 	bl	800a488 <_malloc_r>
 800a394:	9a01      	ldr	r2, [sp, #4]
 800a396:	4605      	mov	r5, r0
 800a398:	b930      	cbnz	r0, 800a3a8 <_calloc_r+0x24>
 800a39a:	4628      	mov	r0, r5
 800a39c:	b003      	add	sp, #12
 800a39e:	bd30      	pop	{r4, r5, pc}
 800a3a0:	220c      	movs	r2, #12
 800a3a2:	6002      	str	r2, [r0, #0]
 800a3a4:	2500      	movs	r5, #0
 800a3a6:	e7f8      	b.n	800a39a <_calloc_r+0x16>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	f7fd ffff 	bl	80083ac <memset>
 800a3ae:	e7f4      	b.n	800a39a <_calloc_r+0x16>

0800a3b0 <_free_r>:
 800a3b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3b2:	2900      	cmp	r1, #0
 800a3b4:	d044      	beq.n	800a440 <_free_r+0x90>
 800a3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ba:	9001      	str	r0, [sp, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f1a1 0404 	sub.w	r4, r1, #4
 800a3c2:	bfb8      	it	lt
 800a3c4:	18e4      	addlt	r4, r4, r3
 800a3c6:	f000 fea9 	bl	800b11c <__malloc_lock>
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	; (800a444 <_free_r+0x94>)
 800a3cc:	9801      	ldr	r0, [sp, #4]
 800a3ce:	6813      	ldr	r3, [r2, #0]
 800a3d0:	b933      	cbnz	r3, 800a3e0 <_free_r+0x30>
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	6014      	str	r4, [r2, #0]
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3dc:	f000 bea4 	b.w	800b128 <__malloc_unlock>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d908      	bls.n	800a3f6 <_free_r+0x46>
 800a3e4:	6825      	ldr	r5, [r4, #0]
 800a3e6:	1961      	adds	r1, r4, r5
 800a3e8:	428b      	cmp	r3, r1
 800a3ea:	bf01      	itttt	eq
 800a3ec:	6819      	ldreq	r1, [r3, #0]
 800a3ee:	685b      	ldreq	r3, [r3, #4]
 800a3f0:	1949      	addeq	r1, r1, r5
 800a3f2:	6021      	streq	r1, [r4, #0]
 800a3f4:	e7ed      	b.n	800a3d2 <_free_r+0x22>
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	b10b      	cbz	r3, 800a400 <_free_r+0x50>
 800a3fc:	42a3      	cmp	r3, r4
 800a3fe:	d9fa      	bls.n	800a3f6 <_free_r+0x46>
 800a400:	6811      	ldr	r1, [r2, #0]
 800a402:	1855      	adds	r5, r2, r1
 800a404:	42a5      	cmp	r5, r4
 800a406:	d10b      	bne.n	800a420 <_free_r+0x70>
 800a408:	6824      	ldr	r4, [r4, #0]
 800a40a:	4421      	add	r1, r4
 800a40c:	1854      	adds	r4, r2, r1
 800a40e:	42a3      	cmp	r3, r4
 800a410:	6011      	str	r1, [r2, #0]
 800a412:	d1e0      	bne.n	800a3d6 <_free_r+0x26>
 800a414:	681c      	ldr	r4, [r3, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	6053      	str	r3, [r2, #4]
 800a41a:	4421      	add	r1, r4
 800a41c:	6011      	str	r1, [r2, #0]
 800a41e:	e7da      	b.n	800a3d6 <_free_r+0x26>
 800a420:	d902      	bls.n	800a428 <_free_r+0x78>
 800a422:	230c      	movs	r3, #12
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	e7d6      	b.n	800a3d6 <_free_r+0x26>
 800a428:	6825      	ldr	r5, [r4, #0]
 800a42a:	1961      	adds	r1, r4, r5
 800a42c:	428b      	cmp	r3, r1
 800a42e:	bf04      	itt	eq
 800a430:	6819      	ldreq	r1, [r3, #0]
 800a432:	685b      	ldreq	r3, [r3, #4]
 800a434:	6063      	str	r3, [r4, #4]
 800a436:	bf04      	itt	eq
 800a438:	1949      	addeq	r1, r1, r5
 800a43a:	6021      	streq	r1, [r4, #0]
 800a43c:	6054      	str	r4, [r2, #4]
 800a43e:	e7ca      	b.n	800a3d6 <_free_r+0x26>
 800a440:	b003      	add	sp, #12
 800a442:	bd30      	pop	{r4, r5, pc}
 800a444:	20000780 	.word	0x20000780

0800a448 <sbrk_aligned>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4e0e      	ldr	r6, [pc, #56]	; (800a484 <sbrk_aligned+0x3c>)
 800a44c:	460c      	mov	r4, r1
 800a44e:	6831      	ldr	r1, [r6, #0]
 800a450:	4605      	mov	r5, r0
 800a452:	b911      	cbnz	r1, 800a45a <sbrk_aligned+0x12>
 800a454:	f000 fb42 	bl	800aadc <_sbrk_r>
 800a458:	6030      	str	r0, [r6, #0]
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 fb3d 	bl	800aadc <_sbrk_r>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d00a      	beq.n	800a47c <sbrk_aligned+0x34>
 800a466:	1cc4      	adds	r4, r0, #3
 800a468:	f024 0403 	bic.w	r4, r4, #3
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d007      	beq.n	800a480 <sbrk_aligned+0x38>
 800a470:	1a21      	subs	r1, r4, r0
 800a472:	4628      	mov	r0, r5
 800a474:	f000 fb32 	bl	800aadc <_sbrk_r>
 800a478:	3001      	adds	r0, #1
 800a47a:	d101      	bne.n	800a480 <sbrk_aligned+0x38>
 800a47c:	f04f 34ff 	mov.w	r4, #4294967295
 800a480:	4620      	mov	r0, r4
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	20000784 	.word	0x20000784

0800a488 <_malloc_r>:
 800a488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48c:	1ccd      	adds	r5, r1, #3
 800a48e:	f025 0503 	bic.w	r5, r5, #3
 800a492:	3508      	adds	r5, #8
 800a494:	2d0c      	cmp	r5, #12
 800a496:	bf38      	it	cc
 800a498:	250c      	movcc	r5, #12
 800a49a:	2d00      	cmp	r5, #0
 800a49c:	4607      	mov	r7, r0
 800a49e:	db01      	blt.n	800a4a4 <_malloc_r+0x1c>
 800a4a0:	42a9      	cmp	r1, r5
 800a4a2:	d905      	bls.n	800a4b0 <_malloc_r+0x28>
 800a4a4:	230c      	movs	r3, #12
 800a4a6:	603b      	str	r3, [r7, #0]
 800a4a8:	2600      	movs	r6, #0
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	4e2e      	ldr	r6, [pc, #184]	; (800a56c <_malloc_r+0xe4>)
 800a4b2:	f000 fe33 	bl	800b11c <__malloc_lock>
 800a4b6:	6833      	ldr	r3, [r6, #0]
 800a4b8:	461c      	mov	r4, r3
 800a4ba:	bb34      	cbnz	r4, 800a50a <_malloc_r+0x82>
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f7ff ffc2 	bl	800a448 <sbrk_aligned>
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	d14d      	bne.n	800a566 <_malloc_r+0xde>
 800a4ca:	6834      	ldr	r4, [r6, #0]
 800a4cc:	4626      	mov	r6, r4
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	d140      	bne.n	800a554 <_malloc_r+0xcc>
 800a4d2:	6823      	ldr	r3, [r4, #0]
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	eb04 0803 	add.w	r8, r4, r3
 800a4dc:	f000 fafe 	bl	800aadc <_sbrk_r>
 800a4e0:	4580      	cmp	r8, r0
 800a4e2:	d13a      	bne.n	800a55a <_malloc_r+0xd2>
 800a4e4:	6821      	ldr	r1, [r4, #0]
 800a4e6:	3503      	adds	r5, #3
 800a4e8:	1a6d      	subs	r5, r5, r1
 800a4ea:	f025 0503 	bic.w	r5, r5, #3
 800a4ee:	3508      	adds	r5, #8
 800a4f0:	2d0c      	cmp	r5, #12
 800a4f2:	bf38      	it	cc
 800a4f4:	250c      	movcc	r5, #12
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff ffa5 	bl	800a448 <sbrk_aligned>
 800a4fe:	3001      	adds	r0, #1
 800a500:	d02b      	beq.n	800a55a <_malloc_r+0xd2>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	442b      	add	r3, r5
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	e00e      	b.n	800a528 <_malloc_r+0xa0>
 800a50a:	6822      	ldr	r2, [r4, #0]
 800a50c:	1b52      	subs	r2, r2, r5
 800a50e:	d41e      	bmi.n	800a54e <_malloc_r+0xc6>
 800a510:	2a0b      	cmp	r2, #11
 800a512:	d916      	bls.n	800a542 <_malloc_r+0xba>
 800a514:	1961      	adds	r1, r4, r5
 800a516:	42a3      	cmp	r3, r4
 800a518:	6025      	str	r5, [r4, #0]
 800a51a:	bf18      	it	ne
 800a51c:	6059      	strne	r1, [r3, #4]
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	bf08      	it	eq
 800a522:	6031      	streq	r1, [r6, #0]
 800a524:	5162      	str	r2, [r4, r5]
 800a526:	604b      	str	r3, [r1, #4]
 800a528:	4638      	mov	r0, r7
 800a52a:	f104 060b 	add.w	r6, r4, #11
 800a52e:	f000 fdfb 	bl	800b128 <__malloc_unlock>
 800a532:	f026 0607 	bic.w	r6, r6, #7
 800a536:	1d23      	adds	r3, r4, #4
 800a538:	1af2      	subs	r2, r6, r3
 800a53a:	d0b6      	beq.n	800a4aa <_malloc_r+0x22>
 800a53c:	1b9b      	subs	r3, r3, r6
 800a53e:	50a3      	str	r3, [r4, r2]
 800a540:	e7b3      	b.n	800a4aa <_malloc_r+0x22>
 800a542:	6862      	ldr	r2, [r4, #4]
 800a544:	42a3      	cmp	r3, r4
 800a546:	bf0c      	ite	eq
 800a548:	6032      	streq	r2, [r6, #0]
 800a54a:	605a      	strne	r2, [r3, #4]
 800a54c:	e7ec      	b.n	800a528 <_malloc_r+0xa0>
 800a54e:	4623      	mov	r3, r4
 800a550:	6864      	ldr	r4, [r4, #4]
 800a552:	e7b2      	b.n	800a4ba <_malloc_r+0x32>
 800a554:	4634      	mov	r4, r6
 800a556:	6876      	ldr	r6, [r6, #4]
 800a558:	e7b9      	b.n	800a4ce <_malloc_r+0x46>
 800a55a:	230c      	movs	r3, #12
 800a55c:	603b      	str	r3, [r7, #0]
 800a55e:	4638      	mov	r0, r7
 800a560:	f000 fde2 	bl	800b128 <__malloc_unlock>
 800a564:	e7a1      	b.n	800a4aa <_malloc_r+0x22>
 800a566:	6025      	str	r5, [r4, #0]
 800a568:	e7de      	b.n	800a528 <_malloc_r+0xa0>
 800a56a:	bf00      	nop
 800a56c:	20000780 	.word	0x20000780

0800a570 <__ssputs_r>:
 800a570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a574:	688e      	ldr	r6, [r1, #8]
 800a576:	429e      	cmp	r6, r3
 800a578:	4682      	mov	sl, r0
 800a57a:	460c      	mov	r4, r1
 800a57c:	4690      	mov	r8, r2
 800a57e:	461f      	mov	r7, r3
 800a580:	d838      	bhi.n	800a5f4 <__ssputs_r+0x84>
 800a582:	898a      	ldrh	r2, [r1, #12]
 800a584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a588:	d032      	beq.n	800a5f0 <__ssputs_r+0x80>
 800a58a:	6825      	ldr	r5, [r4, #0]
 800a58c:	6909      	ldr	r1, [r1, #16]
 800a58e:	eba5 0901 	sub.w	r9, r5, r1
 800a592:	6965      	ldr	r5, [r4, #20]
 800a594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a59c:	3301      	adds	r3, #1
 800a59e:	444b      	add	r3, r9
 800a5a0:	106d      	asrs	r5, r5, #1
 800a5a2:	429d      	cmp	r5, r3
 800a5a4:	bf38      	it	cc
 800a5a6:	461d      	movcc	r5, r3
 800a5a8:	0553      	lsls	r3, r2, #21
 800a5aa:	d531      	bpl.n	800a610 <__ssputs_r+0xa0>
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	f7ff ff6b 	bl	800a488 <_malloc_r>
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	b950      	cbnz	r0, 800a5cc <__ssputs_r+0x5c>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	f8ca 3000 	str.w	r3, [sl]
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	6921      	ldr	r1, [r4, #16]
 800a5ce:	464a      	mov	r2, r9
 800a5d0:	f7fd fede 	bl	8008390 <memcpy>
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	6126      	str	r6, [r4, #16]
 800a5e2:	6165      	str	r5, [r4, #20]
 800a5e4:	444e      	add	r6, r9
 800a5e6:	eba5 0509 	sub.w	r5, r5, r9
 800a5ea:	6026      	str	r6, [r4, #0]
 800a5ec:	60a5      	str	r5, [r4, #8]
 800a5ee:	463e      	mov	r6, r7
 800a5f0:	42be      	cmp	r6, r7
 800a5f2:	d900      	bls.n	800a5f6 <__ssputs_r+0x86>
 800a5f4:	463e      	mov	r6, r7
 800a5f6:	6820      	ldr	r0, [r4, #0]
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4641      	mov	r1, r8
 800a5fc:	f000 fd74 	bl	800b0e8 <memmove>
 800a600:	68a3      	ldr	r3, [r4, #8]
 800a602:	1b9b      	subs	r3, r3, r6
 800a604:	60a3      	str	r3, [r4, #8]
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	4433      	add	r3, r6
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7db      	b.n	800a5c8 <__ssputs_r+0x58>
 800a610:	462a      	mov	r2, r5
 800a612:	f000 fd8f 	bl	800b134 <_realloc_r>
 800a616:	4606      	mov	r6, r0
 800a618:	2800      	cmp	r0, #0
 800a61a:	d1e1      	bne.n	800a5e0 <__ssputs_r+0x70>
 800a61c:	6921      	ldr	r1, [r4, #16]
 800a61e:	4650      	mov	r0, sl
 800a620:	f7ff fec6 	bl	800a3b0 <_free_r>
 800a624:	e7c7      	b.n	800a5b6 <__ssputs_r+0x46>
	...

0800a628 <_svfiprintf_r>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	4698      	mov	r8, r3
 800a62e:	898b      	ldrh	r3, [r1, #12]
 800a630:	061b      	lsls	r3, r3, #24
 800a632:	b09d      	sub	sp, #116	; 0x74
 800a634:	4607      	mov	r7, r0
 800a636:	460d      	mov	r5, r1
 800a638:	4614      	mov	r4, r2
 800a63a:	d50e      	bpl.n	800a65a <_svfiprintf_r+0x32>
 800a63c:	690b      	ldr	r3, [r1, #16]
 800a63e:	b963      	cbnz	r3, 800a65a <_svfiprintf_r+0x32>
 800a640:	2140      	movs	r1, #64	; 0x40
 800a642:	f7ff ff21 	bl	800a488 <_malloc_r>
 800a646:	6028      	str	r0, [r5, #0]
 800a648:	6128      	str	r0, [r5, #16]
 800a64a:	b920      	cbnz	r0, 800a656 <_svfiprintf_r+0x2e>
 800a64c:	230c      	movs	r3, #12
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295
 800a654:	e0d1      	b.n	800a7fa <_svfiprintf_r+0x1d2>
 800a656:	2340      	movs	r3, #64	; 0x40
 800a658:	616b      	str	r3, [r5, #20]
 800a65a:	2300      	movs	r3, #0
 800a65c:	9309      	str	r3, [sp, #36]	; 0x24
 800a65e:	2320      	movs	r3, #32
 800a660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a664:	f8cd 800c 	str.w	r8, [sp, #12]
 800a668:	2330      	movs	r3, #48	; 0x30
 800a66a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a814 <_svfiprintf_r+0x1ec>
 800a66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a672:	f04f 0901 	mov.w	r9, #1
 800a676:	4623      	mov	r3, r4
 800a678:	469a      	mov	sl, r3
 800a67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a67e:	b10a      	cbz	r2, 800a684 <_svfiprintf_r+0x5c>
 800a680:	2a25      	cmp	r2, #37	; 0x25
 800a682:	d1f9      	bne.n	800a678 <_svfiprintf_r+0x50>
 800a684:	ebba 0b04 	subs.w	fp, sl, r4
 800a688:	d00b      	beq.n	800a6a2 <_svfiprintf_r+0x7a>
 800a68a:	465b      	mov	r3, fp
 800a68c:	4622      	mov	r2, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	4638      	mov	r0, r7
 800a692:	f7ff ff6d 	bl	800a570 <__ssputs_r>
 800a696:	3001      	adds	r0, #1
 800a698:	f000 80aa 	beq.w	800a7f0 <_svfiprintf_r+0x1c8>
 800a69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a69e:	445a      	add	r2, fp
 800a6a0:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 80a2 	beq.w	800a7f0 <_svfiprintf_r+0x1c8>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6b6:	f10a 0a01 	add.w	sl, sl, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	9307      	str	r3, [sp, #28]
 800a6be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6c2:	931a      	str	r3, [sp, #104]	; 0x68
 800a6c4:	4654      	mov	r4, sl
 800a6c6:	2205      	movs	r2, #5
 800a6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6cc:	4851      	ldr	r0, [pc, #324]	; (800a814 <_svfiprintf_r+0x1ec>)
 800a6ce:	f7f5 fd87 	bl	80001e0 <memchr>
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	b9d8      	cbnz	r0, 800a70e <_svfiprintf_r+0xe6>
 800a6d6:	06d0      	lsls	r0, r2, #27
 800a6d8:	bf44      	itt	mi
 800a6da:	2320      	movmi	r3, #32
 800a6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6e0:	0711      	lsls	r1, r2, #28
 800a6e2:	bf44      	itt	mi
 800a6e4:	232b      	movmi	r3, #43	; 0x2b
 800a6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f0:	d015      	beq.n	800a71e <_svfiprintf_r+0xf6>
 800a6f2:	9a07      	ldr	r2, [sp, #28]
 800a6f4:	4654      	mov	r4, sl
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	f04f 0c0a 	mov.w	ip, #10
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a702:	3b30      	subs	r3, #48	; 0x30
 800a704:	2b09      	cmp	r3, #9
 800a706:	d94e      	bls.n	800a7a6 <_svfiprintf_r+0x17e>
 800a708:	b1b0      	cbz	r0, 800a738 <_svfiprintf_r+0x110>
 800a70a:	9207      	str	r2, [sp, #28]
 800a70c:	e014      	b.n	800a738 <_svfiprintf_r+0x110>
 800a70e:	eba0 0308 	sub.w	r3, r0, r8
 800a712:	fa09 f303 	lsl.w	r3, r9, r3
 800a716:	4313      	orrs	r3, r2
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	46a2      	mov	sl, r4
 800a71c:	e7d2      	b.n	800a6c4 <_svfiprintf_r+0x9c>
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	1d19      	adds	r1, r3, #4
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	9103      	str	r1, [sp, #12]
 800a726:	2b00      	cmp	r3, #0
 800a728:	bfbb      	ittet	lt
 800a72a:	425b      	neglt	r3, r3
 800a72c:	f042 0202 	orrlt.w	r2, r2, #2
 800a730:	9307      	strge	r3, [sp, #28]
 800a732:	9307      	strlt	r3, [sp, #28]
 800a734:	bfb8      	it	lt
 800a736:	9204      	strlt	r2, [sp, #16]
 800a738:	7823      	ldrb	r3, [r4, #0]
 800a73a:	2b2e      	cmp	r3, #46	; 0x2e
 800a73c:	d10c      	bne.n	800a758 <_svfiprintf_r+0x130>
 800a73e:	7863      	ldrb	r3, [r4, #1]
 800a740:	2b2a      	cmp	r3, #42	; 0x2a
 800a742:	d135      	bne.n	800a7b0 <_svfiprintf_r+0x188>
 800a744:	9b03      	ldr	r3, [sp, #12]
 800a746:	1d1a      	adds	r2, r3, #4
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	9203      	str	r2, [sp, #12]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	bfb8      	it	lt
 800a750:	f04f 33ff 	movlt.w	r3, #4294967295
 800a754:	3402      	adds	r4, #2
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a824 <_svfiprintf_r+0x1fc>
 800a75c:	7821      	ldrb	r1, [r4, #0]
 800a75e:	2203      	movs	r2, #3
 800a760:	4650      	mov	r0, sl
 800a762:	f7f5 fd3d 	bl	80001e0 <memchr>
 800a766:	b140      	cbz	r0, 800a77a <_svfiprintf_r+0x152>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	eba0 000a 	sub.w	r0, r0, sl
 800a76e:	fa03 f000 	lsl.w	r0, r3, r0
 800a772:	9b04      	ldr	r3, [sp, #16]
 800a774:	4303      	orrs	r3, r0
 800a776:	3401      	adds	r4, #1
 800a778:	9304      	str	r3, [sp, #16]
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4826      	ldr	r0, [pc, #152]	; (800a818 <_svfiprintf_r+0x1f0>)
 800a780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a784:	2206      	movs	r2, #6
 800a786:	f7f5 fd2b 	bl	80001e0 <memchr>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d038      	beq.n	800a800 <_svfiprintf_r+0x1d8>
 800a78e:	4b23      	ldr	r3, [pc, #140]	; (800a81c <_svfiprintf_r+0x1f4>)
 800a790:	bb1b      	cbnz	r3, 800a7da <_svfiprintf_r+0x1b2>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	3307      	adds	r3, #7
 800a796:	f023 0307 	bic.w	r3, r3, #7
 800a79a:	3308      	adds	r3, #8
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a0:	4433      	add	r3, r6
 800a7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a4:	e767      	b.n	800a676 <_svfiprintf_r+0x4e>
 800a7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	2001      	movs	r0, #1
 800a7ae:	e7a5      	b.n	800a6fc <_svfiprintf_r+0xd4>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	3401      	adds	r4, #1
 800a7b4:	9305      	str	r3, [sp, #20]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	f04f 0c0a 	mov.w	ip, #10
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c2:	3a30      	subs	r2, #48	; 0x30
 800a7c4:	2a09      	cmp	r2, #9
 800a7c6:	d903      	bls.n	800a7d0 <_svfiprintf_r+0x1a8>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0c5      	beq.n	800a758 <_svfiprintf_r+0x130>
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	e7c3      	b.n	800a758 <_svfiprintf_r+0x130>
 800a7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e7f0      	b.n	800a7bc <_svfiprintf_r+0x194>
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4b0f      	ldr	r3, [pc, #60]	; (800a820 <_svfiprintf_r+0x1f8>)
 800a7e2:	a904      	add	r1, sp, #16
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7fd fe89 	bl	80084fc <_printf_float>
 800a7ea:	1c42      	adds	r2, r0, #1
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	d1d6      	bne.n	800a79e <_svfiprintf_r+0x176>
 800a7f0:	89ab      	ldrh	r3, [r5, #12]
 800a7f2:	065b      	lsls	r3, r3, #25
 800a7f4:	f53f af2c 	bmi.w	800a650 <_svfiprintf_r+0x28>
 800a7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fa:	b01d      	add	sp, #116	; 0x74
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	462a      	mov	r2, r5
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <_svfiprintf_r+0x1f8>)
 800a808:	a904      	add	r1, sp, #16
 800a80a:	4638      	mov	r0, r7
 800a80c:	f7fe f91a 	bl	8008a44 <_printf_i>
 800a810:	e7eb      	b.n	800a7ea <_svfiprintf_r+0x1c2>
 800a812:	bf00      	nop
 800a814:	0800b924 	.word	0x0800b924
 800a818:	0800b92e 	.word	0x0800b92e
 800a81c:	080084fd 	.word	0x080084fd
 800a820:	0800a571 	.word	0x0800a571
 800a824:	0800b92a 	.word	0x0800b92a

0800a828 <__sfputc_r>:
 800a828:	6893      	ldr	r3, [r2, #8]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	b410      	push	{r4}
 800a830:	6093      	str	r3, [r2, #8]
 800a832:	da08      	bge.n	800a846 <__sfputc_r+0x1e>
 800a834:	6994      	ldr	r4, [r2, #24]
 800a836:	42a3      	cmp	r3, r4
 800a838:	db01      	blt.n	800a83e <__sfputc_r+0x16>
 800a83a:	290a      	cmp	r1, #10
 800a83c:	d103      	bne.n	800a846 <__sfputc_r+0x1e>
 800a83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a842:	f000 b95b 	b.w	800aafc <__swbuf_r>
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	1c58      	adds	r0, r3, #1
 800a84a:	6010      	str	r0, [r2, #0]
 800a84c:	7019      	strb	r1, [r3, #0]
 800a84e:	4608      	mov	r0, r1
 800a850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <__sfputs_r>:
 800a856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	4614      	mov	r4, r2
 800a85e:	18d5      	adds	r5, r2, r3
 800a860:	42ac      	cmp	r4, r5
 800a862:	d101      	bne.n	800a868 <__sfputs_r+0x12>
 800a864:	2000      	movs	r0, #0
 800a866:	e007      	b.n	800a878 <__sfputs_r+0x22>
 800a868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86c:	463a      	mov	r2, r7
 800a86e:	4630      	mov	r0, r6
 800a870:	f7ff ffda 	bl	800a828 <__sfputc_r>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d1f3      	bne.n	800a860 <__sfputs_r+0xa>
 800a878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a87c <_vfiprintf_r>:
 800a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a880:	460d      	mov	r5, r1
 800a882:	b09d      	sub	sp, #116	; 0x74
 800a884:	4614      	mov	r4, r2
 800a886:	4698      	mov	r8, r3
 800a888:	4606      	mov	r6, r0
 800a88a:	b118      	cbz	r0, 800a894 <_vfiprintf_r+0x18>
 800a88c:	6983      	ldr	r3, [r0, #24]
 800a88e:	b90b      	cbnz	r3, 800a894 <_vfiprintf_r+0x18>
 800a890:	f000 fb24 	bl	800aedc <__sinit>
 800a894:	4b89      	ldr	r3, [pc, #548]	; (800aabc <_vfiprintf_r+0x240>)
 800a896:	429d      	cmp	r5, r3
 800a898:	d11b      	bne.n	800a8d2 <_vfiprintf_r+0x56>
 800a89a:	6875      	ldr	r5, [r6, #4]
 800a89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_vfiprintf_r+0x32>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	059a      	lsls	r2, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_vfiprintf_r+0x32>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8aa:	f000 fbb5 	bl	800b018 <__retarget_lock_acquire_recursive>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	071b      	lsls	r3, r3, #28
 800a8b2:	d501      	bpl.n	800a8b8 <_vfiprintf_r+0x3c>
 800a8b4:	692b      	ldr	r3, [r5, #16]
 800a8b6:	b9eb      	cbnz	r3, 800a8f4 <_vfiprintf_r+0x78>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f000 f97e 	bl	800abbc <__swsetup_r>
 800a8c0:	b1c0      	cbz	r0, 800a8f4 <_vfiprintf_r+0x78>
 800a8c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c4:	07dc      	lsls	r4, r3, #31
 800a8c6:	d50e      	bpl.n	800a8e6 <_vfiprintf_r+0x6a>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	b01d      	add	sp, #116	; 0x74
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	4b7b      	ldr	r3, [pc, #492]	; (800aac0 <_vfiprintf_r+0x244>)
 800a8d4:	429d      	cmp	r5, r3
 800a8d6:	d101      	bne.n	800a8dc <_vfiprintf_r+0x60>
 800a8d8:	68b5      	ldr	r5, [r6, #8]
 800a8da:	e7df      	b.n	800a89c <_vfiprintf_r+0x20>
 800a8dc:	4b79      	ldr	r3, [pc, #484]	; (800aac4 <_vfiprintf_r+0x248>)
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	bf08      	it	eq
 800a8e2:	68f5      	ldreq	r5, [r6, #12]
 800a8e4:	e7da      	b.n	800a89c <_vfiprintf_r+0x20>
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	0598      	lsls	r0, r3, #22
 800a8ea:	d4ed      	bmi.n	800a8c8 <_vfiprintf_r+0x4c>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f000 fb94 	bl	800b01a <__retarget_lock_release_recursive>
 800a8f2:	e7e9      	b.n	800a8c8 <_vfiprintf_r+0x4c>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a902:	2330      	movs	r3, #48	; 0x30
 800a904:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aac8 <_vfiprintf_r+0x24c>
 800a908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90c:	f04f 0901 	mov.w	r9, #1
 800a910:	4623      	mov	r3, r4
 800a912:	469a      	mov	sl, r3
 800a914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a918:	b10a      	cbz	r2, 800a91e <_vfiprintf_r+0xa2>
 800a91a:	2a25      	cmp	r2, #37	; 0x25
 800a91c:	d1f9      	bne.n	800a912 <_vfiprintf_r+0x96>
 800a91e:	ebba 0b04 	subs.w	fp, sl, r4
 800a922:	d00b      	beq.n	800a93c <_vfiprintf_r+0xc0>
 800a924:	465b      	mov	r3, fp
 800a926:	4622      	mov	r2, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff ff93 	bl	800a856 <__sfputs_r>
 800a930:	3001      	adds	r0, #1
 800a932:	f000 80aa 	beq.w	800aa8a <_vfiprintf_r+0x20e>
 800a936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a938:	445a      	add	r2, fp
 800a93a:	9209      	str	r2, [sp, #36]	; 0x24
 800a93c:	f89a 3000 	ldrb.w	r3, [sl]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 80a2 	beq.w	800aa8a <_vfiprintf_r+0x20e>
 800a946:	2300      	movs	r3, #0
 800a948:	f04f 32ff 	mov.w	r2, #4294967295
 800a94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a950:	f10a 0a01 	add.w	sl, sl, #1
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95c:	931a      	str	r3, [sp, #104]	; 0x68
 800a95e:	4654      	mov	r4, sl
 800a960:	2205      	movs	r2, #5
 800a962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a966:	4858      	ldr	r0, [pc, #352]	; (800aac8 <_vfiprintf_r+0x24c>)
 800a968:	f7f5 fc3a 	bl	80001e0 <memchr>
 800a96c:	9a04      	ldr	r2, [sp, #16]
 800a96e:	b9d8      	cbnz	r0, 800a9a8 <_vfiprintf_r+0x12c>
 800a970:	06d1      	lsls	r1, r2, #27
 800a972:	bf44      	itt	mi
 800a974:	2320      	movmi	r3, #32
 800a976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97a:	0713      	lsls	r3, r2, #28
 800a97c:	bf44      	itt	mi
 800a97e:	232b      	movmi	r3, #43	; 0x2b
 800a980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a984:	f89a 3000 	ldrb.w	r3, [sl]
 800a988:	2b2a      	cmp	r3, #42	; 0x2a
 800a98a:	d015      	beq.n	800a9b8 <_vfiprintf_r+0x13c>
 800a98c:	9a07      	ldr	r2, [sp, #28]
 800a98e:	4654      	mov	r4, sl
 800a990:	2000      	movs	r0, #0
 800a992:	f04f 0c0a 	mov.w	ip, #10
 800a996:	4621      	mov	r1, r4
 800a998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99c:	3b30      	subs	r3, #48	; 0x30
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d94e      	bls.n	800aa40 <_vfiprintf_r+0x1c4>
 800a9a2:	b1b0      	cbz	r0, 800a9d2 <_vfiprintf_r+0x156>
 800a9a4:	9207      	str	r2, [sp, #28]
 800a9a6:	e014      	b.n	800a9d2 <_vfiprintf_r+0x156>
 800a9a8:	eba0 0308 	sub.w	r3, r0, r8
 800a9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	46a2      	mov	sl, r4
 800a9b6:	e7d2      	b.n	800a95e <_vfiprintf_r+0xe2>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	1d19      	adds	r1, r3, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	9103      	str	r1, [sp, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bfbb      	ittet	lt
 800a9c4:	425b      	neglt	r3, r3
 800a9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ca:	9307      	strge	r3, [sp, #28]
 800a9cc:	9307      	strlt	r3, [sp, #28]
 800a9ce:	bfb8      	it	lt
 800a9d0:	9204      	strlt	r2, [sp, #16]
 800a9d2:	7823      	ldrb	r3, [r4, #0]
 800a9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d6:	d10c      	bne.n	800a9f2 <_vfiprintf_r+0x176>
 800a9d8:	7863      	ldrb	r3, [r4, #1]
 800a9da:	2b2a      	cmp	r3, #42	; 0x2a
 800a9dc:	d135      	bne.n	800aa4a <_vfiprintf_r+0x1ce>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d1a      	adds	r2, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9203      	str	r2, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ee:	3402      	adds	r4, #2
 800a9f0:	9305      	str	r3, [sp, #20]
 800a9f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aad8 <_vfiprintf_r+0x25c>
 800a9f6:	7821      	ldrb	r1, [r4, #0]
 800a9f8:	2203      	movs	r2, #3
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f7f5 fbf0 	bl	80001e0 <memchr>
 800aa00:	b140      	cbz	r0, 800aa14 <_vfiprintf_r+0x198>
 800aa02:	2340      	movs	r3, #64	; 0x40
 800aa04:	eba0 000a 	sub.w	r0, r0, sl
 800aa08:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	3401      	adds	r4, #1
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa18:	482c      	ldr	r0, [pc, #176]	; (800aacc <_vfiprintf_r+0x250>)
 800aa1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1e:	2206      	movs	r2, #6
 800aa20:	f7f5 fbde 	bl	80001e0 <memchr>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d03f      	beq.n	800aaa8 <_vfiprintf_r+0x22c>
 800aa28:	4b29      	ldr	r3, [pc, #164]	; (800aad0 <_vfiprintf_r+0x254>)
 800aa2a:	bb1b      	cbnz	r3, 800aa74 <_vfiprintf_r+0x1f8>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	3307      	adds	r3, #7
 800aa30:	f023 0307 	bic.w	r3, r3, #7
 800aa34:	3308      	adds	r3, #8
 800aa36:	9303      	str	r3, [sp, #12]
 800aa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa3a:	443b      	add	r3, r7
 800aa3c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3e:	e767      	b.n	800a910 <_vfiprintf_r+0x94>
 800aa40:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa44:	460c      	mov	r4, r1
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7a5      	b.n	800a996 <_vfiprintf_r+0x11a>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	3401      	adds	r4, #1
 800aa4e:	9305      	str	r3, [sp, #20]
 800aa50:	4619      	mov	r1, r3
 800aa52:	f04f 0c0a 	mov.w	ip, #10
 800aa56:	4620      	mov	r0, r4
 800aa58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5c:	3a30      	subs	r2, #48	; 0x30
 800aa5e:	2a09      	cmp	r2, #9
 800aa60:	d903      	bls.n	800aa6a <_vfiprintf_r+0x1ee>
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d0c5      	beq.n	800a9f2 <_vfiprintf_r+0x176>
 800aa66:	9105      	str	r1, [sp, #20]
 800aa68:	e7c3      	b.n	800a9f2 <_vfiprintf_r+0x176>
 800aa6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa6e:	4604      	mov	r4, r0
 800aa70:	2301      	movs	r3, #1
 800aa72:	e7f0      	b.n	800aa56 <_vfiprintf_r+0x1da>
 800aa74:	ab03      	add	r3, sp, #12
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4b16      	ldr	r3, [pc, #88]	; (800aad4 <_vfiprintf_r+0x258>)
 800aa7c:	a904      	add	r1, sp, #16
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f7fd fd3c 	bl	80084fc <_printf_float>
 800aa84:	4607      	mov	r7, r0
 800aa86:	1c78      	adds	r0, r7, #1
 800aa88:	d1d6      	bne.n	800aa38 <_vfiprintf_r+0x1bc>
 800aa8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa8c:	07d9      	lsls	r1, r3, #31
 800aa8e:	d405      	bmi.n	800aa9c <_vfiprintf_r+0x220>
 800aa90:	89ab      	ldrh	r3, [r5, #12]
 800aa92:	059a      	lsls	r2, r3, #22
 800aa94:	d402      	bmi.n	800aa9c <_vfiprintf_r+0x220>
 800aa96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa98:	f000 fabf 	bl	800b01a <__retarget_lock_release_recursive>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	065b      	lsls	r3, r3, #25
 800aaa0:	f53f af12 	bmi.w	800a8c8 <_vfiprintf_r+0x4c>
 800aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa6:	e711      	b.n	800a8cc <_vfiprintf_r+0x50>
 800aaa8:	ab03      	add	r3, sp, #12
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	462a      	mov	r2, r5
 800aaae:	4b09      	ldr	r3, [pc, #36]	; (800aad4 <_vfiprintf_r+0x258>)
 800aab0:	a904      	add	r1, sp, #16
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7fd ffc6 	bl	8008a44 <_printf_i>
 800aab8:	e7e4      	b.n	800aa84 <_vfiprintf_r+0x208>
 800aaba:	bf00      	nop
 800aabc:	0800b958 	.word	0x0800b958
 800aac0:	0800b978 	.word	0x0800b978
 800aac4:	0800b938 	.word	0x0800b938
 800aac8:	0800b924 	.word	0x0800b924
 800aacc:	0800b92e 	.word	0x0800b92e
 800aad0:	080084fd 	.word	0x080084fd
 800aad4:	0800a857 	.word	0x0800a857
 800aad8:	0800b92a 	.word	0x0800b92a

0800aadc <_sbrk_r>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	4d06      	ldr	r5, [pc, #24]	; (800aaf8 <_sbrk_r+0x1c>)
 800aae0:	2300      	movs	r3, #0
 800aae2:	4604      	mov	r4, r0
 800aae4:	4608      	mov	r0, r1
 800aae6:	602b      	str	r3, [r5, #0]
 800aae8:	f7f7 fcb6 	bl	8002458 <_sbrk>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d102      	bne.n	800aaf6 <_sbrk_r+0x1a>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	b103      	cbz	r3, 800aaf6 <_sbrk_r+0x1a>
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	2000078c 	.word	0x2000078c

0800aafc <__swbuf_r>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	460e      	mov	r6, r1
 800ab00:	4614      	mov	r4, r2
 800ab02:	4605      	mov	r5, r0
 800ab04:	b118      	cbz	r0, 800ab0e <__swbuf_r+0x12>
 800ab06:	6983      	ldr	r3, [r0, #24]
 800ab08:	b90b      	cbnz	r3, 800ab0e <__swbuf_r+0x12>
 800ab0a:	f000 f9e7 	bl	800aedc <__sinit>
 800ab0e:	4b21      	ldr	r3, [pc, #132]	; (800ab94 <__swbuf_r+0x98>)
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d12b      	bne.n	800ab6c <__swbuf_r+0x70>
 800ab14:	686c      	ldr	r4, [r5, #4]
 800ab16:	69a3      	ldr	r3, [r4, #24]
 800ab18:	60a3      	str	r3, [r4, #8]
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	071a      	lsls	r2, r3, #28
 800ab1e:	d52f      	bpl.n	800ab80 <__swbuf_r+0x84>
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	b36b      	cbz	r3, 800ab80 <__swbuf_r+0x84>
 800ab24:	6923      	ldr	r3, [r4, #16]
 800ab26:	6820      	ldr	r0, [r4, #0]
 800ab28:	1ac0      	subs	r0, r0, r3
 800ab2a:	6963      	ldr	r3, [r4, #20]
 800ab2c:	b2f6      	uxtb	r6, r6
 800ab2e:	4283      	cmp	r3, r0
 800ab30:	4637      	mov	r7, r6
 800ab32:	dc04      	bgt.n	800ab3e <__swbuf_r+0x42>
 800ab34:	4621      	mov	r1, r4
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 f93c 	bl	800adb4 <_fflush_r>
 800ab3c:	bb30      	cbnz	r0, 800ab8c <__swbuf_r+0x90>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	60a3      	str	r3, [r4, #8]
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	1c5a      	adds	r2, r3, #1
 800ab48:	6022      	str	r2, [r4, #0]
 800ab4a:	701e      	strb	r6, [r3, #0]
 800ab4c:	6963      	ldr	r3, [r4, #20]
 800ab4e:	3001      	adds	r0, #1
 800ab50:	4283      	cmp	r3, r0
 800ab52:	d004      	beq.n	800ab5e <__swbuf_r+0x62>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	07db      	lsls	r3, r3, #31
 800ab58:	d506      	bpl.n	800ab68 <__swbuf_r+0x6c>
 800ab5a:	2e0a      	cmp	r6, #10
 800ab5c:	d104      	bne.n	800ab68 <__swbuf_r+0x6c>
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	f000 f927 	bl	800adb4 <_fflush_r>
 800ab66:	b988      	cbnz	r0, 800ab8c <__swbuf_r+0x90>
 800ab68:	4638      	mov	r0, r7
 800ab6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	; (800ab98 <__swbuf_r+0x9c>)
 800ab6e:	429c      	cmp	r4, r3
 800ab70:	d101      	bne.n	800ab76 <__swbuf_r+0x7a>
 800ab72:	68ac      	ldr	r4, [r5, #8]
 800ab74:	e7cf      	b.n	800ab16 <__swbuf_r+0x1a>
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <__swbuf_r+0xa0>)
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	bf08      	it	eq
 800ab7c:	68ec      	ldreq	r4, [r5, #12]
 800ab7e:	e7ca      	b.n	800ab16 <__swbuf_r+0x1a>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f000 f81a 	bl	800abbc <__swsetup_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0cb      	beq.n	800ab24 <__swbuf_r+0x28>
 800ab8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab90:	e7ea      	b.n	800ab68 <__swbuf_r+0x6c>
 800ab92:	bf00      	nop
 800ab94:	0800b958 	.word	0x0800b958
 800ab98:	0800b978 	.word	0x0800b978
 800ab9c:	0800b938 	.word	0x0800b938

0800aba0 <__ascii_wctomb>:
 800aba0:	b149      	cbz	r1, 800abb6 <__ascii_wctomb+0x16>
 800aba2:	2aff      	cmp	r2, #255	; 0xff
 800aba4:	bf85      	ittet	hi
 800aba6:	238a      	movhi	r3, #138	; 0x8a
 800aba8:	6003      	strhi	r3, [r0, #0]
 800abaa:	700a      	strbls	r2, [r1, #0]
 800abac:	f04f 30ff 	movhi.w	r0, #4294967295
 800abb0:	bf98      	it	ls
 800abb2:	2001      	movls	r0, #1
 800abb4:	4770      	bx	lr
 800abb6:	4608      	mov	r0, r1
 800abb8:	4770      	bx	lr
	...

0800abbc <__swsetup_r>:
 800abbc:	4b32      	ldr	r3, [pc, #200]	; (800ac88 <__swsetup_r+0xcc>)
 800abbe:	b570      	push	{r4, r5, r6, lr}
 800abc0:	681d      	ldr	r5, [r3, #0]
 800abc2:	4606      	mov	r6, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	b125      	cbz	r5, 800abd2 <__swsetup_r+0x16>
 800abc8:	69ab      	ldr	r3, [r5, #24]
 800abca:	b913      	cbnz	r3, 800abd2 <__swsetup_r+0x16>
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 f985 	bl	800aedc <__sinit>
 800abd2:	4b2e      	ldr	r3, [pc, #184]	; (800ac8c <__swsetup_r+0xd0>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	d10f      	bne.n	800abf8 <__swsetup_r+0x3c>
 800abd8:	686c      	ldr	r4, [r5, #4]
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abe0:	0719      	lsls	r1, r3, #28
 800abe2:	d42c      	bmi.n	800ac3e <__swsetup_r+0x82>
 800abe4:	06dd      	lsls	r5, r3, #27
 800abe6:	d411      	bmi.n	800ac0c <__swsetup_r+0x50>
 800abe8:	2309      	movs	r3, #9
 800abea:	6033      	str	r3, [r6, #0]
 800abec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	f04f 30ff 	mov.w	r0, #4294967295
 800abf6:	e03e      	b.n	800ac76 <__swsetup_r+0xba>
 800abf8:	4b25      	ldr	r3, [pc, #148]	; (800ac90 <__swsetup_r+0xd4>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	d101      	bne.n	800ac02 <__swsetup_r+0x46>
 800abfe:	68ac      	ldr	r4, [r5, #8]
 800ac00:	e7eb      	b.n	800abda <__swsetup_r+0x1e>
 800ac02:	4b24      	ldr	r3, [pc, #144]	; (800ac94 <__swsetup_r+0xd8>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	bf08      	it	eq
 800ac08:	68ec      	ldreq	r4, [r5, #12]
 800ac0a:	e7e6      	b.n	800abda <__swsetup_r+0x1e>
 800ac0c:	0758      	lsls	r0, r3, #29
 800ac0e:	d512      	bpl.n	800ac36 <__swsetup_r+0x7a>
 800ac10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac12:	b141      	cbz	r1, 800ac26 <__swsetup_r+0x6a>
 800ac14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	d002      	beq.n	800ac22 <__swsetup_r+0x66>
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff fbc7 	bl	800a3b0 <_free_r>
 800ac22:	2300      	movs	r3, #0
 800ac24:	6363      	str	r3, [r4, #52]	; 0x34
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	6063      	str	r3, [r4, #4]
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	f043 0308 	orr.w	r3, r3, #8
 800ac3c:	81a3      	strh	r3, [r4, #12]
 800ac3e:	6923      	ldr	r3, [r4, #16]
 800ac40:	b94b      	cbnz	r3, 800ac56 <__swsetup_r+0x9a>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac4c:	d003      	beq.n	800ac56 <__swsetup_r+0x9a>
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 fa09 	bl	800b068 <__smakebuf_r>
 800ac56:	89a0      	ldrh	r0, [r4, #12]
 800ac58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac5c:	f010 0301 	ands.w	r3, r0, #1
 800ac60:	d00a      	beq.n	800ac78 <__swsetup_r+0xbc>
 800ac62:	2300      	movs	r3, #0
 800ac64:	60a3      	str	r3, [r4, #8]
 800ac66:	6963      	ldr	r3, [r4, #20]
 800ac68:	425b      	negs	r3, r3
 800ac6a:	61a3      	str	r3, [r4, #24]
 800ac6c:	6923      	ldr	r3, [r4, #16]
 800ac6e:	b943      	cbnz	r3, 800ac82 <__swsetup_r+0xc6>
 800ac70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac74:	d1ba      	bne.n	800abec <__swsetup_r+0x30>
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	0781      	lsls	r1, r0, #30
 800ac7a:	bf58      	it	pl
 800ac7c:	6963      	ldrpl	r3, [r4, #20]
 800ac7e:	60a3      	str	r3, [r4, #8]
 800ac80:	e7f4      	b.n	800ac6c <__swsetup_r+0xb0>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e7f7      	b.n	800ac76 <__swsetup_r+0xba>
 800ac86:	bf00      	nop
 800ac88:	2000000c 	.word	0x2000000c
 800ac8c:	0800b958 	.word	0x0800b958
 800ac90:	0800b978 	.word	0x0800b978
 800ac94:	0800b938 	.word	0x0800b938

0800ac98 <abort>:
 800ac98:	b508      	push	{r3, lr}
 800ac9a:	2006      	movs	r0, #6
 800ac9c:	f000 faa2 	bl	800b1e4 <raise>
 800aca0:	2001      	movs	r0, #1
 800aca2:	f7f7 fb61 	bl	8002368 <_exit>
	...

0800aca8 <__sflush_r>:
 800aca8:	898a      	ldrh	r2, [r1, #12]
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	4605      	mov	r5, r0
 800acb0:	0710      	lsls	r0, r2, #28
 800acb2:	460c      	mov	r4, r1
 800acb4:	d458      	bmi.n	800ad68 <__sflush_r+0xc0>
 800acb6:	684b      	ldr	r3, [r1, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dc05      	bgt.n	800acc8 <__sflush_r+0x20>
 800acbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc02      	bgt.n	800acc8 <__sflush_r+0x20>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acca:	2e00      	cmp	r6, #0
 800accc:	d0f9      	beq.n	800acc2 <__sflush_r+0x1a>
 800acce:	2300      	movs	r3, #0
 800acd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd4:	682f      	ldr	r7, [r5, #0]
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	d032      	beq.n	800ad40 <__sflush_r+0x98>
 800acda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	075a      	lsls	r2, r3, #29
 800ace0:	d505      	bpl.n	800acee <__sflush_r+0x46>
 800ace2:	6863      	ldr	r3, [r4, #4]
 800ace4:	1ac0      	subs	r0, r0, r3
 800ace6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ace8:	b10b      	cbz	r3, 800acee <__sflush_r+0x46>
 800acea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acec:	1ac0      	subs	r0, r0, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	4602      	mov	r2, r0
 800acf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b0      	blx	r6
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	d106      	bne.n	800ad0e <__sflush_r+0x66>
 800ad00:	6829      	ldr	r1, [r5, #0]
 800ad02:	291d      	cmp	r1, #29
 800ad04:	d82c      	bhi.n	800ad60 <__sflush_r+0xb8>
 800ad06:	4a2a      	ldr	r2, [pc, #168]	; (800adb0 <__sflush_r+0x108>)
 800ad08:	40ca      	lsrs	r2, r1
 800ad0a:	07d6      	lsls	r6, r2, #31
 800ad0c:	d528      	bpl.n	800ad60 <__sflush_r+0xb8>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	6062      	str	r2, [r4, #4]
 800ad12:	04d9      	lsls	r1, r3, #19
 800ad14:	6922      	ldr	r2, [r4, #16]
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	d504      	bpl.n	800ad24 <__sflush_r+0x7c>
 800ad1a:	1c42      	adds	r2, r0, #1
 800ad1c:	d101      	bne.n	800ad22 <__sflush_r+0x7a>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	b903      	cbnz	r3, 800ad24 <__sflush_r+0x7c>
 800ad22:	6560      	str	r0, [r4, #84]	; 0x54
 800ad24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad26:	602f      	str	r7, [r5, #0]
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	d0ca      	beq.n	800acc2 <__sflush_r+0x1a>
 800ad2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad30:	4299      	cmp	r1, r3
 800ad32:	d002      	beq.n	800ad3a <__sflush_r+0x92>
 800ad34:	4628      	mov	r0, r5
 800ad36:	f7ff fb3b 	bl	800a3b0 <_free_r>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad3e:	e7c1      	b.n	800acc4 <__sflush_r+0x1c>
 800ad40:	6a21      	ldr	r1, [r4, #32]
 800ad42:	2301      	movs	r3, #1
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b0      	blx	r6
 800ad48:	1c41      	adds	r1, r0, #1
 800ad4a:	d1c7      	bne.n	800acdc <__sflush_r+0x34>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0c4      	beq.n	800acdc <__sflush_r+0x34>
 800ad52:	2b1d      	cmp	r3, #29
 800ad54:	d001      	beq.n	800ad5a <__sflush_r+0xb2>
 800ad56:	2b16      	cmp	r3, #22
 800ad58:	d101      	bne.n	800ad5e <__sflush_r+0xb6>
 800ad5a:	602f      	str	r7, [r5, #0]
 800ad5c:	e7b1      	b.n	800acc2 <__sflush_r+0x1a>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	e7ad      	b.n	800acc4 <__sflush_r+0x1c>
 800ad68:	690f      	ldr	r7, [r1, #16]
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	d0a9      	beq.n	800acc2 <__sflush_r+0x1a>
 800ad6e:	0793      	lsls	r3, r2, #30
 800ad70:	680e      	ldr	r6, [r1, #0]
 800ad72:	bf08      	it	eq
 800ad74:	694b      	ldreq	r3, [r1, #20]
 800ad76:	600f      	str	r7, [r1, #0]
 800ad78:	bf18      	it	ne
 800ad7a:	2300      	movne	r3, #0
 800ad7c:	eba6 0807 	sub.w	r8, r6, r7
 800ad80:	608b      	str	r3, [r1, #8]
 800ad82:	f1b8 0f00 	cmp.w	r8, #0
 800ad86:	dd9c      	ble.n	800acc2 <__sflush_r+0x1a>
 800ad88:	6a21      	ldr	r1, [r4, #32]
 800ad8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad8c:	4643      	mov	r3, r8
 800ad8e:	463a      	mov	r2, r7
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b0      	blx	r6
 800ad94:	2800      	cmp	r0, #0
 800ad96:	dc06      	bgt.n	800ada6 <__sflush_r+0xfe>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	e78e      	b.n	800acc4 <__sflush_r+0x1c>
 800ada6:	4407      	add	r7, r0
 800ada8:	eba8 0800 	sub.w	r8, r8, r0
 800adac:	e7e9      	b.n	800ad82 <__sflush_r+0xda>
 800adae:	bf00      	nop
 800adb0:	20400001 	.word	0x20400001

0800adb4 <_fflush_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	4605      	mov	r5, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	b913      	cbnz	r3, 800adc4 <_fflush_r+0x10>
 800adbe:	2500      	movs	r5, #0
 800adc0:	4628      	mov	r0, r5
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	b118      	cbz	r0, 800adce <_fflush_r+0x1a>
 800adc6:	6983      	ldr	r3, [r0, #24]
 800adc8:	b90b      	cbnz	r3, 800adce <_fflush_r+0x1a>
 800adca:	f000 f887 	bl	800aedc <__sinit>
 800adce:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <_fflush_r+0x6c>)
 800add0:	429c      	cmp	r4, r3
 800add2:	d11b      	bne.n	800ae0c <_fflush_r+0x58>
 800add4:	686c      	ldr	r4, [r5, #4]
 800add6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0ef      	beq.n	800adbe <_fflush_r+0xa>
 800adde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade0:	07d0      	lsls	r0, r2, #31
 800ade2:	d404      	bmi.n	800adee <_fflush_r+0x3a>
 800ade4:	0599      	lsls	r1, r3, #22
 800ade6:	d402      	bmi.n	800adee <_fflush_r+0x3a>
 800ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adea:	f000 f915 	bl	800b018 <__retarget_lock_acquire_recursive>
 800adee:	4628      	mov	r0, r5
 800adf0:	4621      	mov	r1, r4
 800adf2:	f7ff ff59 	bl	800aca8 <__sflush_r>
 800adf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adf8:	07da      	lsls	r2, r3, #31
 800adfa:	4605      	mov	r5, r0
 800adfc:	d4e0      	bmi.n	800adc0 <_fflush_r+0xc>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	059b      	lsls	r3, r3, #22
 800ae02:	d4dd      	bmi.n	800adc0 <_fflush_r+0xc>
 800ae04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae06:	f000 f908 	bl	800b01a <__retarget_lock_release_recursive>
 800ae0a:	e7d9      	b.n	800adc0 <_fflush_r+0xc>
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <_fflush_r+0x70>)
 800ae0e:	429c      	cmp	r4, r3
 800ae10:	d101      	bne.n	800ae16 <_fflush_r+0x62>
 800ae12:	68ac      	ldr	r4, [r5, #8]
 800ae14:	e7df      	b.n	800add6 <_fflush_r+0x22>
 800ae16:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <_fflush_r+0x74>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	68ec      	ldreq	r4, [r5, #12]
 800ae1e:	e7da      	b.n	800add6 <_fflush_r+0x22>
 800ae20:	0800b958 	.word	0x0800b958
 800ae24:	0800b978 	.word	0x0800b978
 800ae28:	0800b938 	.word	0x0800b938

0800ae2c <std>:
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	4604      	mov	r4, r0
 800ae32:	e9c0 3300 	strd	r3, r3, [r0]
 800ae36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3a:	6083      	str	r3, [r0, #8]
 800ae3c:	8181      	strh	r1, [r0, #12]
 800ae3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae40:	81c2      	strh	r2, [r0, #14]
 800ae42:	6183      	str	r3, [r0, #24]
 800ae44:	4619      	mov	r1, r3
 800ae46:	2208      	movs	r2, #8
 800ae48:	305c      	adds	r0, #92	; 0x5c
 800ae4a:	f7fd faaf 	bl	80083ac <memset>
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <std+0x38>)
 800ae50:	6263      	str	r3, [r4, #36]	; 0x24
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <std+0x3c>)
 800ae54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x40>)
 800ae58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x44>)
 800ae5c:	6224      	str	r4, [r4, #32]
 800ae5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	0800b21d 	.word	0x0800b21d
 800ae68:	0800b23f 	.word	0x0800b23f
 800ae6c:	0800b277 	.word	0x0800b277
 800ae70:	0800b29b 	.word	0x0800b29b

0800ae74 <_cleanup_r>:
 800ae74:	4901      	ldr	r1, [pc, #4]	; (800ae7c <_cleanup_r+0x8>)
 800ae76:	f000 b8af 	b.w	800afd8 <_fwalk_reent>
 800ae7a:	bf00      	nop
 800ae7c:	0800adb5 	.word	0x0800adb5

0800ae80 <__sfmoreglue>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	2268      	movs	r2, #104	; 0x68
 800ae84:	1e4d      	subs	r5, r1, #1
 800ae86:	4355      	muls	r5, r2
 800ae88:	460e      	mov	r6, r1
 800ae8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae8e:	f7ff fafb 	bl	800a488 <_malloc_r>
 800ae92:	4604      	mov	r4, r0
 800ae94:	b140      	cbz	r0, 800aea8 <__sfmoreglue+0x28>
 800ae96:	2100      	movs	r1, #0
 800ae98:	e9c0 1600 	strd	r1, r6, [r0]
 800ae9c:	300c      	adds	r0, #12
 800ae9e:	60a0      	str	r0, [r4, #8]
 800aea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea4:	f7fd fa82 	bl	80083ac <memset>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}

0800aeac <__sfp_lock_acquire>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__sfp_lock_acquire+0x8>)
 800aeae:	f000 b8b3 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	20000789 	.word	0x20000789

0800aeb8 <__sfp_lock_release>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__sfp_lock_release+0x8>)
 800aeba:	f000 b8ae 	b.w	800b01a <__retarget_lock_release_recursive>
 800aebe:	bf00      	nop
 800aec0:	20000789 	.word	0x20000789

0800aec4 <__sinit_lock_acquire>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__sinit_lock_acquire+0x8>)
 800aec6:	f000 b8a7 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	2000078a 	.word	0x2000078a

0800aed0 <__sinit_lock_release>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sinit_lock_release+0x8>)
 800aed2:	f000 b8a2 	b.w	800b01a <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	2000078a 	.word	0x2000078a

0800aedc <__sinit>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	f7ff fff0 	bl	800aec4 <__sinit_lock_acquire>
 800aee4:	69a3      	ldr	r3, [r4, #24]
 800aee6:	b11b      	cbz	r3, 800aef0 <__sinit+0x14>
 800aee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeec:	f7ff bff0 	b.w	800aed0 <__sinit_lock_release>
 800aef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef4:	6523      	str	r3, [r4, #80]	; 0x50
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <__sinit+0x68>)
 800aef8:	4a13      	ldr	r2, [pc, #76]	; (800af48 <__sinit+0x6c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aefe:	42a3      	cmp	r3, r4
 800af00:	bf04      	itt	eq
 800af02:	2301      	moveq	r3, #1
 800af04:	61a3      	streq	r3, [r4, #24]
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f820 	bl	800af4c <__sfp>
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 f81c 	bl	800af4c <__sfp>
 800af14:	60a0      	str	r0, [r4, #8]
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f818 	bl	800af4c <__sfp>
 800af1c:	2200      	movs	r2, #0
 800af1e:	60e0      	str	r0, [r4, #12]
 800af20:	2104      	movs	r1, #4
 800af22:	6860      	ldr	r0, [r4, #4]
 800af24:	f7ff ff82 	bl	800ae2c <std>
 800af28:	68a0      	ldr	r0, [r4, #8]
 800af2a:	2201      	movs	r2, #1
 800af2c:	2109      	movs	r1, #9
 800af2e:	f7ff ff7d 	bl	800ae2c <std>
 800af32:	68e0      	ldr	r0, [r4, #12]
 800af34:	2202      	movs	r2, #2
 800af36:	2112      	movs	r1, #18
 800af38:	f7ff ff78 	bl	800ae2c <std>
 800af3c:	2301      	movs	r3, #1
 800af3e:	61a3      	str	r3, [r4, #24]
 800af40:	e7d2      	b.n	800aee8 <__sinit+0xc>
 800af42:	bf00      	nop
 800af44:	0800b560 	.word	0x0800b560
 800af48:	0800ae75 	.word	0x0800ae75

0800af4c <__sfp>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	4607      	mov	r7, r0
 800af50:	f7ff ffac 	bl	800aeac <__sfp_lock_acquire>
 800af54:	4b1e      	ldr	r3, [pc, #120]	; (800afd0 <__sfp+0x84>)
 800af56:	681e      	ldr	r6, [r3, #0]
 800af58:	69b3      	ldr	r3, [r6, #24]
 800af5a:	b913      	cbnz	r3, 800af62 <__sfp+0x16>
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff ffbd 	bl	800aedc <__sinit>
 800af62:	3648      	adds	r6, #72	; 0x48
 800af64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af68:	3b01      	subs	r3, #1
 800af6a:	d503      	bpl.n	800af74 <__sfp+0x28>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	b30b      	cbz	r3, 800afb4 <__sfp+0x68>
 800af70:	6836      	ldr	r6, [r6, #0]
 800af72:	e7f7      	b.n	800af64 <__sfp+0x18>
 800af74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af78:	b9d5      	cbnz	r5, 800afb0 <__sfp+0x64>
 800af7a:	4b16      	ldr	r3, [pc, #88]	; (800afd4 <__sfp+0x88>)
 800af7c:	60e3      	str	r3, [r4, #12]
 800af7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af82:	6665      	str	r5, [r4, #100]	; 0x64
 800af84:	f000 f847 	bl	800b016 <__retarget_lock_init_recursive>
 800af88:	f7ff ff96 	bl	800aeb8 <__sfp_lock_release>
 800af8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af94:	6025      	str	r5, [r4, #0]
 800af96:	61a5      	str	r5, [r4, #24]
 800af98:	2208      	movs	r2, #8
 800af9a:	4629      	mov	r1, r5
 800af9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa0:	f7fd fa04 	bl	80083ac <memset>
 800afa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afac:	4620      	mov	r0, r4
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb0:	3468      	adds	r4, #104	; 0x68
 800afb2:	e7d9      	b.n	800af68 <__sfp+0x1c>
 800afb4:	2104      	movs	r1, #4
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff ff62 	bl	800ae80 <__sfmoreglue>
 800afbc:	4604      	mov	r4, r0
 800afbe:	6030      	str	r0, [r6, #0]
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1d5      	bne.n	800af70 <__sfp+0x24>
 800afc4:	f7ff ff78 	bl	800aeb8 <__sfp_lock_release>
 800afc8:	230c      	movs	r3, #12
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	e7ee      	b.n	800afac <__sfp+0x60>
 800afce:	bf00      	nop
 800afd0:	0800b560 	.word	0x0800b560
 800afd4:	ffff0001 	.word	0xffff0001

0800afd8 <_fwalk_reent>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4606      	mov	r6, r0
 800afde:	4688      	mov	r8, r1
 800afe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afe4:	2700      	movs	r7, #0
 800afe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afea:	f1b9 0901 	subs.w	r9, r9, #1
 800afee:	d505      	bpl.n	800affc <_fwalk_reent+0x24>
 800aff0:	6824      	ldr	r4, [r4, #0]
 800aff2:	2c00      	cmp	r4, #0
 800aff4:	d1f7      	bne.n	800afe6 <_fwalk_reent+0xe>
 800aff6:	4638      	mov	r0, r7
 800aff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d907      	bls.n	800b012 <_fwalk_reent+0x3a>
 800b002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b006:	3301      	adds	r3, #1
 800b008:	d003      	beq.n	800b012 <_fwalk_reent+0x3a>
 800b00a:	4629      	mov	r1, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	47c0      	blx	r8
 800b010:	4307      	orrs	r7, r0
 800b012:	3568      	adds	r5, #104	; 0x68
 800b014:	e7e9      	b.n	800afea <_fwalk_reent+0x12>

0800b016 <__retarget_lock_init_recursive>:
 800b016:	4770      	bx	lr

0800b018 <__retarget_lock_acquire_recursive>:
 800b018:	4770      	bx	lr

0800b01a <__retarget_lock_release_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <__swhatbuf_r>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	460e      	mov	r6, r1
 800b020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b024:	2900      	cmp	r1, #0
 800b026:	b096      	sub	sp, #88	; 0x58
 800b028:	4614      	mov	r4, r2
 800b02a:	461d      	mov	r5, r3
 800b02c:	da08      	bge.n	800b040 <__swhatbuf_r+0x24>
 800b02e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	061a      	lsls	r2, r3, #24
 800b038:	d410      	bmi.n	800b05c <__swhatbuf_r+0x40>
 800b03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b03e:	e00e      	b.n	800b05e <__swhatbuf_r+0x42>
 800b040:	466a      	mov	r2, sp
 800b042:	f000 f951 	bl	800b2e8 <_fstat_r>
 800b046:	2800      	cmp	r0, #0
 800b048:	dbf1      	blt.n	800b02e <__swhatbuf_r+0x12>
 800b04a:	9a01      	ldr	r2, [sp, #4]
 800b04c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b054:	425a      	negs	r2, r3
 800b056:	415a      	adcs	r2, r3
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	e7ee      	b.n	800b03a <__swhatbuf_r+0x1e>
 800b05c:	2340      	movs	r3, #64	; 0x40
 800b05e:	2000      	movs	r0, #0
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	b016      	add	sp, #88	; 0x58
 800b064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b068 <__smakebuf_r>:
 800b068:	898b      	ldrh	r3, [r1, #12]
 800b06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b06c:	079d      	lsls	r5, r3, #30
 800b06e:	4606      	mov	r6, r0
 800b070:	460c      	mov	r4, r1
 800b072:	d507      	bpl.n	800b084 <__smakebuf_r+0x1c>
 800b074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	2301      	movs	r3, #1
 800b07e:	6163      	str	r3, [r4, #20]
 800b080:	b002      	add	sp, #8
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	ab01      	add	r3, sp, #4
 800b086:	466a      	mov	r2, sp
 800b088:	f7ff ffc8 	bl	800b01c <__swhatbuf_r>
 800b08c:	9900      	ldr	r1, [sp, #0]
 800b08e:	4605      	mov	r5, r0
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff f9f9 	bl	800a488 <_malloc_r>
 800b096:	b948      	cbnz	r0, 800b0ac <__smakebuf_r+0x44>
 800b098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09c:	059a      	lsls	r2, r3, #22
 800b09e:	d4ef      	bmi.n	800b080 <__smakebuf_r+0x18>
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	f043 0302 	orr.w	r3, r3, #2
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e7e3      	b.n	800b074 <__smakebuf_r+0xc>
 800b0ac:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <__smakebuf_r+0x7c>)
 800b0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	6020      	str	r0, [r4, #0]
 800b0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	9b00      	ldr	r3, [sp, #0]
 800b0bc:	6163      	str	r3, [r4, #20]
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	6120      	str	r0, [r4, #16]
 800b0c2:	b15b      	cbz	r3, 800b0dc <__smakebuf_r+0x74>
 800b0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f91f 	bl	800b30c <_isatty_r>
 800b0ce:	b128      	cbz	r0, 800b0dc <__smakebuf_r+0x74>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	f043 0301 	orr.w	r3, r3, #1
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	89a0      	ldrh	r0, [r4, #12]
 800b0de:	4305      	orrs	r5, r0
 800b0e0:	81a5      	strh	r5, [r4, #12]
 800b0e2:	e7cd      	b.n	800b080 <__smakebuf_r+0x18>
 800b0e4:	0800ae75 	.word	0x0800ae75

0800b0e8 <memmove>:
 800b0e8:	4288      	cmp	r0, r1
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	eb01 0402 	add.w	r4, r1, r2
 800b0f0:	d902      	bls.n	800b0f8 <memmove+0x10>
 800b0f2:	4284      	cmp	r4, r0
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	d807      	bhi.n	800b108 <memmove+0x20>
 800b0f8:	1e43      	subs	r3, r0, #1
 800b0fa:	42a1      	cmp	r1, r4
 800b0fc:	d008      	beq.n	800b110 <memmove+0x28>
 800b0fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b102:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b106:	e7f8      	b.n	800b0fa <memmove+0x12>
 800b108:	4402      	add	r2, r0
 800b10a:	4601      	mov	r1, r0
 800b10c:	428a      	cmp	r2, r1
 800b10e:	d100      	bne.n	800b112 <memmove+0x2a>
 800b110:	bd10      	pop	{r4, pc}
 800b112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b11a:	e7f7      	b.n	800b10c <memmove+0x24>

0800b11c <__malloc_lock>:
 800b11c:	4801      	ldr	r0, [pc, #4]	; (800b124 <__malloc_lock+0x8>)
 800b11e:	f7ff bf7b 	b.w	800b018 <__retarget_lock_acquire_recursive>
 800b122:	bf00      	nop
 800b124:	20000788 	.word	0x20000788

0800b128 <__malloc_unlock>:
 800b128:	4801      	ldr	r0, [pc, #4]	; (800b130 <__malloc_unlock+0x8>)
 800b12a:	f7ff bf76 	b.w	800b01a <__retarget_lock_release_recursive>
 800b12e:	bf00      	nop
 800b130:	20000788 	.word	0x20000788

0800b134 <_realloc_r>:
 800b134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b138:	4680      	mov	r8, r0
 800b13a:	4614      	mov	r4, r2
 800b13c:	460e      	mov	r6, r1
 800b13e:	b921      	cbnz	r1, 800b14a <_realloc_r+0x16>
 800b140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b144:	4611      	mov	r1, r2
 800b146:	f7ff b99f 	b.w	800a488 <_malloc_r>
 800b14a:	b92a      	cbnz	r2, 800b158 <_realloc_r+0x24>
 800b14c:	f7ff f930 	bl	800a3b0 <_free_r>
 800b150:	4625      	mov	r5, r4
 800b152:	4628      	mov	r0, r5
 800b154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b158:	f000 f8fa 	bl	800b350 <_malloc_usable_size_r>
 800b15c:	4284      	cmp	r4, r0
 800b15e:	4607      	mov	r7, r0
 800b160:	d802      	bhi.n	800b168 <_realloc_r+0x34>
 800b162:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b166:	d812      	bhi.n	800b18e <_realloc_r+0x5a>
 800b168:	4621      	mov	r1, r4
 800b16a:	4640      	mov	r0, r8
 800b16c:	f7ff f98c 	bl	800a488 <_malloc_r>
 800b170:	4605      	mov	r5, r0
 800b172:	2800      	cmp	r0, #0
 800b174:	d0ed      	beq.n	800b152 <_realloc_r+0x1e>
 800b176:	42bc      	cmp	r4, r7
 800b178:	4622      	mov	r2, r4
 800b17a:	4631      	mov	r1, r6
 800b17c:	bf28      	it	cs
 800b17e:	463a      	movcs	r2, r7
 800b180:	f7fd f906 	bl	8008390 <memcpy>
 800b184:	4631      	mov	r1, r6
 800b186:	4640      	mov	r0, r8
 800b188:	f7ff f912 	bl	800a3b0 <_free_r>
 800b18c:	e7e1      	b.n	800b152 <_realloc_r+0x1e>
 800b18e:	4635      	mov	r5, r6
 800b190:	e7df      	b.n	800b152 <_realloc_r+0x1e>

0800b192 <_raise_r>:
 800b192:	291f      	cmp	r1, #31
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	d904      	bls.n	800b1a6 <_raise_r+0x14>
 800b19c:	2316      	movs	r3, #22
 800b19e:	6003      	str	r3, [r0, #0]
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	bd38      	pop	{r3, r4, r5, pc}
 800b1a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1a8:	b112      	cbz	r2, 800b1b0 <_raise_r+0x1e>
 800b1aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1ae:	b94b      	cbnz	r3, 800b1c4 <_raise_r+0x32>
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	f000 f831 	bl	800b218 <_getpid_r>
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1c0:	f000 b818 	b.w	800b1f4 <_kill_r>
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d00a      	beq.n	800b1de <_raise_r+0x4c>
 800b1c8:	1c59      	adds	r1, r3, #1
 800b1ca:	d103      	bne.n	800b1d4 <_raise_r+0x42>
 800b1cc:	2316      	movs	r3, #22
 800b1ce:	6003      	str	r3, [r0, #0]
 800b1d0:	2001      	movs	r0, #1
 800b1d2:	e7e7      	b.n	800b1a4 <_raise_r+0x12>
 800b1d4:	2400      	movs	r4, #0
 800b1d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b1da:	4628      	mov	r0, r5
 800b1dc:	4798      	blx	r3
 800b1de:	2000      	movs	r0, #0
 800b1e0:	e7e0      	b.n	800b1a4 <_raise_r+0x12>
	...

0800b1e4 <raise>:
 800b1e4:	4b02      	ldr	r3, [pc, #8]	; (800b1f0 <raise+0xc>)
 800b1e6:	4601      	mov	r1, r0
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	f7ff bfd2 	b.w	800b192 <_raise_r>
 800b1ee:	bf00      	nop
 800b1f0:	2000000c 	.word	0x2000000c

0800b1f4 <_kill_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d07      	ldr	r5, [pc, #28]	; (800b214 <_kill_r+0x20>)
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	4608      	mov	r0, r1
 800b1fe:	4611      	mov	r1, r2
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	f7f7 f8a1 	bl	8002348 <_kill>
 800b206:	1c43      	adds	r3, r0, #1
 800b208:	d102      	bne.n	800b210 <_kill_r+0x1c>
 800b20a:	682b      	ldr	r3, [r5, #0]
 800b20c:	b103      	cbz	r3, 800b210 <_kill_r+0x1c>
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	bd38      	pop	{r3, r4, r5, pc}
 800b212:	bf00      	nop
 800b214:	2000078c 	.word	0x2000078c

0800b218 <_getpid_r>:
 800b218:	f7f7 b88e 	b.w	8002338 <_getpid>

0800b21c <__sread>:
 800b21c:	b510      	push	{r4, lr}
 800b21e:	460c      	mov	r4, r1
 800b220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b224:	f000 f89c 	bl	800b360 <_read_r>
 800b228:	2800      	cmp	r0, #0
 800b22a:	bfab      	itete	ge
 800b22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b22e:	89a3      	ldrhlt	r3, [r4, #12]
 800b230:	181b      	addge	r3, r3, r0
 800b232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b236:	bfac      	ite	ge
 800b238:	6563      	strge	r3, [r4, #84]	; 0x54
 800b23a:	81a3      	strhlt	r3, [r4, #12]
 800b23c:	bd10      	pop	{r4, pc}

0800b23e <__swrite>:
 800b23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b242:	461f      	mov	r7, r3
 800b244:	898b      	ldrh	r3, [r1, #12]
 800b246:	05db      	lsls	r3, r3, #23
 800b248:	4605      	mov	r5, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	4616      	mov	r6, r2
 800b24e:	d505      	bpl.n	800b25c <__swrite+0x1e>
 800b250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b254:	2302      	movs	r3, #2
 800b256:	2200      	movs	r2, #0
 800b258:	f000 f868 	bl	800b32c <_lseek_r>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	4632      	mov	r2, r6
 800b26a:	463b      	mov	r3, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b272:	f000 b817 	b.w	800b2a4 <_write_r>

0800b276 <__sseek>:
 800b276:	b510      	push	{r4, lr}
 800b278:	460c      	mov	r4, r1
 800b27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b27e:	f000 f855 	bl	800b32c <_lseek_r>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	bf15      	itete	ne
 800b288:	6560      	strne	r0, [r4, #84]	; 0x54
 800b28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b292:	81a3      	strheq	r3, [r4, #12]
 800b294:	bf18      	it	ne
 800b296:	81a3      	strhne	r3, [r4, #12]
 800b298:	bd10      	pop	{r4, pc}

0800b29a <__sclose>:
 800b29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b29e:	f000 b813 	b.w	800b2c8 <_close_r>
	...

0800b2a4 <_write_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	; (800b2c4 <_write_r+0x20>)
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f7f7 f87f 	bl	80023b6 <_write>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_write_r+0x1e>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_write_r+0x1e>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	2000078c 	.word	0x2000078c

0800b2c8 <_close_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d06      	ldr	r5, [pc, #24]	; (800b2e4 <_close_r+0x1c>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	f7f7 f88b 	bl	80023ee <_close>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_close_r+0x1a>
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_close_r+0x1a>
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	2000078c 	.word	0x2000078c

0800b2e8 <_fstat_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	4d07      	ldr	r5, [pc, #28]	; (800b308 <_fstat_r+0x20>)
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	f7f7 f886 	bl	8002406 <_fstat>
 800b2fa:	1c43      	adds	r3, r0, #1
 800b2fc:	d102      	bne.n	800b304 <_fstat_r+0x1c>
 800b2fe:	682b      	ldr	r3, [r5, #0]
 800b300:	b103      	cbz	r3, 800b304 <_fstat_r+0x1c>
 800b302:	6023      	str	r3, [r4, #0]
 800b304:	bd38      	pop	{r3, r4, r5, pc}
 800b306:	bf00      	nop
 800b308:	2000078c 	.word	0x2000078c

0800b30c <_isatty_r>:
 800b30c:	b538      	push	{r3, r4, r5, lr}
 800b30e:	4d06      	ldr	r5, [pc, #24]	; (800b328 <_isatty_r+0x1c>)
 800b310:	2300      	movs	r3, #0
 800b312:	4604      	mov	r4, r0
 800b314:	4608      	mov	r0, r1
 800b316:	602b      	str	r3, [r5, #0]
 800b318:	f7f7 f885 	bl	8002426 <_isatty>
 800b31c:	1c43      	adds	r3, r0, #1
 800b31e:	d102      	bne.n	800b326 <_isatty_r+0x1a>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	b103      	cbz	r3, 800b326 <_isatty_r+0x1a>
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	bd38      	pop	{r3, r4, r5, pc}
 800b328:	2000078c 	.word	0x2000078c

0800b32c <_lseek_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d07      	ldr	r5, [pc, #28]	; (800b34c <_lseek_r+0x20>)
 800b330:	4604      	mov	r4, r0
 800b332:	4608      	mov	r0, r1
 800b334:	4611      	mov	r1, r2
 800b336:	2200      	movs	r2, #0
 800b338:	602a      	str	r2, [r5, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	f7f7 f87e 	bl	800243c <_lseek>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_lseek_r+0x1e>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_lseek_r+0x1e>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	2000078c 	.word	0x2000078c

0800b350 <_malloc_usable_size_r>:
 800b350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b354:	1f18      	subs	r0, r3, #4
 800b356:	2b00      	cmp	r3, #0
 800b358:	bfbc      	itt	lt
 800b35a:	580b      	ldrlt	r3, [r1, r0]
 800b35c:	18c0      	addlt	r0, r0, r3
 800b35e:	4770      	bx	lr

0800b360 <_read_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d07      	ldr	r5, [pc, #28]	; (800b380 <_read_r+0x20>)
 800b364:	4604      	mov	r4, r0
 800b366:	4608      	mov	r0, r1
 800b368:	4611      	mov	r1, r2
 800b36a:	2200      	movs	r2, #0
 800b36c:	602a      	str	r2, [r5, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	f7f7 f804 	bl	800237c <_read>
 800b374:	1c43      	adds	r3, r0, #1
 800b376:	d102      	bne.n	800b37e <_read_r+0x1e>
 800b378:	682b      	ldr	r3, [r5, #0]
 800b37a:	b103      	cbz	r3, 800b37e <_read_r+0x1e>
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	2000078c 	.word	0x2000078c

0800b384 <_init>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	bf00      	nop
 800b388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38a:	bc08      	pop	{r3}
 800b38c:	469e      	mov	lr, r3
 800b38e:	4770      	bx	lr

0800b390 <_fini>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	bf00      	nop
 800b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b396:	bc08      	pop	{r3}
 800b398:	469e      	mov	lr, r3
 800b39a:	4770      	bx	lr
