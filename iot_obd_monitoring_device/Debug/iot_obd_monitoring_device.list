
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008df0  08008df0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df8  08008df8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df8  08008df8  00018df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dfc  08008dfc  00018dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  20000070  08008e70  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08008e70  00020ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad7a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5b  00000000  00000000  0003ae1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001610  00000000  00000000  0003ec78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001460  00000000  00000000  00040288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e63  00000000  00000000  000416e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d779  00000000  00000000  0006854b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4062  00000000  00000000  00085cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006614  00000000  00000000  00169d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a3c 	.word	0x08008a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008a3c 	.word	0x08008a3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Verify_Checksum>:

	HAL_Delay(60);
}

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	e009      	b.n	8000dea <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	4413      	add	r3, r2
 8000de2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3301      	adds	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	7bfa      	ldrb	r2, [r7, #15]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d101      	bne.n	8000e08 <Verify_Checksum+0x48>
	{
		return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <Verify_Checksum+0x4a>
	}
	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3714      	adds	r7, #20
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <kline_rx_callback>:

void kline_rx_callback(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 8000e1e:	4b23      	ldr	r3, [pc, #140]	; (8000eac <kline_rx_callback+0x94>)
 8000e20:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d107      	bne.n	8000e38 <kline_rx_callback+0x20>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <kline_rx_callback+0x98>)
 8000e2a:	f004 fe7a 	bl	8005b22 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <kline_rx_callback+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
//			OBD2_ShowOnDisplay(obd_comm.current_value);
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8000e36:	e035      	b.n	8000ea4 <kline_rx_callback+0x8c>
	else if (obd_comm.msg_type == 2)
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <kline_rx_callback+0x94>)
 8000e3a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d130      	bne.n	8000ea4 <kline_rx_callback+0x8c>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3305      	adds	r3, #5
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481a      	ldr	r0, [pc, #104]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e4e:	f7ff ffb7 	bl	8000dc0 <Verify_Checksum>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d025      	beq.n	8000ea4 <kline_rx_callback+0x8c>
			uint8_t j = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	e00b      	b.n	8000e7a <kline_rx_callback+0x62>
				rx_frame[j] = kline_rx_buf[i];
 8000e62:	79ba      	ldrb	r2, [r7, #6]
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4914      	ldr	r1, [pc, #80]	; (8000eb8 <kline_rx_callback+0xa0>)
 8000e68:	5c89      	ldrb	r1, [r1, r2]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
				j++;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3301      	adds	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	3301      	adds	r3, #1
 8000e78:	71bb      	strb	r3, [r7, #6]
 8000e7a:	79ba      	ldrb	r2, [r7, #6]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <kline_rx_callback+0x9c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3304      	adds	r3, #4
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dded      	ble.n	8000e62 <kline_rx_callback+0x4a>
			obd_comm.msg_type = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <kline_rx_callback+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <kline_rx_callback+0xa4>)
 8000e90:	f000 f872 	bl	8000f78 <OBD2_PID_Parse>
 8000e94:	eef0 7a40 	vmov.f32	s15, s0
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <kline_rx_callback+0x94>)
 8000e9a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			HAL_IWDG_Refresh(&hiwdg);
 8000e9e:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <kline_rx_callback+0xa8>)
 8000ea0:	f003 fc34 	bl	800470c <HAL_IWDG_Refresh>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000188 	.word	0x20000188
 8000eb0:	20000868 	.word	0x20000868
 8000eb4:	200000a3 	.word	0x200000a3
 8000eb8:	2000008c 	.word	0x2000008c
 8000ebc:	2000009c 	.word	0x2000009c
 8000ec0:	20000178 	.word	0x20000178

08000ec4 <OBD2_PID_Decode>:
extern uint32_t adc_buffer;

static void OBD2_PID_Decode(uint8_t* rx_frame);

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	int number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3303      	adds	r3, #3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	061a      	lsls	r2, r3, #24
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	041b      	lsls	r3, r3, #16
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3305      	adds	r3, #5
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	021b      	lsls	r3, r3, #8
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	3206      	adds	r2, #6
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8000ef6:	231f      	movs	r3, #31
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	e030      	b.n	8000f5e <OBD2_PID_Decode+0x9a>
	{
		int digit = number >> i;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	fa42 f303 	asr.w	r3, r2, r3
 8000f04:	60bb      	str	r3, [r7, #8]
		digit &= 1;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
		if(obd_comm.pid == 0x00)
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d108      	bne.n	8000f28 <OBD2_PID_Decode+0x64>
		{
			obd_comm.available_pids_1[j] = digit;
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	b2d9      	uxtb	r1, r3
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	4413      	add	r3, r2
 8000f20:	3303      	adds	r3, #3
 8000f22:	460a      	mov	r2, r1
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e014      	b.n	8000f52 <OBD2_PID_Decode+0x8e>
		}
		else if(obd_comm.pid == 0x20)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	d108      	bne.n	8000f42 <OBD2_PID_Decode+0x7e>
		{
			obd_comm.available_pids_2[j] = digit;
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	b2d9      	uxtb	r1, r3
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	4413      	add	r3, r2
 8000f3a:	3323      	adds	r3, #35	; 0x23
 8000f3c:	460a      	mov	r2, r1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <OBD2_PID_Decode+0x8e>
		}
		else
		{
			obd_comm.available_pids_3[j] = digit;
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	b2d9      	uxtb	r1, r3
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <OBD2_PID_Decode+0xb0>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3343      	adds	r3, #67	; 0x43
 8000f4e:	460a      	mov	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
	for(int i = 31; i >= 0; i--)
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dacb      	bge.n	8000efc <OBD2_PID_Decode+0x38>
	}
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000188 	.word	0x20000188

08000f78 <OBD2_PID_Parse>:
		}
	}
}

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	float value = 0;
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2ba6      	cmp	r3, #166	; 0xa6
 8000f8e:	f200 83b2 	bhi.w	80016f6 <OBD2_PID_Parse+0x77e>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <OBD2_PID_Parse+0x20>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001235 	.word	0x08001235
 8000f9c:	080016f7 	.word	0x080016f7
 8000fa0:	080016f7 	.word	0x080016f7
 8000fa4:	080016f7 	.word	0x080016f7
 8000fa8:	08001243 	.word	0x08001243
 8000fac:	0800124b 	.word	0x0800124b
 8000fb0:	08001261 	.word	0x08001261
 8000fb4:	08001261 	.word	0x08001261
 8000fb8:	08001261 	.word	0x08001261
 8000fbc:	08001261 	.word	0x08001261
 8000fc0:	08001267 	.word	0x08001267
 8000fc4:	08001283 	.word	0x08001283
 8000fc8:	08001297 	.word	0x08001297
 8000fcc:	080012bd 	.word	0x080012bd
 8000fd0:	080012d1 	.word	0x080012d1
 8000fd4:	080012eb 	.word	0x080012eb
 8000fd8:	08001301 	.word	0x08001301
 8000fdc:	0800132b 	.word	0x0800132b
 8000fe0:	080016f7 	.word	0x080016f7
 8000fe4:	080016f7 	.word	0x080016f7
 8000fe8:	08001333 	.word	0x08001333
 8000fec:	08001333 	.word	0x08001333
 8000ff0:	08001333 	.word	0x08001333
 8000ff4:	08001333 	.word	0x08001333
 8000ff8:	08001333 	.word	0x08001333
 8000ffc:	08001333 	.word	0x08001333
 8001000:	08001333 	.word	0x08001333
 8001004:	08001333 	.word	0x08001333
 8001008:	080016f7 	.word	0x080016f7
 800100c:	080016f7 	.word	0x080016f7
 8001010:	080016f7 	.word	0x080016f7
 8001014:	08001351 	.word	0x08001351
 8001018:	0800136f 	.word	0x0800136f
 800101c:	08001351 	.word	0x08001351
 8001020:	0800137d 	.word	0x0800137d
 8001024:	080013ad 	.word	0x080013ad
 8001028:	080013d3 	.word	0x080013d3
 800102c:	080013d3 	.word	0x080013d3
 8001030:	080013d3 	.word	0x080013d3
 8001034:	080013d3 	.word	0x080013d3
 8001038:	080013d3 	.word	0x080013d3
 800103c:	080013d3 	.word	0x080013d3
 8001040:	080013d3 	.word	0x080013d3
 8001044:	080013d3 	.word	0x080013d3
 8001048:	080013db 	.word	0x080013db
 800104c:	080013e3 	.word	0x080013e3
 8001050:	080013e9 	.word	0x080013e9
 8001054:	080013e9 	.word	0x080013e9
 8001058:	080013f1 	.word	0x080013f1
 800105c:	08001405 	.word	0x08001405
 8001060:	08001423 	.word	0x08001423
 8001064:	08001449 	.word	0x08001449
 8001068:	0800145d 	.word	0x0800145d
 800106c:	0800145d 	.word	0x0800145d
 8001070:	0800145d 	.word	0x0800145d
 8001074:	0800145d 	.word	0x0800145d
 8001078:	0800145d 	.word	0x0800145d
 800107c:	0800145d 	.word	0x0800145d
 8001080:	0800145d 	.word	0x0800145d
 8001084:	0800145d 	.word	0x0800145d
 8001088:	08001465 	.word	0x08001465
 800108c:	08001465 	.word	0x08001465
 8001090:	08001465 	.word	0x08001465
 8001094:	08001465 	.word	0x08001465
 8001098:	08001491 	.word	0x08001491
 800109c:	080016f7 	.word	0x080016f7
 80010a0:	0800149f 	.word	0x0800149f
 80010a4:	080014c9 	.word	0x080014c9
 80010a8:	080014d1 	.word	0x080014d1
 80010ac:	080014d9 	.word	0x080014d9
 80010b0:	080014e1 	.word	0x080014e1
 80010b4:	080014f7 	.word	0x080014f7
 80010b8:	080014f7 	.word	0x080014f7
 80010bc:	080014f7 	.word	0x080014f7
 80010c0:	080014f7 	.word	0x080014f7
 80010c4:	080014f7 	.word	0x080014f7
 80010c8:	080014f7 	.word	0x080014f7
 80010cc:	080014ff 	.word	0x080014ff
 80010d0:	080014ff 	.word	0x080014ff
 80010d4:	0800151d 	.word	0x0800151d
 80010d8:	080016f7 	.word	0x080016f7
 80010dc:	080016f7 	.word	0x080016f7
 80010e0:	08001531 	.word	0x08001531
 80010e4:	0800154d 	.word	0x0800154d
 80010e8:	0800157f 	.word	0x0800157f
 80010ec:	080015a3 	.word	0x080015a3
 80010f0:	080015a3 	.word	0x080015a3
 80010f4:	080015a3 	.word	0x080015a3
 80010f8:	080015a3 	.word	0x080015a3
 80010fc:	080015a9 	.word	0x080015a9
 8001100:	080015c7 	.word	0x080015c7
 8001104:	080015c7 	.word	0x080015c7
 8001108:	080015cf 	.word	0x080015cf
 800110c:	080015e5 	.word	0x080015e5
 8001110:	080015eb 	.word	0x080015eb
 8001114:	080016f7 	.word	0x080016f7
 8001118:	080016f7 	.word	0x080016f7
 800111c:	0800161d 	.word	0x0800161d
 8001120:	0800161d 	.word	0x0800161d
 8001124:	08001633 	.word	0x08001633
 8001128:	08001651 	.word	0x08001651
 800112c:	080016f7 	.word	0x080016f7
 8001130:	08001667 	.word	0x08001667
 8001134:	0800166f 	.word	0x0800166f
 8001138:	0800166f 	.word	0x0800166f
 800113c:	080016f7 	.word	0x080016f7
 8001140:	080016f7 	.word	0x080016f7
 8001144:	080016f7 	.word	0x080016f7
 8001148:	080016f7 	.word	0x080016f7
 800114c:	080016f7 	.word	0x080016f7
 8001150:	080016f7 	.word	0x080016f7
 8001154:	080016f7 	.word	0x080016f7
 8001158:	080016f7 	.word	0x080016f7
 800115c:	080016f7 	.word	0x080016f7
 8001160:	080016f7 	.word	0x080016f7
 8001164:	080016f7 	.word	0x080016f7
 8001168:	080016f7 	.word	0x080016f7
 800116c:	080016f7 	.word	0x080016f7
 8001170:	080016f7 	.word	0x080016f7
 8001174:	080016f7 	.word	0x080016f7
 8001178:	080016f7 	.word	0x080016f7
 800117c:	080016f7 	.word	0x080016f7
 8001180:	080016f7 	.word	0x080016f7
 8001184:	080016f7 	.word	0x080016f7
 8001188:	08001685 	.word	0x08001685
 800118c:	080016f7 	.word	0x080016f7
 8001190:	080016f7 	.word	0x080016f7
 8001194:	080016f7 	.word	0x080016f7
 8001198:	080016f7 	.word	0x080016f7
 800119c:	080016f7 	.word	0x080016f7
 80011a0:	080016f7 	.word	0x080016f7
 80011a4:	080016f7 	.word	0x080016f7
 80011a8:	080016f7 	.word	0x080016f7
 80011ac:	080016f7 	.word	0x080016f7
 80011b0:	080016f7 	.word	0x080016f7
 80011b4:	080016f7 	.word	0x080016f7
 80011b8:	080016f7 	.word	0x080016f7
 80011bc:	080016f7 	.word	0x080016f7
 80011c0:	080016f7 	.word	0x080016f7
 80011c4:	080016f7 	.word	0x080016f7
 80011c8:	080016f7 	.word	0x080016f7
 80011cc:	080016f7 	.word	0x080016f7
 80011d0:	080016f7 	.word	0x080016f7
 80011d4:	080016f7 	.word	0x080016f7
 80011d8:	080016f7 	.word	0x080016f7
 80011dc:	080016f7 	.word	0x080016f7
 80011e0:	080016f7 	.word	0x080016f7
 80011e4:	080016f7 	.word	0x080016f7
 80011e8:	080016f7 	.word	0x080016f7
 80011ec:	080016f7 	.word	0x080016f7
 80011f0:	080016f7 	.word	0x080016f7
 80011f4:	080016f7 	.word	0x080016f7
 80011f8:	080016f7 	.word	0x080016f7
 80011fc:	080016f7 	.word	0x080016f7
 8001200:	080016f7 	.word	0x080016f7
 8001204:	080016f7 	.word	0x080016f7
 8001208:	080016f7 	.word	0x080016f7
 800120c:	080016f7 	.word	0x080016f7
 8001210:	080016f7 	.word	0x080016f7
 8001214:	080016f7 	.word	0x080016f7
 8001218:	080016f7 	.word	0x080016f7
 800121c:	080016f7 	.word	0x080016f7
 8001220:	080016f7 	.word	0x080016f7
 8001224:	080016f7 	.word	0x080016f7
 8001228:	080016f7 	.word	0x080016f7
 800122c:	080016f7 	.word	0x080016f7
 8001230:	080016b1 	.word	0x080016b1
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fe45 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
		break;
 8001240:	e259      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
		break;
 8001248:	e255      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3303      	adds	r3, #3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	3b28      	subs	r3, #40	; 0x28
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800125e:	e24a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 8001260:	4bb7      	ldr	r3, [pc, #732]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 8001262:	60fb      	str	r3, [r7, #12]
		break;
 8001264:	e247      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3303      	adds	r3, #3
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001280:	e239      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3303      	adds	r3, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001294:	e22f      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3303      	adds	r3, #3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	021b      	lsls	r3, r3, #8
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3204      	adds	r2, #4
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da00      	bge.n	80012ac <OBD2_PID_Parse+0x334>
 80012aa:	3303      	adds	r3, #3
 80012ac:	109b      	asrs	r3, r3, #2
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ba:	e21c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3303      	adds	r3, #3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012ce:	e212      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3303      	adds	r3, #3
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	3b40      	subs	r3, #64	; 0x40
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012e8:	e205      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3303      	adds	r3, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	3b28      	subs	r3, #40	; 0x28
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80012fe:	e1fa      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3303      	adds	r3, #3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	3204      	adds	r2, #4
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	4a8c      	ldr	r2, [pc, #560]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001312:	fb82 1203 	smull	r1, r2, r2, r3
 8001316:	1152      	asrs	r2, r2, #5
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001328:	e1e5      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
		break;
 8001330:	e1e1      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3303      	adds	r3, #3
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4a82      	ldr	r2, [pc, #520]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	b2db      	uxtb	r3, r3
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800134e:	e1d2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3303      	adds	r3, #3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	3204      	adds	r2, #4
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800136c:	e1c3      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fda8 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
		break;
 800137a:	e1bc      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3303      	adds	r3, #3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	3204      	adds	r2, #4
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4313      	orrs	r3, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8c9 	bl	8000524 <__aeabi_i2d>
 8001392:	a369      	add	r3, pc, #420	; (adr r3, 8001538 <OBD2_PID_Parse+0x5c0>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	f7ff f92e 	bl	80005f8 <__aeabi_dmul>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	4610      	mov	r0, r2
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fb3a 	bl	8000a1c <__aeabi_d2f>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3303      	adds	r3, #3
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	3204      	adds	r2, #4
 80013b8:	7812      	ldrb	r2, [r2, #0]
 80013ba:	431a      	orrs	r2, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80013d0:	e191      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
		break;
 80013d8:	e18d      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
		break;
 80013e0:	e189      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <OBD2_PID_Parse+0x5c8>)
 80013e4:	60fb      	str	r3, [r7, #12]
		break;
 80013e6:	e186      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
		break;
 80013ee:	e182      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3303      	adds	r3, #3
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fe:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001402:	e178      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3303      	adds	r3, #3
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	3204      	adds	r2, #4
 8001410:	7812      	ldrb	r2, [r2, #0]
 8001412:	4313      	orrs	r3, r2
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001420:	e169      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3303      	adds	r3, #3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	3204      	adds	r2, #4
 800142e:	7812      	ldrb	r2, [r2, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <OBD2_PID_Parse+0x4c0>
 8001436:	3303      	adds	r3, #3
 8001438:	109b      	asrs	r3, r3, #2
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001442:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001446:	e156      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3303      	adds	r3, #3
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001456:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800145a:	e14c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
		break;
 8001462:	e148      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3303      	adds	r3, #3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	3204      	adds	r2, #4
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <OBD2_PID_Parse+0x5cc>)
 8001476:	fb82 1203 	smull	r1, r2, r2, r3
 800147a:	1152      	asrs	r2, r2, #5
 800147c:	17db      	asrs	r3, r3, #31
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	3b28      	subs	r3, #40	; 0x28
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800148e:	e132      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fd17 	bl	8000ec4 <OBD2_PID_Decode>
		value = 0;
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
		break;
 800149c:	e12b      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	3204      	adds	r2, #4
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <OBD2_PID_Parse+0x5d0>)
 80014b0:	fb82 1203 	smull	r1, r2, r2, r3
 80014b4:	1192      	asrs	r2, r2, #6
 80014b6:	17db      	asrs	r3, r3, #31
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014c6:	e116      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
		break;
 80014ce:	e112      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
		break;
 80014d6:	e10e      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
		break;
 80014de:	e10a      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3303      	adds	r3, #3
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	3b28      	subs	r3, #40	; 0x28
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80014f4:	e0ff      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
		break;
 80014fc:	e0fb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3303      	adds	r3, #3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	3204      	adds	r2, #4
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	4313      	orrs	r3, r2
 800150e:	ee07 3a90 	vmov	s15, r3
 8001512:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001516:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800151a:	e0ec      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800152a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800152e:	e0e2      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
		break;
 8001536:	e0de      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
 8001538:	10624dd3 	.word	0x10624dd3
 800153c:	3fb43958 	.word	0x3fb43958
 8001540:	c2c80000 	.word	0xc2c80000
 8001544:	51eb851f 	.word	0x51eb851f
 8001548:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3303      	adds	r3, #3
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	3204      	adds	r2, #4
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	4313      	orrs	r3, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe ffe1 	bl	8000524 <__aeabi_i2d>
 8001562:	a370      	add	r3, pc, #448	; (adr r3, 8001724 <OBD2_PID_Parse+0x7ac>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f846 	bl	80005f8 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f7ff fa52 	bl	8000a1c <__aeabi_d2f>
 8001578:	4603      	mov	r3, r0
 800157a:	60fb      	str	r3, [r7, #12]
		break;
 800157c:	e0bb      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3303      	adds	r3, #3
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	3204      	adds	r2, #4
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	4313      	orrs	r3, r2
 800158e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001592:	3b7f      	subs	r3, #127	; 0x7f
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015a0:	e0a9      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <OBD2_PID_Parse+0x7a0>)
 80015a4:	60fb      	str	r3, [r7, #12]
		break;
 80015a6:	e0a6      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3303      	adds	r3, #3
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	3204      	adds	r2, #4
 80015b4:	7812      	ldrb	r2, [r2, #0]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015c4:	e097      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
		break;
 80015cc:	e093      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3303      	adds	r3, #3
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b28      	subs	r3, #40	; 0x28
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80015e2:	e088      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <OBD2_PID_Parse+0x7a4>)
 80015e6:	60fb      	str	r3, [r7, #12]
		break;
 80015e8:	e085      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3303      	adds	r3, #3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	3204      	adds	r2, #4
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	a341      	add	r3, pc, #260	; (adr r3, 8001708 <OBD2_PID_Parse+0x790>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa03 	bl	8000a1c <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]
		break;
 800161a:	e06c      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3303      	adds	r3, #3
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	3b7d      	subs	r3, #125	; 0x7d
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001630:	e061      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	3204      	adds	r2, #4
 800163e:	7812      	ldrb	r2, [r2, #0]
 8001640:	4313      	orrs	r3, r2
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800164e:	e052      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3303      	adds	r3, #3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	3b7d      	subs	r3, #125	; 0x7d
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001664:	e047      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
		break;
 800166c:	e043      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3303      	adds	r3, #3
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	3b28      	subs	r3, #40	; 0x28
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001682:	e038      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3303      	adds	r3, #3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	3204      	adds	r2, #4
 8001690:	7812      	ldrb	r2, [r2, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	4a22      	ldr	r2, [pc, #136]	; (8001720 <OBD2_PID_Parse+0x7a8>)
 8001696:	fb82 1203 	smull	r1, r2, r2, r3
 800169a:	1152      	asrs	r2, r2, #5
 800169c:	17db      	asrs	r3, r3, #31
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	3b28      	subs	r3, #40	; 0x28
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016aa:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016ae:	e022      	b.n	80016f6 <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3303      	adds	r3, #3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	061a      	lsls	r2, r3, #24
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3304      	adds	r3, #4
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3305      	adds	r3, #5
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	4313      	orrs	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	3206      	adds	r2, #6
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff25 	bl	8000524 <__aeabi_i2d>
 80016da:	a30d      	add	r3, pc, #52	; (adr r3, 8001710 <OBD2_PID_Parse+0x798>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff8a 	bl	80005f8 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f996 	bl	8000a1c <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	60fb      	str	r3, [r7, #12]
		break;
 80016f4:	bf00      	nop
	}
	return value;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	ee07 3a90 	vmov	s15, r3
}
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fa99999 	.word	0x3fa99999
 8001710:	9999999a 	.word	0x9999999a
 8001714:	3fb99999 	.word	0x3fb99999
 8001718:	c2c80000 	.word	0xc2c80000
 800171c:	c3520000 	.word	0xc3520000
 8001720:	51eb851f 	.word	0x51eb851f
 8001724:	47ae147b 	.word	0x47ae147b
 8001728:	3f747ae1 	.word	0x3f747ae1

0800172c <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	f107 0214 	add.w	r2, r7, #20
 800173c:	2100      	movs	r1, #0
 800173e:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001740:	f001 ff92 	bl	8003668 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fc15 	bl	8000f78 <OBD2_PID_Parse>
 800174e:	eef0 7a40 	vmov.f32	s15, s0
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001754:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	HAL_IWDG_Refresh(&hiwdg);
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800175a:	f002 ffd7 	bl	800470c <HAL_IWDG_Refresh>
}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000a4 	.word	0x200000a4
 800176c:	20000188 	.word	0x20000188
 8001770:	20000178 	.word	0x20000178

08001774 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2210      	movs	r2, #16
 8001782:	60da      	str	r2, [r3, #12]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017a6:	4b29      	ldr	r3, [pc, #164]	; (800184c <MX_ADC1_Init+0xbc>)
 80017a8:	4a29      	ldr	r2, [pc, #164]	; (8001850 <MX_ADC1_Init+0xc0>)
 80017aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017b4:	4b25      	ldr	r3, [pc, #148]	; (800184c <MX_ADC1_Init+0xbc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <MX_ADC1_Init+0xbc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017c0:	4b22      	ldr	r3, [pc, #136]	; (800184c <MX_ADC1_Init+0xbc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_ADC1_Init+0xbc>)
 80017c8:	2204      	movs	r2, #4
 80017ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_ADC1_Init+0xbc>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_ADC1_Init+0xbc>)
 80017da:	2201      	movs	r2, #1
 80017dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_ADC1_Init+0xbc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_ADC1_Init+0xbc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_ADC1_Init+0xbc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_ADC1_Init+0xbc>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_ADC1_Init+0xbc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_ADC1_Init+0xbc>)
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <MX_ADC1_Init+0xbc>)
 800180a:	f001 fa05 	bl	8002c18 <HAL_ADC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001814:	f000 fa35 	bl	8001c82 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_ADC1_Init+0xc4>)
 800181a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800181c:	2306      	movs	r3, #6
 800181e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001824:	237f      	movs	r3, #127	; 0x7f
 8001826:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001828:	2304      	movs	r3, #4
 800182a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_ADC1_Init+0xbc>)
 8001836:	f001 fb37 	bl	8002ea8 <HAL_ADC_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001840:	f000 fa1f 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200000cc 	.word	0x200000cc
 8001850:	50040000 	.word	0x50040000
 8001854:	3ac04000 	.word	0x3ac04000

08001858 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0a0      	sub	sp, #128	; 0x80
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	225c      	movs	r2, #92	; 0x5c
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f005 ffdf 	bl	800783c <memset>
  if(adcHandle->Instance==ADC1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3a      	ldr	r2, [pc, #232]	; (800196c <HAL_ADC_MspInit+0x114>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d16d      	bne.n	8001964 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800188e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001892:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001894:	2303      	movs	r3, #3
 8001896:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018a0:	2307      	movs	r3, #7
 80018a2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 fdd2 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80018c2:	f000 f9de 	bl	8001c82 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	4a23      	ldr	r2, [pc, #140]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_ADC_MspInit+0x118>)
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 80018f6:	2320      	movs	r3, #32
 80018f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018fa:	230b      	movs	r3, #11
 80018fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8001902:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001906:	4619      	mov	r1, r3
 8001908:	481a      	ldr	r0, [pc, #104]	; (8001974 <HAL_ADC_MspInit+0x11c>)
 800190a:	f002 fd6d 	bl	80043e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001910:	4a1a      	ldr	r2, [pc, #104]	; (800197c <HAL_ADC_MspInit+0x124>)
 8001912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001916:	2200      	movs	r2, #0
 8001918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800193e:	2220      	movs	r2, #32
 8001940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800194a:	f002 fad7 	bl	8003efc <HAL_DMA_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001954:	f000 f995 	bl	8001c82 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_ADC_MspInit+0x120>)
 800195c:	64da      	str	r2, [r3, #76]	; 0x4c
 800195e:	4a06      	ldr	r2, [pc, #24]	; (8001978 <HAL_ADC_MspInit+0x120>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001964:	bf00      	nop
 8001966:	3780      	adds	r7, #128	; 0x80
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	50040000 	.word	0x50040000
 8001970:	40021000 	.word	0x40021000
 8001974:	48000800 	.word	0x48000800
 8001978:	20000130 	.word	0x20000130
 800197c:	40020008 	.word	0x40020008

08001980 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <MX_DMA_Init+0x48>)
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <MX_DMA_Init+0x48>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6493      	str	r3, [r2, #72]	; 0x48
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_DMA_Init+0x48>)
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	200b      	movs	r0, #11
 80019a4:	f002 fa73 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a8:	200b      	movs	r0, #11
 80019aa:	f002 fa8c 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	200f      	movs	r0, #15
 80019b4:	f002 fa6b 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80019b8:	200f      	movs	r0, #15
 80019ba:	f002 fa84 	bl	8003ec6 <HAL_NVIC_EnableIRQ>

}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a4a      	ldr	r2, [pc, #296]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b45      	ldr	r3, [pc, #276]	; (8001b10 <MX_GPIO_Init+0x144>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a44      	ldr	r2, [pc, #272]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <MX_GPIO_Init+0x144>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	482d      	ldr	r0, [pc, #180]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a60:	f002 fe3c 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f002 fe35 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2104      	movs	r1, #4
 8001a76:	4828      	ldr	r0, [pc, #160]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001a78:	f002 fe30 	bl	80046dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4820      	ldr	r0, [pc, #128]	; (8001b14 <MX_GPIO_Init+0x148>)
 8001a94:	f002 fca8 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 8001a98:	2350      	movs	r3, #80	; 0x50
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aae:	f002 fc9b 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 8001ab2:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f002 fc8b 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <MX_GPIO_Init+0x14c>)
 8001aea:	f002 fc7d 	bl	80043e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8001aee:	2308      	movs	r3, #8
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <MX_GPIO_Init+0x150>)
 8001b02:	f002 fc71 	bl	80043e8 <HAL_GPIO_Init>

}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000c00 	.word	0x48000c00
 8001b1c:	48001c00 	.word	0x48001c00

08001b20 <HAL_TIM_PeriodElapsedCallback>:
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim6;
extern OBD obd_comm;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		if(obd_comm.msg_type == 0)
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b34:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 8001b3c:	bf00      	nop
 8001b3e:	e003      	b.n	8001b48 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
			obd_comm.msg_type = 3;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		HAL_TIM_Base_Stop_IT(&htim6);
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001b4a:	f003 ffea 	bl	8005b22 <HAL_TIM_Base_Stop_IT>
	}
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40001000 	.word	0x40001000
 8001b5c:	20000188 	.word	0x20000188
 8001b60:	20000868 	.word	0x20000868

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b68:	f000 fe32 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6c:	f000 f824 	bl	8001bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b70:	f7ff ff2c 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b74:	f7ff ff04 	bl	8001980 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b78:	f7ff fe0a 	bl	8001790 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001b7c:	f000 fb0a 	bl	8002194 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b80:	f000 fb3c 	bl	80021fc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b84:	f000 fb6e 	bl	8002264 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001b88:	f000 fa1e 	bl	8001fc8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8001b8c:	f000 fa70 	bl	8002070 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001b90:	f000 f863 	bl	8001c5a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  module.initialized = module_init();
 8001b94:	f000 fd56 	bl	8002644 <module_init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <main+0x50>)
 8001b9e:	f883 25dd 	strb.w	r2, [r3, #1501]	; 0x5dd
  module.rssi = check_signal();
 8001ba2:	f000 fdb9 	bl	8002718 <check_signal>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <main+0x50>)
 8001bac:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <main+0x4c>
 8001bb2:	bf00      	nop
 8001bb4:	200001f8 	.word	0x200001f8

08001bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b096      	sub	sp, #88	; 0x58
 8001bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2244      	movs	r2, #68	; 0x44
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f005 fe38 	bl	800783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bcc:	463b      	mov	r3, r7
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bde:	f002 fdb3 	bl	8004748 <HAL_PWREx_ControlVoltageScaling>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001be8:	f000 f84b 	bl	8001c82 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bec:	2309      	movs	r3, #9
 8001bee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001c06:	230a      	movs	r3, #10
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c12:	2302      	movs	r3, #2
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fdea 	bl	80047f4 <HAL_RCC_OscConfig>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c26:	f000 f82c 	bl	8001c82 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2104      	movs	r1, #4
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 f9ea 	bl	800501c <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c4e:	f000 f818 	bl	8001c82 <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3758      	adds	r7, #88	; 0x58
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2010      	movs	r0, #16
 8001c64:	f002 f913 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c68:	2010      	movs	r0, #16
 8001c6a:	f002 f92c 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2026      	movs	r0, #38	; 0x26
 8001c74:	f002 f90b 	bl	8003e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c78:	2026      	movs	r0, #38	; 0x26
 8001c7a:	f002 f924 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c86:	b672      	cpsid	i
}
 8001c88:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <Error_Handler+0x8>

08001c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c96:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <HAL_MspInit+0x44>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a08      	ldr	r2, [pc, #32]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d20:	f000 fdaa 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <DMA1_Channel1_IRQHandler+0x10>)
 8001d2e:	f002 fa7c 	bl	800422a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000130 	.word	0x20000130

08001d3c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <DMA1_Channel5_IRQHandler+0x10>)
 8001d42:	f002 fa72 	bl	800422a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000a40 	.word	0x20000a40

08001d50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d54:	4802      	ldr	r0, [pc, #8]	; (8001d60 <DMA1_Channel6_IRQHandler+0x10>)
 8001d56:	f002 fa68 	bl	800422a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000a88 	.word	0x20000a88

08001d64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d68:	4802      	ldr	r0, [pc, #8]	; (8001d74 <CAN1_RX0_IRQHandler+0x10>)
 8001d6a:	f001 fd8f 	bl	800388c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000a4 	.word	0x200000a4

08001d78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <CAN1_RX1_IRQHandler+0x10>)
 8001d7e:	f001 fd85 	bl	800388c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000a4 	.word	0x200000a4

08001d8c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001d92:	f003 fef5 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000081c 	.word	0x2000081c

08001da0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001da6:	f003 feeb 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000081c 	.word	0x2000081c

08001db4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001dba:	f003 fee1 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000081c 	.word	0x2000081c

08001dc8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <TIM1_CC_IRQHandler+0x10>)
 8001dce:	f003 fed7 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000081c 	.word	0x2000081c

08001ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <USART1_IRQHandler+0x10>)
 8001de2:	f004 fb41 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200008b4 	.word	0x200008b4

08001df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <USART2_IRQHandler+0x10>)
 8001df6:	f004 fb37 	bl	8006468 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000938 	.word	0x20000938

08001e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <TIM6_DAC_IRQHandler+0x10>)
 8001e0a:	f003 feb9 	bl	8005b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000868 	.word	0x20000868

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e32:	f005 fcd9 	bl	80077e8 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
	}

return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
	}
	return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f005 fc3e 	bl	80077e8 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20010000 	.word	0x20010000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000818 	.word	0x20000818
 8001fa0:	20000ae8 	.word	0x20000ae8

08001fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_TIM1_Init+0xa0>)
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <MX_TIM1_Init+0xa4>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 800;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM1_Init+0xa0>)
 8001fee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001ff2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM1_Init+0xa0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM1_Init+0xa0>)
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM1_Init+0xa0>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_TIM1_Init+0xa0>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <MX_TIM1_Init+0xa0>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002014:	4814      	ldr	r0, [pc, #80]	; (8002068 <MX_TIM1_Init+0xa0>)
 8002016:	f003 fd2d 	bl	8005a74 <HAL_TIM_Base_Init>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002020:	f7ff fe2f 	bl	8001c82 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4619      	mov	r1, r3
 8002030:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_TIM1_Init+0xa0>)
 8002032:	f003 fec4 	bl	8005dbe <HAL_TIM_ConfigClockSource>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800203c:	f7ff fe21 	bl	8001c82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_TIM1_Init+0xa0>)
 8002052:	f004 f8a3 	bl	800619c <HAL_TIMEx_MasterConfigSynchronization>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800205c:	f7ff fe11 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	2000081c 	.word	0x2000081c
 800206c:	40012c00 	.word	0x40012c00

08002070 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002080:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <MX_TIM6_Init+0x68>)
 8002082:	4a16      	ldr	r2, [pc, #88]	; (80020dc <MX_TIM6_Init+0x6c>)
 8002084:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_TIM6_Init+0x68>)
 8002088:	f44f 7248 	mov.w	r2, #800	; 0x320
 800208c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <MX_TIM6_Init+0x68>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_TIM6_Init+0x68>)
 8002096:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800209a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_TIM6_Init+0x68>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020a2:	480d      	ldr	r0, [pc, #52]	; (80020d8 <MX_TIM6_Init+0x68>)
 80020a4:	f003 fce6 	bl	8005a74 <HAL_TIM_Base_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80020ae:	f7ff fde8 	bl	8001c82 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_TIM6_Init+0x68>)
 80020c0:	f004 f86c 	bl	800619c <HAL_TIMEx_MasterConfigSynchronization>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f7ff fdda 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000868 	.word	0x20000868
 80020dc:	40001000 	.word	0x40001000

080020e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_TIM_Base_MspInit+0xa8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d12c      	bne.n	800214c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 80020f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 80020f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020fc:	6613      	str	r3, [r2, #96]	; 0x60
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 8002100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2018      	movs	r0, #24
 8002110:	f001 febd 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002114:	2018      	movs	r0, #24
 8002116:	f001 fed6 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2019      	movs	r0, #25
 8002120:	f001 feb5 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002124:	2019      	movs	r0, #25
 8002126:	f001 fece 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	201a      	movs	r0, #26
 8002130:	f001 fead 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002134:	201a      	movs	r0, #26
 8002136:	f001 fec6 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	201b      	movs	r0, #27
 8002140:	f001 fea5 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002144:	201b      	movs	r0, #27
 8002146:	f001 febe 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800214a:	e018      	b.n	800217e <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <HAL_TIM_Base_MspInit+0xb0>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d113      	bne.n	800217e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	6593      	str	r3, [r2, #88]	; 0x58
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_TIM_Base_MspInit+0xac>)
 8002164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	2036      	movs	r0, #54	; 0x36
 8002174:	f001 fe8b 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002178:	2036      	movs	r0, #54	; 0x36
 800217a:	f001 fea4 	bl	8003ec6 <HAL_NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40001000 	.word	0x40001000

08002194 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <MX_USART1_UART_Init+0x64>)
 800219c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021a0:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80021a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_USART1_UART_Init+0x60>)
 80021e0:	f004 f860 	bl	80062a4 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80021ea:	f7ff fd4a 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200008b4 	.word	0x200008b4
 80021f8:	40013800 	.word	0x40013800

080021fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002202:	4a17      	ldr	r2, [pc, #92]	; (8002260 <MX_USART2_UART_Init+0x64>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <MX_USART2_UART_Init+0x60>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002228:	f44f 7240 	mov.w	r2, #768	; 0x300
 800222c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002230:	2200      	movs	r2, #0
 8002232:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002236:	2200      	movs	r2, #0
 8002238:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <MX_USART2_UART_Init+0x60>)
 800223c:	2208      	movs	r2, #8
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <MX_USART2_UART_Init+0x60>)
 8002242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002246:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_USART2_UART_Init+0x60>)
 800224a:	f004 f82b 	bl	80062a4 <HAL_UART_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002254:	f7ff fd15 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000938 	.word	0x20000938
 8002260:	40004400 	.word	0x40004400

08002264 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <MX_USART3_UART_Init+0x58>)
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <MX_USART3_UART_Init+0x5c>)
 800226c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <MX_USART3_UART_Init+0x58>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <MX_USART3_UART_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <MX_USART3_UART_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <MX_USART3_UART_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <MX_USART3_UART_Init+0x58>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <MX_USART3_UART_Init+0x58>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <MX_USART3_UART_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <MX_USART3_UART_Init+0x58>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <MX_USART3_UART_Init+0x58>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_USART3_UART_Init+0x58>)
 80022a8:	f003 fffc 	bl	80062a4 <HAL_UART_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022b2:	f7ff fce6 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200009bc 	.word	0x200009bc
 80022c0:	40004800 	.word	0x40004800

080022c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0a4      	sub	sp, #144	; 0x90
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022dc:	f107 0320 	add.w	r3, r7, #32
 80022e0:	225c      	movs	r2, #92	; 0x5c
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f005 faa9 	bl	800783c <memset>
  if(uartHandle->Instance==USART1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a99      	ldr	r2, [pc, #612]	; (8002554 <HAL_UART_MspInit+0x290>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d16b      	bne.n	80023cc <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022f8:	2300      	movs	r3, #0
 80022fa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f8ad 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800230c:	f7ff fcb9 	bl	8001c82 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002310:	4b91      	ldr	r3, [pc, #580]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002314:	4a90      	ldr	r2, [pc, #576]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231a:	6613      	str	r3, [r2, #96]	; 0x60
 800231c:	4b8e      	ldr	r3, [pc, #568]	; (8002558 <HAL_UART_MspInit+0x294>)
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_UART_MspInit+0x294>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a8a      	ldr	r2, [pc, #552]	; (8002558 <HAL_UART_MspInit+0x294>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002356:	2307      	movs	r3, #7
 8002358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002360:	4619      	mov	r1, r3
 8002362:	487e      	ldr	r0, [pc, #504]	; (800255c <HAL_UART_MspInit+0x298>)
 8002364:	f002 f840 	bl	80043e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002368:	4b7d      	ldr	r3, [pc, #500]	; (8002560 <HAL_UART_MspInit+0x29c>)
 800236a:	4a7e      	ldr	r2, [pc, #504]	; (8002564 <HAL_UART_MspInit+0x2a0>)
 800236c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800236e:	4b7c      	ldr	r3, [pc, #496]	; (8002560 <HAL_UART_MspInit+0x29c>)
 8002370:	2202      	movs	r2, #2
 8002372:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002374:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <HAL_UART_MspInit+0x29c>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237a:	4b79      	ldr	r3, [pc, #484]	; (8002560 <HAL_UART_MspInit+0x29c>)
 800237c:	2200      	movs	r2, #0
 800237e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002380:	4b77      	ldr	r3, [pc, #476]	; (8002560 <HAL_UART_MspInit+0x29c>)
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_UART_MspInit+0x29c>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b74      	ldr	r3, [pc, #464]	; (8002560 <HAL_UART_MspInit+0x29c>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002392:	4b73      	ldr	r3, [pc, #460]	; (8002560 <HAL_UART_MspInit+0x29c>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b71      	ldr	r3, [pc, #452]	; (8002560 <HAL_UART_MspInit+0x29c>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800239e:	4870      	ldr	r0, [pc, #448]	; (8002560 <HAL_UART_MspInit+0x29c>)
 80023a0:	f001 fdac 	bl	8003efc <HAL_DMA_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80023aa:	f7ff fc6a 	bl	8001c82 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a6b      	ldr	r2, [pc, #428]	; (8002560 <HAL_UART_MspInit+0x29c>)
 80023b2:	671a      	str	r2, [r3, #112]	; 0x70
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_UART_MspInit+0x29c>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2101      	movs	r1, #1
 80023be:	2025      	movs	r0, #37	; 0x25
 80023c0:	f001 fd65 	bl	8003e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023c4:	2025      	movs	r0, #37	; 0x25
 80023c6:	f001 fd7e 	bl	8003ec6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023ca:	e0bf      	b.n	800254c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_UART_MspInit+0x2a4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d17a      	bne.n	80024cc <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023d6:	2302      	movs	r3, #2
 80023d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023da:	2300      	movs	r3, #0
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023de:	f107 0320 	add.w	r3, r7, #32
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f83c 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80023ee:	f7ff fc48 	bl	8001c82 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_UART_MspInit+0x294>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a58      	ldr	r2, [pc, #352]	; (8002558 <HAL_UART_MspInit+0x294>)
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_UART_MspInit+0x294>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 8002422:	230b      	movs	r3, #11
 8002424:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002432:	2303      	movs	r3, #3
 8002434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002438:	2307      	movs	r3, #7
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f001 ffce 	bl	80043e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 800244c:	2304      	movs	r3, #4
 800244e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002456:	2301      	movs	r3, #1
 8002458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002462:	2307      	movs	r3, #7
 8002464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002472:	f001 ffb9 	bl	80043e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <HAL_UART_MspInit+0x2a8>)
 8002478:	4a3d      	ldr	r2, [pc, #244]	; (8002570 <HAL_UART_MspInit+0x2ac>)
 800247a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_UART_MspInit+0x2a8>)
 800247e:	2202      	movs	r2, #2
 8002480:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002482:	4b3a      	ldr	r3, [pc, #232]	; (800256c <HAL_UART_MspInit+0x2a8>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_UART_MspInit+0x2a8>)
 800248a:	2200      	movs	r2, #0
 800248c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_UART_MspInit+0x2a8>)
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_UART_MspInit+0x2a8>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_UART_MspInit+0x2a8>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80024a0:	4b32      	ldr	r3, [pc, #200]	; (800256c <HAL_UART_MspInit+0x2a8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_UART_MspInit+0x2a8>)
 80024a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024ae:	482f      	ldr	r0, [pc, #188]	; (800256c <HAL_UART_MspInit+0x2a8>)
 80024b0:	f001 fd24 	bl	8003efc <HAL_DMA_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 80024ba:	f7ff fbe2 	bl	8001c82 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_UART_MspInit+0x2a8>)
 80024c2:	671a      	str	r2, [r3, #112]	; 0x70
 80024c4:	4a29      	ldr	r2, [pc, #164]	; (800256c <HAL_UART_MspInit+0x2a8>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80024ca:	e03f      	b.n	800254c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_UART_MspInit+0x2b0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d13a      	bne.n	800254c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024d6:	2304      	movs	r3, #4
 80024d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024da:	2300      	movs	r3, #0
 80024dc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024de:	f107 0320 	add.w	r3, r7, #32
 80024e2:	4618      	mov	r0, r3
 80024e4:	f002 ffbc 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_UART_MspInit+0x22e>
      Error_Handler();
 80024ee:	f7ff fbc8 	bl	8001c82 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_UART_MspInit+0x294>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_UART_MspInit+0x294>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_UART_MspInit+0x294>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_UART_MspInit+0x294>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002522:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002526:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800253a:	2307      	movs	r3, #7
 800253c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002540:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002544:	4619      	mov	r1, r3
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <HAL_UART_MspInit+0x2b4>)
 8002548:	f001 ff4e 	bl	80043e8 <HAL_GPIO_Init>
}
 800254c:	bf00      	nop
 800254e:	3790      	adds	r7, #144	; 0x90
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40013800 	.word	0x40013800
 8002558:	40021000 	.word	0x40021000
 800255c:	48000400 	.word	0x48000400
 8002560:	20000a40 	.word	0x20000a40
 8002564:	40020058 	.word	0x40020058
 8002568:	40004400 	.word	0x40004400
 800256c:	20000a88 	.word	0x20000a88
 8002570:	4002006c 	.word	0x4002006c
 8002574:	40004800 	.word	0x40004800
 8002578:	48000800 	.word	0x48000800

0800257c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <HAL_UART_RxCpltCallback+0x38>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 800258c:	f7fe fc44 	bl	8000e18 <kline_rx_callback>
	}
	else if (huart == GPS)
	{
		gps_rx_callback();
	}
}
 8002590:	e00c      	b.n	80025ac <HAL_UART_RxCpltCallback+0x30>
	else if (huart == NB)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_UART_RxCpltCallback+0x3c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d102      	bne.n	80025a0 <HAL_UART_RxCpltCallback+0x24>
		nb_rx_callback();
 800259a:	f000 f8a7 	bl	80026ec <nb_rx_callback>
}
 800259e:	e005      	b.n	80025ac <HAL_UART_RxCpltCallback+0x30>
	else if (huart == GPS)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a06      	ldr	r2, [pc, #24]	; (80025bc <HAL_UART_RxCpltCallback+0x40>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_UART_RxCpltCallback+0x30>
		gps_rx_callback();
 80025a8:	f000 f8ae 	bl	8002708 <gps_rx_callback>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200008b4 	.word	0x200008b4
 80025b8:	20000938 	.word	0x20000938
 80025bc:	200009bc 	.word	0x200009bc

080025c0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 80025cc:	f000 f88e 	bl	80026ec <nb_rx_callback>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	__NOP();
 80025e0:	bf00      	nop
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002628 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f4:	f7ff fcd6 	bl	8001fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <LoopForever+0x6>)
  ldr r1, =_edata
 80025fa:	490d      	ldr	r1, [pc, #52]	; (8002630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025fc:	4a0d      	ldr	r2, [pc, #52]	; (8002634 <LoopForever+0xe>)
  movs r3, #0
 80025fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002600:	e002      	b.n	8002608 <LoopCopyDataInit>

08002602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002606:	3304      	adds	r3, #4

08002608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800260c:	d3f9      	bcc.n	8002602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002610:	4c0a      	ldr	r4, [pc, #40]	; (800263c <LoopForever+0x16>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002614:	e001      	b.n	800261a <LoopFillZerobss>

08002616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002618:	3204      	adds	r2, #4

0800261a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800261c:	d3fb      	bcc.n	8002616 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800261e:	f005 f8e9 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002622:	f7ff fa9f 	bl	8001b64 <main>

08002626 <LoopForever>:

LoopForever:
    b LoopForever
 8002626:	e7fe      	b.n	8002626 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002628:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800262c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002630:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002634:	08008e00 	.word	0x08008e00
  ldr r2, =_sbss
 8002638:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800263c:	20000ae4 	.word	0x20000ae4

08002640 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002640:	e7fe      	b.n	8002640 <ADC1_IRQHandler>
	...

08002644 <module_init>:
static void clear_rx_buff(void);
static void power_on(void);
static void power_off(void);
//TODO
uint8_t module_init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	power_on();
 8002648:	f000 f89e 	bl	8002788 <power_on>
	send_command("AT\r\n", "OK\r\n", 1000, NB);
 800264c:	4b08      	ldr	r3, [pc, #32]	; (8002670 <module_init+0x2c>)
 800264e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <module_init+0x30>)
 8002654:	4808      	ldr	r0, [pc, #32]	; (8002678 <module_init+0x34>)
 8002656:	f000 f813 	bl	8002680 <send_command>
	send_command("ATI\r\n", "OK\r\n", 1000, NB);
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <module_init+0x2c>)
 800265c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <module_init+0x30>)
 8002662:	4806      	ldr	r0, [pc, #24]	; (800267c <module_init+0x38>)
 8002664:	f000 f80c 	bl	8002680 <send_command>
//	power_off();
	return 1;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000938 	.word	0x20000938
 8002674:	08008a54 	.word	0x08008a54
 8002678:	08008a5c 	.word	0x08008a5c
 800267c:	08008a64 	.word	0x08008a64

08002680 <send_command>:

uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <send_command+0x68>)
 8002692:	2200      	movs	r2, #0
 8002694:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
//	wake_up();
	clear_rx_buff();
 8002698:	f000 f88a 	bl	80027b0 <clear_rx_buff>
	uint8_t length = strlen(command);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f7fd fd97 	bl	80001d0 <strlen>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]
	HAL_UARTEx_ReceiveToIdle_DMA(interface, module.rx_buff, 200);
 80026a6:	22c8      	movs	r2, #200	; 0xc8
 80026a8:	490f      	ldr	r1, [pc, #60]	; (80026e8 <send_command+0x68>)
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f005 f841 	bl	8007732 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	6838      	ldr	r0, [r7, #0]
 80026ba:	f003 fe41 	bl	8006340 <HAL_UART_Transmit>

	while(module.received == 0)
 80026be:	e000      	b.n	80026c2 <send_command+0x42>
	{
		__NOP();
 80026c0:	bf00      	nop
	while(module.received == 0)
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <send_command+0x68>)
 80026c4:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f9      	beq.n	80026c0 <send_command+0x40>
	}
	if(strstr((char *)module.rx_buff, reply) != NULL)
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <send_command+0x68>)
 80026d0:	f005 f8bc 	bl	800784c <strstr>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <send_command+0x5e>
	{
		return TRUE;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <send_command+0x60>
	}
	return FALSE;
 80026de:	2300      	movs	r3, #0

}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200001f8 	.word	0x200001f8

080026ec <nb_rx_callback>:

void nb_rx_callback(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
	module.received = 1;
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <nb_rx_callback+0x18>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200001f8 	.word	0x200001f8

08002708 <gps_rx_callback>:
//TODO
void gps_rx_callback(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <check_signal>:
		}
	}
	return 9;
}
uint8_t check_signal(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
	if(send_command("AT+CSQ\r\n","OK\r\n",1000,NB))
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <check_signal+0x58>)
 8002720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002724:	4913      	ldr	r1, [pc, #76]	; (8002774 <check_signal+0x5c>)
 8002726:	4814      	ldr	r0, [pc, #80]	; (8002778 <check_signal+0x60>)
 8002728:	f7ff ffaa 	bl	8002680 <send_command>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <check_signal+0x4e>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 8002732:	4912      	ldr	r1, [pc, #72]	; (800277c <check_signal+0x64>)
 8002734:	4812      	ldr	r0, [pc, #72]	; (8002780 <check_signal+0x68>)
 8002736:	f005 f89f 	bl	8007878 <strtok>
 800273a:	60f8      	str	r0, [r7, #12]
		if(token)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d011      	beq.n	8002766 <check_signal+0x4e>
		{
			token = strtok(NULL,",");
 8002742:	4910      	ldr	r1, [pc, #64]	; (8002784 <check_signal+0x6c>)
 8002744:	2000      	movs	r0, #0
 8002746:	f005 f897 	bl	8007878 <strtok>
 800274a:	60f8      	str	r0, [r7, #12]
			if(token)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <check_signal+0x4e>
			{
				char *ptr;
				uint8_t rssi = strtol(token, &ptr, 10);
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	220a      	movs	r2, #10
 8002756:	4619      	mov	r1, r3
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f005 f96b 	bl	8007a34 <strtol>
 800275e:	4603      	mov	r3, r0
 8002760:	72fb      	strb	r3, [r7, #11]
				return rssi;
 8002762:	7afb      	ldrb	r3, [r7, #11]
 8002764:	e000      	b.n	8002768 <check_signal+0x50>
			}
		}
	}
	return FALSE;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000938 	.word	0x20000938
 8002774:	08008a54 	.word	0x08008a54
 8002778:	08008a84 	.word	0x08008a84
 800277c:	08008a78 	.word	0x08008a78
 8002780:	200001f8 	.word	0x200001f8
 8002784:	08008a7c 	.word	0x08008a7c

08002788 <power_on>:
	}
	return FALSE;
}

static void power_on(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	2120      	movs	r1, #32
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f001 ffa2 	bl	80046dc <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8002798:	f44f 7016 	mov.w	r0, #600	; 0x258
 800279c:	f000 f88c 	bl	80028b8 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	2120      	movs	r1, #32
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f001 ff98 	bl	80046dc <HAL_GPIO_WritePin>
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <clear_rx_buff>:
	HAL_Delay(1000);
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
}

static void clear_rx_buff(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <clear_rx_buff+0x1c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
	memset(module.rx_buff, 0, sizeof(module.rx_buff));
 80027bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80027c0:	2100      	movs	r1, #0
 80027c2:	4802      	ldr	r0, [pc, #8]	; (80027cc <clear_rx_buff+0x1c>)
 80027c4:	f005 f83a 	bl	800783c <memset>
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200001f8 	.word	0x200001f8

080027d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027da:	2003      	movs	r0, #3
 80027dc:	f001 fb4c 	bl	8003e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e0:	200f      	movs	r0, #15
 80027e2:	f000 f80d 	bl	8002800 <HAL_InitTick>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	e001      	b.n	80027f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f2:	f7ff fa4b 	bl	8001c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f6:	79fb      	ldrb	r3, [r7, #7]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800280c:	4b17      	ldr	r3, [pc, #92]	; (800286c <HAL_InitTick+0x6c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d023      	beq.n	800285c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_InitTick+0x70>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_InitTick+0x6c>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fb59 	bl	8003ee2 <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b0f      	cmp	r3, #15
 800283a:	d809      	bhi.n	8002850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800283c:	2200      	movs	r2, #0
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	f001 fb23 	bl	8003e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_InitTick+0x74>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e007      	b.n	8002860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e004      	b.n	8002860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e001      	b.n	8002860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000008 	.word	0x20000008
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008
 800289c:	20000ad0 	.word	0x20000ad0

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000ad0 	.word	0x20000ad0

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000008 	.word	0x20000008

08002900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <LL_ADC_SetOffset+0x44>)
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	03fff000 	.word	0x03fff000

080029b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3360      	adds	r3, #96	; 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3330      	adds	r3, #48	; 0x30
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	211f      	movs	r1, #31
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	401a      	ands	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	f003 011f 	and.w	r1, r3, #31
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b087      	sub	sp, #28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	0e5b      	lsrs	r3, r3, #25
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	0d1b      	lsrs	r3, r3, #20
 8002a92:	f003 031f 	and.w	r3, r3, #31
 8002a96:	2107      	movs	r1, #7
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0d1b      	lsrs	r3, r3, #20
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab4:	bf00      	nop
 8002ab6:	371c      	adds	r7, #28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	401a      	ands	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0318 	and.w	r3, r3, #24
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ae4:	40d9      	lsrs	r1, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	400b      	ands	r3, r1
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	0007ffff 	.word	0x0007ffff

08002b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6093      	str	r3, [r2, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b90:	d101      	bne.n	8002b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_ADC_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_ADC_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d101      	bne.n	8002c08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e12c      	b.n	8002e8c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7fe fe09 	bl	8001858 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff67 	bl	8002b2c <LL_ADC_IsDeepPowerDownEnabled>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff4d 	bl	8002b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ff82 	bl	8002b7c <LL_ADC_IsInternalRegulatorEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff66 	bl	8002b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c88:	4b82      	ldr	r3, [pc, #520]	; (8002e94 <HAL_ADC_Init+0x27c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	4a82      	ldr	r2, [pc, #520]	; (8002e98 <HAL_ADC_Init+0x280>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	099b      	lsrs	r3, r3, #6
 8002c96:	3301      	adds	r3, #1
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c9c:	e002      	b.n	8002ca4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f9      	bne.n	8002c9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff64 	bl	8002b7c <LL_ADC_IsInternalRegulatorEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0210 	orr.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f043 0201 	orr.w	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff75 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002ce0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f040 80c5 	bne.w	8002e7a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80c1 	bne.w	8002e7a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d00:	f043 0202 	orr.w	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff49 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d18:	4860      	ldr	r0, [pc, #384]	; (8002e9c <HAL_ADC_Init+0x284>)
 8002d1a:	f7ff ff43 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	485d      	ldr	r0, [pc, #372]	; (8002ea0 <HAL_ADC_Init+0x288>)
 8002d2c:	f7ff fde8 	bl	8002900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7e5b      	ldrb	r3, [r3, #25]
 8002d34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d4e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d106      	bne.n	8002d6c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	3b01      	subs	r3, #1
 8002d64:	045b      	lsls	r3, r3, #17
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_ADC_Init+0x28c>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69b9      	ldr	r1, [r7, #24]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff12 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002da6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff1f 	bl	8002bf0 <LL_ADC_INJ_IsConversionOngoing>
 8002db2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d13d      	bne.n	8002e36 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d13a      	bne.n	8002e36 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dc4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dcc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ddc:	f023 0302 	bic.w	r3, r3, #2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	69b9      	ldr	r1, [r7, #24]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d118      	bne.n	8002e26 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002dfe:	f023 0304 	bic.w	r3, r3, #4
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e10:	4311      	orrs	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e16:	430a      	orrs	r2, r1
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	611a      	str	r2, [r3, #16]
 8002e24:	e007      	b.n	8002e36 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10c      	bne.n	8002e58 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	f023 010f 	bic.w	r1, r3, #15
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	1e5a      	subs	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
 8002e56:	e007      	b.n	8002e68 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 020f 	bic.w	r2, r2, #15
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f023 0303 	bic.w	r3, r3, #3
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
 8002e78:	e007      	b.n	8002e8a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f043 0210 	orr.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000000 	.word	0x20000000
 8002e98:	053e2d63 	.word	0x053e2d63
 8002e9c:	50040000 	.word	0x50040000
 8002ea0:	50040300 	.word	0x50040300
 8002ea4:	fff0c007 	.word	0xfff0c007

08002ea8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0b6      	sub	sp, #216	; 0xd8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x22>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e3b9      	b.n	800363e <HAL_ADC_ConfigChannel+0x796>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe77 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 839e 	bne.w	8003620 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d824      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	3b02      	subs	r3, #2
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d81b      	bhi.n	8002f2e <HAL_ADC_ConfigChannel+0x86>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <HAL_ADC_ConfigChannel+0x54>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f0d 	.word	0x08002f0d
 8002f00:	08002f15 	.word	0x08002f15
 8002f04:	08002f1d 	.word	0x08002f1d
 8002f08:	08002f25 	.word	0x08002f25
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	220c      	movs	r2, #12
 8002f10:	605a      	str	r2, [r3, #4]
          break;
 8002f12:	e011      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	2212      	movs	r2, #18
 8002f18:	605a      	str	r2, [r3, #4]
          break;
 8002f1a:	e00d      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2218      	movs	r2, #24
 8002f20:	605a      	str	r2, [r3, #4]
          break;
 8002f22:	e009      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f2a:	605a      	str	r2, [r3, #4]
          break;
 8002f2c:	e004      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2206      	movs	r2, #6
 8002f32:	605a      	str	r2, [r3, #4]
          break;
 8002f34:	e000      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002f36:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	f7ff fd64 	bl	8002a12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fe3b 	bl	8002bca <LL_ADC_REG_IsConversionOngoing>
 8002f54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fe47 	bl	8002bf0 <LL_ADC_INJ_IsConversionOngoing>
 8002f62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 81a6 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 81a1 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f7ff fd6f 	bl	8002a6a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00a      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6919      	ldr	r1, [r3, #16]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fbe:	f7ff fcd3 	bl	8002968 <LL_ADC_SetOffset>
 8002fc2:	e17b      	b.n	80032bc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fcf0 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x148>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fce5 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	f003 021f 	and.w	r2, r3, #31
 8002fee:	e01e      	b.n	800302e <HAL_ADC_ConfigChannel+0x186>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fcda 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800300e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e004      	b.n	800302c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003026:	fab3 f383 	clz	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d105      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x19e>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	e018      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d0>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800305a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e004      	b.n	8003078 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800306e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003078:	429a      	cmp	r2, r3
 800307a:	d106      	bne.n	800308a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2200      	movs	r2, #0
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fca9 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fc8d 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10a      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x20e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fc82 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	e01e      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x24c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2101      	movs	r1, #1
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fc77 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e004      	b.n	80030f2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80030e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x264>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	f003 031f 	and.w	r3, r3, #31
 800310a:	e018      	b.n	800313e <HAL_ADC_ConfigChannel+0x296>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003130:	2320      	movs	r3, #32
 8003132:	e004      	b.n	800313e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003138:	fab3 f383 	clz	r3, r3
 800313c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800313e:	429a      	cmp	r2, r3
 8003140:	d106      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2200      	movs	r2, #0
 8003148:	2101      	movs	r1, #1
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fc46 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2102      	movs	r1, #2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fc2a 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800315c:	4603      	mov	r3, r0
 800315e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_ADC_ConfigChannel+0x2d4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2102      	movs	r1, #2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fc1f 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	f003 021f 	and.w	r2, r3, #31
 800317a:	e01e      	b.n	80031ba <HAL_ADC_ConfigChannel+0x312>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fc14 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003188:	4603      	mov	r3, r0
 800318a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800319a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800319e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e004      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80031ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x32a>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	e016      	b.n	8003200 <HAL_ADC_ConfigChannel+0x358>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80031e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80031ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e004      	b.n	8003200 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80031f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fbe5 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2103      	movs	r1, #3
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fbc9 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800321e:	4603      	mov	r3, r0
 8003220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_ADC_ConfigChannel+0x396>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2103      	movs	r1, #3
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fbbe 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	e017      	b.n	800326e <HAL_ADC_ConfigChannel+0x3c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2103      	movs	r1, #3
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fbb3 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800324a:	4603      	mov	r3, r0
 800324c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003250:	fa93 f3a3 	rbit	r3, r3
 8003254:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003258:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800325a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003260:	2320      	movs	r3, #32
 8003262:	e003      	b.n	800326c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x3de>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	e011      	b.n	80032aa <HAL_ADC_ConfigChannel+0x402>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003296:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d106      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	2103      	movs	r1, #3
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fb90 	bl	80029dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fc6f 	bl	8002ba4 <LL_ADC_IsEnabled>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f040 813f 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f7ff fbf0 	bl	8002ac0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a8e      	ldr	r2, [pc, #568]	; (8003520 <HAL_ADC_ConfigChannel+0x678>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f040 8130 	bne.w	800354c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x46c>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	3301      	adds	r3, #1
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	2b09      	cmp	r3, #9
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e019      	b.n	8003348 <HAL_ADC_ConfigChannel+0x4a0>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2b09      	cmp	r3, #9
 8003340:	bf94      	ite	ls
 8003342:	2301      	movls	r3, #1
 8003344:	2300      	movhi	r3, #0
 8003346:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003348:	2b00      	cmp	r3, #0
 800334a:	d079      	beq.n	8003440 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	2b00      	cmp	r3, #0
 8003356:	d107      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x4c0>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	0e9b      	lsrs	r3, r3, #26
 800335e:	3301      	adds	r3, #1
 8003360:	069b      	lsls	r3, r3, #26
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003366:	e015      	b.n	8003394 <HAL_ADC_ConfigChannel+0x4ec>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800337a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e003      	b.n	800338c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x50c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0e9b      	lsrs	r3, r3, #26
 80033a6:	3301      	adds	r3, #1
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	e017      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x53c>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80033cc:	2320      	movs	r3, #32
 80033ce:	e003      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d2:	fab3 f383 	clz	r3, r3
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	ea42 0103 	orr.w	r1, r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <HAL_ADC_ConfigChannel+0x562>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	3301      	adds	r3, #1
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4613      	mov	r3, r2
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	4413      	add	r3, r2
 8003406:	051b      	lsls	r3, r3, #20
 8003408:	e018      	b.n	800343c <HAL_ADC_ConfigChannel+0x594>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800341c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343c:	430b      	orrs	r3, r1
 800343e:	e080      	b.n	8003542 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_ADC_ConfigChannel+0x5b4>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	3301      	adds	r3, #1
 8003454:	069b      	lsls	r3, r3, #26
 8003456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800345a:	e015      	b.n	8003488 <HAL_ADC_ConfigChannel+0x5e0>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	fa93 f3a3 	rbit	r3, r3
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	e003      	b.n	8003480 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	069b      	lsls	r3, r3, #26
 8003484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x600>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	3301      	adds	r3, #1
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	e017      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x630>
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	61fb      	str	r3, [r7, #28]
  return result;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e003      	b.n	80034cc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	ea42 0103 	orr.w	r1, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x65c>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	051b      	lsls	r3, r3, #20
 80034fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003502:	e01d      	b.n	8003540 <HAL_ADC_ConfigChannel+0x698>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	613b      	str	r3, [r7, #16]
  return result;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e005      	b.n	800352c <HAL_ADC_ConfigChannel+0x684>
 8003520:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f003 021f 	and.w	r2, r3, #31
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	3b1e      	subs	r3, #30
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	430b      	orrs	r3, r1
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	4619      	mov	r1, r3
 8003548:	f7ff fa8f 	bl	8002a6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b3d      	ldr	r3, [pc, #244]	; (8003648 <HAL_ADC_ConfigChannel+0x7a0>)
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d06c      	beq.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003558:	483c      	ldr	r0, [pc, #240]	; (800364c <HAL_ADC_ConfigChannel+0x7a4>)
 800355a:	f7ff f9f7 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 800355e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a3a      	ldr	r2, [pc, #232]	; (8003650 <HAL_ADC_ConfigChannel+0x7a8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d127      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800356c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d121      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a35      	ldr	r2, [pc, #212]	; (8003654 <HAL_ADC_ConfigChannel+0x7ac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d157      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003582:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800358a:	4619      	mov	r1, r3
 800358c:	482f      	ldr	r0, [pc, #188]	; (800364c <HAL_ADC_ConfigChannel+0x7a4>)
 800358e:	f7ff f9ca 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <HAL_ADC_ConfigChannel+0x7b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_ADC_ConfigChannel+0x7b4>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ac:	e002      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035ba:	e03a      	b.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a27      	ldr	r2, [pc, #156]	; (8003660 <HAL_ADC_ConfigChannel+0x7b8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d113      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x746>
 80035c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1f      	ldr	r2, [pc, #124]	; (8003654 <HAL_ADC_ConfigChannel+0x7ac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12a      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035e4:	4619      	mov	r1, r3
 80035e6:	4819      	ldr	r0, [pc, #100]	; (800364c <HAL_ADC_ConfigChannel+0x7a4>)
 80035e8:	f7ff f99d 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035ec:	e021      	b.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_ADC_ConfigChannel+0x7bc>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d11c      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d116      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <HAL_ADC_ConfigChannel+0x7ac>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d111      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003616:	4619      	mov	r1, r3
 8003618:	480c      	ldr	r0, [pc, #48]	; (800364c <HAL_ADC_ConfigChannel+0x7a4>)
 800361a:	f7ff f984 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
 800361e:	e008      	b.n	8003632 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800363a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800363e:	4618      	mov	r0, r3
 8003640:	37d8      	adds	r7, #216	; 0xd8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	80080000 	.word	0x80080000
 800364c:	50040300 	.word	0x50040300
 8003650:	c7520000 	.word	0xc7520000
 8003654:	50040000 	.word	0x50040000
 8003658:	20000000 	.word	0x20000000
 800365c:	053e2d63 	.word	0x053e2d63
 8003660:	cb840000 	.word	0xcb840000
 8003664:	80000001 	.word	0x80000001

08003668 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800367c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d003      	beq.n	800368c <HAL_CAN_GetRxMessage+0x24>
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b02      	cmp	r3, #2
 8003688:	f040 80f3 	bne.w	8003872 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10e      	bne.n	80036b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0303 	and.w	r3, r3, #3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0e7      	b.n	8003880 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0d8      	b.n	8003880 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	331b      	adds	r3, #27
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	4413      	add	r3, r2
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0204 	and.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10c      	bne.n	8003706 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	331b      	adds	r3, #27
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	0d5b      	lsrs	r3, r3, #21
 80036fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e00b      	b.n	800371e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	331b      	adds	r3, #27
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	4413      	add	r3, r2
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	331b      	adds	r3, #27
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4413      	add	r3, r2
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0202 	and.w	r2, r3, #2
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	331b      	adds	r3, #27
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	331b      	adds	r3, #27
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	331b      	adds	r3, #27
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4413      	add	r3, r2
 8003786:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	4413      	add	r3, r2
 800379c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0a1a      	lsrs	r2, r3, #8
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0c1a      	lsrs	r2, r3, #16
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	3302      	adds	r3, #2
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0e1a      	lsrs	r2, r3, #24
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	3303      	adds	r3, #3
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	3304      	adds	r3, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0a1a      	lsrs	r2, r3, #8
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	3305      	adds	r3, #5
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	0c1a      	lsrs	r2, r3, #16
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	3306      	adds	r3, #6
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	0e1a      	lsrs	r2, r3, #24
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	3307      	adds	r3, #7
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d108      	bne.n	800385e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0220 	orr.w	r2, r2, #32
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	e007      	b.n	800386e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0220 	orr.w	r2, r2, #32
 800386c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e006      	b.n	8003880 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08a      	sub	sp, #40	; 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003894:	2300      	movs	r3, #0
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07c      	beq.n	80039cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2201      	movs	r2, #1
 80038e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f983 	bl	8003bfa <HAL_CAN_TxMailbox0CompleteCallback>
 80038f4:	e016      	b.n	8003924 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d004      	beq.n	800390a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	e00c      	b.n	8003924 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
 800391c:	e002      	b.n	8003924 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f989 	bl	8003c36 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d024      	beq.n	8003978 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003936:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f963 	bl	8003c0e <HAL_CAN_TxMailbox1CompleteCallback>
 8003948:	e016      	b.n	8003978 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	e00c      	b.n	8003978 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
 8003970:	e002      	b.n	8003978 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f969 	bl	8003c4a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d024      	beq.n	80039cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800398a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f943 	bl	8003c22 <HAL_CAN_TxMailbox2CompleteCallback>
 800399c:	e016      	b.n	80039cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	e00c      	b.n	80039cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	e002      	b.n	80039cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f949 	bl	8003c5e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f930 	bl	8003c72 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fe7e 	bl	800172c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00c      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d007      	beq.n	8003a54 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f912 	bl	8003c9a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f8f9 	bl	8003c86 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2210      	movs	r2, #16
 8003aae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f8fc 	bl	8003cae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d006      	beq.n	8003ad8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2208      	movs	r2, #8
 8003ad0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8f5 	bl	8003cc2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07b      	beq.n	8003bda <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d072      	beq.n	8003bd2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d008      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d043      	beq.n	8003bd2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03e      	beq.n	8003bd2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b5a:	2b60      	cmp	r3, #96	; 0x60
 8003b5c:	d02b      	beq.n	8003bb6 <HAL_CAN_IRQHandler+0x32a>
 8003b5e:	2b60      	cmp	r3, #96	; 0x60
 8003b60:	d82e      	bhi.n	8003bc0 <HAL_CAN_IRQHandler+0x334>
 8003b62:	2b50      	cmp	r3, #80	; 0x50
 8003b64:	d022      	beq.n	8003bac <HAL_CAN_IRQHandler+0x320>
 8003b66:	2b50      	cmp	r3, #80	; 0x50
 8003b68:	d82a      	bhi.n	8003bc0 <HAL_CAN_IRQHandler+0x334>
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d019      	beq.n	8003ba2 <HAL_CAN_IRQHandler+0x316>
 8003b6e:	2b40      	cmp	r3, #64	; 0x40
 8003b70:	d826      	bhi.n	8003bc0 <HAL_CAN_IRQHandler+0x334>
 8003b72:	2b30      	cmp	r3, #48	; 0x30
 8003b74:	d010      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x30c>
 8003b76:	2b30      	cmp	r3, #48	; 0x30
 8003b78:	d822      	bhi.n	8003bc0 <HAL_CAN_IRQHandler+0x334>
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d002      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x2f8>
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d005      	beq.n	8003b8e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003b82:	e01d      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b8c:	e019      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f043 0310 	orr.w	r3, r3, #16
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003b96:	e014      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	f043 0320 	orr.w	r3, r3, #32
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ba0:	e00f      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003baa:	e00a      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bb4:	e005      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_CAN_IRQHandler+0x336>
            break;
 8003bc0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bd0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fd fdc1 	bl	8001774 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d0a:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	60d3      	str	r3, [r2, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d301      	bcc.n	8003e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e4a:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <SysTick_Config+0x40>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e52:	210f      	movs	r1, #15
 8003e54:	f04f 30ff 	mov.w	r0, #4294967295
 8003e58:	f7ff ff8e 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <SysTick_Config+0x40>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e62:	4b04      	ldr	r3, [pc, #16]	; (8003e74 <SysTick_Config+0x40>)
 8003e64:	2207      	movs	r2, #7
 8003e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	e000e010 	.word	0xe000e010

08003e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff29 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ea0:	f7ff ff3e 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003ea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68b9      	ldr	r1, [r7, #8]
 8003eaa:	6978      	ldr	r0, [r7, #20]
 8003eac:	f7ff ff8e 	bl	8003dcc <NVIC_EncodePriority>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff5d 	bl	8003d78 <__NVIC_SetPriority>
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	4603      	mov	r3, r0
 8003ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff31 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff ffa2 	bl	8003e34 <SysTick_Config>
 8003ef0:	4603      	mov	r3, r0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e098      	b.n	8004040 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	4b4d      	ldr	r3, [pc, #308]	; (800404c <HAL_DMA_Init+0x150>)
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d80f      	bhi.n	8003f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_DMA_Init+0x154>)
 8003f22:	4413      	add	r3, r2
 8003f24:	4a4b      	ldr	r2, [pc, #300]	; (8004054 <HAL_DMA_Init+0x158>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	009a      	lsls	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a48      	ldr	r2, [pc, #288]	; (8004058 <HAL_DMA_Init+0x15c>)
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
 8003f38:	e00e      	b.n	8003f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <HAL_DMA_Init+0x160>)
 8003f42:	4413      	add	r3, r2
 8003f44:	4a43      	ldr	r2, [pc, #268]	; (8004054 <HAL_DMA_Init+0x158>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	009a      	lsls	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a42      	ldr	r2, [pc, #264]	; (8004060 <HAL_DMA_Init+0x164>)
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb2:	d039      	beq.n	8004028 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a27      	ldr	r2, [pc, #156]	; (8004058 <HAL_DMA_Init+0x15c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fbe:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f003 031c 	and.w	r3, r3, #28
 8003fca:	210f      	movs	r1, #15
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fd8:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe4:	f003 031c 	and.w	r3, r3, #28
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	491d      	ldr	r1, [pc, #116]	; (8004064 <HAL_DMA_Init+0x168>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
 8003ff2:	e019      	b.n	8004028 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_DMA_Init+0x16c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffc:	f003 031c 	and.w	r3, r3, #28
 8004000:	210f      	movs	r1, #15
 8004002:	fa01 f303 	lsl.w	r3, r1, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	4917      	ldr	r1, [pc, #92]	; (8004068 <HAL_DMA_Init+0x16c>)
 800400a:	4013      	ands	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_DMA_Init+0x16c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6859      	ldr	r1, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f003 031c 	and.w	r3, r3, #28
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	4911      	ldr	r1, [pc, #68]	; (8004068 <HAL_DMA_Init+0x16c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40020407 	.word	0x40020407
 8004050:	bffdfff8 	.word	0xbffdfff8
 8004054:	cccccccd 	.word	0xcccccccd
 8004058:	40020000 	.word	0x40020000
 800405c:	bffdfbf8 	.word	0xbffdfbf8
 8004060:	40020400 	.word	0x40020400
 8004064:	400200a8 	.word	0x400200a8
 8004068:	400204a8 	.word	0x400204a8

0800406c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_DMA_Start_IT+0x20>
 8004088:	2302      	movs	r3, #2
 800408a:	e04b      	b.n	8004124 <HAL_DMA_Start_IT+0xb8>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d13a      	bne.n	8004116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f95f 	bl	8004388 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 020e 	orr.w	r2, r2, #14
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e00f      	b.n	8004104 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 020a 	orr.w	r2, r2, #10
 8004102:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e005      	b.n	8004122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800411e:	2302      	movs	r3, #2
 8004120:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004122:	7dfb      	ldrb	r3, [r7, #23]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e022      	b.n	800419c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020e 	bic.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 021c 	and.w	r2, r3, #28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d005      	beq.n	80041cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2204      	movs	r2, #4
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
 80041ca:	e029      	b.n	8004220 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 020e 	bic.w	r2, r2, #14
 80041da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f003 021c 	and.w	r2, r3, #28
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2101      	movs	r1, #1
 80041fa:	fa01 f202 	lsl.w	r2, r1, r2
 80041fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
    }
  }
  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	f003 031c 	and.w	r3, r3, #28
 800424a:	2204      	movs	r2, #4
 800424c:	409a      	lsls	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d026      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7a>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d021      	beq.n	80042a4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0204 	bic.w	r2, r2, #4
 800427c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f003 021c 	and.w	r2, r3, #28
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2104      	movs	r1, #4
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	2b00      	cmp	r3, #0
 8004298:	d071      	beq.n	800437e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80042a2:	e06c      	b.n	800437e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	f003 031c 	and.w	r3, r3, #28
 80042ac:	2202      	movs	r2, #2
 80042ae:	409a      	lsls	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d02e      	beq.n	8004316 <HAL_DMA_IRQHandler+0xec>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d029      	beq.n	8004316 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 020a 	bic.w	r2, r2, #10
 80042de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ec:	f003 021c 	and.w	r2, r3, #28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	2102      	movs	r1, #2
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d038      	beq.n	800437e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004314:	e033      	b.n	800437e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f003 031c 	and.w	r3, r3, #28
 800431e:	2208      	movs	r2, #8
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02a      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d025      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 020e 	bic.w	r2, r2, #14
 8004342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	f003 021c 	and.w	r2, r3, #28
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f202 	lsl.w	r2, r1, r2
 8004356:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800437e:	bf00      	nop
 8004380:	bf00      	nop
}
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 021c 	and.w	r2, r3, #28
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f202 	lsl.w	r2, r1, r2
 80043a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b10      	cmp	r3, #16
 80043b8:	d108      	bne.n	80043cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ca:	e007      	b.n	80043dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	60da      	str	r2, [r3, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f6:	e154      	b.n	80046a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8146 	beq.w	800469c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d005      	beq.n	8004428 <HAL_GPIO_Init+0x40>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d130      	bne.n	800448a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	2203      	movs	r2, #3
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4013      	ands	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800445e:	2201      	movs	r2, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0201 	and.w	r2, r3, #1
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b03      	cmp	r3, #3
 8004494:	d017      	beq.n	80044c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d123      	bne.n	800451a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4013      	ands	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	08da      	lsrs	r2, r3, #3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3208      	adds	r2, #8
 8004514:	6939      	ldr	r1, [r7, #16]
 8004516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	2203      	movs	r2, #3
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	43db      	mvns	r3, r3
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4013      	ands	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f003 0203 	and.w	r2, r3, #3
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a0 	beq.w	800469c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_GPIO_Init+0x2d8>)
 800455e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004560:	4a57      	ldr	r2, [pc, #348]	; (80046c0 <HAL_GPIO_Init+0x2d8>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6613      	str	r3, [r2, #96]	; 0x60
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <HAL_GPIO_Init+0x2d8>)
 800456a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004574:	4a53      	ldr	r2, [pc, #332]	; (80046c4 <HAL_GPIO_Init+0x2dc>)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	3302      	adds	r3, #2
 800457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	220f      	movs	r2, #15
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800459e:	d019      	beq.n	80045d4 <HAL_GPIO_Init+0x1ec>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a49      	ldr	r2, [pc, #292]	; (80046c8 <HAL_GPIO_Init+0x2e0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d013      	beq.n	80045d0 <HAL_GPIO_Init+0x1e8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a48      	ldr	r2, [pc, #288]	; (80046cc <HAL_GPIO_Init+0x2e4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00d      	beq.n	80045cc <HAL_GPIO_Init+0x1e4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a47      	ldr	r2, [pc, #284]	; (80046d0 <HAL_GPIO_Init+0x2e8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <HAL_GPIO_Init+0x1e0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a46      	ldr	r2, [pc, #280]	; (80046d4 <HAL_GPIO_Init+0x2ec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d101      	bne.n	80045c4 <HAL_GPIO_Init+0x1dc>
 80045c0:	2304      	movs	r3, #4
 80045c2:	e008      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045c4:	2307      	movs	r3, #7
 80045c6:	e006      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045c8:	2303      	movs	r3, #3
 80045ca:	e004      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e002      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_GPIO_Init+0x1ee>
 80045d4:	2300      	movs	r3, #0
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	f002 0203 	and.w	r2, r2, #3
 80045dc:	0092      	lsls	r2, r2, #2
 80045de:	4093      	lsls	r3, r2
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045e6:	4937      	ldr	r1, [pc, #220]	; (80046c4 <HAL_GPIO_Init+0x2dc>)
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4013      	ands	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004618:	4a2f      	ldr	r2, [pc, #188]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004642:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004648:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	43db      	mvns	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004672:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004696:	4a10      	ldr	r2, [pc, #64]	; (80046d8 <HAL_GPIO_Init+0x2f0>)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f aea3 	bne.w	80043f8 <HAL_GPIO_Init+0x10>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40010000 	.word	0x40010000
 80046c8:	48000400 	.word	0x48000400
 80046cc:	48000800 	.word	0x48000800
 80046d0:	48000c00 	.word	0x48000c00
 80046d4:	48001000 	.word	0x48001000
 80046d8:	40010400 	.word	0x40010400

080046dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	460b      	mov	r3, r1
 80046e6:	807b      	strh	r3, [r7, #2]
 80046e8:	4613      	mov	r3, r2
 80046ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046ec:	787b      	ldrb	r3, [r7, #1]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046f2:	887a      	ldrh	r2, [r7, #2]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046f8:	e002      	b.n	8004700 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046fa:	887a      	ldrh	r2, [r7, #2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800471c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <HAL_PWREx_GetVoltageRange+0x18>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004738:	4618      	mov	r0, r3
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40007000 	.word	0x40007000

08004748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d130      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004758:	4b23      	ldr	r3, [pc, #140]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d038      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004766:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800476e:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004770:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2232      	movs	r2, #50	; 0x32
 800477c:	fb02 f303 	mul.w	r3, r2, r3
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	0c9b      	lsrs	r3, r3, #18
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478c:	e002      	b.n	8004794 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b01      	subs	r3, #1
 8004792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004794:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a0:	d102      	bne.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f2      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d110      	bne.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047ba:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c6:	d007      	beq.n	80047d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047c8:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d0:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40007000 	.word	0x40007000
 80047ec:	20000000 	.word	0x20000000
 80047f0:	431bde83 	.word	0x431bde83

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f000 bc02 	b.w	800500c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004808:	4b96      	ldr	r3, [pc, #600]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004812:	4b94      	ldr	r3, [pc, #592]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80e4 	beq.w	80049f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_RCC_OscConfig+0x4c>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	f040 808b 	bne.w	800494e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 8087 	bne.w	800494e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004840:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_OscConfig+0x64>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e3d9      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <HAL_RCC_OscConfig+0x7e>
 8004868:	4b7e      	ldr	r3, [pc, #504]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004870:	e005      	b.n	800487e <HAL_RCC_OscConfig+0x8a>
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	4293      	cmp	r3, r2
 8004880:	d223      	bcs.n	80048ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd8a 	bl	80053a0 <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e3ba      	b.n	800500c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a72      	ldr	r2, [pc, #456]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	496d      	ldr	r1, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b4:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	4968      	ldr	r1, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	e025      	b.n	8004916 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048d0:	f043 0308 	orr.w	r3, r3, #8
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4960      	ldr	r1, [pc, #384]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e8:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	495b      	ldr	r1, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd4a 	bl	80053a0 <RCC_SetFlashLatencyFromMSIRange>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e37a      	b.n	800500c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004916:	f000 fc81 	bl	800521c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b51      	ldr	r3, [pc, #324]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	4950      	ldr	r1, [pc, #320]	; (8004a68 <HAL_RCC_OscConfig+0x274>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <HAL_RCC_OscConfig+0x278>)
 8004934:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <HAL_RCC_OscConfig+0x27c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd ff60 	bl	8002800 <HAL_InitTick>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d052      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	e35e      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d032      	beq.n	80049bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004956:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004962:	f7fd ff9d 	bl	80028a0 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800496a:	f7fd ff99 	bl	80028a0 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e347      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498e:	f043 0308 	orr.w	r3, r3, #8
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4930      	ldr	r1, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	492b      	ldr	r1, [pc, #172]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
 80049ba:	e01a      	b.n	80049f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c8:	f7fd ff6a 	bl	80028a0 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d0:	f7fd ff66 	bl	80028a0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e314      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1dc>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d073      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x21c>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d10e      	bne.n	8004a28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d063      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d15f      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e2f1      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d106      	bne.n	8004a40 <HAL_RCC_OscConfig+0x24c>
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e025      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a48:	d114      	bne.n	8004a74 <HAL_RCC_OscConfig+0x280>
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a02      	ldr	r2, [pc, #8]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e013      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	08008b60 	.word	0x08008b60
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	20000004 	.word	0x20000004
 8004a74:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a9f      	ldr	r2, [pc, #636]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b9d      	ldr	r3, [pc, #628]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a9c      	ldr	r2, [pc, #624]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd ff04 	bl	80028a0 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd ff00 	bl	80028a0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e2ae      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aae:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2a8>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fef0 	bl	80028a0 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd feec 	bl	80028a0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e29a      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad6:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2d0>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d060      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_OscConfig+0x310>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d116      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b04:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x328>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e277      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	4973      	ldr	r1, [pc, #460]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	e040      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d023      	beq.n	8004b82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3a:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6e      	ldr	r2, [pc, #440]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd feab 	bl	80028a0 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fea7 	bl	80028a0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e255      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b60:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b62      	ldr	r3, [pc, #392]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	495f      	ldr	r1, [pc, #380]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	e018      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b82:	4b5d      	ldr	r3, [pc, #372]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fe87 	bl	80028a0 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b96:	f7fd fe83 	bl	80028a0 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e231      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bce:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fe62 	bl	80028a0 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fe5e 	bl	80028a0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e20c      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCC_OscConfig+0x3ec>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c08:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fe45 	bl	80028a0 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fe41 	bl	80028a0 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1ef      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1ef      	bne.n	8004c1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a6 	beq.w	8004d94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6593      	str	r3, [r2, #88]	; 0x58
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c70:	2301      	movs	r3, #1
 8004c72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d118      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fe08 	bl	80028a0 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c94:	f7fd fe04 	bl	80028a0 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1b2      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4d8>
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cca:	e029      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_OscConfig+0x50c>
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf4:	e014      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	4b9a      	ldr	r3, [pc, #616]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	4a99      	ldr	r2, [pc, #612]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d10:	4b96      	ldr	r3, [pc, #600]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	4a95      	ldr	r2, [pc, #596]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d016      	beq.n	8004d56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd fdba 	bl	80028a0 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd fdb6 	bl	80028a0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e162      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	4b89      	ldr	r3, [pc, #548]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ed      	beq.n	8004d30 <HAL_RCC_OscConfig+0x53c>
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd fda3 	bl	80028a0 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fd9f 	bl	80028a0 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e14b      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d74:	4b7d      	ldr	r3, [pc, #500]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ed      	bne.n	8004d5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d82:	7ffb      	ldrb	r3, [r7, #31]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b78      	ldr	r3, [pc, #480]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a77      	ldr	r2, [pc, #476]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004da8:	4b70      	ldr	r3, [pc, #448]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dae:	4a6f      	ldr	r2, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd fd72 	bl	80028a0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc0:	f7fd fd6e 	bl	80028a0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e11c      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dd2:	4b66      	ldr	r3, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x5cc>
 8004de0:	e01b      	b.n	8004e1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004de2:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fd fd55 	bl	80028a0 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dfa:	f7fd fd51 	bl	80028a0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e0ff      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e0c:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ef      	bne.n	8004dfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80f3 	beq.w	800500a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f040 80c9 	bne.w	8004fc0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d12c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d123      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d11b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d113      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	3b01      	subs	r3, #1
 8004e82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d109      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	3b01      	subs	r3, #1
 8004e96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d06b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d062      	beq.n	8004f68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ea2:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0ac      	b.n	800500c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2d      	ldr	r2, [pc, #180]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004eb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ebe:	f7fd fcef 	bl	80028a0 <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec6:	f7fd fceb 	bl	80028a0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e099      	b.n	800500c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed8:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee4:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <HAL_RCC_OscConfig+0x77c>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	0112      	lsls	r2, r2, #4
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004efe:	0212      	lsls	r2, r2, #8
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f06:	0852      	lsrs	r2, r2, #1
 8004f08:	3a01      	subs	r2, #1
 8004f0a:	0552      	lsls	r2, r2, #21
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f12:	0852      	lsrs	r2, r2, #1
 8004f14:	3a01      	subs	r2, #1
 8004f16:	0652      	lsls	r2, r2, #25
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f1e:	06d2      	lsls	r2, r2, #27
 8004f20:	430a      	orrs	r2, r1
 8004f22:	4912      	ldr	r1, [pc, #72]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f40:	f7fd fcae 	bl	80028a0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd fcaa 	bl	80028a0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e058      	b.n	800500c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <HAL_RCC_OscConfig+0x778>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f66:	e050      	b.n	800500a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e04f      	b.n	800500c <HAL_RCC_OscConfig+0x818>
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f74:	4b27      	ldr	r3, [pc, #156]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d144      	bne.n	800500a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a23      	ldr	r2, [pc, #140]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f8c:	4b21      	ldr	r3, [pc, #132]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f98:	f7fd fc82 	bl	80028a0 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fd fc7e 	bl	80028a0 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e02c      	b.n	800500c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb2:	4b18      	ldr	r3, [pc, #96]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x7ac>
 8004fbe:	e024      	b.n	800500a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d01f      	beq.n	8005006 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a12      	ldr	r2, [pc, #72]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7fd fc65 	bl	80028a0 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fda:	f7fd fc61 	bl	80028a0 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e00f      	b.n	800500c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1f0      	bne.n	8004fda <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	4905      	ldr	r1, [pc, #20]	; (8005014 <HAL_RCC_OscConfig+0x820>)
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCC_OscConfig+0x824>)
 8005000:	4013      	ands	r3, r2
 8005002:	60cb      	str	r3, [r1, #12]
 8005004:	e001      	b.n	800500a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000
 8005018:	feeefffc 	.word	0xfeeefffc

0800501c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0e7      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b75      	ldr	r3, [pc, #468]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d910      	bls.n	8005060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b72      	ldr	r3, [pc, #456]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 0207 	bic.w	r2, r3, #7
 8005046:	4970      	ldr	r1, [pc, #448]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b6e      	ldr	r3, [pc, #440]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0cf      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	4b66      	ldr	r3, [pc, #408]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005078:	429a      	cmp	r2, r3
 800507a:	d908      	bls.n	800508e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507c:	4b63      	ldr	r3, [pc, #396]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4960      	ldr	r1, [pc, #384]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d04c      	beq.n	8005134 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d107      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a2:	4b5a      	ldr	r3, [pc, #360]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d121      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e0a6      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ba:	4b54      	ldr	r3, [pc, #336]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d115      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e09a      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050d2:	4b4e      	ldr	r3, [pc, #312]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e08e      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e2:	4b4a      	ldr	r3, [pc, #296]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e086      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b46      	ldr	r3, [pc, #280]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4943      	ldr	r1, [pc, #268]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005104:	f7fd fbcc 	bl	80028a0 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd fbc8 	bl	80028a0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e06e      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b3a      	ldr	r3, [pc, #232]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d010      	beq.n	8005162 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	4b31      	ldr	r3, [pc, #196]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514c:	429a      	cmp	r2, r3
 800514e:	d208      	bcs.n	8005162 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005150:	4b2e      	ldr	r3, [pc, #184]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	492b      	ldr	r1, [pc, #172]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005162:	4b29      	ldr	r3, [pc, #164]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d210      	bcs.n	8005192 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005170:	4b25      	ldr	r3, [pc, #148]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f023 0207 	bic.w	r2, r3, #7
 8005178:	4923      	ldr	r1, [pc, #140]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4313      	orrs	r3, r2
 800517e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005180:	4b21      	ldr	r3, [pc, #132]	; (8005208 <HAL_RCC_ClockConfig+0x1ec>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d001      	beq.n	8005192 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e036      	b.n	8005200 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4918      	ldr	r1, [pc, #96]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0308 	and.w	r3, r3, #8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4910      	ldr	r1, [pc, #64]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051d0:	f000 f824 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <HAL_RCC_ClockConfig+0x1f0>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	490b      	ldr	r1, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x1f4>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ec:	4a09      	ldr	r2, [pc, #36]	; (8005214 <HAL_RCC_ClockConfig+0x1f8>)
 80051ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051f0:	4b09      	ldr	r3, [pc, #36]	; (8005218 <HAL_RCC_ClockConfig+0x1fc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fd fb03 	bl	8002800 <HAL_InitTick>
 80051fa:	4603      	mov	r3, r0
 80051fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80051fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40022000 	.word	0x40022000
 800520c:	40021000 	.word	0x40021000
 8005210:	08008b60 	.word	0x08008b60
 8005214:	20000000 	.word	0x20000000
 8005218:	20000004 	.word	0x20000004

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522a:	4b3e      	ldr	r3, [pc, #248]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005234:	4b3b      	ldr	r3, [pc, #236]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d005      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x34>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d121      	bne.n	800528e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d11e      	bne.n	800528e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800525c:	4b31      	ldr	r3, [pc, #196]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 800525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005262:	0a1b      	lsrs	r3, r3, #8
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	e005      	b.n	8005278 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800526c:	4b2d      	ldr	r3, [pc, #180]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	091b      	lsrs	r3, r3, #4
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <HAL_RCC_GetSysClockFreq+0x10c>)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10d      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d102      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005294:	4b25      	ldr	r3, [pc, #148]	; (800532c <HAL_RCC_GetSysClockFreq+0x110>)
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	e004      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052a0:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_RCC_GetSysClockFreq+0x110>)
 80052a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d134      	bne.n	8005314 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052aa:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d003      	beq.n	80052c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d003      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0xac>
 80052c0:	e005      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCC_GetSysClockFreq+0x110>)
 80052c4:	617b      	str	r3, [r7, #20]
      break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052c8:	4b18      	ldr	r3, [pc, #96]	; (800532c <HAL_RCC_GetSysClockFreq+0x110>)
 80052ca:	617b      	str	r3, [r7, #20]
      break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	617b      	str	r3, [r7, #20]
      break;
 80052d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	3301      	adds	r3, #1
 80052e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	fb03 f202 	mul.w	r2, r3, r2
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	0e5b      	lsrs	r3, r3, #25
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	3301      	adds	r3, #1
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005312:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005314:	69bb      	ldr	r3, [r7, #24]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	08008b78 	.word	0x08008b78
 800532c:	00f42400 	.word	0x00f42400

08005330 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <HAL_RCC_GetHCLKFreq+0x14>)
 8005336:	681b      	ldr	r3, [r3, #0]
}
 8005338:	4618      	mov	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000000 	.word	0x20000000

08005348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800534c:	f7ff fff0 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	0a1b      	lsrs	r3, r3, #8
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40021000 	.word	0x40021000
 8005370:	08008b70 	.word	0x08008b70

08005374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005378:	f7ff ffda 	bl	8005330 <HAL_RCC_GetHCLKFreq>
 800537c:	4602      	mov	r2, r0
 800537e:	4b06      	ldr	r3, [pc, #24]	; (8005398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	0adb      	lsrs	r3, r3, #11
 8005384:	f003 0307 	and.w	r3, r3, #7
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <HAL_RCC_GetPCLK2Freq+0x28>)
 800538a:	5ccb      	ldrb	r3, [r1, r3]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40021000 	.word	0x40021000
 800539c:	08008b70 	.word	0x08008b70

080053a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053ac:	4b2a      	ldr	r3, [pc, #168]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b8:	f7ff f9b8 	bl	800472c <HAL_PWREx_GetVoltageRange>
 80053bc:	6178      	str	r0, [r7, #20]
 80053be:	e014      	b.n	80053ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053c0:	4b25      	ldr	r3, [pc, #148]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c4:	4a24      	ldr	r2, [pc, #144]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6593      	str	r3, [r2, #88]	; 0x58
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d8:	f7ff f9a8 	bl	800472c <HAL_PWREx_GetVoltageRange>
 80053dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e2:	4a1d      	ldr	r2, [pc, #116]	; (8005458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f0:	d10b      	bne.n	800540a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d919      	bls.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2ba0      	cmp	r3, #160	; 0xa0
 80053fc:	d902      	bls.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053fe:	2302      	movs	r3, #2
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e013      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005404:	2301      	movs	r3, #1
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	e010      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d902      	bls.n	8005416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005410:	2303      	movs	r3, #3
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	e00a      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b80      	cmp	r3, #128	; 0x80
 800541a:	d102      	bne.n	8005422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800541c:	2302      	movs	r3, #2
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e004      	b.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d101      	bne.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005428:	2301      	movs	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800542c:	4b0b      	ldr	r3, [pc, #44]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 0207 	bic.w	r2, r3, #7
 8005434:	4909      	ldr	r1, [pc, #36]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d001      	beq.n	800544e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40021000 	.word	0x40021000
 800545c:	40022000 	.word	0x40022000

08005460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005468:	2300      	movs	r3, #0
 800546a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800546c:	2300      	movs	r3, #0
 800546e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005478:	2b00      	cmp	r3, #0
 800547a:	d031      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005480:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005484:	d01a      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800548a:	d814      	bhi.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005494:	d10f      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005496:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4a5c      	ldr	r2, [pc, #368]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a2:	e00c      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f9f0 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	74fb      	strb	r3, [r7, #19]
      break;
 80054ba:	e000      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80054bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054c4:	4b51      	ldr	r3, [pc, #324]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	494e      	ldr	r1, [pc, #312]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054da:	e001      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 809e 	beq.w	800562a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ee:	2300      	movs	r3, #0
 80054f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054f2:	4b46      	ldr	r3, [pc, #280]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005508:	4b40      	ldr	r3, [pc, #256]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	4a3f      	ldr	r2, [pc, #252]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	6593      	str	r3, [r2, #88]	; 0x58
 8005514:	4b3d      	ldr	r3, [pc, #244]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005520:	2301      	movs	r3, #1
 8005522:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005524:	4b3a      	ldr	r3, [pc, #232]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a39      	ldr	r2, [pc, #228]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005530:	f7fd f9b6 	bl	80028a0 <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005536:	e009      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005538:	f7fd f9b2 	bl	80028a0 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d902      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	74fb      	strb	r3, [r7, #19]
        break;
 800554a:	e005      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800554c:	4b30      	ldr	r3, [pc, #192]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ef      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005558:	7cfb      	ldrb	r3, [r7, #19]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d15a      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800555e:	4b2b      	ldr	r3, [pc, #172]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005568:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01e      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d019      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800557a:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800557c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005584:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800558e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800559e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d016      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd f972 	bl	80028a0 <HAL_GetTick>
 80055bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055be:	e00b      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fd f96e 	bl	80028a0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d902      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	74fb      	strb	r3, [r7, #19]
            break;
 80055d6:	e006      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d8:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ec      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	4904      	ldr	r1, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005602:	e009      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	74bb      	strb	r3, [r7, #18]
 8005608:	e006      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005618:	7c7b      	ldrb	r3, [r7, #17]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4b9b      	ldr	r3, [pc, #620]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	4a9a      	ldr	r2, [pc, #616]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005636:	4b95      	ldr	r3, [pc, #596]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f023 0203 	bic.w	r2, r3, #3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4991      	ldr	r1, [pc, #580]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005658:	4b8c      	ldr	r3, [pc, #560]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f023 020c 	bic.w	r2, r3, #12
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	4989      	ldr	r1, [pc, #548]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800567a:	4b84      	ldr	r3, [pc, #528]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	4980      	ldr	r1, [pc, #512]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800569c:	4b7b      	ldr	r3, [pc, #492]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	4978      	ldr	r1, [pc, #480]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056be:	4b73      	ldr	r3, [pc, #460]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	496f      	ldr	r1, [pc, #444]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056e0:	4b6a      	ldr	r3, [pc, #424]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	4967      	ldr	r1, [pc, #412]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005702:	4b62      	ldr	r3, [pc, #392]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	495e      	ldr	r1, [pc, #376]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005724:	4b59      	ldr	r3, [pc, #356]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	4956      	ldr	r1, [pc, #344]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005746:	4b51      	ldr	r3, [pc, #324]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	494d      	ldr	r1, [pc, #308]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d028      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005776:	4945      	ldr	r1, [pc, #276]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005786:	d106      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005788:	4b40      	ldr	r3, [pc, #256]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	4a3f      	ldr	r2, [pc, #252]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800578e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005792:	60d3      	str	r3, [r2, #12]
 8005794:	e011      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800579e:	d10c      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3304      	adds	r3, #4
 80057a4:	2101      	movs	r1, #1
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f872 	bl	8005890 <RCCEx_PLLSAI1_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d028      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	492d      	ldr	r1, [pc, #180]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e4:	d106      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e6:	4b29      	ldr	r3, [pc, #164]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057f0:	60d3      	str	r3, [r2, #12]
 80057f2:	e011      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	2101      	movs	r1, #1
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f843 	bl	8005890 <RCCEx_PLLSAI1_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01c      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005832:	4916      	ldr	r1, [pc, #88]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800583e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	2102      	movs	r1, #2
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f820 	bl	8005890 <RCCEx_PLLSAI1_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800586a:	4b08      	ldr	r3, [pc, #32]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	4904      	ldr	r1, [pc, #16]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005880:	7cbb      	ldrb	r3, [r7, #18]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800589e:	4b74      	ldr	r3, [pc, #464]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058aa:	4b71      	ldr	r3, [pc, #452]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f003 0203 	and.w	r2, r3, #3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d10d      	bne.n	80058d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
       ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058c2:	4b6b      	ldr	r3, [pc, #428]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
       ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d047      	beq.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
 80058da:	e044      	b.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d018      	beq.n	8005916 <RCCEx_PLLSAI1_Config+0x86>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d825      	bhi.n	8005934 <RCCEx_PLLSAI1_Config+0xa4>
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <RCCEx_PLLSAI1_Config+0x62>
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d009      	beq.n	8005904 <RCCEx_PLLSAI1_Config+0x74>
 80058f0:	e020      	b.n	8005934 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058f2:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11d      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005902:	e01a      	b.n	800593a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005904:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590c:	2b00      	cmp	r3, #0
 800590e:	d116      	bne.n	800593e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005914:	e013      	b.n	800593e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005916:	4b56      	ldr	r3, [pc, #344]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005922:	4b53      	ldr	r3, [pc, #332]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005932:	e006      	b.n	8005942 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e004      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593a:	bf00      	nop
 800593c:	e002      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005942:	bf00      	nop
    }

    if(status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800594a:	4b49      	ldr	r3, [pc, #292]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	430b      	orrs	r3, r1
 8005960:	4943      	ldr	r1, [pc, #268]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005962:	4313      	orrs	r3, r2
 8005964:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d17c      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800596c:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005972:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005978:	f7fc ff92 	bl	80028a0 <HAL_GetTick>
 800597c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800597e:	e009      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005980:	f7fc ff8e 	bl	80028a0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d902      	bls.n	8005994 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	73fb      	strb	r3, [r7, #15]
        break;
 8005992:	e005      	b.n	80059a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ef      	bne.n	8005980 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d15f      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ac:	4b30      	ldr	r3, [pc, #192]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6892      	ldr	r2, [r2, #8]
 80059bc:	0211      	lsls	r1, r2, #8
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	06d2      	lsls	r2, r2, #27
 80059c4:	430a      	orrs	r2, r1
 80059c6:	492a      	ldr	r1, [pc, #168]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	610b      	str	r3, [r1, #16]
 80059cc:	e027      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d112      	bne.n	80059fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d4:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6892      	ldr	r2, [r2, #8]
 80059e4:	0211      	lsls	r1, r2, #8
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6912      	ldr	r2, [r2, #16]
 80059ea:	0852      	lsrs	r2, r2, #1
 80059ec:	3a01      	subs	r2, #1
 80059ee:	0552      	lsls	r2, r2, #21
 80059f0:	430a      	orrs	r2, r1
 80059f2:	491f      	ldr	r1, [pc, #124]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	610b      	str	r3, [r1, #16]
 80059f8:	e011      	b.n	8005a1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059fa:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6892      	ldr	r2, [r2, #8]
 8005a0a:	0211      	lsls	r1, r2, #8
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6952      	ldr	r2, [r2, #20]
 8005a10:	0852      	lsrs	r2, r2, #1
 8005a12:	3a01      	subs	r2, #1
 8005a14:	0652      	lsls	r2, r2, #25
 8005a16:	430a      	orrs	r2, r1
 8005a18:	4915      	ldr	r1, [pc, #84]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fc ff39 	bl	80028a0 <HAL_GetTick>
 8005a2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a30:	e009      	b.n	8005a46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a32:	f7fc ff35 	bl	80028a0 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d902      	bls.n	8005a46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	73fb      	strb	r3, [r7, #15]
          break;
 8005a44:	e005      	b.n	8005a52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a46:	4b0a      	ldr	r3, [pc, #40]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0ef      	beq.n	8005a32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5a:	691a      	ldr	r2, [r3, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	4903      	ldr	r1, [pc, #12]	; (8005a70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000

08005a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e049      	b.n	8005b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fc fb20 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fa74 	bl	8005fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10f      	bne.n	8005b6a <HAL_TIM_Base_Stop_IT+0x48>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	f240 4344 	movw	r3, #1092	; 0x444
 8005b54:	4013      	ands	r3, r2
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <HAL_TIM_Base_Stop_IT+0x48>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0202 	mvn.w	r2, #2
 8005bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9ce 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f9c0 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f9d1 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0204 	mvn.w	r2, #4
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2202      	movs	r2, #2
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a4 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f996 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f9a7 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d122      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d11b      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0208 	mvn.w	r2, #8
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f97a 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f96c 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f97d 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0310 	and.w	r3, r3, #16
 8005c8e:	2b10      	cmp	r3, #16
 8005c90:	d122      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d11b      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0210 	mvn.w	r2, #16
 8005ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2208      	movs	r2, #8
 8005cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f950 	bl	8005f64 <HAL_TIM_IC_CaptureCallback>
 8005cc4:	e005      	b.n	8005cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f942 	bl	8005f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f953 	bl	8005f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d10e      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d107      	bne.n	8005d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f06f 0201 	mvn.w	r2, #1
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fb ff0e 	bl	8001b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b80      	cmp	r3, #128	; 0x80
 8005d10:	d10e      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b80      	cmp	r3, #128	; 0x80
 8005d1e:	d107      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 faa6 	bl	800627c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3e:	d10e      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4a:	2b80      	cmp	r3, #128	; 0x80
 8005d4c:	d107      	bne.n	8005d5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fa99 	bl	8006290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d10e      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d76:	2b40      	cmp	r3, #64	; 0x40
 8005d78:	d107      	bne.n	8005d8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f901 	bl	8005f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b20      	cmp	r3, #32
 8005d96:	d10e      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d107      	bne.n	8005db6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0220 	mvn.w	r2, #32
 8005dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fa59 	bl	8006268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b084      	sub	sp, #16
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_TIM_ConfigClockSource+0x1c>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0b6      	b.n	8005f48 <HAL_TIM_ConfigClockSource+0x18a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dfc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e04:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e16:	d03e      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0xd8>
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	f200 8087 	bhi.w	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	f000 8086 	beq.w	8005f34 <HAL_TIM_ConfigClockSource+0x176>
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d87f      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e2e:	2b70      	cmp	r3, #112	; 0x70
 8005e30:	d01a      	beq.n	8005e68 <HAL_TIM_ConfigClockSource+0xaa>
 8005e32:	2b70      	cmp	r3, #112	; 0x70
 8005e34:	d87b      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e36:	2b60      	cmp	r3, #96	; 0x60
 8005e38:	d050      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0x11e>
 8005e3a:	2b60      	cmp	r3, #96	; 0x60
 8005e3c:	d877      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e3e:	2b50      	cmp	r3, #80	; 0x50
 8005e40:	d03c      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0xfe>
 8005e42:	2b50      	cmp	r3, #80	; 0x50
 8005e44:	d873      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d058      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0x13e>
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d86f      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e4e:	2b30      	cmp	r3, #48	; 0x30
 8005e50:	d064      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x15e>
 8005e52:	2b30      	cmp	r3, #48	; 0x30
 8005e54:	d86b      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d060      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x15e>
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d867      	bhi.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05c      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x15e>
 8005e62:	2b10      	cmp	r3, #16
 8005e64:	d05a      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x15e>
 8005e66:	e062      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	6899      	ldr	r1, [r3, #8]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f000 f970 	bl	800615c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
      break;
 8005e94:	e04f      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6899      	ldr	r1, [r3, #8]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f000 f959 	bl	800615c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb8:	609a      	str	r2, [r3, #8]
      break;
 8005eba:	e03c      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f000 f8cd 	bl	8006068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2150      	movs	r1, #80	; 0x50
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f926 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005eda:	e02c      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f000 f8ec 	bl	80060c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2160      	movs	r1, #96	; 0x60
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f916 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005efa:	e01c      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f000 f8ad 	bl	8006068 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2140      	movs	r1, #64	; 0x40
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f906 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e00c      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 f8fd 	bl	8006126 <TIM_ITRx_SetConfig>
      break;
 8005f2c:	e003      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
      break;
 8005f32:	e000      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2a      	ldr	r2, [pc, #168]	; (800605c <TIM_Base_SetConfig+0xbc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x20>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a21      	ldr	r2, [pc, #132]	; (800605c <TIM_Base_SetConfig+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1e      	ldr	r2, [pc, #120]	; (8006060 <TIM_Base_SetConfig+0xc0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0x52>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <TIM_Base_SetConfig+0xc4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0c      	ldr	r2, [pc, #48]	; (800605c <TIM_Base_SetConfig+0xbc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d007      	beq.n	8006040 <TIM_Base_SetConfig+0xa0>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a0b      	ldr	r2, [pc, #44]	; (8006060 <TIM_Base_SetConfig+0xc0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d003      	beq.n	8006040 <TIM_Base_SetConfig+0xa0>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <TIM_Base_SetConfig+0xc4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d103      	bne.n	8006048 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	615a      	str	r2, [r3, #20]
}
 800604e:	bf00      	nop
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40014000 	.word	0x40014000
 8006064:	40014400 	.word	0x40014400

08006068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 030a 	bic.w	r3, r3, #10
 80060a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0210 	bic.w	r2, r3, #16
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4313      	orrs	r3, r2
 800610c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006126:	b480      	push	{r7}
 8006128:	b085      	sub	sp, #20
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	f043 0307 	orr.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	609a      	str	r2, [r3, #8]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	431a      	orrs	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4313      	orrs	r3, r2
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	609a      	str	r2, [r3, #8]
}
 8006190:	bf00      	nop
 8006192:	371c      	adds	r7, #28
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e04f      	b.n	8006254 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a21      	ldr	r2, [pc, #132]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d108      	bne.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a14      	ldr	r2, [pc, #80]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d004      	beq.n	8006228 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a10      	ldr	r2, [pc, #64]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10c      	bne.n	8006242 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4313      	orrs	r3, r2
 8006238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40014000 	.word	0x40014000

08006268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e040      	b.n	8006338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fffc 	bl	80022c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fbb6 	bl	8006a54 <UART_SetConfig>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e022      	b.n	8006338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fe04 	bl	8006f08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800630e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689a      	ldr	r2, [r3, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800631e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fe8b 	bl	800704c <UART_CheckIdleState>
 8006336:	4603      	mov	r3, r0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08a      	sub	sp, #40	; 0x28
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006354:	2b20      	cmp	r3, #32
 8006356:	f040 8082 	bne.w	800645e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_UART_Transmit+0x26>
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e07a      	b.n	8006460 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Transmit+0x38>
 8006374:	2302      	movs	r3, #2
 8006376:	e073      	b.n	8006460 <HAL_UART_Transmit+0x120>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2221      	movs	r2, #33	; 0x21
 800638c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638e:	f7fc fa87 	bl	80028a0 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d108      	bne.n	80063c0 <HAL_UART_Transmit+0x80>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e003      	b.n	80063c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063d0:	e02d      	b.n	800642e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2200      	movs	r2, #0
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fe7e 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e039      	b.n	8006460 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	881a      	ldrh	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fe:	b292      	uxth	r2, r2
 8006400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3302      	adds	r3, #2
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e008      	b.n	800641c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	b292      	uxth	r2, r2
 8006414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1cb      	bne.n	80063d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2200      	movs	r2, #0
 8006442:	2140      	movs	r1, #64	; 0x40
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fe4a 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e005      	b.n	8006460 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800645a:	2300      	movs	r3, #0
 800645c:	e000      	b.n	8006460 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800645e:	2302      	movs	r3, #2
  }
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b0ba      	sub	sp, #232	; 0xe8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800648e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006492:	f640 030f 	movw	r3, #2063	; 0x80f
 8006496:	4013      	ands	r3, r2
 8006498:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800649c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d115      	bne.n	80064d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00f      	beq.n	80064d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d009      	beq.n	80064d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 82a6 	beq.w	8006a12 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	4798      	blx	r3
      }
      return;
 80064ce:	e2a0      	b.n	8006a12 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8117 	beq.w	8006708 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064ea:	4b85      	ldr	r3, [pc, #532]	; (8006700 <HAL_UART_IRQHandler+0x298>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 810a 	beq.w	8006708 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d011      	beq.n	8006524 <HAL_UART_IRQHandler+0xbc>
 8006500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00b      	beq.n	8006524 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2201      	movs	r2, #1
 8006512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651a:	f043 0201 	orr.w	r2, r3, #1
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d011      	beq.n	8006554 <HAL_UART_IRQHandler+0xec>
 8006530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2202      	movs	r2, #2
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654a:	f043 0204 	orr.w	r2, r3, #4
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d011      	beq.n	8006584 <HAL_UART_IRQHandler+0x11c>
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2204      	movs	r2, #4
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f003 0308 	and.w	r3, r3, #8
 800658c:	2b00      	cmp	r3, #0
 800658e:	d017      	beq.n	80065c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006594:	f003 0320 	and.w	r3, r3, #32
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800659c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2208      	movs	r2, #8
 80065ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065b6:	f043 0208 	orr.w	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d012      	beq.n	80065f2 <HAL_UART_IRQHandler+0x18a>
 80065cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00c      	beq.n	80065f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 820c 	beq.w	8006a16 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800660a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800662c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800663e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006642:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006646:	2b00      	cmp	r3, #0
 8006648:	d04f      	beq.n	80066ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fed8 	bl	8007400 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665a:	2b40      	cmp	r3, #64	; 0x40
 800665c:	d141      	bne.n	80066e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006674:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800668a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800668e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1d9      	bne.n	800665e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d013      	beq.n	80066da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b6:	4a13      	ldr	r2, [pc, #76]	; (8006704 <HAL_UART_IRQHandler+0x29c>)
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fd fd72 	bl	80041a8 <HAL_DMA_Abort_IT>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d017      	beq.n	80066fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d8:	e00f      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9b0 	bl	8006a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	e00b      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f9ac 	bl	8006a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e8:	e007      	b.n	80066fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9a8 	bl	8006a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80066f8:	e18d      	b.n	8006a16 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fa:	bf00      	nop
    return;
 80066fc:	e18b      	b.n	8006a16 <HAL_UART_IRQHandler+0x5ae>
 80066fe:	bf00      	nop
 8006700:	04000120 	.word	0x04000120
 8006704:	0800769f 	.word	0x0800769f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800670c:	2b01      	cmp	r3, #1
 800670e:	f040 8146 	bne.w	800699e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006716:	f003 0310 	and.w	r3, r3, #16
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 813f 	beq.w	800699e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006724:	f003 0310 	and.w	r3, r3, #16
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 8138 	beq.w	800699e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2210      	movs	r2, #16
 8006734:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	f040 80b4 	bne.w	80068ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006752:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 815f 	beq.w	8006a1a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006766:	429a      	cmp	r2, r3
 8006768:	f080 8157 	bcs.w	8006a1a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 8085 	bne.w	8006892 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	461a      	mov	r2, r3
 80067ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1da      	bne.n	8006788 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3308      	adds	r3, #8
 80067d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067e4:	f023 0301 	bic.w	r3, r3, #1
 80067e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e1      	bne.n	80067d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3308      	adds	r3, #8
 8006814:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800681e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006832:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006834:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e3      	bne.n	800680e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2220      	movs	r2, #32
 800684a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006862:	f023 0310 	bic.w	r3, r3, #16
 8006866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006874:	65bb      	str	r3, [r7, #88]	; 0x58
 8006876:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800687a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e4      	bne.n	8006852 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	4618      	mov	r0, r3
 800688e:	f7fd fc4d 	bl	800412c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800689e:	b29b      	uxth	r3, r3
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb fe8a 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068ac:	e0b5      	b.n	8006a1a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80a7 	beq.w	8006a1e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80068d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 80a2 	beq.w	8006a1e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800690a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e4      	bne.n	80068da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3308      	adds	r3, #8
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	623b      	str	r3, [r7, #32]
   return(result);
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3308      	adds	r3, #8
 8006930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006934:	633a      	str	r2, [r7, #48]	; 0x30
 8006936:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800693a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e3      	bne.n	8006910 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	e853 3f00 	ldrex	r3, [r3]
 8006966:	60fb      	str	r3, [r7, #12]
   return(result);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0310 	bic.w	r3, r3, #16
 800696e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800697c:	61fb      	str	r3, [r7, #28]
 800697e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	69b9      	ldr	r1, [r7, #24]
 8006982:	69fa      	ldr	r2, [r7, #28]
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	617b      	str	r3, [r7, #20]
   return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e4      	bne.n	800695a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006990:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fb fe12 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800699c:	e03f      	b.n	8006a1e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <HAL_UART_IRQHandler+0x560>
 80069aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d008      	beq.n	80069c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 feac 	bl	800771e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069c6:	e02d      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01c      	beq.n	8006a22 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
    }
    return;
 80069f0:	e017      	b.n	8006a22 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d012      	beq.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
 80069fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00c      	beq.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fe5d 	bl	80076ca <UART_EndTransmit_IT>
    return;
 8006a10:	e008      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a12:	bf00      	nop
 8006a14:	e006      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006a16:	bf00      	nop
 8006a18:	e004      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a1a:	bf00      	nop
 8006a1c:	e002      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006a22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a24:	37e8      	adds	r7, #232	; 0xe8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a58:	b08a      	sub	sp, #40	; 0x28
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	431a      	orrs	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4b9e      	ldr	r3, [pc, #632]	; (8006cfc <UART_SetConfig+0x2a8>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a93      	ldr	r2, [pc, #588]	; (8006d00 <UART_SetConfig+0x2ac>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	4313      	orrs	r3, r2
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a8a      	ldr	r2, [pc, #552]	; (8006d04 <UART_SetConfig+0x2b0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d126      	bne.n	8006b2c <UART_SetConfig+0xd8>
 8006ade:	4b8a      	ldr	r3, [pc, #552]	; (8006d08 <UART_SetConfig+0x2b4>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d81b      	bhi.n	8006b24 <UART_SetConfig+0xd0>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0xa0>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b15 	.word	0x08006b15
 8006afc:	08006b0d 	.word	0x08006b0d
 8006b00:	08006b1d 	.word	0x08006b1d
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e0ab      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b12:	e0a7      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e0a3      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e09f      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e09b      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a76      	ldr	r2, [pc, #472]	; (8006d0c <UART_SetConfig+0x2b8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d138      	bne.n	8006ba8 <UART_SetConfig+0x154>
 8006b36:	4b74      	ldr	r3, [pc, #464]	; (8006d08 <UART_SetConfig+0x2b4>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b0c      	cmp	r3, #12
 8006b42:	d82d      	bhi.n	8006ba0 <UART_SetConfig+0x14c>
 8006b44:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0xf8>)
 8006b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4a:	bf00      	nop
 8006b4c:	08006b81 	.word	0x08006b81
 8006b50:	08006ba1 	.word	0x08006ba1
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006ba1 	.word	0x08006ba1
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006ba1 	.word	0x08006ba1
 8006b64:	08006ba1 	.word	0x08006ba1
 8006b68:	08006ba1 	.word	0x08006ba1
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006ba1 	.word	0x08006ba1
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b86:	e06d      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b88:	2302      	movs	r3, #2
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8e:	e069      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b90:	2304      	movs	r3, #4
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b96:	e065      	b.n	8006c64 <UART_SetConfig+0x210>
 8006b98:	2308      	movs	r3, #8
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9e:	e061      	b.n	8006c64 <UART_SetConfig+0x210>
 8006ba0:	2310      	movs	r3, #16
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba6:	e05d      	b.n	8006c64 <UART_SetConfig+0x210>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a58      	ldr	r2, [pc, #352]	; (8006d10 <UART_SetConfig+0x2bc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d125      	bne.n	8006bfe <UART_SetConfig+0x1aa>
 8006bb2:	4b55      	ldr	r3, [pc, #340]	; (8006d08 <UART_SetConfig+0x2b4>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bbc:	2b30      	cmp	r3, #48	; 0x30
 8006bbe:	d016      	beq.n	8006bee <UART_SetConfig+0x19a>
 8006bc0:	2b30      	cmp	r3, #48	; 0x30
 8006bc2:	d818      	bhi.n	8006bf6 <UART_SetConfig+0x1a2>
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d00a      	beq.n	8006bde <UART_SetConfig+0x18a>
 8006bc8:	2b20      	cmp	r3, #32
 8006bca:	d814      	bhi.n	8006bf6 <UART_SetConfig+0x1a2>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <UART_SetConfig+0x182>
 8006bd0:	2b10      	cmp	r3, #16
 8006bd2:	d008      	beq.n	8006be6 <UART_SetConfig+0x192>
 8006bd4:	e00f      	b.n	8006bf6 <UART_SetConfig+0x1a2>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bdc:	e042      	b.n	8006c64 <UART_SetConfig+0x210>
 8006bde:	2302      	movs	r3, #2
 8006be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be4:	e03e      	b.n	8006c64 <UART_SetConfig+0x210>
 8006be6:	2304      	movs	r3, #4
 8006be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bec:	e03a      	b.n	8006c64 <UART_SetConfig+0x210>
 8006bee:	2308      	movs	r3, #8
 8006bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf4:	e036      	b.n	8006c64 <UART_SetConfig+0x210>
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfc:	e032      	b.n	8006c64 <UART_SetConfig+0x210>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3f      	ldr	r2, [pc, #252]	; (8006d00 <UART_SetConfig+0x2ac>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d12a      	bne.n	8006c5e <UART_SetConfig+0x20a>
 8006c08:	4b3f      	ldr	r3, [pc, #252]	; (8006d08 <UART_SetConfig+0x2b4>)
 8006c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c16:	d01a      	beq.n	8006c4e <UART_SetConfig+0x1fa>
 8006c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1c:	d81b      	bhi.n	8006c56 <UART_SetConfig+0x202>
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d00c      	beq.n	8006c3e <UART_SetConfig+0x1ea>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d815      	bhi.n	8006c56 <UART_SetConfig+0x202>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <UART_SetConfig+0x1e2>
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d008      	beq.n	8006c46 <UART_SetConfig+0x1f2>
 8006c34:	e00f      	b.n	8006c56 <UART_SetConfig+0x202>
 8006c36:	2300      	movs	r3, #0
 8006c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3c:	e012      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c44:	e00e      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c46:	2304      	movs	r3, #4
 8006c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4c:	e00a      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c54:	e006      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c56:	2310      	movs	r3, #16
 8006c58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c5c:	e002      	b.n	8006c64 <UART_SetConfig+0x210>
 8006c5e:	2310      	movs	r3, #16
 8006c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a25      	ldr	r2, [pc, #148]	; (8006d00 <UART_SetConfig+0x2ac>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f040 808a 	bne.w	8006d84 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d824      	bhi.n	8006cc2 <UART_SetConfig+0x26e>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <UART_SetConfig+0x22c>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ca5 	.word	0x08006ca5
 8006c84:	08006cc3 	.word	0x08006cc3
 8006c88:	08006cad 	.word	0x08006cad
 8006c8c:	08006cc3 	.word	0x08006cc3
 8006c90:	08006cb3 	.word	0x08006cb3
 8006c94:	08006cc3 	.word	0x08006cc3
 8006c98:	08006cc3 	.word	0x08006cc3
 8006c9c:	08006cc3 	.word	0x08006cc3
 8006ca0:	08006cbb 	.word	0x08006cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca4:	f7fe fb50 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8006ca8:	61f8      	str	r0, [r7, #28]
        break;
 8006caa:	e010      	b.n	8006cce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cac:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <UART_SetConfig+0x2c0>)
 8006cae:	61fb      	str	r3, [r7, #28]
        break;
 8006cb0:	e00d      	b.n	8006cce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb2:	f7fe fab3 	bl	800521c <HAL_RCC_GetSysClockFreq>
 8006cb6:	61f8      	str	r0, [r7, #28]
        break;
 8006cb8:	e009      	b.n	8006cce <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cbe:	61fb      	str	r3, [r7, #28]
        break;
 8006cc0:	e005      	b.n	8006cce <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ccc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 8109 	beq.w	8006ee8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	69fa      	ldr	r2, [r7, #28]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d305      	bcc.n	8006cf2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d912      	bls.n	8006d18 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cf8:	e0f6      	b.n	8006ee8 <UART_SetConfig+0x494>
 8006cfa:	bf00      	nop
 8006cfc:	efff69f3 	.word	0xefff69f3
 8006d00:	40008000 	.word	0x40008000
 8006d04:	40013800 	.word	0x40013800
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	40004400 	.word	0x40004400
 8006d10:	40004800 	.word	0x40004800
 8006d14:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	461c      	mov	r4, r3
 8006d1e:	4615      	mov	r5, r2
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	022b      	lsls	r3, r5, #8
 8006d2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d2e:	0222      	lsls	r2, r4, #8
 8006d30:	68f9      	ldr	r1, [r7, #12]
 8006d32:	6849      	ldr	r1, [r1, #4]
 8006d34:	0849      	lsrs	r1, r1, #1
 8006d36:	2000      	movs	r0, #0
 8006d38:	4688      	mov	r8, r1
 8006d3a:	4681      	mov	r9, r0
 8006d3c:	eb12 0a08 	adds.w	sl, r2, r8
 8006d40:	eb43 0b09 	adc.w	fp, r3, r9
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d52:	4650      	mov	r0, sl
 8006d54:	4659      	mov	r1, fp
 8006d56:	f7f9 feb1 	bl	8000abc <__aeabi_uldivmod>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4613      	mov	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d68:	d308      	bcc.n	8006d7c <UART_SetConfig+0x328>
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d70:	d204      	bcs.n	8006d7c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	e0b5      	b.n	8006ee8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d82:	e0b1      	b.n	8006ee8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8c:	d15d      	bne.n	8006e4a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006d8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d827      	bhi.n	8006de6 <UART_SetConfig+0x392>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x348>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006dc9 	.word	0x08006dc9
 8006da4:	08006dd1 	.word	0x08006dd1
 8006da8:	08006de7 	.word	0x08006de7
 8006dac:	08006dd7 	.word	0x08006dd7
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006de7 	.word	0x08006de7
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006ddf 	.word	0x08006ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fe fac2 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	61f8      	str	r0, [r7, #28]
        break;
 8006dc6:	e014      	b.n	8006df2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fe fad4 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
        break;
 8006dce:	e010      	b.n	8006df2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd0:	4b4c      	ldr	r3, [pc, #304]	; (8006f04 <UART_SetConfig+0x4b0>)
 8006dd2:	61fb      	str	r3, [r7, #28]
        break;
 8006dd4:	e00d      	b.n	8006df2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd6:	f7fe fa21 	bl	800521c <HAL_RCC_GetSysClockFreq>
 8006dda:	61f8      	str	r0, [r7, #28]
        break;
 8006ddc:	e009      	b.n	8006df2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de2:	61fb      	str	r3, [r7, #28]
        break;
 8006de4:	e005      	b.n	8006df2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d077      	beq.n	8006ee8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	005a      	lsls	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	441a      	add	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b0f      	cmp	r3, #15
 8006e12:	d916      	bls.n	8006e42 <UART_SetConfig+0x3ee>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d212      	bcs.n	8006e42 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	f023 030f 	bic.w	r3, r3, #15
 8006e24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	8afb      	ldrh	r3, [r7, #22]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	8afa      	ldrh	r2, [r7, #22]
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	e052      	b.n	8006ee8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e48:	e04e      	b.n	8006ee8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d827      	bhi.n	8006ea2 <UART_SetConfig+0x44e>
 8006e52:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x404>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	08006ea3 	.word	0x08006ea3
 8006e68:	08006e93 	.word	0x08006e93
 8006e6c:	08006ea3 	.word	0x08006ea3
 8006e70:	08006ea3 	.word	0x08006ea3
 8006e74:	08006ea3 	.word	0x08006ea3
 8006e78:	08006e9b 	.word	0x08006e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fe fa64 	bl	8005348 <HAL_RCC_GetPCLK1Freq>
 8006e80:	61f8      	str	r0, [r7, #28]
        break;
 8006e82:	e014      	b.n	8006eae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e84:	f7fe fa76 	bl	8005374 <HAL_RCC_GetPCLK2Freq>
 8006e88:	61f8      	str	r0, [r7, #28]
        break;
 8006e8a:	e010      	b.n	8006eae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <UART_SetConfig+0x4b0>)
 8006e8e:	61fb      	str	r3, [r7, #28]
        break;
 8006e90:	e00d      	b.n	8006eae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e92:	f7fe f9c3 	bl	800521c <HAL_RCC_GetSysClockFreq>
 8006e96:	61f8      	str	r0, [r7, #28]
        break;
 8006e98:	e009      	b.n	8006eae <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9e:	61fb      	str	r3, [r7, #28]
        break;
 8006ea0:	e005      	b.n	8006eae <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006eac:	bf00      	nop
    }

    if (pclk != 0U)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d019      	beq.n	8006ee8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	085a      	lsrs	r2, r3, #1
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d909      	bls.n	8006ee2 <UART_SetConfig+0x48e>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d205      	bcs.n	8006ee2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60da      	str	r2, [r3, #12]
 8006ee0:	e002      	b.n	8006ee8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ef4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3728      	adds	r7, #40	; 0x28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	00f42400 	.word	0x00f42400

08006f08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01a      	beq.n	800701e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007006:	d10a      	bne.n	800701e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	605a      	str	r2, [r3, #4]
  }
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800705c:	f7fb fc20 	bl	80028a0 <HAL_GetTick>
 8007060:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0308 	and.w	r3, r3, #8
 800706c:	2b08      	cmp	r3, #8
 800706e:	d10e      	bne.n	800708e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f82d 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e023      	b.n	80070d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b04      	cmp	r3, #4
 800709a:	d10e      	bne.n	80070ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f817 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e00d      	b.n	80070d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b09c      	sub	sp, #112	; 0x70
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ee:	e0a5      	b.n	800723c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f6:	f000 80a1 	beq.w	800723c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070fa:	f7fb fbd1 	bl	80028a0 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <UART_WaitOnFlagUntilTimeout+0x32>
 800710a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800710c:	2b00      	cmp	r3, #0
 800710e:	d13e      	bne.n	800718e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007124:	667b      	str	r3, [r7, #100]	; 0x64
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800712e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007130:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007136:	e841 2300 	strex	r3, r2, [r1]
 800713a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800713c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e6      	bne.n	8007110 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	663b      	str	r3, [r7, #96]	; 0x60
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007162:	64ba      	str	r2, [r7, #72]	; 0x48
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d1e5      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2220      	movs	r2, #32
 8007180:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e067      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d04f      	beq.n	800723c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071aa:	d147      	bne.n	800723c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	461a      	mov	r2, r3
 80071d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
 80071d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e6      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3308      	adds	r3, #8
 80071ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	613b      	str	r3, [r7, #16]
   return(result);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3308      	adds	r3, #8
 8007206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007208:	623a      	str	r2, [r7, #32]
 800720a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	69f9      	ldr	r1, [r7, #28]
 800720e:	6a3a      	ldr	r2, [r7, #32]
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	61bb      	str	r3, [r7, #24]
   return(result);
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e5      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2220      	movs	r2, #32
 8007226:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e010      	b.n	800725e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69da      	ldr	r2, [r3, #28]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	4013      	ands	r3, r2
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	bf0c      	ite	eq
 800724c:	2301      	moveq	r3, #1
 800724e:	2300      	movne	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	461a      	mov	r2, r3
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	429a      	cmp	r2, r3
 8007258:	f43f af4a 	beq.w	80070f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3770      	adds	r7, #112	; 0x70
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b096      	sub	sp, #88	; 0x58
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	88fa      	ldrh	r2, [r7, #6]
 8007280:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2222      	movs	r2, #34	; 0x22
 8007290:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007296:	2b00      	cmp	r3, #0
 8007298:	d02b      	beq.n	80072f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	4a42      	ldr	r2, [pc, #264]	; (80073a8 <UART_Start_Receive_DMA+0x140>)
 80072a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a41      	ldr	r2, [pc, #260]	; (80073ac <UART_Start_Receive_DMA+0x144>)
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	4a40      	ldr	r2, [pc, #256]	; (80073b0 <UART_Start_Receive_DMA+0x148>)
 80072b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	2200      	movs	r2, #0
 80072b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	4619      	mov	r1, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	461a      	mov	r2, r3
 80072cc:	88fb      	ldrh	r3, [r7, #6]
 80072ce:	f7fc fecd 	bl	800406c <HAL_DMA_Start_IT>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2210      	movs	r2, #16
 80072dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e055      	b.n	800739e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d018      	beq.n	8007334 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007316:	657b      	str	r3, [r7, #84]	; 0x54
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007320:	64bb      	str	r3, [r7, #72]	; 0x48
 8007322:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800732e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3308      	adds	r3, #8
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	653b      	str	r3, [r7, #80]	; 0x50
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007354:	637a      	str	r2, [r7, #52]	; 0x34
 8007356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800735a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	613b      	str	r3, [r7, #16]
   return(result);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007388:	623a      	str	r2, [r7, #32]
 800738a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	69f9      	ldr	r1, [r7, #28]
 800738e:	6a3a      	ldr	r2, [r7, #32]
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	61bb      	str	r3, [r7, #24]
   return(result);
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e5      	bne.n	8007368 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3758      	adds	r7, #88	; 0x58
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	080074c7 	.word	0x080074c7
 80073ac:	080075eb 	.word	0x080075eb
 80073b0:	08007623 	.word	0x08007623

080073b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b089      	sub	sp, #36	; 0x24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073d0:	61fb      	str	r3, [r7, #28]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	61bb      	str	r3, [r7, #24]
 80073dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6979      	ldr	r1, [r7, #20]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	613b      	str	r3, [r7, #16]
   return(result);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80073f4:	bf00      	nop
 80073f6:	3724      	adds	r7, #36	; 0x24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b095      	sub	sp, #84	; 0x54
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800741c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007426:	643b      	str	r3, [r7, #64]	; 0x40
 8007428:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800742c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e6      	bne.n	8007408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	61fb      	str	r3, [r7, #28]
   return(result);
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	64bb      	str	r3, [r7, #72]	; 0x48
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3308      	adds	r3, #8
 8007458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800745a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007472:	2b01      	cmp	r3, #1
 8007474:	d118      	bne.n	80074a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60bb      	str	r3, [r7, #8]
   return(result);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	647b      	str	r3, [r7, #68]	; 0x44
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	69ba      	ldr	r2, [r7, #24]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	613b      	str	r3, [r7, #16]
   return(result);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e6      	bne.n	8007476 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074ba:	bf00      	nop
 80074bc:	3754      	adds	r7, #84	; 0x54
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b09c      	sub	sp, #112	; 0x70
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d170      	bne.n	80075c4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	461a      	mov	r2, r3
 8007506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007508:	65bb      	str	r3, [r7, #88]	; 0x58
 800750a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800750e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e6      	bne.n	80074ea <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800751c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752e:	f023 0301 	bic.w	r3, r3, #1
 8007532:	667b      	str	r3, [r7, #100]	; 0x64
 8007534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800753c:	647a      	str	r2, [r7, #68]	; 0x44
 800753e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	623b      	str	r3, [r7, #32]
   return(result);
 8007560:	6a3b      	ldr	r3, [r7, #32]
 8007562:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007566:	663b      	str	r3, [r7, #96]	; 0x60
 8007568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3308      	adds	r3, #8
 800756e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007570:	633a      	str	r2, [r7, #48]	; 0x30
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007578:	e841 2300 	strex	r3, r2, [r1]
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e5      	bne.n	8007550 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	2220      	movs	r2, #32
 8007588:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800758a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758e:	2b01      	cmp	r3, #1
 8007590:	d118      	bne.n	80075c4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	60fb      	str	r3, [r7, #12]
   return(result);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0310 	bic.w	r3, r3, #16
 80075a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b0:	61fb      	str	r3, [r7, #28]
 80075b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	69b9      	ldr	r1, [r7, #24]
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	617b      	str	r3, [r7, #20]
   return(result);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d107      	bne.n	80075dc <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075d2:	4619      	mov	r1, r3
 80075d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80075d6:	f7fa fff3 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075da:	e002      	b.n	80075e2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 80075dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80075de:	f7fa ffcd 	bl	800257c <HAL_UART_RxCpltCallback>
}
 80075e2:	bf00      	nop
 80075e4:	3770      	adds	r7, #112	; 0x70
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d109      	bne.n	8007614 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7fa ffd7 	bl	80025c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007612:	e002      	b.n	800761a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff fa09 	bl	8006a2c <HAL_UART_RxHalfCpltCallback>
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007634:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800763a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007646:	2b80      	cmp	r3, #128	; 0x80
 8007648:	d109      	bne.n	800765e <UART_DMAError+0x3c>
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b21      	cmp	r3, #33	; 0x21
 800764e:	d106      	bne.n	800765e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2200      	movs	r2, #0
 8007654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007658:	6978      	ldr	r0, [r7, #20]
 800765a:	f7ff feab 	bl	80073b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d109      	bne.n	8007680 <UART_DMAError+0x5e>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b22      	cmp	r3, #34	; 0x22
 8007670:	d106      	bne.n	8007680 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800767a:	6978      	ldr	r0, [r7, #20]
 800767c:	f7ff fec0 	bl	8007400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007686:	f043 0210 	orr.w	r2, r3, #16
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007690:	6978      	ldr	r0, [r7, #20]
 8007692:	f7ff f9d5 	bl	8006a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff f9bf 	bl	8006a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c2:	bf00      	nop
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b088      	sub	sp, #32
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076e6:	61fb      	str	r3, [r7, #28]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	613b      	str	r3, [r7, #16]
   return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7fa ff61 	bl	80025d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007716:	bf00      	nop
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b08c      	sub	sp, #48	; 0x30
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	4613      	mov	r3, r2
 800773e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007744:	2b20      	cmp	r3, #32
 8007746:	d14a      	bne.n	80077de <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e043      	b.n	80077e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8007762:	2302      	movs	r3, #2
 8007764:	e03c      	b.n	80077e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007774:	88fb      	ldrh	r3, [r7, #6]
 8007776:	461a      	mov	r2, r3
 8007778:	68b9      	ldr	r1, [r7, #8]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fd74 	bl	8007268 <UART_Start_Receive_DMA>
 8007780:	4603      	mov	r3, r0
 8007782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800778a:	2b00      	cmp	r3, #0
 800778c:	d124      	bne.n	80077d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007792:	2b01      	cmp	r3, #1
 8007794:	d11d      	bne.n	80077d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2210      	movs	r2, #16
 800779c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	617b      	str	r3, [r7, #20]
   return(result);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f043 0310 	orr.w	r3, r3, #16
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	6a39      	ldr	r1, [r7, #32]
 80077c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 80077d0:	e002      	b.n	80077d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80077d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077dc:	e000      	b.n	80077e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 80077de:	2302      	movs	r3, #2
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3730      	adds	r7, #48	; 0x30
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <__errno>:
 80077e8:	4b01      	ldr	r3, [pc, #4]	; (80077f0 <__errno+0x8>)
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000000c 	.word	0x2000000c

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f001 f918 	bl	8008a3c <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08008df8 	.word	0x08008df8
 8007830:	08008df8 	.word	0x08008df8
 8007834:	08008df8 	.word	0x08008df8
 8007838:	08008dfc 	.word	0x08008dfc

0800783c <memset>:
 800783c:	4402      	add	r2, r0
 800783e:	4603      	mov	r3, r0
 8007840:	4293      	cmp	r3, r2
 8007842:	d100      	bne.n	8007846 <memset+0xa>
 8007844:	4770      	bx	lr
 8007846:	f803 1b01 	strb.w	r1, [r3], #1
 800784a:	e7f9      	b.n	8007840 <memset+0x4>

0800784c <strstr>:
 800784c:	780a      	ldrb	r2, [r1, #0]
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	b96a      	cbnz	r2, 800786e <strstr+0x22>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	429a      	cmp	r2, r3
 8007856:	d109      	bne.n	800786c <strstr+0x20>
 8007858:	460c      	mov	r4, r1
 800785a:	4605      	mov	r5, r0
 800785c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f6      	beq.n	8007852 <strstr+0x6>
 8007864:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007868:	429e      	cmp	r6, r3
 800786a:	d0f7      	beq.n	800785c <strstr+0x10>
 800786c:	3001      	adds	r0, #1
 800786e:	7803      	ldrb	r3, [r0, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1ef      	bne.n	8007854 <strstr+0x8>
 8007874:	4618      	mov	r0, r3
 8007876:	e7ec      	b.n	8007852 <strstr+0x6>

08007878 <strtok>:
 8007878:	4b16      	ldr	r3, [pc, #88]	; (80078d4 <strtok+0x5c>)
 800787a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800787c:	681e      	ldr	r6, [r3, #0]
 800787e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007880:	4605      	mov	r5, r0
 8007882:	b9fc      	cbnz	r4, 80078c4 <strtok+0x4c>
 8007884:	2050      	movs	r0, #80	; 0x50
 8007886:	9101      	str	r1, [sp, #4]
 8007888:	f000 f90e 	bl	8007aa8 <malloc>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	65b0      	str	r0, [r6, #88]	; 0x58
 8007890:	4602      	mov	r2, r0
 8007892:	b920      	cbnz	r0, 800789e <strtok+0x26>
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <strtok+0x60>)
 8007896:	4811      	ldr	r0, [pc, #68]	; (80078dc <strtok+0x64>)
 8007898:	2157      	movs	r1, #87	; 0x57
 800789a:	f000 f8d5 	bl	8007a48 <__assert_func>
 800789e:	e9c0 4400 	strd	r4, r4, [r0]
 80078a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80078a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80078aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80078ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80078b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80078b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80078ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80078be:	6184      	str	r4, [r0, #24]
 80078c0:	7704      	strb	r4, [r0, #28]
 80078c2:	6244      	str	r4, [r0, #36]	; 0x24
 80078c4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80078c6:	2301      	movs	r3, #1
 80078c8:	4628      	mov	r0, r5
 80078ca:	b002      	add	sp, #8
 80078cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078d0:	f000 b806 	b.w	80078e0 <__strtok_r>
 80078d4:	2000000c 	.word	0x2000000c
 80078d8:	08008bac 	.word	0x08008bac
 80078dc:	08008bc3 	.word	0x08008bc3

080078e0 <__strtok_r>:
 80078e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e2:	b908      	cbnz	r0, 80078e8 <__strtok_r+0x8>
 80078e4:	6810      	ldr	r0, [r2, #0]
 80078e6:	b188      	cbz	r0, 800790c <__strtok_r+0x2c>
 80078e8:	4604      	mov	r4, r0
 80078ea:	4620      	mov	r0, r4
 80078ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80078f0:	460f      	mov	r7, r1
 80078f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80078f6:	b91e      	cbnz	r6, 8007900 <__strtok_r+0x20>
 80078f8:	b965      	cbnz	r5, 8007914 <__strtok_r+0x34>
 80078fa:	6015      	str	r5, [r2, #0]
 80078fc:	4628      	mov	r0, r5
 80078fe:	e005      	b.n	800790c <__strtok_r+0x2c>
 8007900:	42b5      	cmp	r5, r6
 8007902:	d1f6      	bne.n	80078f2 <__strtok_r+0x12>
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <__strtok_r+0xa>
 8007908:	6014      	str	r4, [r2, #0]
 800790a:	7003      	strb	r3, [r0, #0]
 800790c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790e:	461c      	mov	r4, r3
 8007910:	e00c      	b.n	800792c <__strtok_r+0x4c>
 8007912:	b915      	cbnz	r5, 800791a <__strtok_r+0x3a>
 8007914:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007918:	460e      	mov	r6, r1
 800791a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800791e:	42ab      	cmp	r3, r5
 8007920:	d1f7      	bne.n	8007912 <__strtok_r+0x32>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f3      	beq.n	800790e <__strtok_r+0x2e>
 8007926:	2300      	movs	r3, #0
 8007928:	f804 3c01 	strb.w	r3, [r4, #-1]
 800792c:	6014      	str	r4, [r2, #0]
 800792e:	e7ed      	b.n	800790c <__strtok_r+0x2c>

08007930 <_strtol_l.constprop.0>:
 8007930:	2b01      	cmp	r3, #1
 8007932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007936:	d001      	beq.n	800793c <_strtol_l.constprop.0+0xc>
 8007938:	2b24      	cmp	r3, #36	; 0x24
 800793a:	d906      	bls.n	800794a <_strtol_l.constprop.0+0x1a>
 800793c:	f7ff ff54 	bl	80077e8 <__errno>
 8007940:	2316      	movs	r3, #22
 8007942:	6003      	str	r3, [r0, #0]
 8007944:	2000      	movs	r0, #0
 8007946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007a30 <_strtol_l.constprop.0+0x100>
 800794e:	460d      	mov	r5, r1
 8007950:	462e      	mov	r6, r5
 8007952:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007956:	f814 700c 	ldrb.w	r7, [r4, ip]
 800795a:	f017 0708 	ands.w	r7, r7, #8
 800795e:	d1f7      	bne.n	8007950 <_strtol_l.constprop.0+0x20>
 8007960:	2c2d      	cmp	r4, #45	; 0x2d
 8007962:	d132      	bne.n	80079ca <_strtol_l.constprop.0+0x9a>
 8007964:	782c      	ldrb	r4, [r5, #0]
 8007966:	2701      	movs	r7, #1
 8007968:	1cb5      	adds	r5, r6, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d05b      	beq.n	8007a26 <_strtol_l.constprop.0+0xf6>
 800796e:	2b10      	cmp	r3, #16
 8007970:	d109      	bne.n	8007986 <_strtol_l.constprop.0+0x56>
 8007972:	2c30      	cmp	r4, #48	; 0x30
 8007974:	d107      	bne.n	8007986 <_strtol_l.constprop.0+0x56>
 8007976:	782c      	ldrb	r4, [r5, #0]
 8007978:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800797c:	2c58      	cmp	r4, #88	; 0x58
 800797e:	d14d      	bne.n	8007a1c <_strtol_l.constprop.0+0xec>
 8007980:	786c      	ldrb	r4, [r5, #1]
 8007982:	2310      	movs	r3, #16
 8007984:	3502      	adds	r5, #2
 8007986:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800798a:	f108 38ff 	add.w	r8, r8, #4294967295
 800798e:	f04f 0c00 	mov.w	ip, #0
 8007992:	fbb8 f9f3 	udiv	r9, r8, r3
 8007996:	4666      	mov	r6, ip
 8007998:	fb03 8a19 	mls	sl, r3, r9, r8
 800799c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80079a0:	f1be 0f09 	cmp.w	lr, #9
 80079a4:	d816      	bhi.n	80079d4 <_strtol_l.constprop.0+0xa4>
 80079a6:	4674      	mov	r4, lr
 80079a8:	42a3      	cmp	r3, r4
 80079aa:	dd24      	ble.n	80079f6 <_strtol_l.constprop.0+0xc6>
 80079ac:	f1bc 0f00 	cmp.w	ip, #0
 80079b0:	db1e      	blt.n	80079f0 <_strtol_l.constprop.0+0xc0>
 80079b2:	45b1      	cmp	r9, r6
 80079b4:	d31c      	bcc.n	80079f0 <_strtol_l.constprop.0+0xc0>
 80079b6:	d101      	bne.n	80079bc <_strtol_l.constprop.0+0x8c>
 80079b8:	45a2      	cmp	sl, r4
 80079ba:	db19      	blt.n	80079f0 <_strtol_l.constprop.0+0xc0>
 80079bc:	fb06 4603 	mla	r6, r6, r3, r4
 80079c0:	f04f 0c01 	mov.w	ip, #1
 80079c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079c8:	e7e8      	b.n	800799c <_strtol_l.constprop.0+0x6c>
 80079ca:	2c2b      	cmp	r4, #43	; 0x2b
 80079cc:	bf04      	itt	eq
 80079ce:	782c      	ldrbeq	r4, [r5, #0]
 80079d0:	1cb5      	addeq	r5, r6, #2
 80079d2:	e7ca      	b.n	800796a <_strtol_l.constprop.0+0x3a>
 80079d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80079d8:	f1be 0f19 	cmp.w	lr, #25
 80079dc:	d801      	bhi.n	80079e2 <_strtol_l.constprop.0+0xb2>
 80079de:	3c37      	subs	r4, #55	; 0x37
 80079e0:	e7e2      	b.n	80079a8 <_strtol_l.constprop.0+0x78>
 80079e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079e6:	f1be 0f19 	cmp.w	lr, #25
 80079ea:	d804      	bhi.n	80079f6 <_strtol_l.constprop.0+0xc6>
 80079ec:	3c57      	subs	r4, #87	; 0x57
 80079ee:	e7db      	b.n	80079a8 <_strtol_l.constprop.0+0x78>
 80079f0:	f04f 3cff 	mov.w	ip, #4294967295
 80079f4:	e7e6      	b.n	80079c4 <_strtol_l.constprop.0+0x94>
 80079f6:	f1bc 0f00 	cmp.w	ip, #0
 80079fa:	da05      	bge.n	8007a08 <_strtol_l.constprop.0+0xd8>
 80079fc:	2322      	movs	r3, #34	; 0x22
 80079fe:	6003      	str	r3, [r0, #0]
 8007a00:	4646      	mov	r6, r8
 8007a02:	b942      	cbnz	r2, 8007a16 <_strtol_l.constprop.0+0xe6>
 8007a04:	4630      	mov	r0, r6
 8007a06:	e79e      	b.n	8007946 <_strtol_l.constprop.0+0x16>
 8007a08:	b107      	cbz	r7, 8007a0c <_strtol_l.constprop.0+0xdc>
 8007a0a:	4276      	negs	r6, r6
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	d0f9      	beq.n	8007a04 <_strtol_l.constprop.0+0xd4>
 8007a10:	f1bc 0f00 	cmp.w	ip, #0
 8007a14:	d000      	beq.n	8007a18 <_strtol_l.constprop.0+0xe8>
 8007a16:	1e69      	subs	r1, r5, #1
 8007a18:	6011      	str	r1, [r2, #0]
 8007a1a:	e7f3      	b.n	8007a04 <_strtol_l.constprop.0+0xd4>
 8007a1c:	2430      	movs	r4, #48	; 0x30
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1b1      	bne.n	8007986 <_strtol_l.constprop.0+0x56>
 8007a22:	2308      	movs	r3, #8
 8007a24:	e7af      	b.n	8007986 <_strtol_l.constprop.0+0x56>
 8007a26:	2c30      	cmp	r4, #48	; 0x30
 8007a28:	d0a5      	beq.n	8007976 <_strtol_l.constprop.0+0x46>
 8007a2a:	230a      	movs	r3, #10
 8007a2c:	e7ab      	b.n	8007986 <_strtol_l.constprop.0+0x56>
 8007a2e:	bf00      	nop
 8007a30:	08008c5d 	.word	0x08008c5d

08007a34 <strtol>:
 8007a34:	4613      	mov	r3, r2
 8007a36:	460a      	mov	r2, r1
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4802      	ldr	r0, [pc, #8]	; (8007a44 <strtol+0x10>)
 8007a3c:	6800      	ldr	r0, [r0, #0]
 8007a3e:	f7ff bf77 	b.w	8007930 <_strtol_l.constprop.0>
 8007a42:	bf00      	nop
 8007a44:	2000000c 	.word	0x2000000c

08007a48 <__assert_func>:
 8007a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <__assert_func+0x2c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4605      	mov	r5, r0
 8007a54:	68d8      	ldr	r0, [r3, #12]
 8007a56:	b14c      	cbz	r4, 8007a6c <__assert_func+0x24>
 8007a58:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <__assert_func+0x30>)
 8007a5a:	9100      	str	r1, [sp, #0]
 8007a5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a60:	4906      	ldr	r1, [pc, #24]	; (8007a7c <__assert_func+0x34>)
 8007a62:	462b      	mov	r3, r5
 8007a64:	f000 f80e 	bl	8007a84 <fiprintf>
 8007a68:	f000 fcc4 	bl	80083f4 <abort>
 8007a6c:	4b04      	ldr	r3, [pc, #16]	; (8007a80 <__assert_func+0x38>)
 8007a6e:	461c      	mov	r4, r3
 8007a70:	e7f3      	b.n	8007a5a <__assert_func+0x12>
 8007a72:	bf00      	nop
 8007a74:	2000000c 	.word	0x2000000c
 8007a78:	08008c20 	.word	0x08008c20
 8007a7c:	08008c2d 	.word	0x08008c2d
 8007a80:	08008c5b 	.word	0x08008c5b

08007a84 <fiprintf>:
 8007a84:	b40e      	push	{r1, r2, r3}
 8007a86:	b503      	push	{r0, r1, lr}
 8007a88:	4601      	mov	r1, r0
 8007a8a:	ab03      	add	r3, sp, #12
 8007a8c:	4805      	ldr	r0, [pc, #20]	; (8007aa4 <fiprintf+0x20>)
 8007a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a92:	6800      	ldr	r0, [r0, #0]
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	f000 f919 	bl	8007ccc <_vfiprintf_r>
 8007a9a:	b002      	add	sp, #8
 8007a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa0:	b003      	add	sp, #12
 8007aa2:	4770      	bx	lr
 8007aa4:	2000000c 	.word	0x2000000c

08007aa8 <malloc>:
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <malloc+0xc>)
 8007aaa:	4601      	mov	r1, r0
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	f000 b86f 	b.w	8007b90 <_malloc_r>
 8007ab2:	bf00      	nop
 8007ab4:	2000000c 	.word	0x2000000c

08007ab8 <_free_r>:
 8007ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aba:	2900      	cmp	r1, #0
 8007abc:	d044      	beq.n	8007b48 <_free_r+0x90>
 8007abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac2:	9001      	str	r0, [sp, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f1a1 0404 	sub.w	r4, r1, #4
 8007aca:	bfb8      	it	lt
 8007acc:	18e4      	addlt	r4, r4, r3
 8007ace:	f000 feb9 	bl	8008844 <__malloc_lock>
 8007ad2:	4a1e      	ldr	r2, [pc, #120]	; (8007b4c <_free_r+0x94>)
 8007ad4:	9801      	ldr	r0, [sp, #4]
 8007ad6:	6813      	ldr	r3, [r2, #0]
 8007ad8:	b933      	cbnz	r3, 8007ae8 <_free_r+0x30>
 8007ada:	6063      	str	r3, [r4, #4]
 8007adc:	6014      	str	r4, [r2, #0]
 8007ade:	b003      	add	sp, #12
 8007ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ae4:	f000 beb4 	b.w	8008850 <__malloc_unlock>
 8007ae8:	42a3      	cmp	r3, r4
 8007aea:	d908      	bls.n	8007afe <_free_r+0x46>
 8007aec:	6825      	ldr	r5, [r4, #0]
 8007aee:	1961      	adds	r1, r4, r5
 8007af0:	428b      	cmp	r3, r1
 8007af2:	bf01      	itttt	eq
 8007af4:	6819      	ldreq	r1, [r3, #0]
 8007af6:	685b      	ldreq	r3, [r3, #4]
 8007af8:	1949      	addeq	r1, r1, r5
 8007afa:	6021      	streq	r1, [r4, #0]
 8007afc:	e7ed      	b.n	8007ada <_free_r+0x22>
 8007afe:	461a      	mov	r2, r3
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	b10b      	cbz	r3, 8007b08 <_free_r+0x50>
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d9fa      	bls.n	8007afe <_free_r+0x46>
 8007b08:	6811      	ldr	r1, [r2, #0]
 8007b0a:	1855      	adds	r5, r2, r1
 8007b0c:	42a5      	cmp	r5, r4
 8007b0e:	d10b      	bne.n	8007b28 <_free_r+0x70>
 8007b10:	6824      	ldr	r4, [r4, #0]
 8007b12:	4421      	add	r1, r4
 8007b14:	1854      	adds	r4, r2, r1
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	6011      	str	r1, [r2, #0]
 8007b1a:	d1e0      	bne.n	8007ade <_free_r+0x26>
 8007b1c:	681c      	ldr	r4, [r3, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	6053      	str	r3, [r2, #4]
 8007b22:	4421      	add	r1, r4
 8007b24:	6011      	str	r1, [r2, #0]
 8007b26:	e7da      	b.n	8007ade <_free_r+0x26>
 8007b28:	d902      	bls.n	8007b30 <_free_r+0x78>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	6003      	str	r3, [r0, #0]
 8007b2e:	e7d6      	b.n	8007ade <_free_r+0x26>
 8007b30:	6825      	ldr	r5, [r4, #0]
 8007b32:	1961      	adds	r1, r4, r5
 8007b34:	428b      	cmp	r3, r1
 8007b36:	bf04      	itt	eq
 8007b38:	6819      	ldreq	r1, [r3, #0]
 8007b3a:	685b      	ldreq	r3, [r3, #4]
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	bf04      	itt	eq
 8007b40:	1949      	addeq	r1, r1, r5
 8007b42:	6021      	streq	r1, [r4, #0]
 8007b44:	6054      	str	r4, [r2, #4]
 8007b46:	e7ca      	b.n	8007ade <_free_r+0x26>
 8007b48:	b003      	add	sp, #12
 8007b4a:	bd30      	pop	{r4, r5, pc}
 8007b4c:	20000ad4 	.word	0x20000ad4

08007b50 <sbrk_aligned>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4e0e      	ldr	r6, [pc, #56]	; (8007b8c <sbrk_aligned+0x3c>)
 8007b54:	460c      	mov	r4, r1
 8007b56:	6831      	ldr	r1, [r6, #0]
 8007b58:	4605      	mov	r5, r0
 8007b5a:	b911      	cbnz	r1, 8007b62 <sbrk_aligned+0x12>
 8007b5c:	f000 fb7a 	bl	8008254 <_sbrk_r>
 8007b60:	6030      	str	r0, [r6, #0]
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f000 fb75 	bl	8008254 <_sbrk_r>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	d00a      	beq.n	8007b84 <sbrk_aligned+0x34>
 8007b6e:	1cc4      	adds	r4, r0, #3
 8007b70:	f024 0403 	bic.w	r4, r4, #3
 8007b74:	42a0      	cmp	r0, r4
 8007b76:	d007      	beq.n	8007b88 <sbrk_aligned+0x38>
 8007b78:	1a21      	subs	r1, r4, r0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 fb6a 	bl	8008254 <_sbrk_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d101      	bne.n	8007b88 <sbrk_aligned+0x38>
 8007b84:	f04f 34ff 	mov.w	r4, #4294967295
 8007b88:	4620      	mov	r0, r4
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	20000ad8 	.word	0x20000ad8

08007b90 <_malloc_r>:
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	1ccd      	adds	r5, r1, #3
 8007b96:	f025 0503 	bic.w	r5, r5, #3
 8007b9a:	3508      	adds	r5, #8
 8007b9c:	2d0c      	cmp	r5, #12
 8007b9e:	bf38      	it	cc
 8007ba0:	250c      	movcc	r5, #12
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	db01      	blt.n	8007bac <_malloc_r+0x1c>
 8007ba8:	42a9      	cmp	r1, r5
 8007baa:	d905      	bls.n	8007bb8 <_malloc_r+0x28>
 8007bac:	230c      	movs	r3, #12
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	2600      	movs	r6, #0
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	4e2e      	ldr	r6, [pc, #184]	; (8007c74 <_malloc_r+0xe4>)
 8007bba:	f000 fe43 	bl	8008844 <__malloc_lock>
 8007bbe:	6833      	ldr	r3, [r6, #0]
 8007bc0:	461c      	mov	r4, r3
 8007bc2:	bb34      	cbnz	r4, 8007c12 <_malloc_r+0x82>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f7ff ffc2 	bl	8007b50 <sbrk_aligned>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	4604      	mov	r4, r0
 8007bd0:	d14d      	bne.n	8007c6e <_malloc_r+0xde>
 8007bd2:	6834      	ldr	r4, [r6, #0]
 8007bd4:	4626      	mov	r6, r4
 8007bd6:	2e00      	cmp	r6, #0
 8007bd8:	d140      	bne.n	8007c5c <_malloc_r+0xcc>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4638      	mov	r0, r7
 8007be0:	eb04 0803 	add.w	r8, r4, r3
 8007be4:	f000 fb36 	bl	8008254 <_sbrk_r>
 8007be8:	4580      	cmp	r8, r0
 8007bea:	d13a      	bne.n	8007c62 <_malloc_r+0xd2>
 8007bec:	6821      	ldr	r1, [r4, #0]
 8007bee:	3503      	adds	r5, #3
 8007bf0:	1a6d      	subs	r5, r5, r1
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4638      	mov	r0, r7
 8007c02:	f7ff ffa5 	bl	8007b50 <sbrk_aligned>
 8007c06:	3001      	adds	r0, #1
 8007c08:	d02b      	beq.n	8007c62 <_malloc_r+0xd2>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	442b      	add	r3, r5
 8007c0e:	6023      	str	r3, [r4, #0]
 8007c10:	e00e      	b.n	8007c30 <_malloc_r+0xa0>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	1b52      	subs	r2, r2, r5
 8007c16:	d41e      	bmi.n	8007c56 <_malloc_r+0xc6>
 8007c18:	2a0b      	cmp	r2, #11
 8007c1a:	d916      	bls.n	8007c4a <_malloc_r+0xba>
 8007c1c:	1961      	adds	r1, r4, r5
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	6025      	str	r5, [r4, #0]
 8007c22:	bf18      	it	ne
 8007c24:	6059      	strne	r1, [r3, #4]
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	bf08      	it	eq
 8007c2a:	6031      	streq	r1, [r6, #0]
 8007c2c:	5162      	str	r2, [r4, r5]
 8007c2e:	604b      	str	r3, [r1, #4]
 8007c30:	4638      	mov	r0, r7
 8007c32:	f104 060b 	add.w	r6, r4, #11
 8007c36:	f000 fe0b 	bl	8008850 <__malloc_unlock>
 8007c3a:	f026 0607 	bic.w	r6, r6, #7
 8007c3e:	1d23      	adds	r3, r4, #4
 8007c40:	1af2      	subs	r2, r6, r3
 8007c42:	d0b6      	beq.n	8007bb2 <_malloc_r+0x22>
 8007c44:	1b9b      	subs	r3, r3, r6
 8007c46:	50a3      	str	r3, [r4, r2]
 8007c48:	e7b3      	b.n	8007bb2 <_malloc_r+0x22>
 8007c4a:	6862      	ldr	r2, [r4, #4]
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	bf0c      	ite	eq
 8007c50:	6032      	streq	r2, [r6, #0]
 8007c52:	605a      	strne	r2, [r3, #4]
 8007c54:	e7ec      	b.n	8007c30 <_malloc_r+0xa0>
 8007c56:	4623      	mov	r3, r4
 8007c58:	6864      	ldr	r4, [r4, #4]
 8007c5a:	e7b2      	b.n	8007bc2 <_malloc_r+0x32>
 8007c5c:	4634      	mov	r4, r6
 8007c5e:	6876      	ldr	r6, [r6, #4]
 8007c60:	e7b9      	b.n	8007bd6 <_malloc_r+0x46>
 8007c62:	230c      	movs	r3, #12
 8007c64:	603b      	str	r3, [r7, #0]
 8007c66:	4638      	mov	r0, r7
 8007c68:	f000 fdf2 	bl	8008850 <__malloc_unlock>
 8007c6c:	e7a1      	b.n	8007bb2 <_malloc_r+0x22>
 8007c6e:	6025      	str	r5, [r4, #0]
 8007c70:	e7de      	b.n	8007c30 <_malloc_r+0xa0>
 8007c72:	bf00      	nop
 8007c74:	20000ad4 	.word	0x20000ad4

08007c78 <__sfputc_r>:
 8007c78:	6893      	ldr	r3, [r2, #8]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	b410      	push	{r4}
 8007c80:	6093      	str	r3, [r2, #8]
 8007c82:	da08      	bge.n	8007c96 <__sfputc_r+0x1e>
 8007c84:	6994      	ldr	r4, [r2, #24]
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	db01      	blt.n	8007c8e <__sfputc_r+0x16>
 8007c8a:	290a      	cmp	r1, #10
 8007c8c:	d103      	bne.n	8007c96 <__sfputc_r+0x1e>
 8007c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c92:	f000 baef 	b.w	8008274 <__swbuf_r>
 8007c96:	6813      	ldr	r3, [r2, #0]
 8007c98:	1c58      	adds	r0, r3, #1
 8007c9a:	6010      	str	r0, [r2, #0]
 8007c9c:	7019      	strb	r1, [r3, #0]
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <__sfputs_r>:
 8007ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	4614      	mov	r4, r2
 8007cae:	18d5      	adds	r5, r2, r3
 8007cb0:	42ac      	cmp	r4, r5
 8007cb2:	d101      	bne.n	8007cb8 <__sfputs_r+0x12>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	e007      	b.n	8007cc8 <__sfputs_r+0x22>
 8007cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbc:	463a      	mov	r2, r7
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ffda 	bl	8007c78 <__sfputc_r>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d1f3      	bne.n	8007cb0 <__sfputs_r+0xa>
 8007cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ccc <_vfiprintf_r>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	b09d      	sub	sp, #116	; 0x74
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	4698      	mov	r8, r3
 8007cd8:	4606      	mov	r6, r0
 8007cda:	b118      	cbz	r0, 8007ce4 <_vfiprintf_r+0x18>
 8007cdc:	6983      	ldr	r3, [r0, #24]
 8007cde:	b90b      	cbnz	r3, 8007ce4 <_vfiprintf_r+0x18>
 8007ce0:	f000 fcaa 	bl	8008638 <__sinit>
 8007ce4:	4b89      	ldr	r3, [pc, #548]	; (8007f0c <_vfiprintf_r+0x240>)
 8007ce6:	429d      	cmp	r5, r3
 8007ce8:	d11b      	bne.n	8007d22 <_vfiprintf_r+0x56>
 8007cea:	6875      	ldr	r5, [r6, #4]
 8007cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cee:	07d9      	lsls	r1, r3, #31
 8007cf0:	d405      	bmi.n	8007cfe <_vfiprintf_r+0x32>
 8007cf2:	89ab      	ldrh	r3, [r5, #12]
 8007cf4:	059a      	lsls	r2, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_vfiprintf_r+0x32>
 8007cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cfa:	f000 fd3b 	bl	8008774 <__retarget_lock_acquire_recursive>
 8007cfe:	89ab      	ldrh	r3, [r5, #12]
 8007d00:	071b      	lsls	r3, r3, #28
 8007d02:	d501      	bpl.n	8007d08 <_vfiprintf_r+0x3c>
 8007d04:	692b      	ldr	r3, [r5, #16]
 8007d06:	b9eb      	cbnz	r3, 8007d44 <_vfiprintf_r+0x78>
 8007d08:	4629      	mov	r1, r5
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f000 fb04 	bl	8008318 <__swsetup_r>
 8007d10:	b1c0      	cbz	r0, 8007d44 <_vfiprintf_r+0x78>
 8007d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d14:	07dc      	lsls	r4, r3, #31
 8007d16:	d50e      	bpl.n	8007d36 <_vfiprintf_r+0x6a>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	b01d      	add	sp, #116	; 0x74
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	4b7b      	ldr	r3, [pc, #492]	; (8007f10 <_vfiprintf_r+0x244>)
 8007d24:	429d      	cmp	r5, r3
 8007d26:	d101      	bne.n	8007d2c <_vfiprintf_r+0x60>
 8007d28:	68b5      	ldr	r5, [r6, #8]
 8007d2a:	e7df      	b.n	8007cec <_vfiprintf_r+0x20>
 8007d2c:	4b79      	ldr	r3, [pc, #484]	; (8007f14 <_vfiprintf_r+0x248>)
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	bf08      	it	eq
 8007d32:	68f5      	ldreq	r5, [r6, #12]
 8007d34:	e7da      	b.n	8007cec <_vfiprintf_r+0x20>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	0598      	lsls	r0, r3, #22
 8007d3a:	d4ed      	bmi.n	8007d18 <_vfiprintf_r+0x4c>
 8007d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d3e:	f000 fd1a 	bl	8008776 <__retarget_lock_release_recursive>
 8007d42:	e7e9      	b.n	8007d18 <_vfiprintf_r+0x4c>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d52:	2330      	movs	r3, #48	; 0x30
 8007d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f18 <_vfiprintf_r+0x24c>
 8007d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d5c:	f04f 0901 	mov.w	r9, #1
 8007d60:	4623      	mov	r3, r4
 8007d62:	469a      	mov	sl, r3
 8007d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d68:	b10a      	cbz	r2, 8007d6e <_vfiprintf_r+0xa2>
 8007d6a:	2a25      	cmp	r2, #37	; 0x25
 8007d6c:	d1f9      	bne.n	8007d62 <_vfiprintf_r+0x96>
 8007d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d72:	d00b      	beq.n	8007d8c <_vfiprintf_r+0xc0>
 8007d74:	465b      	mov	r3, fp
 8007d76:	4622      	mov	r2, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ff93 	bl	8007ca6 <__sfputs_r>
 8007d80:	3001      	adds	r0, #1
 8007d82:	f000 80aa 	beq.w	8007eda <_vfiprintf_r+0x20e>
 8007d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d88:	445a      	add	r2, fp
 8007d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80a2 	beq.w	8007eda <_vfiprintf_r+0x20e>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da0:	f10a 0a01 	add.w	sl, sl, #1
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	9307      	str	r3, [sp, #28]
 8007da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dac:	931a      	str	r3, [sp, #104]	; 0x68
 8007dae:	4654      	mov	r4, sl
 8007db0:	2205      	movs	r2, #5
 8007db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db6:	4858      	ldr	r0, [pc, #352]	; (8007f18 <_vfiprintf_r+0x24c>)
 8007db8:	f7f8 fa12 	bl	80001e0 <memchr>
 8007dbc:	9a04      	ldr	r2, [sp, #16]
 8007dbe:	b9d8      	cbnz	r0, 8007df8 <_vfiprintf_r+0x12c>
 8007dc0:	06d1      	lsls	r1, r2, #27
 8007dc2:	bf44      	itt	mi
 8007dc4:	2320      	movmi	r3, #32
 8007dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dca:	0713      	lsls	r3, r2, #28
 8007dcc:	bf44      	itt	mi
 8007dce:	232b      	movmi	r3, #43	; 0x2b
 8007dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dda:	d015      	beq.n	8007e08 <_vfiprintf_r+0x13c>
 8007ddc:	9a07      	ldr	r2, [sp, #28]
 8007dde:	4654      	mov	r4, sl
 8007de0:	2000      	movs	r0, #0
 8007de2:	f04f 0c0a 	mov.w	ip, #10
 8007de6:	4621      	mov	r1, r4
 8007de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dec:	3b30      	subs	r3, #48	; 0x30
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d94e      	bls.n	8007e90 <_vfiprintf_r+0x1c4>
 8007df2:	b1b0      	cbz	r0, 8007e22 <_vfiprintf_r+0x156>
 8007df4:	9207      	str	r2, [sp, #28]
 8007df6:	e014      	b.n	8007e22 <_vfiprintf_r+0x156>
 8007df8:	eba0 0308 	sub.w	r3, r0, r8
 8007dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007e00:	4313      	orrs	r3, r2
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	46a2      	mov	sl, r4
 8007e06:	e7d2      	b.n	8007dae <_vfiprintf_r+0xe2>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	9103      	str	r1, [sp, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfbb      	ittet	lt
 8007e14:	425b      	neglt	r3, r3
 8007e16:	f042 0202 	orrlt.w	r2, r2, #2
 8007e1a:	9307      	strge	r3, [sp, #28]
 8007e1c:	9307      	strlt	r3, [sp, #28]
 8007e1e:	bfb8      	it	lt
 8007e20:	9204      	strlt	r2, [sp, #16]
 8007e22:	7823      	ldrb	r3, [r4, #0]
 8007e24:	2b2e      	cmp	r3, #46	; 0x2e
 8007e26:	d10c      	bne.n	8007e42 <_vfiprintf_r+0x176>
 8007e28:	7863      	ldrb	r3, [r4, #1]
 8007e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2c:	d135      	bne.n	8007e9a <_vfiprintf_r+0x1ce>
 8007e2e:	9b03      	ldr	r3, [sp, #12]
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	9203      	str	r2, [sp, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	bfb8      	it	lt
 8007e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e3e:	3402      	adds	r4, #2
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f28 <_vfiprintf_r+0x25c>
 8007e46:	7821      	ldrb	r1, [r4, #0]
 8007e48:	2203      	movs	r2, #3
 8007e4a:	4650      	mov	r0, sl
 8007e4c:	f7f8 f9c8 	bl	80001e0 <memchr>
 8007e50:	b140      	cbz	r0, 8007e64 <_vfiprintf_r+0x198>
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	eba0 000a 	sub.w	r0, r0, sl
 8007e58:	fa03 f000 	lsl.w	r0, r3, r0
 8007e5c:	9b04      	ldr	r3, [sp, #16]
 8007e5e:	4303      	orrs	r3, r0
 8007e60:	3401      	adds	r4, #1
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e68:	482c      	ldr	r0, [pc, #176]	; (8007f1c <_vfiprintf_r+0x250>)
 8007e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e6e:	2206      	movs	r2, #6
 8007e70:	f7f8 f9b6 	bl	80001e0 <memchr>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d03f      	beq.n	8007ef8 <_vfiprintf_r+0x22c>
 8007e78:	4b29      	ldr	r3, [pc, #164]	; (8007f20 <_vfiprintf_r+0x254>)
 8007e7a:	bb1b      	cbnz	r3, 8007ec4 <_vfiprintf_r+0x1f8>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	3307      	adds	r3, #7
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8a:	443b      	add	r3, r7
 8007e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e8e:	e767      	b.n	8007d60 <_vfiprintf_r+0x94>
 8007e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e94:	460c      	mov	r4, r1
 8007e96:	2001      	movs	r0, #1
 8007e98:	e7a5      	b.n	8007de6 <_vfiprintf_r+0x11a>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f04f 0c0a 	mov.w	ip, #10
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eac:	3a30      	subs	r2, #48	; 0x30
 8007eae:	2a09      	cmp	r2, #9
 8007eb0:	d903      	bls.n	8007eba <_vfiprintf_r+0x1ee>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0c5      	beq.n	8007e42 <_vfiprintf_r+0x176>
 8007eb6:	9105      	str	r1, [sp, #20]
 8007eb8:	e7c3      	b.n	8007e42 <_vfiprintf_r+0x176>
 8007eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7f0      	b.n	8007ea6 <_vfiprintf_r+0x1da>
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <_vfiprintf_r+0x258>)
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f3af 8000 	nop.w
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	1c78      	adds	r0, r7, #1
 8007ed8:	d1d6      	bne.n	8007e88 <_vfiprintf_r+0x1bc>
 8007eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007edc:	07d9      	lsls	r1, r3, #31
 8007ede:	d405      	bmi.n	8007eec <_vfiprintf_r+0x220>
 8007ee0:	89ab      	ldrh	r3, [r5, #12]
 8007ee2:	059a      	lsls	r2, r3, #22
 8007ee4:	d402      	bmi.n	8007eec <_vfiprintf_r+0x220>
 8007ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ee8:	f000 fc45 	bl	8008776 <__retarget_lock_release_recursive>
 8007eec:	89ab      	ldrh	r3, [r5, #12]
 8007eee:	065b      	lsls	r3, r3, #25
 8007ef0:	f53f af12 	bmi.w	8007d18 <_vfiprintf_r+0x4c>
 8007ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ef6:	e711      	b.n	8007d1c <_vfiprintf_r+0x50>
 8007ef8:	ab03      	add	r3, sp, #12
 8007efa:	9300      	str	r3, [sp, #0]
 8007efc:	462a      	mov	r2, r5
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <_vfiprintf_r+0x258>)
 8007f00:	a904      	add	r1, sp, #16
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 f880 	bl	8008008 <_printf_i>
 8007f08:	e7e4      	b.n	8007ed4 <_vfiprintf_r+0x208>
 8007f0a:	bf00      	nop
 8007f0c:	08008db0 	.word	0x08008db0
 8007f10:	08008dd0 	.word	0x08008dd0
 8007f14:	08008d90 	.word	0x08008d90
 8007f18:	08008d5d 	.word	0x08008d5d
 8007f1c:	08008d67 	.word	0x08008d67
 8007f20:	00000000 	.word	0x00000000
 8007f24:	08007ca7 	.word	0x08007ca7
 8007f28:	08008d63 	.word	0x08008d63

08007f2c <_printf_common>:
 8007f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	4616      	mov	r6, r2
 8007f32:	4699      	mov	r9, r3
 8007f34:	688a      	ldr	r2, [r1, #8]
 8007f36:	690b      	ldr	r3, [r1, #16]
 8007f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	bfb8      	it	lt
 8007f40:	4613      	movlt	r3, r2
 8007f42:	6033      	str	r3, [r6, #0]
 8007f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f48:	4607      	mov	r7, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b10a      	cbz	r2, 8007f52 <_printf_common+0x26>
 8007f4e:	3301      	adds	r3, #1
 8007f50:	6033      	str	r3, [r6, #0]
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	0699      	lsls	r1, r3, #26
 8007f56:	bf42      	ittt	mi
 8007f58:	6833      	ldrmi	r3, [r6, #0]
 8007f5a:	3302      	addmi	r3, #2
 8007f5c:	6033      	strmi	r3, [r6, #0]
 8007f5e:	6825      	ldr	r5, [r4, #0]
 8007f60:	f015 0506 	ands.w	r5, r5, #6
 8007f64:	d106      	bne.n	8007f74 <_printf_common+0x48>
 8007f66:	f104 0a19 	add.w	sl, r4, #25
 8007f6a:	68e3      	ldr	r3, [r4, #12]
 8007f6c:	6832      	ldr	r2, [r6, #0]
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dc26      	bgt.n	8007fc2 <_printf_common+0x96>
 8007f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f78:	1e13      	subs	r3, r2, #0
 8007f7a:	6822      	ldr	r2, [r4, #0]
 8007f7c:	bf18      	it	ne
 8007f7e:	2301      	movne	r3, #1
 8007f80:	0692      	lsls	r2, r2, #26
 8007f82:	d42b      	bmi.n	8007fdc <_printf_common+0xb0>
 8007f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c0      	blx	r8
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d01e      	beq.n	8007fd0 <_printf_common+0xa4>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	68e5      	ldr	r5, [r4, #12]
 8007f96:	6832      	ldr	r2, [r6, #0]
 8007f98:	f003 0306 	and.w	r3, r3, #6
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	bf08      	it	eq
 8007fa0:	1aad      	subeq	r5, r5, r2
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	bf0c      	ite	eq
 8007fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fac:	2500      	movne	r5, #0
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bfc4      	itt	gt
 8007fb2:	1a9b      	subgt	r3, r3, r2
 8007fb4:	18ed      	addgt	r5, r5, r3
 8007fb6:	2600      	movs	r6, #0
 8007fb8:	341a      	adds	r4, #26
 8007fba:	42b5      	cmp	r5, r6
 8007fbc:	d11a      	bne.n	8007ff4 <_printf_common+0xc8>
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e008      	b.n	8007fd4 <_printf_common+0xa8>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	4638      	mov	r0, r7
 8007fca:	47c0      	blx	r8
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d103      	bne.n	8007fd8 <_printf_common+0xac>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	3501      	adds	r5, #1
 8007fda:	e7c6      	b.n	8007f6a <_printf_common+0x3e>
 8007fdc:	18e1      	adds	r1, r4, r3
 8007fde:	1c5a      	adds	r2, r3, #1
 8007fe0:	2030      	movs	r0, #48	; 0x30
 8007fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fe6:	4422      	add	r2, r4
 8007fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	e7c7      	b.n	8007f84 <_printf_common+0x58>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4622      	mov	r2, r4
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	47c0      	blx	r8
 8007ffe:	3001      	adds	r0, #1
 8008000:	d0e6      	beq.n	8007fd0 <_printf_common+0xa4>
 8008002:	3601      	adds	r6, #1
 8008004:	e7d9      	b.n	8007fba <_printf_common+0x8e>
	...

08008008 <_printf_i>:
 8008008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800800c:	7e0f      	ldrb	r7, [r1, #24]
 800800e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008010:	2f78      	cmp	r7, #120	; 0x78
 8008012:	4691      	mov	r9, r2
 8008014:	4680      	mov	r8, r0
 8008016:	460c      	mov	r4, r1
 8008018:	469a      	mov	sl, r3
 800801a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800801e:	d807      	bhi.n	8008030 <_printf_i+0x28>
 8008020:	2f62      	cmp	r7, #98	; 0x62
 8008022:	d80a      	bhi.n	800803a <_printf_i+0x32>
 8008024:	2f00      	cmp	r7, #0
 8008026:	f000 80d8 	beq.w	80081da <_printf_i+0x1d2>
 800802a:	2f58      	cmp	r7, #88	; 0x58
 800802c:	f000 80a3 	beq.w	8008176 <_printf_i+0x16e>
 8008030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008038:	e03a      	b.n	80080b0 <_printf_i+0xa8>
 800803a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800803e:	2b15      	cmp	r3, #21
 8008040:	d8f6      	bhi.n	8008030 <_printf_i+0x28>
 8008042:	a101      	add	r1, pc, #4	; (adr r1, 8008048 <_printf_i+0x40>)
 8008044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008048:	080080a1 	.word	0x080080a1
 800804c:	080080b5 	.word	0x080080b5
 8008050:	08008031 	.word	0x08008031
 8008054:	08008031 	.word	0x08008031
 8008058:	08008031 	.word	0x08008031
 800805c:	08008031 	.word	0x08008031
 8008060:	080080b5 	.word	0x080080b5
 8008064:	08008031 	.word	0x08008031
 8008068:	08008031 	.word	0x08008031
 800806c:	08008031 	.word	0x08008031
 8008070:	08008031 	.word	0x08008031
 8008074:	080081c1 	.word	0x080081c1
 8008078:	080080e5 	.word	0x080080e5
 800807c:	080081a3 	.word	0x080081a3
 8008080:	08008031 	.word	0x08008031
 8008084:	08008031 	.word	0x08008031
 8008088:	080081e3 	.word	0x080081e3
 800808c:	08008031 	.word	0x08008031
 8008090:	080080e5 	.word	0x080080e5
 8008094:	08008031 	.word	0x08008031
 8008098:	08008031 	.word	0x08008031
 800809c:	080081ab 	.word	0x080081ab
 80080a0:	682b      	ldr	r3, [r5, #0]
 80080a2:	1d1a      	adds	r2, r3, #4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	602a      	str	r2, [r5, #0]
 80080a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0a3      	b.n	80081fc <_printf_i+0x1f4>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	6829      	ldr	r1, [r5, #0]
 80080b8:	0606      	lsls	r6, r0, #24
 80080ba:	f101 0304 	add.w	r3, r1, #4
 80080be:	d50a      	bpl.n	80080d6 <_printf_i+0xce>
 80080c0:	680e      	ldr	r6, [r1, #0]
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	2e00      	cmp	r6, #0
 80080c6:	da03      	bge.n	80080d0 <_printf_i+0xc8>
 80080c8:	232d      	movs	r3, #45	; 0x2d
 80080ca:	4276      	negs	r6, r6
 80080cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d0:	485e      	ldr	r0, [pc, #376]	; (800824c <_printf_i+0x244>)
 80080d2:	230a      	movs	r3, #10
 80080d4:	e019      	b.n	800810a <_printf_i+0x102>
 80080d6:	680e      	ldr	r6, [r1, #0]
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080de:	bf18      	it	ne
 80080e0:	b236      	sxthne	r6, r6
 80080e2:	e7ef      	b.n	80080c4 <_printf_i+0xbc>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	6820      	ldr	r0, [r4, #0]
 80080e8:	1d19      	adds	r1, r3, #4
 80080ea:	6029      	str	r1, [r5, #0]
 80080ec:	0601      	lsls	r1, r0, #24
 80080ee:	d501      	bpl.n	80080f4 <_printf_i+0xec>
 80080f0:	681e      	ldr	r6, [r3, #0]
 80080f2:	e002      	b.n	80080fa <_printf_i+0xf2>
 80080f4:	0646      	lsls	r6, r0, #25
 80080f6:	d5fb      	bpl.n	80080f0 <_printf_i+0xe8>
 80080f8:	881e      	ldrh	r6, [r3, #0]
 80080fa:	4854      	ldr	r0, [pc, #336]	; (800824c <_printf_i+0x244>)
 80080fc:	2f6f      	cmp	r7, #111	; 0x6f
 80080fe:	bf0c      	ite	eq
 8008100:	2308      	moveq	r3, #8
 8008102:	230a      	movne	r3, #10
 8008104:	2100      	movs	r1, #0
 8008106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800810a:	6865      	ldr	r5, [r4, #4]
 800810c:	60a5      	str	r5, [r4, #8]
 800810e:	2d00      	cmp	r5, #0
 8008110:	bfa2      	ittt	ge
 8008112:	6821      	ldrge	r1, [r4, #0]
 8008114:	f021 0104 	bicge.w	r1, r1, #4
 8008118:	6021      	strge	r1, [r4, #0]
 800811a:	b90e      	cbnz	r6, 8008120 <_printf_i+0x118>
 800811c:	2d00      	cmp	r5, #0
 800811e:	d04d      	beq.n	80081bc <_printf_i+0x1b4>
 8008120:	4615      	mov	r5, r2
 8008122:	fbb6 f1f3 	udiv	r1, r6, r3
 8008126:	fb03 6711 	mls	r7, r3, r1, r6
 800812a:	5dc7      	ldrb	r7, [r0, r7]
 800812c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008130:	4637      	mov	r7, r6
 8008132:	42bb      	cmp	r3, r7
 8008134:	460e      	mov	r6, r1
 8008136:	d9f4      	bls.n	8008122 <_printf_i+0x11a>
 8008138:	2b08      	cmp	r3, #8
 800813a:	d10b      	bne.n	8008154 <_printf_i+0x14c>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	07de      	lsls	r6, r3, #31
 8008140:	d508      	bpl.n	8008154 <_printf_i+0x14c>
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	6861      	ldr	r1, [r4, #4]
 8008146:	4299      	cmp	r1, r3
 8008148:	bfde      	ittt	le
 800814a:	2330      	movle	r3, #48	; 0x30
 800814c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008150:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008154:	1b52      	subs	r2, r2, r5
 8008156:	6122      	str	r2, [r4, #16]
 8008158:	f8cd a000 	str.w	sl, [sp]
 800815c:	464b      	mov	r3, r9
 800815e:	aa03      	add	r2, sp, #12
 8008160:	4621      	mov	r1, r4
 8008162:	4640      	mov	r0, r8
 8008164:	f7ff fee2 	bl	8007f2c <_printf_common>
 8008168:	3001      	adds	r0, #1
 800816a:	d14c      	bne.n	8008206 <_printf_i+0x1fe>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	b004      	add	sp, #16
 8008172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008176:	4835      	ldr	r0, [pc, #212]	; (800824c <_printf_i+0x244>)
 8008178:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800817c:	6829      	ldr	r1, [r5, #0]
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	f851 6b04 	ldr.w	r6, [r1], #4
 8008184:	6029      	str	r1, [r5, #0]
 8008186:	061d      	lsls	r5, r3, #24
 8008188:	d514      	bpl.n	80081b4 <_printf_i+0x1ac>
 800818a:	07df      	lsls	r7, r3, #31
 800818c:	bf44      	itt	mi
 800818e:	f043 0320 	orrmi.w	r3, r3, #32
 8008192:	6023      	strmi	r3, [r4, #0]
 8008194:	b91e      	cbnz	r6, 800819e <_printf_i+0x196>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	f023 0320 	bic.w	r3, r3, #32
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	2310      	movs	r3, #16
 80081a0:	e7b0      	b.n	8008104 <_printf_i+0xfc>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	f043 0320 	orr.w	r3, r3, #32
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	2378      	movs	r3, #120	; 0x78
 80081ac:	4828      	ldr	r0, [pc, #160]	; (8008250 <_printf_i+0x248>)
 80081ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081b2:	e7e3      	b.n	800817c <_printf_i+0x174>
 80081b4:	0659      	lsls	r1, r3, #25
 80081b6:	bf48      	it	mi
 80081b8:	b2b6      	uxthmi	r6, r6
 80081ba:	e7e6      	b.n	800818a <_printf_i+0x182>
 80081bc:	4615      	mov	r5, r2
 80081be:	e7bb      	b.n	8008138 <_printf_i+0x130>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	6826      	ldr	r6, [r4, #0]
 80081c4:	6961      	ldr	r1, [r4, #20]
 80081c6:	1d18      	adds	r0, r3, #4
 80081c8:	6028      	str	r0, [r5, #0]
 80081ca:	0635      	lsls	r5, r6, #24
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	d501      	bpl.n	80081d4 <_printf_i+0x1cc>
 80081d0:	6019      	str	r1, [r3, #0]
 80081d2:	e002      	b.n	80081da <_printf_i+0x1d2>
 80081d4:	0670      	lsls	r0, r6, #25
 80081d6:	d5fb      	bpl.n	80081d0 <_printf_i+0x1c8>
 80081d8:	8019      	strh	r1, [r3, #0]
 80081da:	2300      	movs	r3, #0
 80081dc:	6123      	str	r3, [r4, #16]
 80081de:	4615      	mov	r5, r2
 80081e0:	e7ba      	b.n	8008158 <_printf_i+0x150>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	1d1a      	adds	r2, r3, #4
 80081e6:	602a      	str	r2, [r5, #0]
 80081e8:	681d      	ldr	r5, [r3, #0]
 80081ea:	6862      	ldr	r2, [r4, #4]
 80081ec:	2100      	movs	r1, #0
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7f7 fff6 	bl	80001e0 <memchr>
 80081f4:	b108      	cbz	r0, 80081fa <_printf_i+0x1f2>
 80081f6:	1b40      	subs	r0, r0, r5
 80081f8:	6060      	str	r0, [r4, #4]
 80081fa:	6863      	ldr	r3, [r4, #4]
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	2300      	movs	r3, #0
 8008200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008204:	e7a8      	b.n	8008158 <_printf_i+0x150>
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	462a      	mov	r2, r5
 800820a:	4649      	mov	r1, r9
 800820c:	4640      	mov	r0, r8
 800820e:	47d0      	blx	sl
 8008210:	3001      	adds	r0, #1
 8008212:	d0ab      	beq.n	800816c <_printf_i+0x164>
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	079b      	lsls	r3, r3, #30
 8008218:	d413      	bmi.n	8008242 <_printf_i+0x23a>
 800821a:	68e0      	ldr	r0, [r4, #12]
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	4298      	cmp	r0, r3
 8008220:	bfb8      	it	lt
 8008222:	4618      	movlt	r0, r3
 8008224:	e7a4      	b.n	8008170 <_printf_i+0x168>
 8008226:	2301      	movs	r3, #1
 8008228:	4632      	mov	r2, r6
 800822a:	4649      	mov	r1, r9
 800822c:	4640      	mov	r0, r8
 800822e:	47d0      	blx	sl
 8008230:	3001      	adds	r0, #1
 8008232:	d09b      	beq.n	800816c <_printf_i+0x164>
 8008234:	3501      	adds	r5, #1
 8008236:	68e3      	ldr	r3, [r4, #12]
 8008238:	9903      	ldr	r1, [sp, #12]
 800823a:	1a5b      	subs	r3, r3, r1
 800823c:	42ab      	cmp	r3, r5
 800823e:	dcf2      	bgt.n	8008226 <_printf_i+0x21e>
 8008240:	e7eb      	b.n	800821a <_printf_i+0x212>
 8008242:	2500      	movs	r5, #0
 8008244:	f104 0619 	add.w	r6, r4, #25
 8008248:	e7f5      	b.n	8008236 <_printf_i+0x22e>
 800824a:	bf00      	nop
 800824c:	08008d6e 	.word	0x08008d6e
 8008250:	08008d7f 	.word	0x08008d7f

08008254 <_sbrk_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	4d06      	ldr	r5, [pc, #24]	; (8008270 <_sbrk_r+0x1c>)
 8008258:	2300      	movs	r3, #0
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f9 fe6a 	bl	8001f38 <_sbrk>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_sbrk_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_sbrk_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20000ae0 	.word	0x20000ae0

08008274 <__swbuf_r>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	460e      	mov	r6, r1
 8008278:	4614      	mov	r4, r2
 800827a:	4605      	mov	r5, r0
 800827c:	b118      	cbz	r0, 8008286 <__swbuf_r+0x12>
 800827e:	6983      	ldr	r3, [r0, #24]
 8008280:	b90b      	cbnz	r3, 8008286 <__swbuf_r+0x12>
 8008282:	f000 f9d9 	bl	8008638 <__sinit>
 8008286:	4b21      	ldr	r3, [pc, #132]	; (800830c <__swbuf_r+0x98>)
 8008288:	429c      	cmp	r4, r3
 800828a:	d12b      	bne.n	80082e4 <__swbuf_r+0x70>
 800828c:	686c      	ldr	r4, [r5, #4]
 800828e:	69a3      	ldr	r3, [r4, #24]
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	071a      	lsls	r2, r3, #28
 8008296:	d52f      	bpl.n	80082f8 <__swbuf_r+0x84>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	b36b      	cbz	r3, 80082f8 <__swbuf_r+0x84>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1ac0      	subs	r0, r0, r3
 80082a2:	6963      	ldr	r3, [r4, #20]
 80082a4:	b2f6      	uxtb	r6, r6
 80082a6:	4283      	cmp	r3, r0
 80082a8:	4637      	mov	r7, r6
 80082aa:	dc04      	bgt.n	80082b6 <__swbuf_r+0x42>
 80082ac:	4621      	mov	r1, r4
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 f92e 	bl	8008510 <_fflush_r>
 80082b4:	bb30      	cbnz	r0, 8008304 <__swbuf_r+0x90>
 80082b6:	68a3      	ldr	r3, [r4, #8]
 80082b8:	3b01      	subs	r3, #1
 80082ba:	60a3      	str	r3, [r4, #8]
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	1c5a      	adds	r2, r3, #1
 80082c0:	6022      	str	r2, [r4, #0]
 80082c2:	701e      	strb	r6, [r3, #0]
 80082c4:	6963      	ldr	r3, [r4, #20]
 80082c6:	3001      	adds	r0, #1
 80082c8:	4283      	cmp	r3, r0
 80082ca:	d004      	beq.n	80082d6 <__swbuf_r+0x62>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	07db      	lsls	r3, r3, #31
 80082d0:	d506      	bpl.n	80082e0 <__swbuf_r+0x6c>
 80082d2:	2e0a      	cmp	r6, #10
 80082d4:	d104      	bne.n	80082e0 <__swbuf_r+0x6c>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 f919 	bl	8008510 <_fflush_r>
 80082de:	b988      	cbnz	r0, 8008304 <__swbuf_r+0x90>
 80082e0:	4638      	mov	r0, r7
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e4:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <__swbuf_r+0x9c>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	d101      	bne.n	80082ee <__swbuf_r+0x7a>
 80082ea:	68ac      	ldr	r4, [r5, #8]
 80082ec:	e7cf      	b.n	800828e <__swbuf_r+0x1a>
 80082ee:	4b09      	ldr	r3, [pc, #36]	; (8008314 <__swbuf_r+0xa0>)
 80082f0:	429c      	cmp	r4, r3
 80082f2:	bf08      	it	eq
 80082f4:	68ec      	ldreq	r4, [r5, #12]
 80082f6:	e7ca      	b.n	800828e <__swbuf_r+0x1a>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f80c 	bl	8008318 <__swsetup_r>
 8008300:	2800      	cmp	r0, #0
 8008302:	d0cb      	beq.n	800829c <__swbuf_r+0x28>
 8008304:	f04f 37ff 	mov.w	r7, #4294967295
 8008308:	e7ea      	b.n	80082e0 <__swbuf_r+0x6c>
 800830a:	bf00      	nop
 800830c:	08008db0 	.word	0x08008db0
 8008310:	08008dd0 	.word	0x08008dd0
 8008314:	08008d90 	.word	0x08008d90

08008318 <__swsetup_r>:
 8008318:	4b32      	ldr	r3, [pc, #200]	; (80083e4 <__swsetup_r+0xcc>)
 800831a:	b570      	push	{r4, r5, r6, lr}
 800831c:	681d      	ldr	r5, [r3, #0]
 800831e:	4606      	mov	r6, r0
 8008320:	460c      	mov	r4, r1
 8008322:	b125      	cbz	r5, 800832e <__swsetup_r+0x16>
 8008324:	69ab      	ldr	r3, [r5, #24]
 8008326:	b913      	cbnz	r3, 800832e <__swsetup_r+0x16>
 8008328:	4628      	mov	r0, r5
 800832a:	f000 f985 	bl	8008638 <__sinit>
 800832e:	4b2e      	ldr	r3, [pc, #184]	; (80083e8 <__swsetup_r+0xd0>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d10f      	bne.n	8008354 <__swsetup_r+0x3c>
 8008334:	686c      	ldr	r4, [r5, #4]
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800833c:	0719      	lsls	r1, r3, #28
 800833e:	d42c      	bmi.n	800839a <__swsetup_r+0x82>
 8008340:	06dd      	lsls	r5, r3, #27
 8008342:	d411      	bmi.n	8008368 <__swsetup_r+0x50>
 8008344:	2309      	movs	r3, #9
 8008346:	6033      	str	r3, [r6, #0]
 8008348:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800834c:	81a3      	strh	r3, [r4, #12]
 800834e:	f04f 30ff 	mov.w	r0, #4294967295
 8008352:	e03e      	b.n	80083d2 <__swsetup_r+0xba>
 8008354:	4b25      	ldr	r3, [pc, #148]	; (80083ec <__swsetup_r+0xd4>)
 8008356:	429c      	cmp	r4, r3
 8008358:	d101      	bne.n	800835e <__swsetup_r+0x46>
 800835a:	68ac      	ldr	r4, [r5, #8]
 800835c:	e7eb      	b.n	8008336 <__swsetup_r+0x1e>
 800835e:	4b24      	ldr	r3, [pc, #144]	; (80083f0 <__swsetup_r+0xd8>)
 8008360:	429c      	cmp	r4, r3
 8008362:	bf08      	it	eq
 8008364:	68ec      	ldreq	r4, [r5, #12]
 8008366:	e7e6      	b.n	8008336 <__swsetup_r+0x1e>
 8008368:	0758      	lsls	r0, r3, #29
 800836a:	d512      	bpl.n	8008392 <__swsetup_r+0x7a>
 800836c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800836e:	b141      	cbz	r1, 8008382 <__swsetup_r+0x6a>
 8008370:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008374:	4299      	cmp	r1, r3
 8008376:	d002      	beq.n	800837e <__swsetup_r+0x66>
 8008378:	4630      	mov	r0, r6
 800837a:	f7ff fb9d 	bl	8007ab8 <_free_r>
 800837e:	2300      	movs	r3, #0
 8008380:	6363      	str	r3, [r4, #52]	; 0x34
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	2300      	movs	r3, #0
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	f043 0308 	orr.w	r3, r3, #8
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	b94b      	cbnz	r3, 80083b2 <__swsetup_r+0x9a>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a8:	d003      	beq.n	80083b2 <__swsetup_r+0x9a>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4630      	mov	r0, r6
 80083ae:	f000 fa09 	bl	80087c4 <__smakebuf_r>
 80083b2:	89a0      	ldrh	r0, [r4, #12]
 80083b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083b8:	f010 0301 	ands.w	r3, r0, #1
 80083bc:	d00a      	beq.n	80083d4 <__swsetup_r+0xbc>
 80083be:	2300      	movs	r3, #0
 80083c0:	60a3      	str	r3, [r4, #8]
 80083c2:	6963      	ldr	r3, [r4, #20]
 80083c4:	425b      	negs	r3, r3
 80083c6:	61a3      	str	r3, [r4, #24]
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	b943      	cbnz	r3, 80083de <__swsetup_r+0xc6>
 80083cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d0:	d1ba      	bne.n	8008348 <__swsetup_r+0x30>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	0781      	lsls	r1, r0, #30
 80083d6:	bf58      	it	pl
 80083d8:	6963      	ldrpl	r3, [r4, #20]
 80083da:	60a3      	str	r3, [r4, #8]
 80083dc:	e7f4      	b.n	80083c8 <__swsetup_r+0xb0>
 80083de:	2000      	movs	r0, #0
 80083e0:	e7f7      	b.n	80083d2 <__swsetup_r+0xba>
 80083e2:	bf00      	nop
 80083e4:	2000000c 	.word	0x2000000c
 80083e8:	08008db0 	.word	0x08008db0
 80083ec:	08008dd0 	.word	0x08008dd0
 80083f0:	08008d90 	.word	0x08008d90

080083f4 <abort>:
 80083f4:	b508      	push	{r3, lr}
 80083f6:	2006      	movs	r0, #6
 80083f8:	f000 fa58 	bl	80088ac <raise>
 80083fc:	2001      	movs	r0, #1
 80083fe:	f7f9 fd23 	bl	8001e48 <_exit>
	...

08008404 <__sflush_r>:
 8008404:	898a      	ldrh	r2, [r1, #12]
 8008406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	0710      	lsls	r0, r2, #28
 800840e:	460c      	mov	r4, r1
 8008410:	d458      	bmi.n	80084c4 <__sflush_r+0xc0>
 8008412:	684b      	ldr	r3, [r1, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	dc05      	bgt.n	8008424 <__sflush_r+0x20>
 8008418:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800841a:	2b00      	cmp	r3, #0
 800841c:	dc02      	bgt.n	8008424 <__sflush_r+0x20>
 800841e:	2000      	movs	r0, #0
 8008420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008424:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008426:	2e00      	cmp	r6, #0
 8008428:	d0f9      	beq.n	800841e <__sflush_r+0x1a>
 800842a:	2300      	movs	r3, #0
 800842c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008430:	682f      	ldr	r7, [r5, #0]
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	d032      	beq.n	800849c <__sflush_r+0x98>
 8008436:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	075a      	lsls	r2, r3, #29
 800843c:	d505      	bpl.n	800844a <__sflush_r+0x46>
 800843e:	6863      	ldr	r3, [r4, #4]
 8008440:	1ac0      	subs	r0, r0, r3
 8008442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008444:	b10b      	cbz	r3, 800844a <__sflush_r+0x46>
 8008446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008448:	1ac0      	subs	r0, r0, r3
 800844a:	2300      	movs	r3, #0
 800844c:	4602      	mov	r2, r0
 800844e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008450:	6a21      	ldr	r1, [r4, #32]
 8008452:	4628      	mov	r0, r5
 8008454:	47b0      	blx	r6
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	d106      	bne.n	800846a <__sflush_r+0x66>
 800845c:	6829      	ldr	r1, [r5, #0]
 800845e:	291d      	cmp	r1, #29
 8008460:	d82c      	bhi.n	80084bc <__sflush_r+0xb8>
 8008462:	4a2a      	ldr	r2, [pc, #168]	; (800850c <__sflush_r+0x108>)
 8008464:	40ca      	lsrs	r2, r1
 8008466:	07d6      	lsls	r6, r2, #31
 8008468:	d528      	bpl.n	80084bc <__sflush_r+0xb8>
 800846a:	2200      	movs	r2, #0
 800846c:	6062      	str	r2, [r4, #4]
 800846e:	04d9      	lsls	r1, r3, #19
 8008470:	6922      	ldr	r2, [r4, #16]
 8008472:	6022      	str	r2, [r4, #0]
 8008474:	d504      	bpl.n	8008480 <__sflush_r+0x7c>
 8008476:	1c42      	adds	r2, r0, #1
 8008478:	d101      	bne.n	800847e <__sflush_r+0x7a>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b903      	cbnz	r3, 8008480 <__sflush_r+0x7c>
 800847e:	6560      	str	r0, [r4, #84]	; 0x54
 8008480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008482:	602f      	str	r7, [r5, #0]
 8008484:	2900      	cmp	r1, #0
 8008486:	d0ca      	beq.n	800841e <__sflush_r+0x1a>
 8008488:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800848c:	4299      	cmp	r1, r3
 800848e:	d002      	beq.n	8008496 <__sflush_r+0x92>
 8008490:	4628      	mov	r0, r5
 8008492:	f7ff fb11 	bl	8007ab8 <_free_r>
 8008496:	2000      	movs	r0, #0
 8008498:	6360      	str	r0, [r4, #52]	; 0x34
 800849a:	e7c1      	b.n	8008420 <__sflush_r+0x1c>
 800849c:	6a21      	ldr	r1, [r4, #32]
 800849e:	2301      	movs	r3, #1
 80084a0:	4628      	mov	r0, r5
 80084a2:	47b0      	blx	r6
 80084a4:	1c41      	adds	r1, r0, #1
 80084a6:	d1c7      	bne.n	8008438 <__sflush_r+0x34>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0c4      	beq.n	8008438 <__sflush_r+0x34>
 80084ae:	2b1d      	cmp	r3, #29
 80084b0:	d001      	beq.n	80084b6 <__sflush_r+0xb2>
 80084b2:	2b16      	cmp	r3, #22
 80084b4:	d101      	bne.n	80084ba <__sflush_r+0xb6>
 80084b6:	602f      	str	r7, [r5, #0]
 80084b8:	e7b1      	b.n	800841e <__sflush_r+0x1a>
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	e7ad      	b.n	8008420 <__sflush_r+0x1c>
 80084c4:	690f      	ldr	r7, [r1, #16]
 80084c6:	2f00      	cmp	r7, #0
 80084c8:	d0a9      	beq.n	800841e <__sflush_r+0x1a>
 80084ca:	0793      	lsls	r3, r2, #30
 80084cc:	680e      	ldr	r6, [r1, #0]
 80084ce:	bf08      	it	eq
 80084d0:	694b      	ldreq	r3, [r1, #20]
 80084d2:	600f      	str	r7, [r1, #0]
 80084d4:	bf18      	it	ne
 80084d6:	2300      	movne	r3, #0
 80084d8:	eba6 0807 	sub.w	r8, r6, r7
 80084dc:	608b      	str	r3, [r1, #8]
 80084de:	f1b8 0f00 	cmp.w	r8, #0
 80084e2:	dd9c      	ble.n	800841e <__sflush_r+0x1a>
 80084e4:	6a21      	ldr	r1, [r4, #32]
 80084e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084e8:	4643      	mov	r3, r8
 80084ea:	463a      	mov	r2, r7
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b0      	blx	r6
 80084f0:	2800      	cmp	r0, #0
 80084f2:	dc06      	bgt.n	8008502 <__sflush_r+0xfe>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	e78e      	b.n	8008420 <__sflush_r+0x1c>
 8008502:	4407      	add	r7, r0
 8008504:	eba8 0800 	sub.w	r8, r8, r0
 8008508:	e7e9      	b.n	80084de <__sflush_r+0xda>
 800850a:	bf00      	nop
 800850c:	20400001 	.word	0x20400001

08008510 <_fflush_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	690b      	ldr	r3, [r1, #16]
 8008514:	4605      	mov	r5, r0
 8008516:	460c      	mov	r4, r1
 8008518:	b913      	cbnz	r3, 8008520 <_fflush_r+0x10>
 800851a:	2500      	movs	r5, #0
 800851c:	4628      	mov	r0, r5
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	b118      	cbz	r0, 800852a <_fflush_r+0x1a>
 8008522:	6983      	ldr	r3, [r0, #24]
 8008524:	b90b      	cbnz	r3, 800852a <_fflush_r+0x1a>
 8008526:	f000 f887 	bl	8008638 <__sinit>
 800852a:	4b14      	ldr	r3, [pc, #80]	; (800857c <_fflush_r+0x6c>)
 800852c:	429c      	cmp	r4, r3
 800852e:	d11b      	bne.n	8008568 <_fflush_r+0x58>
 8008530:	686c      	ldr	r4, [r5, #4]
 8008532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0ef      	beq.n	800851a <_fflush_r+0xa>
 800853a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800853c:	07d0      	lsls	r0, r2, #31
 800853e:	d404      	bmi.n	800854a <_fflush_r+0x3a>
 8008540:	0599      	lsls	r1, r3, #22
 8008542:	d402      	bmi.n	800854a <_fflush_r+0x3a>
 8008544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008546:	f000 f915 	bl	8008774 <__retarget_lock_acquire_recursive>
 800854a:	4628      	mov	r0, r5
 800854c:	4621      	mov	r1, r4
 800854e:	f7ff ff59 	bl	8008404 <__sflush_r>
 8008552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008554:	07da      	lsls	r2, r3, #31
 8008556:	4605      	mov	r5, r0
 8008558:	d4e0      	bmi.n	800851c <_fflush_r+0xc>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	059b      	lsls	r3, r3, #22
 800855e:	d4dd      	bmi.n	800851c <_fflush_r+0xc>
 8008560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008562:	f000 f908 	bl	8008776 <__retarget_lock_release_recursive>
 8008566:	e7d9      	b.n	800851c <_fflush_r+0xc>
 8008568:	4b05      	ldr	r3, [pc, #20]	; (8008580 <_fflush_r+0x70>)
 800856a:	429c      	cmp	r4, r3
 800856c:	d101      	bne.n	8008572 <_fflush_r+0x62>
 800856e:	68ac      	ldr	r4, [r5, #8]
 8008570:	e7df      	b.n	8008532 <_fflush_r+0x22>
 8008572:	4b04      	ldr	r3, [pc, #16]	; (8008584 <_fflush_r+0x74>)
 8008574:	429c      	cmp	r4, r3
 8008576:	bf08      	it	eq
 8008578:	68ec      	ldreq	r4, [r5, #12]
 800857a:	e7da      	b.n	8008532 <_fflush_r+0x22>
 800857c:	08008db0 	.word	0x08008db0
 8008580:	08008dd0 	.word	0x08008dd0
 8008584:	08008d90 	.word	0x08008d90

08008588 <std>:
 8008588:	2300      	movs	r3, #0
 800858a:	b510      	push	{r4, lr}
 800858c:	4604      	mov	r4, r0
 800858e:	e9c0 3300 	strd	r3, r3, [r0]
 8008592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008596:	6083      	str	r3, [r0, #8]
 8008598:	8181      	strh	r1, [r0, #12]
 800859a:	6643      	str	r3, [r0, #100]	; 0x64
 800859c:	81c2      	strh	r2, [r0, #14]
 800859e:	6183      	str	r3, [r0, #24]
 80085a0:	4619      	mov	r1, r3
 80085a2:	2208      	movs	r2, #8
 80085a4:	305c      	adds	r0, #92	; 0x5c
 80085a6:	f7ff f949 	bl	800783c <memset>
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <std+0x38>)
 80085ac:	6263      	str	r3, [r4, #36]	; 0x24
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x3c>)
 80085b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x40>)
 80085b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x44>)
 80085b8:	6224      	str	r4, [r4, #32]
 80085ba:	6323      	str	r3, [r4, #48]	; 0x30
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	bf00      	nop
 80085c0:	080088e5 	.word	0x080088e5
 80085c4:	08008907 	.word	0x08008907
 80085c8:	0800893f 	.word	0x0800893f
 80085cc:	08008963 	.word	0x08008963

080085d0 <_cleanup_r>:
 80085d0:	4901      	ldr	r1, [pc, #4]	; (80085d8 <_cleanup_r+0x8>)
 80085d2:	f000 b8af 	b.w	8008734 <_fwalk_reent>
 80085d6:	bf00      	nop
 80085d8:	08008511 	.word	0x08008511

080085dc <__sfmoreglue>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	2268      	movs	r2, #104	; 0x68
 80085e0:	1e4d      	subs	r5, r1, #1
 80085e2:	4355      	muls	r5, r2
 80085e4:	460e      	mov	r6, r1
 80085e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ea:	f7ff fad1 	bl	8007b90 <_malloc_r>
 80085ee:	4604      	mov	r4, r0
 80085f0:	b140      	cbz	r0, 8008604 <__sfmoreglue+0x28>
 80085f2:	2100      	movs	r1, #0
 80085f4:	e9c0 1600 	strd	r1, r6, [r0]
 80085f8:	300c      	adds	r0, #12
 80085fa:	60a0      	str	r0, [r4, #8]
 80085fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008600:	f7ff f91c 	bl	800783c <memset>
 8008604:	4620      	mov	r0, r4
 8008606:	bd70      	pop	{r4, r5, r6, pc}

08008608 <__sfp_lock_acquire>:
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <__sfp_lock_acquire+0x8>)
 800860a:	f000 b8b3 	b.w	8008774 <__retarget_lock_acquire_recursive>
 800860e:	bf00      	nop
 8008610:	20000add 	.word	0x20000add

08008614 <__sfp_lock_release>:
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <__sfp_lock_release+0x8>)
 8008616:	f000 b8ae 	b.w	8008776 <__retarget_lock_release_recursive>
 800861a:	bf00      	nop
 800861c:	20000add 	.word	0x20000add

08008620 <__sinit_lock_acquire>:
 8008620:	4801      	ldr	r0, [pc, #4]	; (8008628 <__sinit_lock_acquire+0x8>)
 8008622:	f000 b8a7 	b.w	8008774 <__retarget_lock_acquire_recursive>
 8008626:	bf00      	nop
 8008628:	20000ade 	.word	0x20000ade

0800862c <__sinit_lock_release>:
 800862c:	4801      	ldr	r0, [pc, #4]	; (8008634 <__sinit_lock_release+0x8>)
 800862e:	f000 b8a2 	b.w	8008776 <__retarget_lock_release_recursive>
 8008632:	bf00      	nop
 8008634:	20000ade 	.word	0x20000ade

08008638 <__sinit>:
 8008638:	b510      	push	{r4, lr}
 800863a:	4604      	mov	r4, r0
 800863c:	f7ff fff0 	bl	8008620 <__sinit_lock_acquire>
 8008640:	69a3      	ldr	r3, [r4, #24]
 8008642:	b11b      	cbz	r3, 800864c <__sinit+0x14>
 8008644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008648:	f7ff bff0 	b.w	800862c <__sinit_lock_release>
 800864c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008650:	6523      	str	r3, [r4, #80]	; 0x50
 8008652:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <__sinit+0x68>)
 8008654:	4a13      	ldr	r2, [pc, #76]	; (80086a4 <__sinit+0x6c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	62a2      	str	r2, [r4, #40]	; 0x28
 800865a:	42a3      	cmp	r3, r4
 800865c:	bf04      	itt	eq
 800865e:	2301      	moveq	r3, #1
 8008660:	61a3      	streq	r3, [r4, #24]
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f820 	bl	80086a8 <__sfp>
 8008668:	6060      	str	r0, [r4, #4]
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f81c 	bl	80086a8 <__sfp>
 8008670:	60a0      	str	r0, [r4, #8]
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f818 	bl	80086a8 <__sfp>
 8008678:	2200      	movs	r2, #0
 800867a:	60e0      	str	r0, [r4, #12]
 800867c:	2104      	movs	r1, #4
 800867e:	6860      	ldr	r0, [r4, #4]
 8008680:	f7ff ff82 	bl	8008588 <std>
 8008684:	68a0      	ldr	r0, [r4, #8]
 8008686:	2201      	movs	r2, #1
 8008688:	2109      	movs	r1, #9
 800868a:	f7ff ff7d 	bl	8008588 <std>
 800868e:	68e0      	ldr	r0, [r4, #12]
 8008690:	2202      	movs	r2, #2
 8008692:	2112      	movs	r1, #18
 8008694:	f7ff ff78 	bl	8008588 <std>
 8008698:	2301      	movs	r3, #1
 800869a:	61a3      	str	r3, [r4, #24]
 800869c:	e7d2      	b.n	8008644 <__sinit+0xc>
 800869e:	bf00      	nop
 80086a0:	08008ba8 	.word	0x08008ba8
 80086a4:	080085d1 	.word	0x080085d1

080086a8 <__sfp>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4607      	mov	r7, r0
 80086ac:	f7ff ffac 	bl	8008608 <__sfp_lock_acquire>
 80086b0:	4b1e      	ldr	r3, [pc, #120]	; (800872c <__sfp+0x84>)
 80086b2:	681e      	ldr	r6, [r3, #0]
 80086b4:	69b3      	ldr	r3, [r6, #24]
 80086b6:	b913      	cbnz	r3, 80086be <__sfp+0x16>
 80086b8:	4630      	mov	r0, r6
 80086ba:	f7ff ffbd 	bl	8008638 <__sinit>
 80086be:	3648      	adds	r6, #72	; 0x48
 80086c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	d503      	bpl.n	80086d0 <__sfp+0x28>
 80086c8:	6833      	ldr	r3, [r6, #0]
 80086ca:	b30b      	cbz	r3, 8008710 <__sfp+0x68>
 80086cc:	6836      	ldr	r6, [r6, #0]
 80086ce:	e7f7      	b.n	80086c0 <__sfp+0x18>
 80086d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d4:	b9d5      	cbnz	r5, 800870c <__sfp+0x64>
 80086d6:	4b16      	ldr	r3, [pc, #88]	; (8008730 <__sfp+0x88>)
 80086d8:	60e3      	str	r3, [r4, #12]
 80086da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086de:	6665      	str	r5, [r4, #100]	; 0x64
 80086e0:	f000 f847 	bl	8008772 <__retarget_lock_init_recursive>
 80086e4:	f7ff ff96 	bl	8008614 <__sfp_lock_release>
 80086e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f0:	6025      	str	r5, [r4, #0]
 80086f2:	61a5      	str	r5, [r4, #24]
 80086f4:	2208      	movs	r2, #8
 80086f6:	4629      	mov	r1, r5
 80086f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086fc:	f7ff f89e 	bl	800783c <memset>
 8008700:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008704:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008708:	4620      	mov	r0, r4
 800870a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870c:	3468      	adds	r4, #104	; 0x68
 800870e:	e7d9      	b.n	80086c4 <__sfp+0x1c>
 8008710:	2104      	movs	r1, #4
 8008712:	4638      	mov	r0, r7
 8008714:	f7ff ff62 	bl	80085dc <__sfmoreglue>
 8008718:	4604      	mov	r4, r0
 800871a:	6030      	str	r0, [r6, #0]
 800871c:	2800      	cmp	r0, #0
 800871e:	d1d5      	bne.n	80086cc <__sfp+0x24>
 8008720:	f7ff ff78 	bl	8008614 <__sfp_lock_release>
 8008724:	230c      	movs	r3, #12
 8008726:	603b      	str	r3, [r7, #0]
 8008728:	e7ee      	b.n	8008708 <__sfp+0x60>
 800872a:	bf00      	nop
 800872c:	08008ba8 	.word	0x08008ba8
 8008730:	ffff0001 	.word	0xffff0001

08008734 <_fwalk_reent>:
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4606      	mov	r6, r0
 800873a:	4688      	mov	r8, r1
 800873c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008740:	2700      	movs	r7, #0
 8008742:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008746:	f1b9 0901 	subs.w	r9, r9, #1
 800874a:	d505      	bpl.n	8008758 <_fwalk_reent+0x24>
 800874c:	6824      	ldr	r4, [r4, #0]
 800874e:	2c00      	cmp	r4, #0
 8008750:	d1f7      	bne.n	8008742 <_fwalk_reent+0xe>
 8008752:	4638      	mov	r0, r7
 8008754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008758:	89ab      	ldrh	r3, [r5, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d907      	bls.n	800876e <_fwalk_reent+0x3a>
 800875e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008762:	3301      	adds	r3, #1
 8008764:	d003      	beq.n	800876e <_fwalk_reent+0x3a>
 8008766:	4629      	mov	r1, r5
 8008768:	4630      	mov	r0, r6
 800876a:	47c0      	blx	r8
 800876c:	4307      	orrs	r7, r0
 800876e:	3568      	adds	r5, #104	; 0x68
 8008770:	e7e9      	b.n	8008746 <_fwalk_reent+0x12>

08008772 <__retarget_lock_init_recursive>:
 8008772:	4770      	bx	lr

08008774 <__retarget_lock_acquire_recursive>:
 8008774:	4770      	bx	lr

08008776 <__retarget_lock_release_recursive>:
 8008776:	4770      	bx	lr

08008778 <__swhatbuf_r>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	460e      	mov	r6, r1
 800877c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008780:	2900      	cmp	r1, #0
 8008782:	b096      	sub	sp, #88	; 0x58
 8008784:	4614      	mov	r4, r2
 8008786:	461d      	mov	r5, r3
 8008788:	da08      	bge.n	800879c <__swhatbuf_r+0x24>
 800878a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	061a      	lsls	r2, r3, #24
 8008794:	d410      	bmi.n	80087b8 <__swhatbuf_r+0x40>
 8008796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879a:	e00e      	b.n	80087ba <__swhatbuf_r+0x42>
 800879c:	466a      	mov	r2, sp
 800879e:	f000 f907 	bl	80089b0 <_fstat_r>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	dbf1      	blt.n	800878a <__swhatbuf_r+0x12>
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b0:	425a      	negs	r2, r3
 80087b2:	415a      	adcs	r2, r3
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	e7ee      	b.n	8008796 <__swhatbuf_r+0x1e>
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	2000      	movs	r0, #0
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	b016      	add	sp, #88	; 0x58
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c4 <__smakebuf_r>:
 80087c4:	898b      	ldrh	r3, [r1, #12]
 80087c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087c8:	079d      	lsls	r5, r3, #30
 80087ca:	4606      	mov	r6, r0
 80087cc:	460c      	mov	r4, r1
 80087ce:	d507      	bpl.n	80087e0 <__smakebuf_r+0x1c>
 80087d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	2301      	movs	r3, #1
 80087da:	6163      	str	r3, [r4, #20]
 80087dc:	b002      	add	sp, #8
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	ab01      	add	r3, sp, #4
 80087e2:	466a      	mov	r2, sp
 80087e4:	f7ff ffc8 	bl	8008778 <__swhatbuf_r>
 80087e8:	9900      	ldr	r1, [sp, #0]
 80087ea:	4605      	mov	r5, r0
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff f9cf 	bl	8007b90 <_malloc_r>
 80087f2:	b948      	cbnz	r0, 8008808 <__smakebuf_r+0x44>
 80087f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f8:	059a      	lsls	r2, r3, #22
 80087fa:	d4ef      	bmi.n	80087dc <__smakebuf_r+0x18>
 80087fc:	f023 0303 	bic.w	r3, r3, #3
 8008800:	f043 0302 	orr.w	r3, r3, #2
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	e7e3      	b.n	80087d0 <__smakebuf_r+0xc>
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <__smakebuf_r+0x7c>)
 800880a:	62b3      	str	r3, [r6, #40]	; 0x28
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	6020      	str	r0, [r4, #0]
 8008810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	6163      	str	r3, [r4, #20]
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	6120      	str	r0, [r4, #16]
 800881e:	b15b      	cbz	r3, 8008838 <__smakebuf_r+0x74>
 8008820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008824:	4630      	mov	r0, r6
 8008826:	f000 f8d5 	bl	80089d4 <_isatty_r>
 800882a:	b128      	cbz	r0, 8008838 <__smakebuf_r+0x74>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f023 0303 	bic.w	r3, r3, #3
 8008832:	f043 0301 	orr.w	r3, r3, #1
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	89a0      	ldrh	r0, [r4, #12]
 800883a:	4305      	orrs	r5, r0
 800883c:	81a5      	strh	r5, [r4, #12]
 800883e:	e7cd      	b.n	80087dc <__smakebuf_r+0x18>
 8008840:	080085d1 	.word	0x080085d1

08008844 <__malloc_lock>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__malloc_lock+0x8>)
 8008846:	f7ff bf95 	b.w	8008774 <__retarget_lock_acquire_recursive>
 800884a:	bf00      	nop
 800884c:	20000adc 	.word	0x20000adc

08008850 <__malloc_unlock>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__malloc_unlock+0x8>)
 8008852:	f7ff bf90 	b.w	8008776 <__retarget_lock_release_recursive>
 8008856:	bf00      	nop
 8008858:	20000adc 	.word	0x20000adc

0800885c <_raise_r>:
 800885c:	291f      	cmp	r1, #31
 800885e:	b538      	push	{r3, r4, r5, lr}
 8008860:	4604      	mov	r4, r0
 8008862:	460d      	mov	r5, r1
 8008864:	d904      	bls.n	8008870 <_raise_r+0x14>
 8008866:	2316      	movs	r3, #22
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	f04f 30ff 	mov.w	r0, #4294967295
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008872:	b112      	cbz	r2, 800887a <_raise_r+0x1e>
 8008874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008878:	b94b      	cbnz	r3, 800888e <_raise_r+0x32>
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f830 	bl	80088e0 <_getpid_r>
 8008880:	462a      	mov	r2, r5
 8008882:	4601      	mov	r1, r0
 8008884:	4620      	mov	r0, r4
 8008886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800888a:	f000 b817 	b.w	80088bc <_kill_r>
 800888e:	2b01      	cmp	r3, #1
 8008890:	d00a      	beq.n	80088a8 <_raise_r+0x4c>
 8008892:	1c59      	adds	r1, r3, #1
 8008894:	d103      	bne.n	800889e <_raise_r+0x42>
 8008896:	2316      	movs	r3, #22
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	2001      	movs	r0, #1
 800889c:	e7e7      	b.n	800886e <_raise_r+0x12>
 800889e:	2400      	movs	r4, #0
 80088a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088a4:	4628      	mov	r0, r5
 80088a6:	4798      	blx	r3
 80088a8:	2000      	movs	r0, #0
 80088aa:	e7e0      	b.n	800886e <_raise_r+0x12>

080088ac <raise>:
 80088ac:	4b02      	ldr	r3, [pc, #8]	; (80088b8 <raise+0xc>)
 80088ae:	4601      	mov	r1, r0
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	f7ff bfd3 	b.w	800885c <_raise_r>
 80088b6:	bf00      	nop
 80088b8:	2000000c 	.word	0x2000000c

080088bc <_kill_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d07      	ldr	r5, [pc, #28]	; (80088dc <_kill_r+0x20>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	602b      	str	r3, [r5, #0]
 80088ca:	f7f9 faad 	bl	8001e28 <_kill>
 80088ce:	1c43      	adds	r3, r0, #1
 80088d0:	d102      	bne.n	80088d8 <_kill_r+0x1c>
 80088d2:	682b      	ldr	r3, [r5, #0]
 80088d4:	b103      	cbz	r3, 80088d8 <_kill_r+0x1c>
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
 80088da:	bf00      	nop
 80088dc:	20000ae0 	.word	0x20000ae0

080088e0 <_getpid_r>:
 80088e0:	f7f9 ba9a 	b.w	8001e18 <_getpid>

080088e4 <__sread>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	f000 f894 	bl	8008a18 <_read_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	bfab      	itete	ge
 80088f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f6:	89a3      	ldrhlt	r3, [r4, #12]
 80088f8:	181b      	addge	r3, r3, r0
 80088fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fe:	bfac      	ite	ge
 8008900:	6563      	strge	r3, [r4, #84]	; 0x54
 8008902:	81a3      	strhlt	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__swrite>:
 8008906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	461f      	mov	r7, r3
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	05db      	lsls	r3, r3, #23
 8008910:	4605      	mov	r5, r0
 8008912:	460c      	mov	r4, r1
 8008914:	4616      	mov	r6, r2
 8008916:	d505      	bpl.n	8008924 <__swrite+0x1e>
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	2302      	movs	r3, #2
 800891e:	2200      	movs	r2, #0
 8008920:	f000 f868 	bl	80089f4 <_lseek_r>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800892a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	4632      	mov	r2, r6
 8008932:	463b      	mov	r3, r7
 8008934:	4628      	mov	r0, r5
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	f000 b817 	b.w	800896c <_write_r>

0800893e <__sseek>:
 800893e:	b510      	push	{r4, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008946:	f000 f855 	bl	80089f4 <_lseek_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	bf15      	itete	ne
 8008950:	6560      	strne	r0, [r4, #84]	; 0x54
 8008952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800895a:	81a3      	strheq	r3, [r4, #12]
 800895c:	bf18      	it	ne
 800895e:	81a3      	strhne	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__sclose>:
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 b813 	b.w	8008990 <_close_r>
	...

0800896c <_write_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d07      	ldr	r5, [pc, #28]	; (800898c <_write_r+0x20>)
 8008970:	4604      	mov	r4, r0
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	2200      	movs	r2, #0
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f7f9 fa8b 	bl	8001e96 <_write>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_write_r+0x1e>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	b103      	cbz	r3, 800898a <_write_r+0x1e>
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	20000ae0 	.word	0x20000ae0

08008990 <_close_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4d06      	ldr	r5, [pc, #24]	; (80089ac <_close_r+0x1c>)
 8008994:	2300      	movs	r3, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	602b      	str	r3, [r5, #0]
 800899c:	f7f9 fa97 	bl	8001ece <_close>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_close_r+0x1a>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_close_r+0x1a>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20000ae0 	.word	0x20000ae0

080089b0 <_fstat_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_fstat_r+0x20>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	4611      	mov	r1, r2
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	f7f9 fa92 	bl	8001ee6 <_fstat>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	d102      	bne.n	80089cc <_fstat_r+0x1c>
 80089c6:	682b      	ldr	r3, [r5, #0]
 80089c8:	b103      	cbz	r3, 80089cc <_fstat_r+0x1c>
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	bd38      	pop	{r3, r4, r5, pc}
 80089ce:	bf00      	nop
 80089d0:	20000ae0 	.word	0x20000ae0

080089d4 <_isatty_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d06      	ldr	r5, [pc, #24]	; (80089f0 <_isatty_r+0x1c>)
 80089d8:	2300      	movs	r3, #0
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	602b      	str	r3, [r5, #0]
 80089e0:	f7f9 fa91 	bl	8001f06 <_isatty>
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d102      	bne.n	80089ee <_isatty_r+0x1a>
 80089e8:	682b      	ldr	r3, [r5, #0]
 80089ea:	b103      	cbz	r3, 80089ee <_isatty_r+0x1a>
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	bd38      	pop	{r3, r4, r5, pc}
 80089f0:	20000ae0 	.word	0x20000ae0

080089f4 <_lseek_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d07      	ldr	r5, [pc, #28]	; (8008a14 <_lseek_r+0x20>)
 80089f8:	4604      	mov	r4, r0
 80089fa:	4608      	mov	r0, r1
 80089fc:	4611      	mov	r1, r2
 80089fe:	2200      	movs	r2, #0
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f7f9 fa8a 	bl	8001f1c <_lseek>
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d102      	bne.n	8008a12 <_lseek_r+0x1e>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	b103      	cbz	r3, 8008a12 <_lseek_r+0x1e>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	bd38      	pop	{r3, r4, r5, pc}
 8008a14:	20000ae0 	.word	0x20000ae0

08008a18 <_read_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d07      	ldr	r5, [pc, #28]	; (8008a38 <_read_r+0x20>)
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4611      	mov	r1, r2
 8008a22:	2200      	movs	r2, #0
 8008a24:	602a      	str	r2, [r5, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	f7f9 fa18 	bl	8001e5c <_read>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_read_r+0x1e>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_read_r+0x1e>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20000ae0 	.word	0x20000ae0

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
