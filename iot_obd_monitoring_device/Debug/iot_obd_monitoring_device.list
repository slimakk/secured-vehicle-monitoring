
iot_obd_monitoring_device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a400  0800a400  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a400  0800a400  0001a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a408  0800a408  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a40c  0800a40c  0001a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  20000070  0800a480  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  0800a480  00020b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aed2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e80  00000000  00000000  0003af72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0003edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00040410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ddf  00000000  00000000  00041878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7bd  00000000  00000000  00068657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e407f  00000000  00000000  00085e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169e93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066fc  00000000  00000000  00169ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f28 	.word	0x08009f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009f28 	.word	0x08009f28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <KLine_Init>:

static void MX_GPIO_KLineUART_Init(void);
static void UART_PIN_State(uint8_t state);
static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght);

obd_protocol KLine_Init(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	MX_GPIO_KLineUART_Init();
 8000dc6:	f000 f909 	bl	8000fdc <MX_GPIO_KLineUART_Init>
//	5 Baud address 0x33
	HAL_Delay(3000);
 8000dca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000dce:	f002 f989 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(0); //0
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f000 f918 	bl	8001008 <UART_PIN_State>
	HAL_Delay(200);
 8000dd8:	20c8      	movs	r0, #200	; 0xc8
 8000dda:	f002 f983 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(1);//11
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 f912 	bl	8001008 <UART_PIN_State>
	HAL_Delay(400);
 8000de4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000de8:	f002 f97c 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(0);//00
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f90b 	bl	8001008 <UART_PIN_State>
	HAL_Delay(400);
 8000df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000df6:	f002 f975 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(1);//11
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f904 	bl	8001008 <UART_PIN_State>
	HAL_Delay(400);
 8000e00:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e04:	f002 f96e 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(0);//00
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 f8fd 	bl	8001008 <UART_PIN_State>
	HAL_Delay(400);
 8000e0e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e12:	f002 f967 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(1);//1
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 f8f6 	bl	8001008 <UART_PIN_State>

	MX_USART1_UART_Init();
 8000e1c:	f001 fd5e 	bl	80028dc <MX_USART1_UART_Init>

	HAL_UART_Receive(KLINE, uartBuf, 3, 500);
 8000e20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e24:	2203      	movs	r2, #3
 8000e26:	492b      	ldr	r1, [pc, #172]	; (8000ed4 <KLine_Init+0x114>)
 8000e28:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <KLine_Init+0x118>)
 8000e2a:	f006 fc5e 	bl	80076ea <HAL_UART_Receive>

	if(uartBuf[0] != 0x55)
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <KLine_Init+0x114>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b55      	cmp	r3, #85	; 0x55
 8000e34:	d001      	beq.n	8000e3a <KLine_Init+0x7a>
	{
		return OBD_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e047      	b.n	8000eca <KLine_Init+0x10a>
	}
	else if(uartBuf[1] == uartBuf[2])
 8000e3a:	4b26      	ldr	r3, [pc, #152]	; (8000ed4 <KLine_Init+0x114>)
 8000e3c:	785a      	ldrb	r2, [r3, #1]
 8000e3e:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <KLine_Init+0x114>)
 8000e40:	789b      	ldrb	r3, [r3, #2]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d122      	bne.n	8000e8c <KLine_Init+0xcc>
	{
		if(uartBuf[1] == 0x08 || 0x94)
		{
			uint8_t inv_kb = ~uartBuf[1];
 8000e46:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <KLine_Init+0x114>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(25);
 8000e50:	2019      	movs	r0, #25
 8000e52:	f002 f947 	bl	80030e4 <HAL_Delay>
			HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 8000e56:	1df9      	adds	r1, r7, #7
 8000e58:	2332      	movs	r3, #50	; 0x32
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <KLine_Init+0x118>)
 8000e5e:	f006 fbb0 	bl	80075c2 <HAL_UART_Transmit>
			HAL_Delay(25);
 8000e62:	2019      	movs	r0, #25
 8000e64:	f002 f93e 	bl	80030e4 <HAL_Delay>
			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <KLine_Init+0x118>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	8b1b      	ldrh	r3, [r3, #24]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <KLine_Init+0x118>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0208 	orr.w	r2, r2, #8
 8000e78:	b292      	uxth	r2, r2
 8000e7a:	831a      	strh	r2, [r3, #24]
			HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 8000e7c:	2364      	movs	r3, #100	; 0x64
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4916      	ldr	r1, [pc, #88]	; (8000edc <KLine_Init+0x11c>)
 8000e82:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <KLine_Init+0x118>)
 8000e84:	f006 fc31 	bl	80076ea <HAL_UART_Receive>
//			__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
			return OBD_PROTO_ISO9141;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e01e      	b.n	8000eca <KLine_Init+0x10a>
		}
	}
	else
	{
		uint8_t inv_kb = ~uartBuf[1];
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <KLine_Init+0x114>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	71bb      	strb	r3, [r7, #6]
		HAL_Delay(25);
 8000e96:	2019      	movs	r0, #25
 8000e98:	f002 f924 	bl	80030e4 <HAL_Delay>
		HAL_UART_Transmit(KLINE, &inv_kb, 1, 50);
 8000e9c:	1db9      	adds	r1, r7, #6
 8000e9e:	2332      	movs	r3, #50	; 0x32
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <KLine_Init+0x118>)
 8000ea4:	f006 fb8d 	bl	80075c2 <HAL_UART_Transmit>
		__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <KLine_Init+0x118>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	8b1b      	ldrh	r3, [r3, #24]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <KLine_Init+0x118>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f042 0208 	orr.w	r2, r2, #8
 8000eb8:	b292      	uxth	r2, r2
 8000eba:	831a      	strh	r2, [r3, #24]
		HAL_UART_Receive(KLINE, &ecu_addr, 1, 100);
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4906      	ldr	r1, [pc, #24]	; (8000edc <KLine_Init+0x11c>)
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <KLine_Init+0x118>)
 8000ec4:	f006 fc11 	bl	80076ea <HAL_UART_Receive>
		return OBD_PROTO_KWP2000_SLOW;
 8000ec8:	2302      	movs	r3, #2
	}
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000190 	.word	0x20000190
 8000ed8:	2000092c 	.word	0x2000092c
 8000edc:	200000a3 	.word	0x200000a3

08000ee0 <KWP2000_Fast_Init>:

obd_protocol KWP2000_Fast_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
	uint8_t start_msg[5]={0xC1, 0x33, 0xF1, 0x81, 0x66};
 8000ee6:	4a37      	ldr	r2, [pc, #220]	; (8000fc4 <KWP2000_Fast_Init+0xe4>)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eee:	6018      	str	r0, [r3, #0]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	7019      	strb	r1, [r3, #0]
//	uint8_t resp_msg[7]={0};
	uint8_t checksum = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	obd_comm.msg_type = 1;
 8000ef8:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <KWP2000_Fast_Init+0xe8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_UART_DeInit(KLINE);
 8000f00:	4832      	ldr	r0, [pc, #200]	; (8000fcc <KWP2000_Fast_Init+0xec>)
 8000f02:	f006 fb25 	bl	8007550 <HAL_UART_DeInit>
	HAL_Delay(3000);
 8000f06:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f0a:	f002 f8eb 	bl	80030e4 <HAL_Delay>
	MX_GPIO_KLineUART_Init();
 8000f0e:	f000 f865 	bl	8000fdc <MX_GPIO_KLineUART_Init>
	UART_PIN_State(0);
 8000f12:	2000      	movs	r0, #0
 8000f14:	f000 f878 	bl	8001008 <UART_PIN_State>
	HAL_Delay(25);
 8000f18:	2019      	movs	r0, #25
 8000f1a:	f002 f8e3 	bl	80030e4 <HAL_Delay>
	UART_PIN_State(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 f872 	bl	8001008 <UART_PIN_State>
	HAL_Delay(25);
 8000f24:	2019      	movs	r0, #25
 8000f26:	f002 f8dd 	bl	80030e4 <HAL_Delay>
	if (HAL_UART_Init(KLINE) != HAL_OK)
 8000f2a:	4828      	ldr	r0, [pc, #160]	; (8000fcc <KWP2000_Fast_Init+0xec>)
 8000f2c:	f006 fac2 	bl	80074b4 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <KWP2000_Fast_Init+0x5a>
	{
		Error_Handler();
 8000f36:	f001 fa5e 	bl	80023f6 <Error_Handler>
	}
	HAL_UART_Transmit(KLINE, start_msg, 5, 10);
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	2205      	movs	r2, #5
 8000f40:	4822      	ldr	r0, [pc, #136]	; (8000fcc <KWP2000_Fast_Init+0xec>)
 8000f42:	f006 fb3e 	bl	80075c2 <HAL_UART_Transmit>
//	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
//	HAL_Delay(20);

	HAL_UART_Receive_DMA(KLINE, uartBuf, 8);
 8000f46:	2208      	movs	r2, #8
 8000f48:	4921      	ldr	r1, [pc, #132]	; (8000fd0 <KWP2000_Fast_Init+0xf0>)
 8000f4a:	4820      	ldr	r0, [pc, #128]	; (8000fcc <KWP2000_Fast_Init+0xec>)
 8000f4c:	f006 fc9e 	bl	800788c <HAL_UART_Receive_DMA>
	HAL_TIM_Base_Start_IT(&htim6);
 8000f50:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <KWP2000_Fast_Init+0xf4>)
 8000f52:	f005 fe99 	bl	8006c88 <HAL_TIM_Base_Start_IT>

	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 8000f56:	e000      	b.n	8000f5a <KWP2000_Fast_Init+0x7a>
	{
		__NOP();
 8000f58:	bf00      	nop
	while((obd_comm.msg_type != 0) && (obd_comm.msg_type != 3))
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <KWP2000_Fast_Init+0xe8>)
 8000f5c:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <KWP2000_Fast_Init+0x8e>
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <KWP2000_Fast_Init+0xe8>)
 8000f66:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d1f4      	bne.n	8000f58 <KWP2000_Fast_Init+0x78>
	}
	if(obd_comm.msg_type == 0)
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <KWP2000_Fast_Init+0xe8>)
 8000f70:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11f      	bne.n	8000fb8 <KWP2000_Fast_Init+0xd8>
	{
		for(int i = 1; i < 7; i++)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	e009      	b.n	8000f92 <KWP2000_Fast_Init+0xb2>
		{
			checksum = checksum + uartBuf[i];
 8000f7e:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <KWP2000_Fast_Init+0xf0>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4413      	add	r3, r2
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	4413      	add	r3, r2
 8000f8a:	73fb      	strb	r3, [r7, #15]
		for(int i = 1; i < 7; i++)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b06      	cmp	r3, #6
 8000f96:	ddf2      	ble.n	8000f7e <KWP2000_Fast_Init+0x9e>
		}
		checksum = checksum % 256;
		if(checksum == uartBuf[7] && checksum != 0)
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <KWP2000_Fast_Init+0xf0>)
 8000f9a:	79db      	ldrb	r3, [r3, #7]
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d108      	bne.n	8000fb4 <KWP2000_Fast_Init+0xd4>
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <KWP2000_Fast_Init+0xd4>
		{
			ecu_addr = uartBuf[3];
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <KWP2000_Fast_Init+0xf0>)
 8000faa:	78da      	ldrb	r2, [r3, #3]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <KWP2000_Fast_Init+0xf8>)
 8000fae:	701a      	strb	r2, [r3, #0]
			return OBD_PROTO_KWP2000_FAST;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e002      	b.n	8000fba <KWP2000_Fast_Init+0xda>
		}
		else
			return OBD_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e000      	b.n	8000fba <KWP2000_Fast_Init+0xda>
	}
	else
		return OBD_NONE;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	08009f40 	.word	0x08009f40
 8000fc8:	2000019c 	.word	0x2000019c
 8000fcc:	2000092c 	.word	0x2000092c
 8000fd0:	20000190 	.word	0x20000190
 8000fd4:	200008e0 	.word	0x200008e0
 8000fd8:	200000a3 	.word	0x200000a3

08000fdc <MX_GPIO_KLineUART_Init>:

static void MX_GPIO_KLineUART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = K_Line_TX_Pin;
 8000fe2:	2340      	movs	r3, #64	; 0x40
 8000fe4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(K_Line_TX_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <MX_GPIO_KLineUART_Init+0x28>)
 8000ff8:	f004 f9ce 	bl	8005398 <HAL_GPIO_Init>
}
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	48000400 	.word	0x48000400

08001008 <UART_PIN_State>:

static void UART_PIN_State(uint8_t state)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	/*KLine has inverted logic, HIGH = 0, LOW = 1*/
	if(state == 1)
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d10c      	bne.n	8001032 <UART_PIN_State+0x2a>
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2140      	movs	r1, #64	; 0x40
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <UART_PIN_State+0x4c>)
 800101e:	f004 fc0f 	bl	8005840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f004 fc08 	bl	8005840 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
	}
}
 8001030:	e00b      	b.n	800104a <UART_PIN_State+0x42>
		HAL_GPIO_WritePin(K_Line_TX_GPIO_Port, K_Line_TX_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2140      	movs	r1, #64	; 0x40
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <UART_PIN_State+0x4c>)
 8001038:	f004 fc02 	bl	8005840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_Line_GPIO_Port, L_Line_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f004 fbfb 	bl	8005840 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	48000400 	.word	0x48000400

08001058 <KLine_SEND_MESSAGE>:

void KLine_SEND_MESSAGE(uint8_t *tx_frame)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint8_t kline_msg[6] = {0x68, 0x6A, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001060:	2368      	movs	r3, #104	; 0x68
 8001062:	723b      	strb	r3, [r7, #8]
 8001064:	236a      	movs	r3, #106	; 0x6a
 8001066:	727b      	strb	r3, [r7, #9]
 8001068:	23f1      	movs	r3, #241	; 0xf1
 800106a:	72bb      	strb	r3, [r7, #10]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	72fb      	strb	r3, [r7, #11]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	733b      	strb	r3, [r7, #12]
 8001078:	2300      	movs	r3, #0
 800107a:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fdb2 	bl	8001bec <PID_Get_Lenght>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <KLine_SEND_MESSAGE+0xa8>)
 800108e:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	75fb      	strb	r3, [r7, #23]

	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e00a      	b.n	80010b0 <KLine_SEND_MESSAGE+0x58>
	{
		checksum += kline_msg[i];
 800109a:	f107 0208 	add.w	r2, r7, #8
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4413      	add	r3, r2
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	4413      	add	r3, r2
 80010a8:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kline_msg) - 1; i++)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	3301      	adds	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d9f1      	bls.n	800109a <KLine_SEND_MESSAGE+0x42>
	}

	kline_msg[sizeof(kline_msg)-1] = checksum;
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(KLINE, kline_msg, sizeof(kline_msg), 12);
 80010ba:	f107 0108 	add.w	r1, r7, #8
 80010be:	230c      	movs	r3, #12
 80010c0:	2206      	movs	r2, #6
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <KLine_SEND_MESSAGE+0xac>)
 80010c4:	f006 fa7d 	bl	80075c2 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <KLine_SEND_MESSAGE+0xac>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	8b1b      	ldrh	r3, [r3, #24]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <KLine_SEND_MESSAGE+0xac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0208 	orr.w	r2, r2, #8
 80010d8:	b292      	uxth	r2, r2
 80010da:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 4);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <KLine_SEND_MESSAGE+0xa8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3304      	adds	r3, #4
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <KLine_SEND_MESSAGE+0xb0>)
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <KLine_SEND_MESSAGE+0xac>)
 80010ec:	f006 fbce 	bl	800788c <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80010f0:	203c      	movs	r0, #60	; 0x3c
 80010f2:	f001 fff7 	bl	80030e4 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000a4 	.word	0x200000a4
 8001104:	2000092c 	.word	0x2000092c
 8001108:	2000008c 	.word	0x2000008c

0800110c <KWP2000_SEND_MESSAGE>:

void KWP2000_SEND_MESSAGE(uint8_t *tx_frame)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint8_t kwp_msg[] = {0xC2, 0x33, 0xF1, tx_frame[0], tx_frame[1], 0};
 8001114:	23c2      	movs	r3, #194	; 0xc2
 8001116:	723b      	strb	r3, [r7, #8]
 8001118:	2333      	movs	r3, #51	; 0x33
 800111a:	727b      	strb	r3, [r7, #9]
 800111c:	23f1      	movs	r3, #241	; 0xf1
 800111e:	72bb      	strb	r3, [r7, #10]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	72fb      	strb	r3, [r7, #11]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	733b      	strb	r3, [r7, #12]
 800112c:	2300      	movs	r3, #0
 800112e:	737b      	strb	r3, [r7, #13]

	pid_length = PID_Get_Lenght(tx_frame[1]);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3301      	adds	r3, #1
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fd58 	bl	8001bec <PID_Get_Lenght>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <KWP2000_SEND_MESSAGE+0xb4>)
 8001142:	701a      	strb	r2, [r3, #0]
	uint8_t checksum = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	75fb      	strb	r3, [r7, #23]
	obd_comm.msg_type = 2;
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <KWP2000_SEND_MESSAGE+0xb8>)
 800114a:	2202      	movs	r2, #2
 800114c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e00a      	b.n	800116c <KWP2000_SEND_MESSAGE+0x60>
	{
		checksum += kwp_msg[i];
 8001156:	f107 0208 	add.w	r2, r7, #8
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4413      	add	r3, r2
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	4413      	add	r3, r2
 8001164:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < sizeof(kwp_msg) - 1; i++)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d9f1      	bls.n	8001156 <KWP2000_SEND_MESSAGE+0x4a>
	}

	kwp_msg[sizeof(kwp_msg)-1] = checksum;
 8001172:	7dfb      	ldrb	r3, [r7, #23]
 8001174:	737b      	strb	r3, [r7, #13]

	HAL_Delay(20);
 8001176:	2014      	movs	r0, #20
 8001178:	f001 ffb4 	bl	80030e4 <HAL_Delay>

	HAL_UART_Transmit(KLINE, kwp_msg, sizeof(kwp_msg), 12);
 800117c:	f107 0108 	add.w	r1, r7, #8
 8001180:	230c      	movs	r3, #12
 8001182:	2206      	movs	r2, #6
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001186:	f006 fa1c 	bl	80075c2 <HAL_UART_Transmit>

	__HAL_UART_SEND_REQ(KLINE, UART_RXDATA_FLUSH_REQUEST);
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <KWP2000_SEND_MESSAGE+0xbc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	8b1b      	ldrh	r3, [r3, #24]
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <KWP2000_SEND_MESSAGE+0xbc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0208 	orr.w	r2, r2, #8
 800119a:	b292      	uxth	r2, r2
 800119c:	831a      	strh	r2, [r3, #24]

	HAL_UART_Receive_DMA(KLINE, kline_rx_buf, pid_length + 5);
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <KWP2000_SEND_MESSAGE+0xb4>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	3305      	adds	r3, #5
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <KWP2000_SEND_MESSAGE+0xc0>)
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <KWP2000_SEND_MESSAGE+0xbc>)
 80011ae:	f006 fb6d 	bl	800788c <HAL_UART_Receive_DMA>

	HAL_Delay(60);
 80011b2:	203c      	movs	r0, #60	; 0x3c
 80011b4:	f001 ff96 	bl	80030e4 <HAL_Delay>
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200000a4 	.word	0x200000a4
 80011c4:	2000019c 	.word	0x2000019c
 80011c8:	2000092c 	.word	0x2000092c
 80011cc:	2000008c 	.word	0x2000008c

080011d0 <Verify_Checksum>:

static uint8_t Verify_Checksum (uint8_t *data, uint8_t lenght)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	e009      	b.n	80011fa <Verify_Checksum+0x2a>
	{
		checksum += data[i];
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4413      	add	r3, r2
 80011f2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < lenght - 1; i++)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	429a      	cmp	r2, r3
 8001202:	dbf0      	blt.n	80011e6 <Verify_Checksum+0x16>
	}
	checksum = checksum % 256;
	if(data[lenght - 1] == checksum)
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	3b01      	subs	r3, #1
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	429a      	cmp	r2, r3
 8001212:	d101      	bne.n	8001218 <Verify_Checksum+0x48>
	{
		return 1;
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <Verify_Checksum+0x4a>
	}
	return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <kline_rx_callback>:

void kline_rx_callback(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	if(obd_comm.msg_type == 1)
 800122e:	4b23      	ldr	r3, [pc, #140]	; (80012bc <kline_rx_callback+0x94>)
 8001230:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8001234:	2b01      	cmp	r3, #1
 8001236:	d107      	bne.n	8001248 <kline_rx_callback+0x20>
	{
		HAL_TIM_Base_Stop_IT(&htim6);
 8001238:	4821      	ldr	r0, [pc, #132]	; (80012c0 <kline_rx_callback+0x98>)
 800123a:	f005 fd79 	bl	8006d30 <HAL_TIM_Base_Stop_IT>
		obd_comm.msg_type = 0;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <kline_rx_callback+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
//			OBD2_ShowOnDisplay(obd_comm.current_value);
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8001246:	e035      	b.n	80012b4 <kline_rx_callback+0x8c>
	else if (obd_comm.msg_type == 2)
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <kline_rx_callback+0x94>)
 800124a:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800124e:	2b02      	cmp	r3, #2
 8001250:	d130      	bne.n	80012b4 <kline_rx_callback+0x8c>
		if(Verify_Checksum(kline_rx_buf, pid_length + 5))
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <kline_rx_callback+0x9c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	3305      	adds	r3, #5
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <kline_rx_callback+0xa0>)
 800125e:	f7ff ffb7 	bl	80011d0 <Verify_Checksum>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d025      	beq.n	80012b4 <kline_rx_callback+0x8c>
			uint8_t j = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 800126c:	2302      	movs	r3, #2
 800126e:	71bb      	strb	r3, [r7, #6]
 8001270:	e00b      	b.n	800128a <kline_rx_callback+0x62>
				rx_frame[j] = kline_rx_buf[i];
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4914      	ldr	r1, [pc, #80]	; (80012c8 <kline_rx_callback+0xa0>)
 8001278:	5c89      	ldrb	r1, [r1, r2]
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <kline_rx_callback+0xa4>)
 800127c:	54d1      	strb	r1, [r2, r3]
				j++;
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	3301      	adds	r3, #1
 8001282:	71fb      	strb	r3, [r7, #7]
			for(uint8_t i = 2; i <= pid_length + 4; i++)
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	3301      	adds	r3, #1
 8001288:	71bb      	strb	r3, [r7, #6]
 800128a:	79ba      	ldrb	r2, [r7, #6]
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <kline_rx_callback+0x9c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3304      	adds	r3, #4
 8001292:	429a      	cmp	r2, r3
 8001294:	dded      	ble.n	8001272 <kline_rx_callback+0x4a>
			obd_comm.msg_type = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <kline_rx_callback+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
			obd_comm.current_value = OBD2_PID_Parse(rx_frame);
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <kline_rx_callback+0xa4>)
 80012a0:	f000 f8ae 	bl	8001400 <OBD2_PID_Parse>
 80012a4:	eef0 7a40 	vmov.f32	s15, s0
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <kline_rx_callback+0x94>)
 80012aa:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
			HAL_IWDG_Refresh(&hiwdg);
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <kline_rx_callback+0xa8>)
 80012b0:	f004 fade 	bl	8005870 <HAL_IWDG_Refresh>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000019c 	.word	0x2000019c
 80012c0:	200008e0 	.word	0x200008e0
 80012c4:	200000a4 	.word	0x200000a4
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	2000009c 	.word	0x2000009c
 80012d0:	20000180 	.word	0x20000180

080012d4 <OBD2_PID_Decode>:
extern uint32_t adc_buffer;

static void OBD2_PID_Decode(uint8_t* rx_frame);

static void OBD2_PID_Decode(uint8_t* rx_frame)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	uint8_t number = (rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3303      	adds	r3, #3
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	061b      	lsls	r3, r3, #24
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3305      	adds	r3, #5
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b25b      	sxtb	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b25a      	sxtb	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3306      	adds	r3, #6
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b25b      	sxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	72fb      	strb	r3, [r7, #11]
	uint8_t j = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 32;
 8001314:	2320      	movs	r3, #32
 8001316:	73bb      	strb	r3, [r7, #14]
	uint8_t l = 64;
 8001318:	2340      	movs	r3, #64	; 0x40
 800131a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 800131c:	231f      	movs	r3, #31
 800131e:	733b      	strb	r3, [r7, #12]
	{
		uint8_t digit = number >> i;
 8001320:	7afa      	ldrb	r2, [r7, #11]
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	fa42 f303 	asr.w	r3, r2, r3
 8001328:	72bb      	strb	r3, [r7, #10]
		digit &= 1;
 800132a:	7abb      	ldrb	r3, [r7, #10]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	72bb      	strb	r3, [r7, #10]
		if(obd_comm.pid == 0x00)
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <OBD2_PID_Decode+0xac>)
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <OBD2_PID_Decode+0x78>
		{
			obd_comm.available_pids[j] = digit;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	4a10      	ldr	r2, [pc, #64]	; (8001380 <OBD2_PID_Decode+0xac>)
 800133e:	4413      	add	r3, r2
 8001340:	7aba      	ldrb	r2, [r7, #10]
 8001342:	70da      	strb	r2, [r3, #3]
			j++;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	3301      	adds	r3, #1
 8001348:	73fb      	strb	r3, [r7, #15]
 800134a:	e014      	b.n	8001376 <OBD2_PID_Decode+0xa2>
		}
		else if(obd_comm.pid == 0x20)
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <OBD2_PID_Decode+0xac>)
 800134e:	785b      	ldrb	r3, [r3, #1]
 8001350:	2b20      	cmp	r3, #32
 8001352:	d108      	bne.n	8001366 <OBD2_PID_Decode+0x92>
		{
			obd_comm.available_pids[k] = digit;
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <OBD2_PID_Decode+0xac>)
 8001358:	4413      	add	r3, r2
 800135a:	7aba      	ldrb	r2, [r7, #10]
 800135c:	70da      	strb	r2, [r3, #3]
			k++;
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	3301      	adds	r3, #1
 8001362:	73bb      	strb	r3, [r7, #14]
 8001364:	e007      	b.n	8001376 <OBD2_PID_Decode+0xa2>
		}
		else
		{
			obd_comm.available_pids[l] = digit;
 8001366:	7b7b      	ldrb	r3, [r7, #13]
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <OBD2_PID_Decode+0xac>)
 800136a:	4413      	add	r3, r2
 800136c:	7aba      	ldrb	r2, [r7, #10]
 800136e:	70da      	strb	r2, [r3, #3]
			l++;
 8001370:	7b7b      	ldrb	r3, [r7, #13]
 8001372:	3301      	adds	r3, #1
 8001374:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 31; i >= 0; i--)
 8001376:	7b3b      	ldrb	r3, [r7, #12]
 8001378:	3b01      	subs	r3, #1
 800137a:	733b      	strb	r3, [r7, #12]
	{
 800137c:	e7d0      	b.n	8001320 <OBD2_PID_Decode+0x4c>
 800137e:	bf00      	nop
 8001380:	2000019c 	.word	0x2000019c

08001384 <OBD2_Request>:
		}
	}
}

void OBD2_Request(OBD obd)
{
 8001384:	b084      	sub	sp, #16
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	f107 0c18 	add.w	ip, r7, #24
 8001390:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_Delay(10);
 8001394:	200a      	movs	r0, #10
 8001396:	f001 fea5 	bl	80030e4 <HAL_Delay>
	if(obd.used_protocol == OBD_PROTO_CAN)
 800139a:	7e3b      	ldrb	r3, [r7, #24]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d115      	bne.n	80013cc <OBD2_Request+0x48>
	{
		uint8_t tx_data_CAN[TX_DATA_LENGTH] = {0x02, 0x01, obd.pid, 0x00, 0x00, 0x00, 0x00, 0x00};
 80013a0:	2302      	movs	r3, #2
 80013a2:	723b      	strb	r3, [r7, #8]
 80013a4:	2301      	movs	r3, #1
 80013a6:	727b      	strb	r3, [r7, #9]
 80013a8:	7e7b      	ldrb	r3, [r7, #25]
 80013aa:	72bb      	strb	r3, [r7, #10]
 80013ac:	2300      	movs	r3, #0
 80013ae:	72fb      	strb	r3, [r7, #11]
 80013b0:	2300      	movs	r3, #0
 80013b2:	733b      	strb	r3, [r7, #12]
 80013b4:	2300      	movs	r3, #0
 80013b6:	737b      	strb	r3, [r7, #13]
 80013b8:	2300      	movs	r3, #0
 80013ba:	73bb      	strb	r3, [r7, #14]
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
		can_send_msg(tx_data_CAN);
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f000 fcdf 	bl	8001d88 <can_send_msg>
		else
		{
			KWP2000_SEND_MESSAGE(tx_data_ISO);
		}
	}
}
 80013ca:	e00f      	b.n	80013ec <OBD2_Request+0x68>
		uint8_t tx_data_ISO[2] = {0x01, obd.pid};
 80013cc:	2301      	movs	r3, #1
 80013ce:	713b      	strb	r3, [r7, #4]
 80013d0:	7e7b      	ldrb	r3, [r7, #25]
 80013d2:	717b      	strb	r3, [r7, #5]
		if(obd.used_protocol == OBD_PROTO_ISO9141)
 80013d4:	7e3b      	ldrb	r3, [r7, #24]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d104      	bne.n	80013e4 <OBD2_Request+0x60>
			KLine_SEND_MESSAGE(tx_data_ISO);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fe3b 	bl	8001058 <KLine_SEND_MESSAGE>
}
 80013e2:	e003      	b.n	80013ec <OBD2_Request+0x68>
			KWP2000_SEND_MESSAGE(tx_data_ISO);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fe90 	bl	800110c <KWP2000_SEND_MESSAGE>
}
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013f6:	b004      	add	sp, #16
 80013f8:	4770      	bx	lr
 80013fa:	0000      	movs	r0, r0
 80013fc:	0000      	movs	r0, r0
	...

08001400 <OBD2_PID_Parse>:

float OBD2_PID_Parse(uint8_t* rx_frame)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	float value = 0;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
	switch(rx_frame[2])
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3302      	adds	r3, #2
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2ba6      	cmp	r3, #166	; 0xa6
 8001416:	f200 83b2 	bhi.w	8001b7e <OBD2_PID_Parse+0x77e>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <OBD2_PID_Parse+0x20>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	080016bd 	.word	0x080016bd
 8001424:	08001b7f 	.word	0x08001b7f
 8001428:	08001b7f 	.word	0x08001b7f
 800142c:	08001b7f 	.word	0x08001b7f
 8001430:	080016cb 	.word	0x080016cb
 8001434:	080016d3 	.word	0x080016d3
 8001438:	080016e9 	.word	0x080016e9
 800143c:	080016e9 	.word	0x080016e9
 8001440:	080016e9 	.word	0x080016e9
 8001444:	080016e9 	.word	0x080016e9
 8001448:	080016ef 	.word	0x080016ef
 800144c:	0800170b 	.word	0x0800170b
 8001450:	0800171f 	.word	0x0800171f
 8001454:	08001745 	.word	0x08001745
 8001458:	08001759 	.word	0x08001759
 800145c:	08001773 	.word	0x08001773
 8001460:	08001789 	.word	0x08001789
 8001464:	080017b3 	.word	0x080017b3
 8001468:	08001b7f 	.word	0x08001b7f
 800146c:	08001b7f 	.word	0x08001b7f
 8001470:	080017bb 	.word	0x080017bb
 8001474:	080017bb 	.word	0x080017bb
 8001478:	080017bb 	.word	0x080017bb
 800147c:	080017bb 	.word	0x080017bb
 8001480:	080017bb 	.word	0x080017bb
 8001484:	080017bb 	.word	0x080017bb
 8001488:	080017bb 	.word	0x080017bb
 800148c:	080017bb 	.word	0x080017bb
 8001490:	08001b7f 	.word	0x08001b7f
 8001494:	08001b7f 	.word	0x08001b7f
 8001498:	08001b7f 	.word	0x08001b7f
 800149c:	080017d9 	.word	0x080017d9
 80014a0:	080017f7 	.word	0x080017f7
 80014a4:	080017d9 	.word	0x080017d9
 80014a8:	08001805 	.word	0x08001805
 80014ac:	08001835 	.word	0x08001835
 80014b0:	0800185b 	.word	0x0800185b
 80014b4:	0800185b 	.word	0x0800185b
 80014b8:	0800185b 	.word	0x0800185b
 80014bc:	0800185b 	.word	0x0800185b
 80014c0:	0800185b 	.word	0x0800185b
 80014c4:	0800185b 	.word	0x0800185b
 80014c8:	0800185b 	.word	0x0800185b
 80014cc:	0800185b 	.word	0x0800185b
 80014d0:	08001863 	.word	0x08001863
 80014d4:	0800186b 	.word	0x0800186b
 80014d8:	08001871 	.word	0x08001871
 80014dc:	08001871 	.word	0x08001871
 80014e0:	08001879 	.word	0x08001879
 80014e4:	0800188d 	.word	0x0800188d
 80014e8:	080018ab 	.word	0x080018ab
 80014ec:	080018d1 	.word	0x080018d1
 80014f0:	080018e5 	.word	0x080018e5
 80014f4:	080018e5 	.word	0x080018e5
 80014f8:	080018e5 	.word	0x080018e5
 80014fc:	080018e5 	.word	0x080018e5
 8001500:	080018e5 	.word	0x080018e5
 8001504:	080018e5 	.word	0x080018e5
 8001508:	080018e5 	.word	0x080018e5
 800150c:	080018e5 	.word	0x080018e5
 8001510:	080018ed 	.word	0x080018ed
 8001514:	080018ed 	.word	0x080018ed
 8001518:	080018ed 	.word	0x080018ed
 800151c:	080018ed 	.word	0x080018ed
 8001520:	08001919 	.word	0x08001919
 8001524:	08001b7f 	.word	0x08001b7f
 8001528:	08001927 	.word	0x08001927
 800152c:	08001951 	.word	0x08001951
 8001530:	08001959 	.word	0x08001959
 8001534:	08001961 	.word	0x08001961
 8001538:	08001969 	.word	0x08001969
 800153c:	0800197f 	.word	0x0800197f
 8001540:	0800197f 	.word	0x0800197f
 8001544:	0800197f 	.word	0x0800197f
 8001548:	0800197f 	.word	0x0800197f
 800154c:	0800197f 	.word	0x0800197f
 8001550:	0800197f 	.word	0x0800197f
 8001554:	08001987 	.word	0x08001987
 8001558:	08001987 	.word	0x08001987
 800155c:	080019a5 	.word	0x080019a5
 8001560:	08001b7f 	.word	0x08001b7f
 8001564:	08001b7f 	.word	0x08001b7f
 8001568:	080019b9 	.word	0x080019b9
 800156c:	080019d5 	.word	0x080019d5
 8001570:	08001a07 	.word	0x08001a07
 8001574:	08001a2b 	.word	0x08001a2b
 8001578:	08001a2b 	.word	0x08001a2b
 800157c:	08001a2b 	.word	0x08001a2b
 8001580:	08001a2b 	.word	0x08001a2b
 8001584:	08001a31 	.word	0x08001a31
 8001588:	08001a4f 	.word	0x08001a4f
 800158c:	08001a4f 	.word	0x08001a4f
 8001590:	08001a57 	.word	0x08001a57
 8001594:	08001a6d 	.word	0x08001a6d
 8001598:	08001a73 	.word	0x08001a73
 800159c:	08001b7f 	.word	0x08001b7f
 80015a0:	08001b7f 	.word	0x08001b7f
 80015a4:	08001aa5 	.word	0x08001aa5
 80015a8:	08001aa5 	.word	0x08001aa5
 80015ac:	08001abb 	.word	0x08001abb
 80015b0:	08001ad9 	.word	0x08001ad9
 80015b4:	08001b7f 	.word	0x08001b7f
 80015b8:	08001aef 	.word	0x08001aef
 80015bc:	08001af7 	.word	0x08001af7
 80015c0:	08001af7 	.word	0x08001af7
 80015c4:	08001b7f 	.word	0x08001b7f
 80015c8:	08001b7f 	.word	0x08001b7f
 80015cc:	08001b7f 	.word	0x08001b7f
 80015d0:	08001b7f 	.word	0x08001b7f
 80015d4:	08001b7f 	.word	0x08001b7f
 80015d8:	08001b7f 	.word	0x08001b7f
 80015dc:	08001b7f 	.word	0x08001b7f
 80015e0:	08001b7f 	.word	0x08001b7f
 80015e4:	08001b7f 	.word	0x08001b7f
 80015e8:	08001b7f 	.word	0x08001b7f
 80015ec:	08001b7f 	.word	0x08001b7f
 80015f0:	08001b7f 	.word	0x08001b7f
 80015f4:	08001b7f 	.word	0x08001b7f
 80015f8:	08001b7f 	.word	0x08001b7f
 80015fc:	08001b7f 	.word	0x08001b7f
 8001600:	08001b7f 	.word	0x08001b7f
 8001604:	08001b7f 	.word	0x08001b7f
 8001608:	08001b7f 	.word	0x08001b7f
 800160c:	08001b7f 	.word	0x08001b7f
 8001610:	08001b0d 	.word	0x08001b0d
 8001614:	08001b7f 	.word	0x08001b7f
 8001618:	08001b7f 	.word	0x08001b7f
 800161c:	08001b7f 	.word	0x08001b7f
 8001620:	08001b7f 	.word	0x08001b7f
 8001624:	08001b7f 	.word	0x08001b7f
 8001628:	08001b7f 	.word	0x08001b7f
 800162c:	08001b7f 	.word	0x08001b7f
 8001630:	08001b7f 	.word	0x08001b7f
 8001634:	08001b7f 	.word	0x08001b7f
 8001638:	08001b7f 	.word	0x08001b7f
 800163c:	08001b7f 	.word	0x08001b7f
 8001640:	08001b7f 	.word	0x08001b7f
 8001644:	08001b7f 	.word	0x08001b7f
 8001648:	08001b7f 	.word	0x08001b7f
 800164c:	08001b7f 	.word	0x08001b7f
 8001650:	08001b7f 	.word	0x08001b7f
 8001654:	08001b7f 	.word	0x08001b7f
 8001658:	08001b7f 	.word	0x08001b7f
 800165c:	08001b7f 	.word	0x08001b7f
 8001660:	08001b7f 	.word	0x08001b7f
 8001664:	08001b7f 	.word	0x08001b7f
 8001668:	08001b7f 	.word	0x08001b7f
 800166c:	08001b7f 	.word	0x08001b7f
 8001670:	08001b7f 	.word	0x08001b7f
 8001674:	08001b7f 	.word	0x08001b7f
 8001678:	08001b7f 	.word	0x08001b7f
 800167c:	08001b7f 	.word	0x08001b7f
 8001680:	08001b7f 	.word	0x08001b7f
 8001684:	08001b7f 	.word	0x08001b7f
 8001688:	08001b7f 	.word	0x08001b7f
 800168c:	08001b7f 	.word	0x08001b7f
 8001690:	08001b7f 	.word	0x08001b7f
 8001694:	08001b7f 	.word	0x08001b7f
 8001698:	08001b7f 	.word	0x08001b7f
 800169c:	08001b7f 	.word	0x08001b7f
 80016a0:	08001b7f 	.word	0x08001b7f
 80016a4:	08001b7f 	.word	0x08001b7f
 80016a8:	08001b7f 	.word	0x08001b7f
 80016ac:	08001b7f 	.word	0x08001b7f
 80016b0:	08001b7f 	.word	0x08001b7f
 80016b4:	08001b7f 	.word	0x08001b7f
 80016b8:	08001b39 	.word	0x08001b39
	{
	case 0x00:
		OBD2_PID_Decode(rx_frame);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fe09 	bl	80012d4 <OBD2_PID_Decode>
		value = 0;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
		break;
 80016c8:	e259      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x04:
		value = (100/255)*rx_frame[3];
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
		break;
 80016d0:	e255      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x05:
		value = rx_frame[3] - 40;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3303      	adds	r3, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3b28      	subs	r3, #40	; 0x28
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80016e6:	e24a      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x06: case 0x07: case 0x08: case 0x09:
		value = (100/128)*rx_frame[3] - 100;
 80016e8:	4bb7      	ldr	r3, [pc, #732]	; (80019c8 <OBD2_PID_Parse+0x5c8>)
 80016ea:	60fb      	str	r3, [r7, #12]
		break;
 80016ec:	e247      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0A:
		value = 3 * rx_frame[3];
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3303      	adds	r3, #3
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001708:	e239      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0B:
		value = rx_frame[3];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001718:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800171c:	e22f      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0C:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3204      	adds	r2, #4
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	da00      	bge.n	8001734 <OBD2_PID_Parse+0x334>
 8001732:	3303      	adds	r3, #3
 8001734:	109b      	asrs	r3, r3, #2
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001742:	e21c      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0D:
		value = rx_frame[3];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3303      	adds	r3, #3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001752:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001756:	e212      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0E:
		value = (rx_frame[3] / 2) - 64;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3303      	adds	r3, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3b40      	subs	r3, #64	; 0x40
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800176c:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001770:	e205      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x0F:
		value = rx_frame[3] - 40;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3303      	adds	r3, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	3b28      	subs	r3, #40	; 0x28
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001782:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001786:	e1fa      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x10:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 100;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3303      	adds	r3, #3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	3204      	adds	r2, #4
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	4313      	orrs	r3, r2
 8001798:	4a8c      	ldr	r2, [pc, #560]	; (80019cc <OBD2_PID_Parse+0x5cc>)
 800179a:	fb82 1203 	smull	r1, r2, r2, r3
 800179e:	1152      	asrs	r2, r2, #5
 80017a0:	17db      	asrs	r3, r3, #31
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017b0:	e1e5      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x11:
		value = (100/255)*rx_frame[3];
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
		break;
 80017b8:	e1e1      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x14: case 0x15: case 0x16: case 0x17: case 0x18: case 0x19: case 0x1A: case 0x1B:
		value = rx_frame[3] / 200;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3303      	adds	r3, #3
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4a82      	ldr	r2, [pc, #520]	; (80019cc <OBD2_PID_Parse+0x5cc>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	099b      	lsrs	r3, r3, #6
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017d6:	e1d2      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x1F: case 0x21:
		value = (rx_frame[3] << 8) | rx_frame[4];
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3303      	adds	r3, #3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	3204      	adds	r2, #4
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80017f4:	e1c3      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x20:
		OBD2_PID_Decode(rx_frame);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fd6c 	bl	80012d4 <OBD2_PID_Decode>
		value = 0;
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
		break;
 8001802:	e1bc      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x22:
		value = ((rx_frame[3] << 8) | rx_frame[4])*0.079;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3303      	adds	r3, #3
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	3204      	adds	r2, #4
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fe85 	bl	8000524 <__aeabi_i2d>
 800181a:	a369      	add	r3, pc, #420	; (adr r3, 80019c0 <OBD2_PID_Parse+0x5c0>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe feea 	bl	80005f8 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f8f6 	bl	8000a1c <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
	case 0x23:
		value = 10*((rx_frame[3] << 8) | rx_frame[4]);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3303      	adds	r3, #3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	3204      	adds	r2, #4
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	431a      	orrs	r2, r3
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001858:	e191      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x24: case 0x25: case 0x26: case 0x27: case 0x28: case 0x29: case 0x2A: case 0x2B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
		break;
 8001860:	e18d      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x2C:
		value = (100/255)*rx_frame[3];
 8001862:	f04f 0300 	mov.w	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
		break;
 8001868:	e189      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x2D:
		value = (100/128)*rx_frame[3] - 100;
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <OBD2_PID_Parse+0x5c8>)
 800186c:	60fb      	str	r3, [r7, #12]
		break;
 800186e:	e186      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x2E: case 0x2F:
		value = (100/255)*rx_frame[3];
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
		break;
 8001876:	e182      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x30:
		value = rx_frame[3];
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3303      	adds	r3, #3
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001886:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800188a:	e178      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x31:
		value = (rx_frame[3] << 8) | rx_frame[4];
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3303      	adds	r3, #3
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	3204      	adds	r2, #4
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018a8:	e169      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x32:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 4;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3303      	adds	r3, #3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	3204      	adds	r2, #4
 80018b6:	7812      	ldrb	r2, [r2, #0]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da00      	bge.n	80018c0 <OBD2_PID_Parse+0x4c0>
 80018be:	3303      	adds	r3, #3
 80018c0:	109b      	asrs	r3, r3, #2
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018ce:	e156      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x33:
		value = rx_frame[3];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3303      	adds	r3, #3
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018de:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80018e2:	e14c      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x34: case 0x35: case 0x36: case 0x37: case 0x38: case 0x39: case 0x3A: case 0x3B:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
		break;
 80018ea:	e148      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x3C: case 0x3D: case 0x3E: case 0x3F:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3303      	adds	r3, #3
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	3204      	adds	r2, #4
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	4a33      	ldr	r2, [pc, #204]	; (80019cc <OBD2_PID_Parse+0x5cc>)
 80018fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001902:	1152      	asrs	r2, r2, #5
 8001904:	17db      	asrs	r3, r3, #31
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	3b28      	subs	r3, #40	; 0x28
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001912:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001916:	e132      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x40:
		OBD2_PID_Decode(rx_frame);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fcdb 	bl	80012d4 <OBD2_PID_Decode>
		value = 0;
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
		break;
 8001924:	e12b      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x42:
		value = ((rx_frame[3] << 8) | rx_frame[4]) / 1000;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	3303      	adds	r3, #3
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	3204      	adds	r2, #4
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	4313      	orrs	r3, r2
 8001936:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <OBD2_PID_Parse+0x5d0>)
 8001938:	fb82 1203 	smull	r1, r2, r2, r3
 800193c:	1192      	asrs	r2, r2, #6
 800193e:	17db      	asrs	r3, r3, #31
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800194a:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800194e:	e116      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x43:
		value = (100/255)* ((rx_frame[3] << 8) | rx_frame[4]);
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
		break;
 8001956:	e112      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x44:
		value = (1/32768)*((rx_frame[3] << 8) | rx_frame[4]);
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
		break;
 800195e:	e10e      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x45:
		value = (100/255)*rx_frame[3];
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
		break;
 8001966:	e10a      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x46:
		value = rx_frame[3] - 40;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3303      	adds	r3, #3
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	3b28      	subs	r3, #40	; 0x28
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001978:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 800197c:	e0ff      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x47: case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C:
		value = (100/255)*rx_frame[3];
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
		break;
 8001984:	e0fb      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x4D: case 0x4E:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3303      	adds	r3, #3
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	3204      	adds	r2, #4
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	4313      	orrs	r3, r2
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199e:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019a2:	e0ec      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x4F:
		value = rx_frame[3];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3303      	adds	r3, #3
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 80019b6:	e0e2      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x52:
		value = (100/255)*rx_frame[3];
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
		break;
 80019be:	e0de      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
 80019c0:	10624dd3 	.word	0x10624dd3
 80019c4:	3fb43958 	.word	0x3fb43958
 80019c8:	c2c80000 	.word	0xc2c80000
 80019cc:	51eb851f 	.word	0x51eb851f
 80019d0:	10624dd3 	.word	0x10624dd3
	case 0x53:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.005;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3303      	adds	r3, #3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	3204      	adds	r2, #4
 80019e0:	7812      	ldrb	r2, [r2, #0]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd9d 	bl	8000524 <__aeabi_i2d>
 80019ea:	a370      	add	r3, pc, #448	; (adr r3, 8001bac <OBD2_PID_Parse+0x7ac>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fe02 	bl	80005f8 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f80e 	bl	8000a1c <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]
		break;
 8001a04:	e0bb      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x54:
		value = ((rx_frame[3] << 8) | rx_frame[4]) - 32767;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3303      	adds	r3, #3
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	3204      	adds	r2, #4
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8001a1a:	3b7f      	subs	r3, #127	; 0x7f
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a28:	e0a9      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x55: case 0x56: case 0x57: case 0x58:
		value = ((100/128)*rx_frame[3]) - 100;
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <OBD2_PID_Parse+0x7a0>)
 8001a2c:	60fb      	str	r3, [r7, #12]
		break;
 8001a2e:	e0a6      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x59:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3303      	adds	r3, #3
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	3204      	adds	r2, #4
 8001a3c:	7812      	ldrb	r2, [r2, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a4c:	e097      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x5A: case 0x5B:
		value = (100/255)*rx_frame[3];
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
		break;
 8001a54:	e093      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x5C:
		value =  rx_frame[3] - 40;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3b28      	subs	r3, #40	; 0x28
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a66:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001a6a:	e088      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x5D:
		value = ((100/128)*rx_frame[3]) - 210;
 8001a6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ba4 <OBD2_PID_Parse+0x7a4>)
 8001a6e:	60fb      	str	r3, [r7, #12]
		break;
 8001a70:	e085      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x5E:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * 0.05;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3303      	adds	r3, #3
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	3204      	adds	r2, #4
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd4e 	bl	8000524 <__aeabi_i2d>
 8001a88:	a341      	add	r3, pc, #260	; (adr r3, 8001b90 <OBD2_PID_Parse+0x790>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7fe ffbf 	bl	8000a1c <__aeabi_d2f>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	60fb      	str	r3, [r7, #12]
		break;
 8001aa2:	e06c      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x61: case 0x62:
		value = rx_frame[3] - 125;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3303      	adds	r3, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3b7d      	subs	r3, #125	; 0x7d
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab4:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ab8:	e061      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x63:
		value = (rx_frame[3] << 8) | rx_frame[4];
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3303      	adds	r3, #3
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	3204      	adds	r2, #4
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad2:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001ad6:	e052      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x64:
		value = rx_frame[3] - 125;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3303      	adds	r3, #3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	3b7d      	subs	r3, #125	; 0x7d
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001aec:	e047      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x66:
		value = ((rx_frame[3] << 8) | rx_frame[4]) * (1/32);
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
		break;
 8001af4:	e043      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x67: case 0x68:
		value = rx_frame[3] - 40;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3303      	adds	r3, #3
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3b28      	subs	r3, #40	; 0x28
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b0a:	e038      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0x7C:
		value = (((rx_frame[3] << 8) | rx_frame[4]) / 100) - 40;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3303      	adds	r3, #3
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	3204      	adds	r2, #4
 8001b18:	7812      	ldrb	r2, [r2, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	4a22      	ldr	r2, [pc, #136]	; (8001ba8 <OBD2_PID_Parse+0x7a8>)
 8001b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b22:	1152      	asrs	r2, r2, #5
 8001b24:	17db      	asrs	r3, r3, #31
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	3b28      	subs	r3, #40	; 0x28
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b32:	edc7 7a03 	vstr	s15, [r7, #12]
		break;
 8001b36:	e022      	b.n	8001b7e <OBD2_PID_Parse+0x77e>
	case 0xA6:
		value = ((rx_frame[3] << 24) | (rx_frame[4] << 16) | (rx_frame[5] << 8) | rx_frame[6]) * 0.1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	061a      	lsls	r2, r3, #24
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	4313      	orrs	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	3206      	adds	r2, #6
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fce1 	bl	8000524 <__aeabi_i2d>
 8001b62:	a30d      	add	r3, pc, #52	; (adr r3, 8001b98 <OBD2_PID_Parse+0x798>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fd46 	bl	80005f8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff52 	bl	8000a1c <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]
		break;
 8001b7c:	bf00      	nop
	}
	return value;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	ee07 3a90 	vmov	s15, r3
}
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	9999999a 	.word	0x9999999a
 8001b94:	3fa99999 	.word	0x3fa99999
 8001b98:	9999999a 	.word	0x9999999a
 8001b9c:	3fb99999 	.word	0x3fb99999
 8001ba0:	c2c80000 	.word	0xc2c80000
 8001ba4:	c3520000 	.word	0xc3520000
 8001ba8:	51eb851f 	.word	0x51eb851f
 8001bac:	47ae147b 	.word	0x47ae147b
 8001bb0:	3f747ae1 	.word	0x3f747ae1

08001bb4 <OBD2_Init>:

obd_protocol OBD2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
	obd_protocol used_protocol = KLine_Init();
 8001bba:	f7ff f901 	bl	8000dc0 <KLine_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	if(used_protocol == OBD_NONE)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10c      	bne.n	8001be2 <OBD2_Init+0x2e>
	{
		used_protocol = KWP2000_Fast_Init();
 8001bc8:	f7ff f98a 	bl	8000ee0 <KWP2000_Fast_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
		if(used_protocol == OBD_NONE)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <OBD2_Init+0x2e>
		{
			used_protocol = OBD_PROTO_CAN;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	71fb      	strb	r3, [r7, #7]
			MX_CAN1_Init();
 8001bda:	f000 f817 	bl	8001c0c <MX_CAN1_Init>
			can_config();
 8001bde:	f000 f89f 	bl	8001d20 <can_config>
		}
	}
	return used_protocol;
 8001be2:	79fb      	ldrb	r3, [r7, #7]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <PID_Get_Lenght>:
		[0x7C] = { 3 }, //Diesel Particulate filter (DPF) temperature
		[0xA6] = { 5 }, //Odometer
};

uint8_t PID_Get_Lenght(uint8_t pid)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	return PID_LUT[pid][0];
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <PID_Get_Lenght+0x1c>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	0800a070 	.word	0x0800a070

08001c0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <MX_CAN1_Init+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001c16:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c18:	2210      	movs	r2, #16
 8001c1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c2a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001c2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_CAN1_Init+0x64>)
 8001c5c:	f002 f91a 	bl	8003e94 <HAL_CAN_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c66:	f000 fbc6 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000ac 	.word	0x200000ac
 8001c74:	40006400 	.word	0x40006400

08001c78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	; (8001d14 <HAL_CAN_MspInit+0x9c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d138      	bne.n	8001d0c <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_CAN_MspInit+0xa0>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cdc:	2309      	movs	r3, #9
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480d      	ldr	r0, [pc, #52]	; (8001d1c <HAL_CAN_MspInit+0xa4>)
 8001ce8:	f003 fb56 	bl	8005398 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2014      	movs	r0, #20
 8001cf2:	f003 f804 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cf6:	2014      	movs	r0, #20
 8001cf8:	f003 f81d 	bl	8004d36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2015      	movs	r0, #21
 8001d02:	f002 fffc 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d06:	2015      	movs	r0, #21
 8001d08:	f003 f815 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40006400 	.word	0x40006400
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	48000400 	.word	0x48000400

08001d20 <can_config>:
  }
}

/* USER CODE BEGIN 1 */
void can_config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;
	can_filter.FilterBank = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
	can_filter.FilterIdHigh = 0x7E8 << 5;
 8001d32:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001d36:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0000;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x7F8 << 5;
 8001d3c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001d40:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0000;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
	can_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
	can_filter.FilterActivation = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]

	if(HAL_CAN_ConfigFilter(&hcan1, &can_filter) != HAL_OK)
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4619      	mov	r1, r3
 8001d52:	480c      	ldr	r0, [pc, #48]	; (8001d84 <can_config+0x64>)
 8001d54:	f002 f999 	bl	800408a <HAL_CAN_ConfigFilter>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <can_config+0x42>
	{
		Error_Handler();
 8001d5e:	f000 fb4a 	bl	80023f6 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <can_config+0x64>)
 8001d64:	f002 fa5b 	bl	800421e <HAL_CAN_Start>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <can_config+0x52>
	{
		Error_Handler();
 8001d6e:	f000 fb42 	bl	80023f6 <Error_Handler>
	}
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d72:	2102      	movs	r1, #2
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <can_config+0x64>)
 8001d76:	f002 fc78 	bl	800466a <HAL_CAN_ActivateNotification>
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200000ac 	.word	0x200000ac

08001d88 <can_send_msg>:

void can_send_msg(uint8_t *tx_frame)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	CAN_TxHeaderTypeDef tx_header;
	tx_header.StdId = 0x7DF;
 8001d90:	f240 73df 	movw	r3, #2015	; 0x7df
 8001d94:	60bb      	str	r3, [r7, #8]
	tx_header.DLC = TX_DATA_LENGTH;
 8001d96:	2308      	movs	r3, #8
 8001d98:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
	tx_header.RTR = CAN_RTR_DATA;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]

	obd_comm.msg_type = 1;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <can_send_msg+0x44>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	if(HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_frame, &tx_mailbox) != HAL_OK)
 8001daa:	f107 0108 	add.w	r1, r7, #8
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <can_send_msg+0x48>)
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <can_send_msg+0x4c>)
 8001db4:	f002 fa77 	bl	80042a6 <HAL_CAN_AddTxMessage>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <can_send_msg+0x3a>
	{
		Error_Handler();
 8001dbe:	f000 fb1a 	bl	80023f6 <Error_Handler>
	}

}
 8001dc2:	bf00      	nop
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000019c 	.word	0x2000019c
 8001dd0:	200000a8 	.word	0x200000a8
 8001dd4:	200000ac 	.word	0x200000ac

08001dd8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	uint8_t rx_data[RX_DATA_LENGTH];

	obd_comm.msg_type = 0;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rx_header, rx_data);
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	f107 0214 	add.w	r2, r7, #20
 8001df0:	2100      	movs	r1, #0
 8001df2:	480b      	ldr	r0, [pc, #44]	; (8001e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001df4:	f002 fb27 	bl	8004446 <HAL_CAN_GetRxMessage>

	obd_comm.current_value = OBD2_PID_Parse(rx_data);
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff faff 	bl	8001400 <OBD2_PID_Parse>
 8001e02:	eef0 7a40 	vmov.f32	s15, s0
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001e08:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

	HAL_IWDG_Refresh(&hiwdg);
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001e0e:	f003 fd2f 	bl	8005870 <HAL_IWDG_Refresh>
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	; 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000019c 	.word	0x2000019c
 8001e20:	200000ac 	.word	0x200000ac
 8001e24:	20000180 	.word	0x20000180

08001e28 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	__HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2210      	movs	r2, #16
 8001e36:	60da      	str	r2, [r3, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
 8001e58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e5c:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <MX_ADC1_Init+0xc0>)
 8001e5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ebc:	4810      	ldr	r0, [pc, #64]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001ebe:	f001 fac1 	bl	8003444 <HAL_ADC_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001ec8:	f000 fa95 	bl	80023f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_ADC1_Init+0xc4>)
 8001ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ed8:	237f      	movs	r3, #127	; 0x7f
 8001eda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001edc:	2304      	movs	r3, #4
 8001ede:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_ADC1_Init+0xbc>)
 8001eea:	f001 fbf3 	bl	80036d4 <HAL_ADC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001ef4:	f000 fa7f 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200000d4 	.word	0x200000d4
 8001f04:	50040000 	.word	0x50040000
 8001f08:	3ac04000 	.word	0x3ac04000

08001f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0a0      	sub	sp, #128	; 0x80
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	225c      	movs	r2, #92	; 0x5c
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 fefb 	bl	8008d28 <memset>
  if(adcHandle->Instance==ADC1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_ADC_MspInit+0x114>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d16d      	bne.n	8002018 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f40:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f46:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001f50:	2308      	movs	r3, #8
 8001f52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f54:	2307      	movs	r3, #7
 8001f56:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f66:	f107 0310 	add.w	r3, r7, #16
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fb2a 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f76:	f000 fa3e 	bl	80023f6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a29      	ldr	r2, [pc, #164]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_ADC_MspInit+0x118>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = BAT_V_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fae:	230b      	movs	r3, #11
 8001fb0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_V_GPIO_Port, &GPIO_InitStruct);
 8001fb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <HAL_ADC_MspInit+0x11c>)
 8001fbe:	f003 f9eb 	bl	8005398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fc4:	4a1a      	ldr	r2, [pc, #104]	; (8002030 <HAL_ADC_MspInit+0x124>)
 8001fc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fdc:	2280      	movs	r2, #128	; 0x80
 8001fde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ffc:	480b      	ldr	r0, [pc, #44]	; (800202c <HAL_ADC_MspInit+0x120>)
 8001ffe:	f002 fec3 	bl	8004d88 <HAL_DMA_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8002008:	f000 f9f5 	bl	80023f6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a07      	ldr	r2, [pc, #28]	; (800202c <HAL_ADC_MspInit+0x120>)
 8002010:	64da      	str	r2, [r3, #76]	; 0x4c
 8002012:	4a06      	ldr	r2, [pc, #24]	; (800202c <HAL_ADC_MspInit+0x120>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3780      	adds	r7, #128	; 0x80
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	50040000 	.word	0x50040000
 8002024:	40021000 	.word	0x40021000
 8002028:	48000800 	.word	0x48000800
 800202c:	20000138 	.word	0x20000138
 8002030:	40020008 	.word	0x40020008

08002034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_DMA_Init+0x48>)
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <MX_DMA_Init+0x48>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6493      	str	r3, [r2, #72]	; 0x48
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <MX_DMA_Init+0x48>)
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	200b      	movs	r0, #11
 8002058:	f002 fe51 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800205c:	200b      	movs	r0, #11
 800205e:	f002 fe6a 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	200f      	movs	r0, #15
 8002068:	f002 fe49 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800206c:	200f      	movs	r0, #15
 800206e:	f002 fe62 	bl	8004d36 <HAL_NVIC_EnableIRQ>

}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <MX_GPIO_Init+0x144>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	4a4a      	ldr	r2, [pc, #296]	; (80021c4 <MX_GPIO_Init+0x144>)
 800209c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a2:	4b48      	ldr	r3, [pc, #288]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a44      	ldr	r2, [pc, #272]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ba:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d2:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e2:	4a38      	ldr	r2, [pc, #224]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ea:	4b36      	ldr	r3, [pc, #216]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a32      	ldr	r2, [pc, #200]	; (80021c4 <MX_GPIO_Init+0x144>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <MX_GPIO_Init+0x144>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AP_READY_Pin|PON_TRIG_Pin, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	210c      	movs	r1, #12
 8002112:	482d      	ldr	r0, [pc, #180]	; (80021c8 <MX_GPIO_Init+0x148>)
 8002114:	f003 fb94 	bl	8005840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IoT_PWR_Pin|L_Line_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800211e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002122:	f003 fb8d 	bl	8005840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_S_GPIO_Port, CAN_S_Pin, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2104      	movs	r1, #4
 800212a:	4828      	ldr	r0, [pc, #160]	; (80021cc <MX_GPIO_Init+0x14c>)
 800212c:	f003 fb88 	bl	8005840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AP_READY_Pin|PON_TRIG_Pin;
 8002130:	230c      	movs	r3, #12
 8002132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002134:	2301      	movs	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	4820      	ldr	r0, [pc, #128]	; (80021c8 <MX_GPIO_Init+0x148>)
 8002148:	f003 f926 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_RI_Pin|IoT_DTR_Pin;
 800214c:	2350      	movs	r3, #80	; 0x50
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f003 f919 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IoT_PWR_Pin|L_Line_Pin;
 8002166:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002182:	f003 f909 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_S_Pin;
 8002186:	2304      	movs	r3, #4
 8002188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_S_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <MX_GPIO_Init+0x14c>)
 800219e:	f003 f8fb 	bl	8005398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80021a2:	2308      	movs	r3, #8
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_GPIO_Init+0x150>)
 80021b6:	f003 f8ef 	bl	8005398 <HAL_GPIO_Init>

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	; 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	48000800 	.word	0x48000800
 80021cc:	48000c00 	.word	0x48000c00
 80021d0:	48001c00 	.word	0x48001c00

080021d4 <acquire_vehicle_data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void acquire_vehicle_data(OBD obd, float buffer[][2])
{
 80021d4:	b084      	sub	sp, #16
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b0b2      	sub	sp, #200	; 0xc8
 80021da:	af30      	add	r7, sp, #192	; 0xc0
 80021dc:	f107 0c10 	add.w	ip, r7, #16
 80021e0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(uint8_t i = 0; i < obd.pid_count; i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	71fb      	strb	r3, [r7, #7]
 80021e8:	e02e      	b.n	8002248 <acquire_vehicle_data+0x74>
	{
		obd.pid = obd.pids[i];
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	3310      	adds	r3, #16
 80021ee:	443b      	add	r3, r7
 80021f0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80021f4:	747b      	strb	r3, [r7, #17]
		OBD2_Request(obd);
 80021f6:	4668      	mov	r0, sp
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	22c0      	movs	r2, #192	; 0xc0
 80021fe:	4619      	mov	r1, r3
 8002200:	f006 fd84 	bl	8008d0c <memcpy>
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220a:	f7ff f8bb 	bl	8001384 <OBD2_Request>
		while(obd.msg_type != 0)
 800220e:	e000      	b.n	8002212 <acquire_vehicle_data+0x3e>
		{
			__NOP();
 8002210:	bf00      	nop
		while(obd.msg_type != 0)
 8002212:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1fa      	bne.n	8002210 <acquire_vehicle_data+0x3c>
		}
		buffer[i][0] = obd.pid;
 800221a:	7c79      	ldrb	r1, [r7, #17]
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002224:	4413      	add	r3, r2
 8002226:	ee07 1a90 	vmov	s15, r1
 800222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222e:	edc3 7a00 	vstr	s15, [r3]
		buffer[i][1] = obd.current_value;
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800223a:	4413      	add	r3, r2
 800223c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8002240:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < obd.pid_count; i++)
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	3301      	adds	r3, #1
 8002246:	71fb      	strb	r3, [r7, #7]
 8002248:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800224c:	79fa      	ldrb	r2, [r7, #7]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3cb      	bcc.n	80021ea <acquire_vehicle_data+0x16>
	}
}
 8002252:	bf00      	nop
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800225e:	b004      	add	sp, #16
 8002260:	4770      	bx	lr
	...

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	f6ad 1d14 	subw	sp, sp, #2324	; 0x914
 800226a:	f44f 67c2 	mov.w	r7, #1552	; 0x610
 800226e:	446f      	add	r7, sp
  /* USER CODE BEGIN 1 */
	float mqtt_buf[96][2] = {0};
 8002270:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8002274:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 8002278:	4618      	mov	r0, r3
 800227a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800227e:	461a      	mov	r2, r3
 8002280:	2100      	movs	r1, #0
 8002282:	f006 fd51 	bl	8008d28 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002286:	f000 feb9 	bl	8002ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228a:	f000 f84f 	bl	800232c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800228e:	f7ff fef7 	bl	8002080 <MX_GPIO_Init>
  MX_DMA_Init();
 8002292:	f7ff fecf 	bl	8002034 <MX_DMA_Init>
  MX_ADC1_Init();
 8002296:	f7ff fdd5 	bl	8001e44 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800229a:	f000 fb1f 	bl	80028dc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800229e:	f000 fb51 	bl	8002944 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80022a2:	f000 fb83 	bl	80029ac <MX_USART3_UART_Init>
//  MX_IWDG_Init();
  MX_TIM6_Init();
 80022a6:	f000 fa71 	bl	800278c <MX_TIM6_Init>
  MX_TIM2_Init();
 80022aa:	f000 fa1f 	bl	80026ec <MX_TIM2_Init>
  /* Initialize interrupts */
  MX_NVIC_Init();
 80022ae:	f000 f88e 	bl	80023ce <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  module.initialized = module_init(module);
 80022b2:	4c1c      	ldr	r4, [pc, #112]	; (8002324 <main+0xc0>)
 80022b4:	4668      	mov	r0, sp
 80022b6:	f104 0310 	add.w	r3, r4, #16
 80022ba:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80022be:	4619      	mov	r1, r3
 80022c0:	f006 fd24 	bl	8008d0c <memcpy>
 80022c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022c8:	f000 fdae 	bl	8002e28 <module_init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <main+0xc0>)
 80022d2:	f883 25dd 	strb.w	r2, [r3, #1501]	; 0x5dd
  module.rssi = check_signal(module);
 80022d6:	4c13      	ldr	r4, [pc, #76]	; (8002324 <main+0xc0>)
 80022d8:	4668      	mov	r0, sp
 80022da:	f104 0310 	add.w	r3, r4, #16
 80022de:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80022e2:	4619      	mov	r1, r3
 80022e4:	f006 fd12 	bl	8008d0c <memcpy>
 80022e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ec:	f000 fe22 	bl	8002f34 <check_signal>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <main+0xc0>)
 80022f6:	f883 25e2 	strb.w	r2, [r3, #1506]	; 0x5e2
  obd_comm.used_protocol = OBD2_Init();
 80022fa:	f7ff fc5b 	bl	8001bb4 <OBD2_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <main+0xc4>)
 8002304:	701a      	strb	r2, [r3, #0]

  acquire_vehicle_data(obd_comm, mqtt_buf);
 8002306:	4c08      	ldr	r4, [pc, #32]	; (8002328 <main+0xc4>)
 8002308:	463b      	mov	r3, r7
 800230a:	9330      	str	r3, [sp, #192]	; 0xc0
 800230c:	4668      	mov	r0, sp
 800230e:	f104 0310 	add.w	r3, r4, #16
 8002312:	22c0      	movs	r2, #192	; 0xc0
 8002314:	4619      	mov	r1, r3
 8002316:	f006 fcf9 	bl	8008d0c <memcpy>
 800231a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800231e:	f7ff ff59 	bl	80021d4 <acquire_vehicle_data>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002322:	e7fe      	b.n	8002322 <main+0xbe>
 8002324:	20000270 	.word	0x20000270
 8002328:	2000019c 	.word	0x2000019c

0800232c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b096      	sub	sp, #88	; 0x58
 8002330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	2244      	movs	r2, #68	; 0x44
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f006 fcf4 	bl	8008d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002340:	463b      	mov	r3, r7
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800234e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002352:	f003 faab 	bl	80058ac <HAL_PWREx_ControlVoltageScaling>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800235c:	f000 f84b 	bl	80023f6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002360:	2309      	movs	r3, #9
 8002362:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002364:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800236a:	2301      	movs	r3, #1
 800236c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236e:	2302      	movs	r3, #2
 8002370:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002372:	2303      	movs	r3, #3
 8002374:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800237a:	230a      	movs	r3, #10
 800237c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800237e:	2307      	movs	r3, #7
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002382:	2302      	movs	r3, #2
 8002384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002386:	2302      	movs	r3, #2
 8002388:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fae2 	bl	8005958 <HAL_RCC_OscConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800239a:	f000 f82c 	bl	80023f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239e:	230f      	movs	r3, #15
 80023a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a2:	2303      	movs	r3, #3
 80023a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	2104      	movs	r1, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fee2 	bl	8006180 <HAL_RCC_ClockConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80023c2:	f000 f818 	bl	80023f6 <Error_Handler>
  }
}
 80023c6:	bf00      	nop
 80023c8:	3758      	adds	r7, #88	; 0x58
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2100      	movs	r1, #0
 80023d6:	2010      	movs	r0, #16
 80023d8:	f002 fc91 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80023dc:	2010      	movs	r0, #16
 80023de:	f002 fcaa 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2100      	movs	r1, #0
 80023e6:	2026      	movs	r0, #38	; 0x26
 80023e8:	f002 fc89 	bl	8004cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023ec:	2026      	movs	r0, #38	; 0x26
 80023ee:	f002 fca2 	bl	8004d36 <HAL_NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023fa:	b672      	cpsid	i
}
 80023fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023fe:	e7fe      	b.n	80023fe <Error_Handler+0x8>

08002400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_MspInit+0x44>)
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <HAL_MspInit+0x44>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6613      	str	r3, [r2, #96]	; 0x60
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_MspInit+0x44>)
 8002414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_MspInit+0x44>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a08      	ldr	r2, [pc, #32]	; (8002444 <HAL_MspInit+0x44>)
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_MspInit+0x44>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800244c:	e7fe      	b.n	800244c <NMI_Handler+0x4>

0800244e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <HardFault_Handler+0x4>

08002454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <MemManage_Handler+0x4>

0800245a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245e:	e7fe      	b.n	800245e <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <UsageFault_Handler+0x4>

08002466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002494:	f000 fe06 	bl	80030a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Channel1_IRQHandler+0x10>)
 80024a2:	f002 fe9a 	bl	80051da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000138 	.word	0x20000138

080024b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <DMA1_Channel5_IRQHandler+0x10>)
 80024b6:	f002 fe90 	bl	80051da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000ab8 	.word	0x20000ab8

080024c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Channel6_IRQHandler+0x10>)
 80024ca:	f002 fe86 	bl	80051da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000b00 	.word	0x20000b00

080024d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <CAN1_RX0_IRQHandler+0x10>)
 80024de:	f002 f8ea 	bl	80046b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200000ac 	.word	0x200000ac

080024ec <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <CAN1_RX1_IRQHandler+0x10>)
 80024f2:	f002 f8e0 	bl	80046b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200000ac 	.word	0x200000ac

08002500 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <USART1_IRQHandler+0x10>)
 8002506:	f005 fa17 	bl	8007938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000092c 	.word	0x2000092c

08002514 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART2_IRQHandler+0x10>)
 800251a:	f005 fa0d 	bl	8007938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200009b0 	.word	0x200009b0

08002528 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM6_DAC_IRQHandler+0x10>)
 800252e:	f004 fc2e 	bl	8006d8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200008e0 	.word	0x200008e0

0800253c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
	return 1;
 8002540:	2301      	movs	r3, #1
}
 8002542:	4618      	mov	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <_kill>:

int _kill(int pid, int sig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002556:	f006 fbaf 	bl	8008cb8 <__errno>
 800255a:	4603      	mov	r3, r0
 800255c:	2216      	movs	r2, #22
 800255e:	601a      	str	r2, [r3, #0]
	return -1;
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_exit>:

void _exit (int status)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002574:	f04f 31ff 	mov.w	r1, #4294967295
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ffe7 	bl	800254c <_kill>
	while (1) {}		/* Make sure we hang here */
 800257e:	e7fe      	b.n	800257e <_exit+0x12>

08002580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e00a      	b.n	80025a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002592:	f3af 8000 	nop.w
 8002596:	4601      	mov	r1, r0
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	60ba      	str	r2, [r7, #8]
 800259e:	b2ca      	uxtb	r2, r1
 80025a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf0      	blt.n	8002592 <_read+0x12>
	}

return len;
 80025b0:	687b      	ldr	r3, [r7, #4]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e009      	b.n	80025e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	60ba      	str	r2, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dbf1      	blt.n	80025cc <_write+0x12>
	}
	return len;
 80025e8:	687b      	ldr	r3, [r7, #4]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_close>:

int _close(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
	return -1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261a:	605a      	str	r2, [r3, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_isatty>:

int _isatty(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	return 1;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	return 0;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002664:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <_sbrk+0x5c>)
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <_sbrk+0x60>)
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <_sbrk+0x64>)
 800267a:	4a12      	ldr	r2, [pc, #72]	; (80026c4 <_sbrk+0x68>)
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	429a      	cmp	r2, r3
 800268a:	d207      	bcs.n	800269c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800268c:	f006 fb14 	bl	8008cb8 <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	220c      	movs	r2, #12
 8002694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
 800269a:	e009      	b.n	80026b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <_sbrk+0x64>)
 80026ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ae:	68fb      	ldr	r3, [r7, #12]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20010000 	.word	0x20010000
 80026bc:	00000400 	.word	0x00000400
 80026c0:	20000890 	.word	0x20000890
 80026c4:	20000b60 	.word	0x20000b60

080026c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <SystemInit+0x20>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <SystemInit+0x20>)
 80026d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <MX_TIM2_Init+0x98>)
 800270c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002710:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19999;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <MX_TIM2_Init+0x98>)
 8002714:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002718:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <MX_TIM2_Init+0x98>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8002720:	4b18      	ldr	r3, [pc, #96]	; (8002784 <MX_TIM2_Init+0x98>)
 8002722:	4a19      	ldr	r2, [pc, #100]	; (8002788 <MX_TIM2_Init+0x9c>)
 8002724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <MX_TIM2_Init+0x98>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <MX_TIM2_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002732:	4814      	ldr	r0, [pc, #80]	; (8002784 <MX_TIM2_Init+0x98>)
 8002734:	f004 fa50 	bl	8006bd8 <HAL_TIM_Base_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800273e:	f7ff fe5a 	bl	80023f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002748:	f107 0310 	add.w	r3, r7, #16
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <MX_TIM2_Init+0x98>)
 8002750:	f004 fc3c 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800275a:	f7ff fe4c 	bl	80023f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <MX_TIM2_Init+0x98>)
 800276c:	f004 fe1e 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002776:	f7ff fe3e 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000894 	.word	0x20000894
 8002788:	000f423f 	.word	0x000f423f

0800278c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002792:	1d3b      	adds	r3, r7, #4
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <MX_TIM6_Init+0x68>)
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <MX_TIM6_Init+0x6c>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 800;
 80027a2:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027a8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8000;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027b2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027c0:	f004 fa0a 	bl	8006bd8 <HAL_TIM_Base_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80027ca:	f7ff fe14 	bl	80023f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4806      	ldr	r0, [pc, #24]	; (80027f4 <MX_TIM6_Init+0x68>)
 80027dc:	f004 fde6 	bl	80073ac <HAL_TIMEx_MasterConfigSynchronization>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80027e6:	f7ff fe06 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200008e0 	.word	0x200008e0
 80027f8:	40001000 	.word	0x40001000

080027fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d10c      	bne.n	8002828 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6593      	str	r3, [r2, #88]	; 0x58
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002826:	e018      	b.n	800285a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_TIM_Base_MspInit+0x6c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d113      	bne.n	800285a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a0b      	ldr	r2, [pc, #44]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 8002838:	f043 0310 	orr.w	r3, r3, #16
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <HAL_TIM_Base_MspInit+0x68>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2036      	movs	r0, #54	; 0x36
 8002850:	f002 fa55 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002854:	2036      	movs	r0, #54	; 0x36
 8002856:	f002 fa6e 	bl	8004d36 <HAL_NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40001000 	.word	0x40001000

0800286c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10e      	bne.n	800289c <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		if(obd_comm.msg_type == 0)
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002880:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			__NOP();
 8002888:	bf00      	nop
 800288a:	e003      	b.n	8002894 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else
		{
			obd_comm.msg_type = 3;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800288e:	2203      	movs	r2, #3
 8002890:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}
		HAL_TIM_Base_Stop_IT(&htim6);
 8002894:	480f      	ldr	r0, [pc, #60]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002896:	f004 fa4b 	bl	8006d30 <HAL_TIM_Base_Stop_IT>
		{
			module.received = 2;
		}
		HAL_TIM_Base_Stop_IT(htim);
	}
}
 800289a:	e012      	b.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x56>
	else if(htim->Instance == TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d10d      	bne.n	80028c2 <HAL_TIM_PeriodElapsedCallback+0x56>
		if(module.received == 1)
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80028a8:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0x48>
			__NOP();
 80028b0:	bf00      	nop
 80028b2:	e003      	b.n	80028bc <HAL_TIM_PeriodElapsedCallback+0x50>
			module.received = 2;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
		HAL_TIM_Base_Stop_IT(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f004 fa37 	bl	8006d30 <HAL_TIM_Base_Stop_IT>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40001000 	.word	0x40001000
 80028d0:	2000019c 	.word	0x2000019c
 80028d4:	200008e0 	.word	0x200008e0
 80028d8:	20000270 	.word	0x20000270

080028dc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_USART1_UART_Init+0x60>)
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <MX_USART1_UART_Init+0x64>)
 80028e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 10400;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_USART1_UART_Init+0x60>)
 80028e8:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80028ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ee:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_USART1_UART_Init+0x60>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART1_UART_Init+0x60>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_USART1_UART_Init+0x60>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART1_UART_Init+0x60>)
 8002902:	220c      	movs	r2, #12
 8002904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <MX_USART1_UART_Init+0x60>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_USART1_UART_Init+0x60>)
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_USART1_UART_Init+0x60>)
 8002914:	2200      	movs	r2, #0
 8002916:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT;
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_USART1_UART_Init+0x60>)
 800291a:	2201      	movs	r2, #1
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_USART1_UART_Init+0x60>)
 8002920:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_USART1_UART_Init+0x60>)
 8002928:	f004 fdc4 	bl	80074b4 <HAL_UART_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002932:	f7ff fd60 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000092c 	.word	0x2000092c
 8002940:	40013800 	.word	0x40013800

08002944 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 800294a:	4a17      	ldr	r2, [pc, #92]	; (80029a8 <MX_USART2_UART_Init+0x64>)
 800294c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 800295e:	2200      	movs	r2, #0
 8002960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002964:	2200      	movs	r2, #0
 8002966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 800296a:	220c      	movs	r2, #12
 800296c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002970:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002974:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002978:	2200      	movs	r2, #0
 800297a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002984:	2208      	movs	r2, #8
 8002986:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 800298a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800298e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002990:	4804      	ldr	r0, [pc, #16]	; (80029a4 <MX_USART2_UART_Init+0x60>)
 8002992:	f004 fd8f 	bl	80074b4 <HAL_UART_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800299c:	f7ff fd2b 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200009b0 	.word	0x200009b0
 80029a8:	40004400 	.word	0x40004400

080029ac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029b2:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <MX_USART3_UART_Init+0x5c>)
 80029b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029d2:	220c      	movs	r2, #12
 80029d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029de:	2200      	movs	r2, #0
 80029e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART3_UART_Init+0x58>)
 80029f0:	f004 fd60 	bl	80074b4 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029fa:	f7ff fcfc 	bl	80023f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000a34 	.word	0x20000a34
 8002a08:	40004800 	.word	0x40004800

08002a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0a4      	sub	sp, #144	; 0x90
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a24:	f107 0320 	add.w	r3, r7, #32
 8002a28:	225c      	movs	r2, #92	; 0x5c
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f006 f97b 	bl	8008d28 <memset>
  if(uartHandle->Instance==USART1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a99      	ldr	r2, [pc, #612]	; (8002c9c <HAL_UART_MspInit+0x290>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d16b      	bne.n	8002b14 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a40:	2300      	movs	r3, #0
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a44:	f107 0320 	add.w	r3, r7, #32
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fdbb 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a54:	f7ff fccf 	bl	80023f6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a58:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	4a90      	ldr	r2, [pc, #576]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	6613      	str	r3, [r2, #96]	; 0x60
 8002a64:	4b8e      	ldr	r3, [pc, #568]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a70:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	4a8a      	ldr	r2, [pc, #552]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7c:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = K_Line_TX_Pin|K_Line_RX_Pin;
 8002a88:	23c0      	movs	r3, #192	; 0xc0
 8002a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	487e      	ldr	r0, [pc, #504]	; (8002ca4 <HAL_UART_MspInit+0x298>)
 8002aac:	f002 fc74 	bl	8005398 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002ab0:	4b7d      	ldr	r3, [pc, #500]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ab2:	4a7e      	ldr	r2, [pc, #504]	; (8002cac <HAL_UART_MspInit+0x2a0>)
 8002ab4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8002ab6:	4b7c      	ldr	r3, [pc, #496]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ab8:	2202      	movs	r2, #2
 8002aba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abc:	4b7a      	ldr	r3, [pc, #488]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac2:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac8:	4b77      	ldr	r3, [pc, #476]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ada:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae0:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ae6:	4870      	ldr	r0, [pc, #448]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002ae8:	f002 f94e 	bl	8004d88 <HAL_DMA_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 8002af2:	f7ff fc80 	bl	80023f6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a6b      	ldr	r2, [pc, #428]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002afa:	671a      	str	r2, [r3, #112]	; 0x70
 8002afc:	4a6a      	ldr	r2, [pc, #424]	; (8002ca8 <HAL_UART_MspInit+0x29c>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2101      	movs	r1, #1
 8002b06:	2025      	movs	r0, #37	; 0x25
 8002b08:	f002 f8f9 	bl	8004cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b0c:	2025      	movs	r0, #37	; 0x25
 8002b0e:	f002 f912 	bl	8004d36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002b12:	e0bf      	b.n	8002c94 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a65      	ldr	r2, [pc, #404]	; (8002cb0 <HAL_UART_MspInit+0x2a4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d17a      	bne.n	8002c14 <HAL_UART_MspInit+0x208>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b26:	f107 0320 	add.w	r3, r7, #32
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fd4a 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_UART_MspInit+0x12e>
      Error_Handler();
 8002b36:	f7ff fc5e 	bl	80023f6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b3a:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b44:	6593      	str	r3, [r2, #88]	; 0x58
 8002b46:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5e:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IoT_CTS_Pin|IoT_RTS_Pin|IoT_RX_Pin;
 8002b6a:	230b      	movs	r3, #11
 8002b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b80:	2307      	movs	r3, #7
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f002 fc02 	bl	8005398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IoT_TX_Pin;
 8002b94:	2304      	movs	r3, #4
 8002b96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002baa:	2307      	movs	r3, #7
 8002bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(IoT_TX_GPIO_Port, &GPIO_InitStruct);
 8002bb0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bba:	f002 fbed 	bl	8005398 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bc0:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_UART_MspInit+0x2ac>)
 8002bc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bd0:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bf4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002bf6:	482f      	ldr	r0, [pc, #188]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002bf8:	f002 f8c6 	bl	8004d88 <HAL_DMA_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_UART_MspInit+0x1fa>
      Error_Handler();
 8002c02:	f7ff fbf8 	bl	80023f6 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002c0a:	671a      	str	r2, [r3, #112]	; 0x70
 8002c0c:	4a29      	ldr	r2, [pc, #164]	; (8002cb4 <HAL_UART_MspInit+0x2a8>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002c12:	e03f      	b.n	8002c94 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a28      	ldr	r2, [pc, #160]	; (8002cbc <HAL_UART_MspInit+0x2b0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d13a      	bne.n	8002c94 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c1e:	2304      	movs	r3, #4
 8002c20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c22:	2300      	movs	r3, #0
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c26:	f107 0320 	add.w	r3, r7, #32
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 fcca 	bl	80065c4 <HAL_RCCEx_PeriphCLKConfig>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0x22e>
      Error_Handler();
 8002c36:	f7ff fbde 	bl	80023f6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c44:	6593      	str	r3, [r2, #88]	; 0x58
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_UART_MspInit+0x294>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8002c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c82:	2307      	movs	r3, #7
 8002c84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <HAL_UART_MspInit+0x2b4>)
 8002c90:	f002 fb82 	bl	8005398 <HAL_GPIO_Init>
}
 8002c94:	bf00      	nop
 8002c96:	3790      	adds	r7, #144	; 0x90
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000400 	.word	0x48000400
 8002ca8:	20000ab8 	.word	0x20000ab8
 8002cac:	40020058 	.word	0x40020058
 8002cb0:	40004400 	.word	0x40004400
 8002cb4:	20000b00 	.word	0x20000b00
 8002cb8:	4002006c 	.word	0x4002006c
 8002cbc:	40004800 	.word	0x40004800
 8002cc0:	48000800 	.word	0x48000800

08002cc4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a21      	ldr	r2, [pc, #132]	; (8002d58 <HAL_UART_MspDeInit+0x94>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d112      	bne.n	8002cfc <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cd6:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cda:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ce0:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, K_Line_TX_Pin|K_Line_RX_Pin);
 8002ce2:	21c0      	movs	r1, #192	; 0xc0
 8002ce4:	481e      	ldr	r0, [pc, #120]	; (8002d60 <HAL_UART_MspDeInit+0x9c>)
 8002ce6:	f002 fcd1 	bl	800568c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 f902 	bl	8004ef8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002cf4:	2025      	movs	r0, #37	; 0x25
 8002cf6:	f002 f82c 	bl	8004d52 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8002cfa:	e028      	b.n	8002d4e <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_UART_MspDeInit+0xa0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d113      	bne.n	8002d2e <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002d0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d10:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, IoT_CTS_Pin|IoT_RTS_Pin|IoT_TX_Pin|IoT_RX_Pin);
 8002d12:	210f      	movs	r1, #15
 8002d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d18:	f002 fcb8 	bl	800568c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 f8e9 	bl	8004ef8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002d26:	2026      	movs	r0, #38	; 0x26
 8002d28:	f002 f813 	bl	8004d52 <HAL_NVIC_DisableIRQ>
}
 8002d2c:	e00f      	b.n	8002d4e <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART3)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_UART_MspDeInit+0xa4>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d10a      	bne.n	8002d4e <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <HAL_UART_MspDeInit+0x98>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GNSS_TX_Pin|GNSS_RX_Pin);
 8002d44:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002d48:	4808      	ldr	r0, [pc, #32]	; (8002d6c <HAL_UART_MspDeInit+0xa8>)
 8002d4a:	f002 fc9f 	bl	800568c <HAL_GPIO_DeInit>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	48000400 	.word	0x48000400
 8002d64:	40004400 	.word	0x40004400
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	48000800 	.word	0x48000800

08002d70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	if(huart == KLINE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a08      	ldr	r2, [pc, #32]	; (8002d9c <HAL_UART_RxCpltCallback+0x2c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <HAL_UART_RxCpltCallback+0x16>
	{
		kline_rx_callback();
 8002d80:	f7fe fa52 	bl	8001228 <kline_rx_callback>
	}
	else if (huart == NB)
	{
		nb_rx_callback();
	}
}
 8002d84:	e005      	b.n	8002d92 <HAL_UART_RxCpltCallback+0x22>
	else if (huart == NB)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_UART_RxCpltCallback+0x30>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_UART_RxCpltCallback+0x22>
		nb_rx_callback();
 8002d8e:	f000 f8c3 	bl	8002f18 <nb_rx_callback>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000092c 	.word	0x2000092c
 8002da0:	200009b0 	.word	0x200009b0

08002da4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
	nb_rx_callback();
 8002db0:	f000 f8b2 	bl	8002f18 <nb_rx_callback>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	__NOP();
 8002dc4:	bf00      	nop
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dd8:	f7ff fc76 	bl	80026c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ddc:	480c      	ldr	r0, [pc, #48]	; (8002e10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dde:	490d      	ldr	r1, [pc, #52]	; (8002e14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002de0:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <LoopForever+0xe>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002df4:	4c0a      	ldr	r4, [pc, #40]	; (8002e20 <LoopForever+0x16>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e02:	f005 ff5f 	bl	8008cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e06:	f7ff fa2d 	bl	8002264 <main>

08002e0a <LoopForever>:

LoopForever:
    b LoopForever
 8002e0a:	e7fe      	b.n	8002e0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002e18:	0800a410 	.word	0x0800a410
  ldr r2, =_sbss
 8002e1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002e20:	20000b5c 	.word	0x20000b5c

08002e24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <ADC1_IRQHandler>
	...

08002e28 <module_init>:
 *	@brief Module intialization
 *	Turns on the module with powerkey and checks if it is responding
 *	@param module	BG77 struct
 */
uint8_t module_init(BG77 module)
{
 8002e28:	b084      	sub	sp, #16
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f107 0c10 	add.w	ip, r7, #16
 8002e34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t repeat = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	71fb      	strb	r3, [r7, #7]
	power_on();
 8002e3c:	f000 f8ba 	bl	8002fb4 <power_on>
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB) != TRUE)
 8002e40:	e007      	b.n	8002e52 <module_init+0x2a>
	{
		if(repeat > MAX_REPEAT)
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	2b0a      	cmp	r3, #10
 8002e46:	d901      	bls.n	8002e4c <module_init+0x24>
		{
			return FALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e014      	b.n	8002e76 <module_init+0x4e>
		}
		repeat++;
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	71fb      	strb	r3, [r7, #7]
	while(send_command("AT\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB) != TRUE)
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <module_init+0x5c>)
 8002e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e58:	490b      	ldr	r1, [pc, #44]	; (8002e88 <module_init+0x60>)
 8002e5a:	480c      	ldr	r0, [pc, #48]	; (8002e8c <module_init+0x64>)
 8002e5c:	f000 f81a 	bl	8002e94 <send_command>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d1ed      	bne.n	8002e42 <module_init+0x1a>
	}
	send_command("ATI\r\n", "OK\r\n", DEFAULT_TIMEOUT, NB);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <module_init+0x5c>)
 8002e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e6c:	4906      	ldr	r1, [pc, #24]	; (8002e88 <module_init+0x60>)
 8002e6e:	4808      	ldr	r0, [pc, #32]	; (8002e90 <module_init+0x68>)
 8002e70:	f000 f810 	bl	8002e94 <send_command>
	return TRUE;
 8002e74:	2301      	movs	r3, #1
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e80:	b004      	add	sp, #16
 8002e82:	4770      	bx	lr
 8002e84:	200009b0 	.word	0x200009b0
 8002e88:	08009f48 	.word	0x08009f48
 8002e8c:	08009f50 	.word	0x08009f50
 8002e90:	08009f58 	.word	0x08009f58

08002e94 <send_command>:
 *	@param timeout		Maximum time to send the command
 *	@param interface	UART interface handle
 *	@retval TRUE if reply matches the expected reply
 */
uint8_t send_command(char *command, char *reply, uint16_t timeout, UART_HandleTypeDef *interface)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
	module.received = 0;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <send_command+0x7c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
	clear_rx_buff();
 8002eac:	f000 f896 	bl	8002fdc <clear_rx_buff>
	uint8_t length = strlen(command);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7fd f98d 	bl	80001d0 <strlen>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
	HAL_UARTEx_ReceiveToIdle_DMA(interface, module.rx_buff, 200);
 8002eba:	22c8      	movs	r2, #200	; 0xc8
 8002ebc:	4914      	ldr	r1, [pc, #80]	; (8002f10 <send_command+0x7c>)
 8002ebe:	6838      	ldr	r0, [r7, #0]
 8002ec0:	f005 fe9f 	bl	8008c02 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UART_Transmit(interface, (unsigned char *)command, length, timeout);
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	88fb      	ldrh	r3, [r7, #6]
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	6838      	ldr	r0, [r7, #0]
 8002ece:	f004 fb78 	bl	80075c2 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(NB_TIMER);
 8002ed2:	4810      	ldr	r0, [pc, #64]	; (8002f14 <send_command+0x80>)
 8002ed4:	f003 fed8 	bl	8006c88 <HAL_TIM_Base_Start_IT>
	while(module.received == 0)
 8002ed8:	e000      	b.n	8002edc <send_command+0x48>
	{
		__NOP();
 8002eda:	bf00      	nop
	while(module.received == 0)
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <send_command+0x7c>)
 8002ede:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f9      	beq.n	8002eda <send_command+0x46>
	}
	if(module.received == 1)
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <send_command+0x7c>)
 8002ee8:	f893 35de 	ldrb.w	r3, [r3, #1502]	; 0x5de
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10a      	bne.n	8002f06 <send_command+0x72>
	{
		if(strstr((char *)module.rx_buff, reply) != NULL)
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	4807      	ldr	r0, [pc, #28]	; (8002f10 <send_command+0x7c>)
 8002ef4:	f005 ff20 	bl	8008d38 <strstr>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <send_command+0x6e>
		{
			return TRUE;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e002      	b.n	8002f08 <send_command+0x74>
		}
		else
		{
			return FALSE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <send_command+0x74>
		}
	}
	return FALSE;
 8002f06:	2300      	movs	r3, #0

}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000270 	.word	0x20000270
 8002f14:	20000894 	.word	0x20000894

08002f18 <nb_rx_callback>:
/*
 *	@brief Module response Callback
 *	@retval	none
 */
void nb_rx_callback(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	module.received = 1;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <nb_rx_callback+0x18>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 25de 	strb.w	r2, [r3, #1502]	; 0x5de
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000270 	.word	0x20000270

08002f34 <check_signal>:
 *	@brief	Checks the RSSI for NB signal
 *	@param	module	BG77 struct
 *	@retval	rssi or FALSE if the the is no response
 */
uint8_t check_signal(BG77 module)
{
 8002f34:	b084      	sub	sp, #16
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	f107 0c18 	add.w	ip, r7, #24
 8002f40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(send_command("AT+CSQ\r\n","OK\r\n",DEFAULT_TIMEOUT,NB))
 8002f44:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <check_signal+0x6c>)
 8002f46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f4a:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <check_signal+0x70>)
 8002f4c:	4816      	ldr	r0, [pc, #88]	; (8002fa8 <check_signal+0x74>)
 8002f4e:	f7ff ffa1 	bl	8002e94 <send_command>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01a      	beq.n	8002f8e <check_signal+0x5a>
	{
		char *token = strtok((char *)module.rx_buff, " ");
 8002f58:	4914      	ldr	r1, [pc, #80]	; (8002fac <check_signal+0x78>)
 8002f5a:	f107 0018 	add.w	r0, r7, #24
 8002f5e:	f005 ff01 	bl	8008d64 <strtok>
 8002f62:	60f8      	str	r0, [r7, #12]
		if(token)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d011      	beq.n	8002f8e <check_signal+0x5a>
		{
			token = strtok(NULL,",");
 8002f6a:	4911      	ldr	r1, [pc, #68]	; (8002fb0 <check_signal+0x7c>)
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f005 fef9 	bl	8008d64 <strtok>
 8002f72:	60f8      	str	r0, [r7, #12]
			if(token)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d009      	beq.n	8002f8e <check_signal+0x5a>
			{
				char *ptr;
				uint8_t rssi = strtol(token, &ptr, 10);
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	220a      	movs	r2, #10
 8002f7e:	4619      	mov	r1, r3
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f005 ffcd 	bl	8008f20 <strtol>
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]
				return rssi;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
 8002f8c:	e000      	b.n	8002f90 <check_signal+0x5c>
			}
		}
	}
	return FALSE;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f9a:	b004      	add	sp, #16
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	200009b0 	.word	0x200009b0
 8002fa4:	08009f48 	.word	0x08009f48
 8002fa8:	08009f78 	.word	0x08009f78
 8002fac:	08009f6c 	.word	0x08009f6c
 8002fb0:	08009f70 	.word	0x08009f70

08002fb4 <power_on>:
 * @brief	Powers on the module
 * @param 	None
 * @retval	None
 */
static void power_on(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_SET);
 8002fb8:	2201      	movs	r2, #1
 8002fba:	2120      	movs	r1, #32
 8002fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc0:	f002 fc3e 	bl	8005840 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8002fc4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002fc8:	f000 f88c 	bl	80030e4 <HAL_Delay>
	HAL_GPIO_WritePin(IoT_PWR_GPIO_Port, IoT_PWR_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2120      	movs	r1, #32
 8002fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd4:	f002 fc34 	bl	8005840 <HAL_GPIO_WritePin>
}
 8002fd8:	bf00      	nop
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <clear_rx_buff>:
 * @brief	Clears the RX buffer before new reception
 * @param 	None
 * @retval	None
 */
static void clear_rx_buff(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
	module.rx_index = 0;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <clear_rx_buff+0x1c>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 25dc 	strb.w	r2, [r3, #1500]	; 0x5dc
	memset(module.rx_buff, 0, sizeof(module.rx_buff));
 8002fe8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fec:	2100      	movs	r1, #0
 8002fee:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <clear_rx_buff+0x1c>)
 8002ff0:	f005 fe9a 	bl	8008d28 <memset>
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000270 	.word	0x20000270

08002ffc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003006:	2003      	movs	r0, #3
 8003008:	f001 fe6e 	bl	8004ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800300c:	200f      	movs	r0, #15
 800300e:	f000 f80d 	bl	800302c <HAL_InitTick>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	71fb      	strb	r3, [r7, #7]
 800301c:	e001      	b.n	8003022 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800301e:	f7ff f9ef 	bl	8002400 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003022:	79fb      	ldrb	r3, [r7, #7]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_InitTick+0x6c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d023      	beq.n	8003088 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003040:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_InitTick+0x70>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_InitTick+0x6c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f001 fe89 	bl	8004d6e <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10f      	bne.n	8003082 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d809      	bhi.n	800307c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f001 fe45 	bl	8004cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003074:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_InitTick+0x74>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e007      	b.n	800308c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	e004      	b.n	800308c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	e001      	b.n	800308c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008
 800309c:	20000000 	.word	0x20000000
 80030a0:	20000004 	.word	0x20000004

080030a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_IncTick+0x20>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_IncTick+0x24>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <HAL_IncTick+0x24>)
 80030b6:	6013      	str	r3, [r2, #0]
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20000008 	.word	0x20000008
 80030c8:	20000b48 	.word	0x20000b48

080030cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTick;
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_GetTick+0x14>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000b48 	.word	0x20000b48

080030e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff ffee 	bl	80030cc <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d005      	beq.n	800310a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_Delay+0x44>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800310a:	bf00      	nop
 800310c:	f7ff ffde 	bl	80030cc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d8f7      	bhi.n	800310c <HAL_Delay+0x28>
  {
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000008 	.word	0x20000008

0800312c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	609a      	str	r2, [r3, #8]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	609a      	str	r2, [r3, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3360      	adds	r3, #96	; 0x60
 80031a6:	461a      	mov	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <LL_ADC_SetOffset+0x44>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	03fff000 	.word	0x03fff000

080031dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3360      	adds	r3, #96	; 0x60
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3360      	adds	r3, #96	; 0x60
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	431a      	orrs	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800323e:	b480      	push	{r7}
 8003240:	b087      	sub	sp, #28
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3330      	adds	r3, #48	; 0x30
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	211f      	movs	r1, #31
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 011f 	and.w	r1, r3, #31
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	431a      	orrs	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	3314      	adds	r3, #20
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	0e5b      	lsrs	r3, r3, #25
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	4413      	add	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	0d1b      	lsrs	r3, r3, #20
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2107      	movs	r1, #7
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0d1b      	lsrs	r3, r3, #20
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	431a      	orrs	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032e0:	bf00      	nop
 80032e2:	371c      	adds	r7, #28
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0318 	and.w	r3, r3, #24
 800330e:	4908      	ldr	r1, [pc, #32]	; (8003330 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003310:	40d9      	lsrs	r1, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	400b      	ands	r3, r1
 8003316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331a:	431a      	orrs	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	0007ffff 	.word	0x0007ffff

08003334 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6093      	str	r3, [r2, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800336c:	d101      	bne.n	8003372 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003394:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033bc:	d101      	bne.n	80033c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <LL_ADC_IsEnabled+0x18>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <LL_ADC_IsEnabled+0x1a>
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	d101      	bne.n	800340e <LL_ADC_REG_IsConversionOngoing+0x18>
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d101      	bne.n	8003434 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e12c      	b.n	80036b8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fe fd4d 	bl	8001f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff67 	bl	8003358 <LL_ADC_IsDeepPowerDownEnabled>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d004      	beq.n	800349a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff4d 	bl	8003334 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff82 	bl	80033a8 <LL_ADC_IsInternalRegulatorEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d115      	bne.n	80034d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff66 	bl	8003380 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b4:	4b82      	ldr	r3, [pc, #520]	; (80036c0 <HAL_ADC_Init+0x27c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	4a82      	ldr	r2, [pc, #520]	; (80036c4 <HAL_ADC_Init+0x280>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034c8:	e002      	b.n	80034d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff64 	bl	80033a8 <LL_ADC_IsInternalRegulatorEnabled>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff ff75 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 800350c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 80c5 	bne.w	80036a6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 80c1 	bne.w	80036a6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800352c:	f043 0202 	orr.w	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff49 	bl	80033d0 <LL_ADC_IsEnabled>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003544:	4860      	ldr	r0, [pc, #384]	; (80036c8 <HAL_ADC_Init+0x284>)
 8003546:	f7ff ff43 	bl	80033d0 <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	485d      	ldr	r0, [pc, #372]	; (80036cc <HAL_ADC_Init+0x288>)
 8003558:	f7ff fde8 	bl	800312c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7e5b      	ldrb	r3, [r3, #25]
 8003560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800356c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d106      	bne.n	8003598 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	3b01      	subs	r3, #1
 8003590:	045b      	lsls	r3, r3, #17
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <HAL_ADC_Init+0x28c>)
 80035bc:	4013      	ands	r3, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff12 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 80035d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff1f 	bl	800341c <LL_ADC_INJ_IsConversionOngoing>
 80035de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d13d      	bne.n	8003662 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d13a      	bne.n	8003662 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003608:	f023 0302 	bic.w	r3, r3, #2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	430b      	orrs	r3, r1
 8003614:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800361c:	2b01      	cmp	r3, #1
 800361e:	d118      	bne.n	8003652 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003642:	430a      	orrs	r2, r1
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	611a      	str	r2, [r3, #16]
 8003650:	e007      	b.n	8003662 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d10c      	bne.n	8003684 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	f023 010f 	bic.w	r1, r3, #15
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
 8003682:	e007      	b.n	8003694 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 020f 	bic.w	r2, r2, #15
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	f023 0303 	bic.w	r3, r3, #3
 800369c:	f043 0201 	orr.w	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54
 80036a4:	e007      	b.n	80036b6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000000 	.word	0x20000000
 80036c4:	053e2d63 	.word	0x053e2d63
 80036c8:	50040000 	.word	0x50040000
 80036cc:	50040300 	.word	0x50040300
 80036d0:	fff0c007 	.word	0xfff0c007

080036d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b0b6      	sub	sp, #216	; 0xd8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x22>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e3b9      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x796>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fe77 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 839e 	bne.w	8003e4c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d824      	bhi.n	8003762 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	3b02      	subs	r3, #2
 800371e:	2b03      	cmp	r3, #3
 8003720:	d81b      	bhi.n	800375a <HAL_ADC_ConfigChannel+0x86>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <HAL_ADC_ConfigChannel+0x54>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003739 	.word	0x08003739
 800372c:	08003741 	.word	0x08003741
 8003730:	08003749 	.word	0x08003749
 8003734:	08003751 	.word	0x08003751
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	220c      	movs	r2, #12
 800373c:	605a      	str	r2, [r3, #4]
          break;
 800373e:	e011      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2212      	movs	r2, #18
 8003744:	605a      	str	r2, [r3, #4]
          break;
 8003746:	e00d      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	2218      	movs	r2, #24
 800374c:	605a      	str	r2, [r3, #4]
          break;
 800374e:	e009      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003756:	605a      	str	r2, [r3, #4]
          break;
 8003758:	e004      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2206      	movs	r2, #6
 800375e:	605a      	str	r2, [r3, #4]
          break;
 8003760:	e000      	b.n	8003764 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003762:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	f7ff fd64 	bl	800323e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fe3b 	bl	80033f6 <LL_ADC_REG_IsConversionOngoing>
 8003780:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff fe47 	bl	800341c <LL_ADC_INJ_IsConversionOngoing>
 800378e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003792:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 81a6 	bne.w	8003ae8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800379c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f040 81a1 	bne.w	8003ae8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f7ff fd6f 	bl	8003296 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d00a      	beq.n	80037f0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037ea:	f7ff fcd3 	bl	8003194 <LL_ADC_SetOffset>
 80037ee:	e17b      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fcf0 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_ADC_ConfigChannel+0x148>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fce5 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003812:	4603      	mov	r3, r0
 8003814:	0e9b      	lsrs	r3, r3, #26
 8003816:	f003 021f 	and.w	r2, r3, #31
 800381a:	e01e      	b.n	800385a <HAL_ADC_ConfigChannel+0x186>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fcda 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003828:	4603      	mov	r3, r0
 800382a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800383a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800383e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800384a:	2320      	movs	r3, #32
 800384c:	e004      	b.n	8003858 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800384e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003852:	fab3 f383 	clz	r3, r3
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x19e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	0e9b      	lsrs	r3, r3, #26
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	e018      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1d0>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800388a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800388e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003896:	2320      	movs	r3, #32
 8003898:	e004      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800389a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d106      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fca9 	bl	8003208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fc8d 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x20e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fc82 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80038d8:	4603      	mov	r3, r0
 80038da:	0e9b      	lsrs	r3, r3, #26
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	e01e      	b.n	8003920 <HAL_ADC_ConfigChannel+0x24c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fc77 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038f8:	fa93 f3a3 	rbit	r3, r3
 80038fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003900:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003904:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003910:	2320      	movs	r3, #32
 8003912:	e004      	b.n	800391e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003918:	fab3 f383 	clz	r3, r3
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003928:	2b00      	cmp	r3, #0
 800392a:	d105      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x264>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	e018      	b.n	800396a <HAL_ADC_ConfigChannel+0x296>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800394c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e004      	b.n	800396a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800396a:	429a      	cmp	r2, r3
 800396c:	d106      	bne.n	800397c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	2101      	movs	r1, #1
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fc46 	bl	8003208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2102      	movs	r1, #2
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fc2a 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10a      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x2d4>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2102      	movs	r1, #2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fc1f 	bl	80031dc <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	f003 021f 	and.w	r2, r3, #31
 80039a6:	e01e      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x312>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff fc14 	bl	80031dc <LL_ADC_GetOffsetChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80039c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80039ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e004      	b.n	80039e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80039da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d105      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x32a>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	e016      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x358>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e004      	b.n	8003a2c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a26:	fab3 f383 	clz	r3, r3
 8003a2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d106      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2200      	movs	r2, #0
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fbe5 	bl	8003208 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2103      	movs	r1, #3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fbc9 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x396>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2103      	movs	r1, #3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fbbe 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003a60:	4603      	mov	r3, r0
 8003a62:	0e9b      	lsrs	r3, r3, #26
 8003a64:	f003 021f 	and.w	r2, r3, #31
 8003a68:	e017      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x3c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2103      	movs	r1, #3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff fbb3 	bl	80031dc <LL_ADC_GetOffsetChannel>
 8003a76:	4603      	mov	r3, r0
 8003a78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a84:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	e003      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <HAL_ADC_ConfigChannel+0x3de>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	0e9b      	lsrs	r3, r3, #26
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	e011      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x402>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aba:	fa93 f3a3 	rbit	r3, r3
 8003abe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003aca:	2320      	movs	r3, #32
 8003acc:	e003      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad0:	fab3 f383 	clz	r3, r3
 8003ad4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d106      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2103      	movs	r1, #3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fb90 	bl	8003208 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fc6f 	bl	80033d0 <LL_ADC_IsEnabled>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 813f 	bne.w	8003d78 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7ff fbf0 	bl	80032ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a8e      	ldr	r2, [pc, #568]	; (8003d4c <HAL_ADC_ConfigChannel+0x678>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	f040 8130 	bne.w	8003d78 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10b      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x46c>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	0e9b      	lsrs	r3, r3, #26
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	bf94      	ite	ls
 8003b38:	2301      	movls	r3, #1
 8003b3a:	2300      	movhi	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e019      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x4a0>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b48:	fa93 f3a3 	rbit	r3, r3
 8003b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b50:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003b58:	2320      	movs	r3, #32
 8003b5a:	e003      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5e:	fab3 f383 	clz	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	3301      	adds	r3, #1
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b09      	cmp	r3, #9
 8003b6c:	bf94      	ite	ls
 8003b6e:	2301      	movls	r3, #1
 8003b70:	2300      	movhi	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d079      	beq.n	8003c6c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x4c0>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	0e9b      	lsrs	r3, r3, #26
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	069b      	lsls	r3, r3, #26
 8003b8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b92:	e015      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x4ec>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003bac:	2320      	movs	r3, #32
 8003bae:	e003      	b.n	8003bb8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb2:	fab3 f383 	clz	r3, r3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	069b      	lsls	r3, r3, #26
 8003bbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x50c>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	0e9b      	lsrs	r3, r3, #26
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	e017      	b.n	8003c10 <HAL_ADC_ConfigChannel+0x53c>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x562>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	3301      	adds	r3, #1
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	051b      	lsls	r3, r3, #20
 8003c34:	e018      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x594>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003c4e:	2320      	movs	r3, #32
 8003c50:	e003      	b.n	8003c5a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	e080      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x5b4>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0e9b      	lsrs	r3, r3, #26
 8003c7e:	3301      	adds	r3, #1
 8003c80:	069b      	lsls	r3, r3, #26
 8003c82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c86:	e015      	b.n	8003cb4 <HAL_ADC_ConfigChannel+0x5e0>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	e003      	b.n	8003cac <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	fab3 f383 	clz	r3, r3
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	069b      	lsls	r3, r3, #26
 8003cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d109      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x600>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2101      	movs	r1, #1
 8003cce:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd2:	e017      	b.n	8003d04 <HAL_ADC_ConfigChannel+0x630>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	fa93 f3a3 	rbit	r3, r3
 8003ce0:	61fb      	str	r3, [r7, #28]
  return result;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003cec:	2320      	movs	r3, #32
 8003cee:	e003      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	ea42 0103 	orr.w	r1, r2, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x65c>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	0e9b      	lsrs	r3, r3, #26
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	3b1e      	subs	r3, #30
 8003d28:	051b      	lsls	r3, r3, #20
 8003d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	e01d      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x698>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	613b      	str	r3, [r7, #16]
  return result;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003d48:	2320      	movs	r3, #32
 8003d4a:	e005      	b.n	8003d58 <HAL_ADC_ConfigChannel+0x684>
 8003d4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f003 021f 	and.w	r2, r3, #31
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	051b      	lsls	r3, r3, #20
 8003d68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6892      	ldr	r2, [r2, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7ff fa8f 	bl	8003296 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b3d      	ldr	r3, [pc, #244]	; (8003e74 <HAL_ADC_ConfigChannel+0x7a0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d06c      	beq.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d84:	483c      	ldr	r0, [pc, #240]	; (8003e78 <HAL_ADC_ConfigChannel+0x7a4>)
 8003d86:	f7ff f9f7 	bl	8003178 <LL_ADC_GetCommonPathInternalCh>
 8003d8a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a3a      	ldr	r2, [pc, #232]	; (8003e7c <HAL_ADC_ConfigChannel+0x7a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d127      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d121      	bne.n	8003de8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a35      	ldr	r2, [pc, #212]	; (8003e80 <HAL_ADC_ConfigChannel+0x7ac>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d157      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003db6:	4619      	mov	r1, r3
 8003db8:	482f      	ldr	r0, [pc, #188]	; (8003e78 <HAL_ADC_ConfigChannel+0x7a4>)
 8003dba:	f7ff f9ca 	bl	8003152 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_ADC_ConfigChannel+0x7b0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	099b      	lsrs	r3, r3, #6
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_ADC_ConfigChannel+0x7b4>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	4613      	mov	r3, r2
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dd8:	e002      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f9      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003de6:	e03a      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a27      	ldr	r2, [pc, #156]	; (8003e8c <HAL_ADC_ConfigChannel+0x7b8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d113      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x746>
 8003df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d12a      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e10:	4619      	mov	r1, r3
 8003e12:	4819      	ldr	r0, [pc, #100]	; (8003e78 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e14:	f7ff f99d 	bl	8003152 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e18:	e021      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d11c      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d116      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <HAL_ADC_ConfigChannel+0x7ac>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d111      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e42:	4619      	mov	r1, r3
 8003e44:	480c      	ldr	r0, [pc, #48]	; (8003e78 <HAL_ADC_ConfigChannel+0x7a4>)
 8003e46:	f7ff f984 	bl	8003152 <LL_ADC_SetCommonPathInternalCh>
 8003e4a:	e008      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e66:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	37d8      	adds	r7, #216	; 0xd8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	80080000 	.word	0x80080000
 8003e78:	50040300 	.word	0x50040300
 8003e7c:	c7520000 	.word	0xc7520000
 8003e80:	50040000 	.word	0x50040000
 8003e84:	20000000 	.word	0x20000000
 8003e88:	053e2d63 	.word	0x053e2d63
 8003e8c:	cb840000 	.word	0xcb840000
 8003e90:	80000001 	.word	0x80000001

08003e94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0ed      	b.n	8004082 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fd fee0 	bl	8001c78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec8:	f7ff f900 	bl	80030cc <HAL_GetTick>
 8003ecc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ece:	e012      	b.n	8003ef6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ed0:	f7ff f8fc 	bl	80030cc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b0a      	cmp	r3, #10
 8003edc:	d90b      	bls.n	8003ef6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2205      	movs	r2, #5
 8003eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e0c5      	b.n	8004082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0e5      	beq.n	8003ed0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0202 	bic.w	r2, r2, #2
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f14:	f7ff f8da 	bl	80030cc <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f1a:	e012      	b.n	8003f42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f1c:	f7ff f8d6 	bl	80030cc <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b0a      	cmp	r3, #10
 8003f28:	d90b      	bls.n	8003f42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e09f      	b.n	8004082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e5      	bne.n	8003f1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7e1b      	ldrb	r3, [r3, #24]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d108      	bne.n	8003f6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e007      	b.n	8003f7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7e5b      	ldrb	r3, [r3, #25]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d108      	bne.n	8003f94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e007      	b.n	8003fa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	7e9b      	ldrb	r3, [r3, #26]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d108      	bne.n	8003fbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0220 	orr.w	r2, r2, #32
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e007      	b.n	8003fce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0220 	bic.w	r2, r2, #32
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7edb      	ldrb	r3, [r3, #27]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d108      	bne.n	8003fe8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0210 	bic.w	r2, r2, #16
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e007      	b.n	8003ff8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0210 	orr.w	r2, r2, #16
 8003ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	7f1b      	ldrb	r3, [r3, #28]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d108      	bne.n	8004012 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0208 	orr.w	r2, r2, #8
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e007      	b.n	8004022 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0208 	bic.w	r2, r2, #8
 8004020:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7f5b      	ldrb	r3, [r3, #29]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d108      	bne.n	800403c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0204 	orr.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e007      	b.n	800404c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	ea42 0103 	orr.w	r1, r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	1e5a      	subs	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800408a:	b480      	push	{r7}
 800408c:	b087      	sub	sp, #28
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d003      	beq.n	80040b0 <HAL_CAN_ConfigFilter+0x26>
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f040 80aa 	bne.w	8004204 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	43db      	mvns	r3, r3
 80040da:	401a      	ands	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d123      	bne.n	8004132 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	43db      	mvns	r3, r3
 80040f4:	401a      	ands	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800410c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3248      	adds	r2, #72	; 0x48
 8004112:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004126:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	3348      	adds	r3, #72	; 0x48
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	440b      	add	r3, r1
 8004130:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d122      	bne.n	8004180 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	431a      	orrs	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800415a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	3248      	adds	r2, #72	; 0x48
 8004160:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004174:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004176:	6979      	ldr	r1, [r7, #20]
 8004178:	3348      	adds	r3, #72	; 0x48
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	440b      	add	r3, r1
 800417e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800419a:	e007      	b.n	80041ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041c6:	e007      	b.n	80041d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	431a      	orrs	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	e006      	b.n	8004212 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b084      	sub	sp, #16
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12e      	bne.n	8004290 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800424a:	f7fe ff3f 	bl	80030cc <HAL_GetTick>
 800424e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004250:	e012      	b.n	8004278 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004252:	f7fe ff3b 	bl	80030cc <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b0a      	cmp	r3, #10
 800425e:	d90b      	bls.n	8004278 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2205      	movs	r2, #5
 8004270:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e012      	b.n	800429e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e5      	bne.n	8004252 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e006      	b.n	800429e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b089      	sub	sp, #36	; 0x24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80042c4:	7ffb      	ldrb	r3, [r7, #31]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d003      	beq.n	80042d2 <HAL_CAN_AddTxMessage+0x2c>
 80042ca:	7ffb      	ldrb	r3, [r7, #31]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f040 80ad 	bne.w	800442c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d105      	bne.n	80042f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8095 	beq.w	800441c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	0e1b      	lsrs	r3, r3, #24
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042fc:	2201      	movs	r2, #1
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	409a      	lsls	r2, r3
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10d      	bne.n	800432a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004318:	68f9      	ldr	r1, [r7, #12]
 800431a:	6809      	ldr	r1, [r1, #0]
 800431c:	431a      	orrs	r2, r3
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3318      	adds	r3, #24
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	440b      	add	r3, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e00f      	b.n	800434a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004334:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800433e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3318      	adds	r3, #24
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	440b      	add	r3, r1
 8004348:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3318      	adds	r3, #24
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	440b      	add	r3, r1
 800435a:	3304      	adds	r3, #4
 800435c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	7d1b      	ldrb	r3, [r3, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d111      	bne.n	800438a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3318      	adds	r3, #24
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4413      	add	r3, r2
 8004372:	3304      	adds	r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	6811      	ldr	r1, [r2, #0]
 800437a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3318      	adds	r3, #24
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	440b      	add	r3, r1
 8004386:	3304      	adds	r3, #4
 8004388:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3307      	adds	r3, #7
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	061a      	lsls	r2, r3, #24
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3306      	adds	r3, #6
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3305      	adds	r3, #5
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	4313      	orrs	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	3204      	adds	r2, #4
 80043aa:	7812      	ldrb	r2, [r2, #0]
 80043ac:	4610      	mov	r0, r2
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	ea43 0200 	orr.w	r2, r3, r0
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	440b      	add	r3, r1
 80043bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3303      	adds	r3, #3
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	061a      	lsls	r2, r3, #24
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3302      	adds	r3, #2
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3301      	adds	r3, #1
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	4313      	orrs	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	4610      	mov	r0, r2
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	ea43 0200 	orr.w	r2, r3, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	440b      	add	r3, r1
 80043f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3318      	adds	r3, #24
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4413      	add	r3, r2
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	6811      	ldr	r1, [r2, #0]
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	3318      	adds	r3, #24
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	440b      	add	r3, r1
 8004416:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	e00e      	b.n	800443a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e006      	b.n	800443a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800445a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800445c:	7dfb      	ldrb	r3, [r7, #23]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d003      	beq.n	800446a <HAL_CAN_GetRxMessage+0x24>
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b02      	cmp	r3, #2
 8004466:	f040 80f3 	bne.w	8004650 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10e      	bne.n	800448e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d116      	bne.n	80044ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0e7      	b.n	800465e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0d8      	b.n	800465e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	331b      	adds	r3, #27
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	4413      	add	r3, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0204 	and.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	331b      	adds	r3, #27
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4413      	add	r3, r2
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	0d5b      	lsrs	r3, r3, #21
 80044da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	331b      	adds	r3, #27
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	08db      	lsrs	r3, r3, #3
 80044f4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	331b      	adds	r3, #27
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4413      	add	r3, r2
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0202 	and.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	331b      	adds	r3, #27
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 020f 	and.w	r2, r3, #15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	331b      	adds	r3, #27
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	4413      	add	r3, r2
 8004536:	3304      	adds	r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b2da      	uxtb	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	331b      	adds	r3, #27
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	4413      	add	r3, r2
 8004564:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4413      	add	r3, r2
 800457a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0a1a      	lsrs	r2, r3, #8
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	0c1a      	lsrs	r2, r3, #16
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	3302      	adds	r3, #2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	0e1a      	lsrs	r2, r3, #24
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	3303      	adds	r3, #3
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	3304      	adds	r3, #4
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	4413      	add	r3, r2
 80045e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0a1a      	lsrs	r2, r3, #8
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3305      	adds	r3, #5
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0c1a      	lsrs	r2, r3, #16
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3306      	adds	r3, #6
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0e1a      	lsrs	r2, r3, #24
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3307      	adds	r3, #7
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0220 	orr.w	r2, r2, #32
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	e007      	b.n	800464c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0220 	orr.w	r2, r2, #32
 800464a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e006      	b.n	800465e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
  }
}
 800465e:	4618      	mov	r0, r3
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3020 	ldrb.w	r3, [r3, #32]
 800467a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d002      	beq.n	8004688 <HAL_CAN_ActivateNotification+0x1e>
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d109      	bne.n	800469c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6959      	ldr	r1, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e006      	b.n	80046aa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08a      	sub	sp, #40	; 0x28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d07c      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d023      	beq.n	800474e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2201      	movs	r2, #1
 800470c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f983 	bl	8004a24 <HAL_CAN_TxMailbox0CompleteCallback>
 800471e:	e016      	b.n	800474e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
 8004732:	e00c      	b.n	800474e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	e002      	b.n	800474e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f989 	bl	8004a60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d024      	beq.n	80047a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004760:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f963 	bl	8004a38 <HAL_CAN_TxMailbox1CompleteCallback>
 8004772:	e016      	b.n	80047a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
 8004786:	e00c      	b.n	80047a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800478e:	2b00      	cmp	r3, #0
 8004790:	d004      	beq.n	800479c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	e002      	b.n	80047a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f969 	bl	8004a74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d024      	beq.n	80047f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f943 	bl	8004a4c <HAL_CAN_TxMailbox2CompleteCallback>
 80047c6:	e016      	b.n	80047f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	e00c      	b.n	80047f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d004      	beq.n	80047f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	e002      	b.n	80047f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f949 	bl	8004a88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d007      	beq.n	800481a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004810:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2208      	movs	r2, #8
 8004834:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f930 	bl	8004a9c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fd fabf 	bl	8001dd8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00c      	beq.n	800487e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004874:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2210      	movs	r2, #16
 800487c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2208      	movs	r2, #8
 8004898:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f912 	bl	8004ac4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f8f9 	bl	8004ab0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d006      	beq.n	80048e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2210      	movs	r2, #16
 80048d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8fc 	bl	8004ad8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d006      	beq.n	8004902 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2208      	movs	r2, #8
 80048fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8f5 	bl	8004aec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d07b      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d072      	beq.n	80049fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004970:	2b00      	cmp	r3, #0
 8004972:	d043      	beq.n	80049fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03e      	beq.n	80049fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004984:	2b60      	cmp	r3, #96	; 0x60
 8004986:	d02b      	beq.n	80049e0 <HAL_CAN_IRQHandler+0x32a>
 8004988:	2b60      	cmp	r3, #96	; 0x60
 800498a:	d82e      	bhi.n	80049ea <HAL_CAN_IRQHandler+0x334>
 800498c:	2b50      	cmp	r3, #80	; 0x50
 800498e:	d022      	beq.n	80049d6 <HAL_CAN_IRQHandler+0x320>
 8004990:	2b50      	cmp	r3, #80	; 0x50
 8004992:	d82a      	bhi.n	80049ea <HAL_CAN_IRQHandler+0x334>
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d019      	beq.n	80049cc <HAL_CAN_IRQHandler+0x316>
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d826      	bhi.n	80049ea <HAL_CAN_IRQHandler+0x334>
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d010      	beq.n	80049c2 <HAL_CAN_IRQHandler+0x30c>
 80049a0:	2b30      	cmp	r3, #48	; 0x30
 80049a2:	d822      	bhi.n	80049ea <HAL_CAN_IRQHandler+0x334>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d002      	beq.n	80049ae <HAL_CAN_IRQHandler+0x2f8>
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d005      	beq.n	80049b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80049ac:	e01d      	b.n	80049ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	f043 0308 	orr.w	r3, r3, #8
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049b6:	e019      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f043 0310 	orr.w	r3, r3, #16
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049c0:	e014      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f043 0320 	orr.w	r3, r3, #32
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049ca:	e00f      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049d4:	e00a      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049de:	e005      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80049e8:	e000      	b.n	80049ec <HAL_CAN_IRQHandler+0x336>
            break;
 80049ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80049fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fa06 	bl	8001e28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a1c:	bf00      	nop
 8004a1e:	3728      	adds	r7, #40	; 0x28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <__NVIC_SetPriorityGrouping+0x44>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <__NVIC_SetPriorityGrouping+0x44>)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	60d3      	str	r3, [r2, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000ed00 	.word	0xe000ed00

08004b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <__NVIC_GetPriorityGrouping+0x18>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	f003 0307 	and.w	r3, r3, #7
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000ed00 	.word	0xe000ed00

08004b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	db0b      	blt.n	8004b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	f003 021f 	and.w	r2, r3, #31
 8004b7c:	4907      	ldr	r1, [pc, #28]	; (8004b9c <__NVIC_EnableIRQ+0x38>)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2001      	movs	r0, #1
 8004b86:	fa00 f202 	lsl.w	r2, r0, r2
 8004b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b8e:	bf00      	nop
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000e100 	.word	0xe000e100

08004ba0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db12      	blt.n	8004bd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	490a      	ldr	r1, [pc, #40]	; (8004be4 <__NVIC_DisableIRQ+0x44>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	3320      	adds	r3, #32
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bcc:	f3bf 8f4f 	dsb	sy
}
 8004bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bd2:	f3bf 8f6f 	isb	sy
}
 8004bd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	e000e100 	.word	0xe000e100

08004be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	db0a      	blt.n	8004c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	490c      	ldr	r1, [pc, #48]	; (8004c34 <__NVIC_SetPriority+0x4c>)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c10:	e00a      	b.n	8004c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4908      	ldr	r1, [pc, #32]	; (8004c38 <__NVIC_SetPriority+0x50>)
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	3b04      	subs	r3, #4
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	440b      	add	r3, r1
 8004c26:	761a      	strb	r2, [r3, #24]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	e000e100 	.word	0xe000e100
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f1c3 0307 	rsb	r3, r3, #7
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	bf28      	it	cs
 8004c5a:	2304      	movcs	r3, #4
 8004c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3304      	adds	r3, #4
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d902      	bls.n	8004c6c <NVIC_EncodePriority+0x30>
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	3b03      	subs	r3, #3
 8004c6a:	e000      	b.n	8004c6e <NVIC_EncodePriority+0x32>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c70:	f04f 32ff 	mov.w	r2, #4294967295
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	43da      	mvns	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	401a      	ands	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c84:	f04f 31ff 	mov.w	r1, #4294967295
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43d9      	mvns	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	4313      	orrs	r3, r2
         );
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3724      	adds	r7, #36	; 0x24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cb4:	d301      	bcc.n	8004cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e00f      	b.n	8004cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <SysTick_Config+0x40>)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc2:	210f      	movs	r1, #15
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	f7ff ff8e 	bl	8004be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <SysTick_Config+0x40>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <SysTick_Config+0x40>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	e000e010 	.word	0xe000e010

08004ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff05 	bl	8004b00 <__NVIC_SetPriorityGrouping>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b086      	sub	sp, #24
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	4603      	mov	r3, r0
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	607a      	str	r2, [r7, #4]
 8004d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d10:	f7ff ff1a 	bl	8004b48 <__NVIC_GetPriorityGrouping>
 8004d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff ff8e 	bl	8004c3c <NVIC_EncodePriority>
 8004d20:	4602      	mov	r2, r0
 8004d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff5d 	bl	8004be8 <__NVIC_SetPriority>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff0d 	bl	8004b64 <__NVIC_EnableIRQ>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	4603      	mov	r3, r0
 8004d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff ff1d 	bl	8004ba0 <__NVIC_DisableIRQ>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ff94 	bl	8004ca4 <SysTick_Config>
 8004d7c:	4603      	mov	r3, r0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e098      	b.n	8004ecc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b4d      	ldr	r3, [pc, #308]	; (8004ed8 <HAL_DMA_Init+0x150>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d80f      	bhi.n	8004dc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b4b      	ldr	r3, [pc, #300]	; (8004edc <HAL_DMA_Init+0x154>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a4b      	ldr	r2, [pc, #300]	; (8004ee0 <HAL_DMA_Init+0x158>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a48      	ldr	r2, [pc, #288]	; (8004ee4 <HAL_DMA_Init+0x15c>)
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8004dc4:	e00e      	b.n	8004de4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <HAL_DMA_Init+0x160>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a43      	ldr	r2, [pc, #268]	; (8004ee0 <HAL_DMA_Init+0x158>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a42      	ldr	r2, [pc, #264]	; (8004eec <HAL_DMA_Init+0x164>)
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e3e:	d039      	beq.n	8004eb4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_DMA_Init+0x15c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d11a      	bne.n	8004e80 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <HAL_DMA_Init+0x168>)
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	f003 031c 	and.w	r3, r3, #28
 8004e56:	210f      	movs	r1, #15
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	4924      	ldr	r1, [pc, #144]	; (8004ef0 <HAL_DMA_Init+0x168>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e64:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_DMA_Init+0x168>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f003 031c 	and.w	r3, r3, #28
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	491d      	ldr	r1, [pc, #116]	; (8004ef0 <HAL_DMA_Init+0x168>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
 8004e7e:	e019      	b.n	8004eb4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e80:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <HAL_DMA_Init+0x16c>)
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	f003 031c 	and.w	r3, r3, #28
 8004e8c:	210f      	movs	r1, #15
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	4917      	ldr	r1, [pc, #92]	; (8004ef4 <HAL_DMA_Init+0x16c>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <HAL_DMA_Init+0x16c>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f003 031c 	and.w	r3, r3, #28
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	4911      	ldr	r1, [pc, #68]	; (8004ef4 <HAL_DMA_Init+0x16c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	40020407 	.word	0x40020407
 8004edc:	bffdfff8 	.word	0xbffdfff8
 8004ee0:	cccccccd 	.word	0xcccccccd
 8004ee4:	40020000 	.word	0x40020000
 8004ee8:	bffdfbf8 	.word	0xbffdfbf8
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	400200a8 	.word	0x400200a8
 8004ef4:	400204a8 	.word	0x400204a8

08004ef8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e072      	b.n	8004ff0 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <HAL_DMA_DeInit+0x104>)
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d80f      	bhi.n	8004f46 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b34      	ldr	r3, [pc, #208]	; (8005000 <HAL_DMA_DeInit+0x108>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <HAL_DMA_DeInit+0x10c>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	009a      	lsls	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_DMA_DeInit+0x110>)
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
 8004f44:	e00e      	b.n	8004f64 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_DMA_DeInit+0x114>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a2c      	ldr	r2, [pc, #176]	; (8005004 <HAL_DMA_DeInit+0x10c>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	009a      	lsls	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <HAL_DMA_DeInit+0x118>)
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	f003 021c 	and.w	r2, r3, #28
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7e:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	4a20      	ldr	r2, [pc, #128]	; (8005008 <HAL_DMA_DeInit+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10d      	bne.n	8004fa6 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_DMA_DeInit+0x11c>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	f003 031c 	and.w	r3, r3, #28
 8004f96:	210f      	movs	r1, #15
 8004f98:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	491d      	ldr	r1, [pc, #116]	; (8005014 <HAL_DMA_DeInit+0x11c>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e00c      	b.n	8004fc0 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <HAL_DMA_DeInit+0x120>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	f003 031c 	and.w	r3, r3, #28
 8004fb2:	210f      	movs	r1, #15
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	4917      	ldr	r1, [pc, #92]	; (8005018 <HAL_DMA_DeInit+0x120>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40020407 	.word	0x40020407
 8005000:	bffdfff8 	.word	0xbffdfff8
 8005004:	cccccccd 	.word	0xcccccccd
 8005008:	40020000 	.word	0x40020000
 800500c:	bffdfbf8 	.word	0xbffdfbf8
 8005010:	40020400 	.word	0x40020400
 8005014:	400200a8 	.word	0x400200a8
 8005018:	400204a8 	.word	0x400204a8

0800501c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_DMA_Start_IT+0x20>
 8005038:	2302      	movs	r3, #2
 800503a:	e04b      	b.n	80050d4 <HAL_DMA_Start_IT+0xb8>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d13a      	bne.n	80050c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f95f 	bl	8005338 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 020e 	orr.w	r2, r2, #14
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e00f      	b.n	80050b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 020a 	orr.w	r2, r2, #10
 80050b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e005      	b.n	80050d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80050ce:	2302      	movs	r3, #2
 80050d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d008      	beq.n	8005106 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e022      	b.n	800514c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 020e 	bic.w	r2, r2, #14
 8005114:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f003 021c 	and.w	r2, r3, #28
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f202 	lsl.w	r2, r1, r2
 8005138:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d005      	beq.n	800517c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	73fb      	strb	r3, [r7, #15]
 800517a:	e029      	b.n	80051d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 020e 	bic.w	r2, r2, #14
 800518a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f003 021c 	and.w	r2, r3, #28
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f202 	lsl.w	r2, r1, r2
 80051ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
    }
  }
  return status;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f6:	f003 031c 	and.w	r3, r3, #28
 80051fa:	2204      	movs	r2, #4
 80051fc:	409a      	lsls	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d026      	beq.n	8005254 <HAL_DMA_IRQHandler+0x7a>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d021      	beq.n	8005254 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d107      	bne.n	800522e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0204 	bic.w	r2, r2, #4
 800522c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f003 021c 	and.w	r2, r3, #28
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2104      	movs	r1, #4
 800523c:	fa01 f202 	lsl.w	r2, r1, r2
 8005240:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005246:	2b00      	cmp	r3, #0
 8005248:	d071      	beq.n	800532e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005252:	e06c      	b.n	800532e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	f003 031c 	and.w	r3, r3, #28
 800525c:	2202      	movs	r2, #2
 800525e:	409a      	lsls	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4013      	ands	r3, r2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02e      	beq.n	80052c6 <HAL_DMA_IRQHandler+0xec>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d029      	beq.n	80052c6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10b      	bne.n	8005298 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 020a 	bic.w	r2, r2, #10
 800528e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	f003 021c 	and.w	r2, r3, #28
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	2102      	movs	r1, #2
 80052a6:	fa01 f202 	lsl.w	r2, r1, r2
 80052aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d038      	beq.n	800532e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052c4:	e033      	b.n	800532e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	f003 031c 	and.w	r3, r3, #28
 80052ce:	2208      	movs	r2, #8
 80052d0:	409a      	lsls	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d02a      	beq.n	8005330 <HAL_DMA_IRQHandler+0x156>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d025      	beq.n	8005330 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 020e 	bic.w	r2, r2, #14
 80052f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	f003 021c 	and.w	r2, r3, #28
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f202 	lsl.w	r2, r1, r2
 8005306:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800532e:	bf00      	nop
 8005330:	bf00      	nop
}
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f003 021c 	and.w	r2, r3, #28
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2101      	movs	r1, #1
 8005354:	fa01 f202 	lsl.w	r2, r1, r2
 8005358:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b10      	cmp	r3, #16
 8005368:	d108      	bne.n	800537c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800537a:	e007      	b.n	800538c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	60da      	str	r2, [r3, #12]
}
 800538c:	bf00      	nop
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053a6:	e154      	b.n	8005652 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	2101      	movs	r1, #1
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8146 	beq.w	800564c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d005      	beq.n	80053d8 <HAL_GPIO_Init+0x40>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d130      	bne.n	800543a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	2203      	movs	r2, #3
 80053e4:	fa02 f303 	lsl.w	r3, r2, r3
 80053e8:	43db      	mvns	r3, r3
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4013      	ands	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540e:	2201      	movs	r2, #1
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4013      	ands	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 0201 	and.w	r2, r3, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d017      	beq.n	8005476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	2203      	movs	r2, #3
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	43db      	mvns	r3, r3
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fa02 f303 	lsl.w	r3, r2, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d123      	bne.n	80054ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	08da      	lsrs	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3208      	adds	r2, #8
 800548a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	220f      	movs	r2, #15
 800549a:	fa02 f303 	lsl.w	r3, r2, r3
 800549e:	43db      	mvns	r3, r3
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4013      	ands	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	08da      	lsrs	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3208      	adds	r2, #8
 80054c4:	6939      	ldr	r1, [r7, #16]
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	2203      	movs	r2, #3
 80054d6:	fa02 f303 	lsl.w	r3, r2, r3
 80054da:	43db      	mvns	r3, r3
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4013      	ands	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f003 0203 	and.w	r2, r3, #3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80a0 	beq.w	800564c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <HAL_GPIO_Init+0x2d8>)
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	4a57      	ldr	r2, [pc, #348]	; (8005670 <HAL_GPIO_Init+0x2d8>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6613      	str	r3, [r2, #96]	; 0x60
 8005518:	4b55      	ldr	r3, [pc, #340]	; (8005670 <HAL_GPIO_Init+0x2d8>)
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005524:	4a53      	ldr	r2, [pc, #332]	; (8005674 <HAL_GPIO_Init+0x2dc>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	089b      	lsrs	r3, r3, #2
 800552a:	3302      	adds	r3, #2
 800552c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800554e:	d019      	beq.n	8005584 <HAL_GPIO_Init+0x1ec>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a49      	ldr	r2, [pc, #292]	; (8005678 <HAL_GPIO_Init+0x2e0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d013      	beq.n	8005580 <HAL_GPIO_Init+0x1e8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a48      	ldr	r2, [pc, #288]	; (800567c <HAL_GPIO_Init+0x2e4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00d      	beq.n	800557c <HAL_GPIO_Init+0x1e4>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a47      	ldr	r2, [pc, #284]	; (8005680 <HAL_GPIO_Init+0x2e8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d007      	beq.n	8005578 <HAL_GPIO_Init+0x1e0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a46      	ldr	r2, [pc, #280]	; (8005684 <HAL_GPIO_Init+0x2ec>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_GPIO_Init+0x1dc>
 8005570:	2304      	movs	r3, #4
 8005572:	e008      	b.n	8005586 <HAL_GPIO_Init+0x1ee>
 8005574:	2307      	movs	r3, #7
 8005576:	e006      	b.n	8005586 <HAL_GPIO_Init+0x1ee>
 8005578:	2303      	movs	r3, #3
 800557a:	e004      	b.n	8005586 <HAL_GPIO_Init+0x1ee>
 800557c:	2302      	movs	r3, #2
 800557e:	e002      	b.n	8005586 <HAL_GPIO_Init+0x1ee>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_GPIO_Init+0x1ee>
 8005584:	2300      	movs	r3, #0
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005596:	4937      	ldr	r1, [pc, #220]	; (8005674 <HAL_GPIO_Init+0x2dc>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055ce:	4b2e      	ldr	r3, [pc, #184]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055f2:	4a25      	ldr	r2, [pc, #148]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055f8:	4b23      	ldr	r3, [pc, #140]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800561c:	4a1a      	ldr	r2, [pc, #104]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005622:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	43db      	mvns	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_GPIO_Init+0x2f0>)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f aea3 	bne.w	80053a8 <HAL_GPIO_Init+0x10>
  }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40021000 	.word	0x40021000
 8005674:	40010000 	.word	0x40010000
 8005678:	48000400 	.word	0x48000400
 800567c:	48000800 	.word	0x48000800
 8005680:	48000c00 	.word	0x48000c00
 8005684:	48001000 	.word	0x48001000
 8005688:	40010400 	.word	0x40010400

0800568c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005696:	2300      	movs	r3, #0
 8005698:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800569a:	e0b7      	b.n	800580c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800569c:	2201      	movs	r2, #1
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	4013      	ands	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80aa 	beq.w	8005806 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80056b2:	4a5d      	ldr	r2, [pc, #372]	; (8005828 <HAL_GPIO_DeInit+0x19c>)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	089b      	lsrs	r3, r3, #2
 80056b8:	3302      	adds	r3, #2
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	220f      	movs	r2, #15
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056da:	d019      	beq.n	8005710 <HAL_GPIO_DeInit+0x84>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a53      	ldr	r2, [pc, #332]	; (800582c <HAL_GPIO_DeInit+0x1a0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_GPIO_DeInit+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_GPIO_DeInit+0x1a4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00d      	beq.n	8005708 <HAL_GPIO_DeInit+0x7c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a51      	ldr	r2, [pc, #324]	; (8005834 <HAL_GPIO_DeInit+0x1a8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d007      	beq.n	8005704 <HAL_GPIO_DeInit+0x78>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a50      	ldr	r2, [pc, #320]	; (8005838 <HAL_GPIO_DeInit+0x1ac>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d101      	bne.n	8005700 <HAL_GPIO_DeInit+0x74>
 80056fc:	2304      	movs	r3, #4
 80056fe:	e008      	b.n	8005712 <HAL_GPIO_DeInit+0x86>
 8005700:	2307      	movs	r3, #7
 8005702:	e006      	b.n	8005712 <HAL_GPIO_DeInit+0x86>
 8005704:	2303      	movs	r3, #3
 8005706:	e004      	b.n	8005712 <HAL_GPIO_DeInit+0x86>
 8005708:	2302      	movs	r3, #2
 800570a:	e002      	b.n	8005712 <HAL_GPIO_DeInit+0x86>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_GPIO_DeInit+0x86>
 8005710:	2300      	movs	r3, #0
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	f002 0203 	and.w	r2, r2, #3
 8005718:	0092      	lsls	r2, r2, #2
 800571a:	4093      	lsls	r3, r2
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	429a      	cmp	r2, r3
 8005720:	d132      	bne.n	8005788 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005722:	4b46      	ldr	r3, [pc, #280]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	43db      	mvns	r3, r3
 800572a:	4944      	ldr	r1, [pc, #272]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 800572c:	4013      	ands	r3, r2
 800572e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005730:	4b42      	ldr	r3, [pc, #264]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	43db      	mvns	r3, r3
 8005738:	4940      	ldr	r1, [pc, #256]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 800573a:	4013      	ands	r3, r2
 800573c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800573e:	4b3f      	ldr	r3, [pc, #252]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	43db      	mvns	r3, r3
 8005746:	493d      	ldr	r1, [pc, #244]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 8005748:	4013      	ands	r3, r2
 800574a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800574c:	4b3b      	ldr	r3, [pc, #236]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	43db      	mvns	r3, r3
 8005754:	4939      	ldr	r1, [pc, #228]	; (800583c <HAL_GPIO_DeInit+0x1b0>)
 8005756:	4013      	ands	r3, r2
 8005758:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	220f      	movs	r2, #15
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800576a:	4a2f      	ldr	r2, [pc, #188]	; (8005828 <HAL_GPIO_DeInit+0x19c>)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	089b      	lsrs	r3, r3, #2
 8005770:	3302      	adds	r3, #2
 8005772:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	43da      	mvns	r2, r3
 800577a:	482b      	ldr	r0, [pc, #172]	; (8005828 <HAL_GPIO_DeInit+0x19c>)
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	400a      	ands	r2, r1
 8005782:	3302      	adds	r3, #2
 8005784:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2103      	movs	r1, #3
 8005792:	fa01 f303 	lsl.w	r3, r1, r3
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	08da      	lsrs	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3208      	adds	r2, #8
 80057a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	220f      	movs	r2, #15
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43db      	mvns	r3, r3
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	08d2      	lsrs	r2, r2, #3
 80057bc:	4019      	ands	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3208      	adds	r2, #8
 80057c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689a      	ldr	r2, [r3, #8]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	2103      	movs	r1, #3
 80057d0:	fa01 f303 	lsl.w	r3, r1, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	401a      	ands	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	2101      	movs	r1, #1
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fa01 f303 	lsl.w	r3, r1, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	401a      	ands	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	2103      	movs	r1, #3
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	401a      	ands	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	3301      	adds	r3, #1
 800580a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f af41 	bne.w	800569c <HAL_GPIO_DeInit+0x10>
  }
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40010000 	.word	0x40010000
 800582c:	48000400 	.word	0x48000400
 8005830:	48000800 	.word	0x48000800
 8005834:	48000c00 	.word	0x48000c00
 8005838:	48001000 	.word	0x48001000
 800583c:	40010400 	.word	0x40010400

08005840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
 800584c:	4613      	mov	r3, r2
 800584e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005850:	787b      	ldrb	r3, [r7, #1]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005856:	887a      	ldrh	r2, [r7, #2]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800585c:	e002      	b.n	8005864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800585e:	887a      	ldrh	r2, [r7, #2]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005880:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	40007000 	.word	0x40007000

080058ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ba:	d130      	bne.n	800591e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80058bc:	4b23      	ldr	r3, [pc, #140]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c8:	d038      	beq.n	800593c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ca:	4b20      	ldr	r3, [pc, #128]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058da:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2232      	movs	r2, #50	; 0x32
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0c9b      	lsrs	r3, r3, #18
 80058ec:	3301      	adds	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f0:	e002      	b.n	80058f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058f8:	4b14      	ldr	r3, [pc, #80]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d102      	bne.n	800590c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f2      	bne.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005918:	d110      	bne.n	800593c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e00f      	b.n	800593e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800591e:	4b0b      	ldr	r3, [pc, #44]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800592a:	d007      	beq.n	800593c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005934:	4a05      	ldr	r2, [pc, #20]	; (800594c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800593a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40007000 	.word	0x40007000
 8005950:	20000000 	.word	0x20000000
 8005954:	431bde83 	.word	0x431bde83

08005958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f000 bc02 	b.w	8006170 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800596c:	4b96      	ldr	r3, [pc, #600]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005976:	4b94      	ldr	r3, [pc, #592]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80e4 	beq.w	8005b56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4c>
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b0c      	cmp	r3, #12
 8005998:	f040 808b 	bne.w	8005ab2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	f040 8087 	bne.w	8005ab2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059a4:	4b88      	ldr	r3, [pc, #544]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_OscConfig+0x64>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e3d9      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	4b81      	ldr	r3, [pc, #516]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <HAL_RCC_OscConfig+0x7e>
 80059cc:	4b7e      	ldr	r3, [pc, #504]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d4:	e005      	b.n	80059e2 <HAL_RCC_OscConfig+0x8a>
 80059d6:	4b7c      	ldr	r3, [pc, #496]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 80059d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d223      	bcs.n	8005a2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fd8a 	bl	8006504 <RCC_SetFlashLatencyFromMSIRange>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e3ba      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059fa:	4b73      	ldr	r3, [pc, #460]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a72      	ldr	r2, [pc, #456]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a00:	f043 0308 	orr.w	r3, r3, #8
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	4b70      	ldr	r3, [pc, #448]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	496d      	ldr	r1, [pc, #436]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a18:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	4968      	ldr	r1, [pc, #416]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]
 8005a2c:	e025      	b.n	8005a7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a2e:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a65      	ldr	r2, [pc, #404]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a34:	f043 0308 	orr.w	r3, r3, #8
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	4960      	ldr	r1, [pc, #384]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a4c:	4b5e      	ldr	r3, [pc, #376]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	495b      	ldr	r1, [pc, #364]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fd4a 	bl	8006504 <RCC_SetFlashLatencyFromMSIRange>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e37a      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a7a:	f000 fc81 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	4950      	ldr	r1, [pc, #320]	; (8005bcc <HAL_RCC_OscConfig+0x274>)
 8005a8c:	5ccb      	ldrb	r3, [r1, r3]
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	fa22 f303 	lsr.w	r3, r2, r3
 8005a96:	4a4e      	ldr	r2, [pc, #312]	; (8005bd0 <HAL_RCC_OscConfig+0x278>)
 8005a98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a9a:	4b4e      	ldr	r3, [pc, #312]	; (8005bd4 <HAL_RCC_OscConfig+0x27c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fac4 	bl	800302c <HAL_InitTick>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d052      	beq.n	8005b54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	e35e      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d032      	beq.n	8005b20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a42      	ldr	r2, [pc, #264]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ac6:	f7fd fb01 	bl	80030cc <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ace:	f7fd fafd 	bl	80030cc <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e347      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ae0:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a35      	ldr	r2, [pc, #212]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005af2:	f043 0308 	orr.w	r3, r3, #8
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	4930      	ldr	r1, [pc, #192]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	492b      	ldr	r1, [pc, #172]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	e01a      	b.n	8005b56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a28      	ldr	r2, [pc, #160]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd face 	bl	80030cc <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b34:	f7fd faca 	bl	80030cc <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e314      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x1dc>
 8005b52:	e000      	b.n	8005b56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d073      	beq.n	8005c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d005      	beq.n	8005b74 <HAL_RCC_OscConfig+0x21c>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d10e      	bne.n	8005b8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d10b      	bne.n	8005b8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b74:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d063      	beq.n	8005c48 <HAL_RCC_OscConfig+0x2f0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d15f      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e2f1      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x24c>
 8005b96:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a0b      	ldr	r2, [pc, #44]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e025      	b.n	8005bf0 <HAL_RCC_OscConfig+0x298>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bac:	d114      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x280>
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a05      	ldr	r2, [pc, #20]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a02      	ldr	r2, [pc, #8]	; (8005bc8 <HAL_RCC_OscConfig+0x270>)
 8005bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e013      	b.n	8005bf0 <HAL_RCC_OscConfig+0x298>
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	0800a170 	.word	0x0800a170
 8005bd0:	20000000 	.word	0x20000000
 8005bd4:	20000004 	.word	0x20000004
 8005bd8:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a9f      	ldr	r2, [pc, #636]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4b9d      	ldr	r3, [pc, #628]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a9c      	ldr	r2, [pc, #624]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fd fa68 	bl	80030cc <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c00:	f7fd fa64 	bl	80030cc <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b64      	cmp	r3, #100	; 0x64
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e2ae      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c12:	4b92      	ldr	r3, [pc, #584]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d0f0      	beq.n	8005c00 <HAL_RCC_OscConfig+0x2a8>
 8005c1e:	e014      	b.n	8005c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fd fa54 	bl	80030cc <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c28:	f7fd fa50 	bl	80030cc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b64      	cmp	r3, #100	; 0x64
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e29a      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c3a:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x2d0>
 8005c46:	e000      	b.n	8005c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d060      	beq.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d005      	beq.n	8005c68 <HAL_RCC_OscConfig+0x310>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d119      	bne.n	8005c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d116      	bne.n	8005c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c68:	4b7c      	ldr	r3, [pc, #496]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_RCC_OscConfig+0x328>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e277      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c80:	4b76      	ldr	r3, [pc, #472]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	061b      	lsls	r3, r3, #24
 8005c8e:	4973      	ldr	r1, [pc, #460]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c94:	e040      	b.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d023      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c9e:	4b6f      	ldr	r3, [pc, #444]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6e      	ldr	r2, [pc, #440]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fd fa0f 	bl	80030cc <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cb2:	f7fd fa0b 	bl	80030cc <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e255      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cc4:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d0f0      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd0:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	061b      	lsls	r3, r3, #24
 8005cde:	495f      	ldr	r1, [pc, #380]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	e018      	b.n	8005d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ce6:	4b5d      	ldr	r3, [pc, #372]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5c      	ldr	r2, [pc, #368]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf2:	f7fd f9eb 	bl	80030cc <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cfa:	f7fd f9e7 	bl	80030cc <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e231      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d0c:	4b53      	ldr	r3, [pc, #332]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f0      	bne.n	8005cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2c:	4b4b      	ldr	r3, [pc, #300]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d32:	4a4a      	ldr	r2, [pc, #296]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fd f9c6 	bl	80030cc <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d44:	f7fd f9c2 	bl	80030cc <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e20c      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ef      	beq.n	8005d44 <HAL_RCC_OscConfig+0x3ec>
 8005d64:	e01b      	b.n	8005d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d66:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d6c:	4a3b      	ldr	r2, [pc, #236]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fd f9a9 	bl	80030cc <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d7e:	f7fd f9a5 	bl	80030cc <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e1ef      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ef      	bne.n	8005d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 80a6 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005db0:	4b2a      	ldr	r3, [pc, #168]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10d      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dc8:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dd8:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <HAL_RCC_OscConfig+0x508>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d118      	bne.n	8005e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCC_OscConfig+0x508>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1d      	ldr	r2, [pc, #116]	; (8005e60 <HAL_RCC_OscConfig+0x508>)
 8005dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005df0:	f7fd f96c 	bl	80030cc <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df8:	f7fd f968 	bl	80030cc <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1b2      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <HAL_RCC_OscConfig+0x508>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d108      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4d8>
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e2e:	e029      	b.n	8005e84 <HAL_RCC_OscConfig+0x52c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d115      	bne.n	8005e64 <HAL_RCC_OscConfig+0x50c>
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e40:	f043 0304 	orr.w	r3, r3, #4
 8005e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <HAL_RCC_OscConfig+0x504>)
 8005e50:	f043 0301 	orr.w	r3, r3, #1
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e58:	e014      	b.n	8005e84 <HAL_RCC_OscConfig+0x52c>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40007000 	.word	0x40007000
 8005e64:	4b9a      	ldr	r3, [pc, #616]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6a:	4a99      	ldr	r2, [pc, #612]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e74:	4b96      	ldr	r3, [pc, #600]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7a:	4a95      	ldr	r2, [pc, #596]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d016      	beq.n	8005eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fd f91e 	bl	80030cc <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e92:	e00a      	b.n	8005eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e94:	f7fd f91a 	bl	80030cc <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e162      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eaa:	4b89      	ldr	r3, [pc, #548]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0ed      	beq.n	8005e94 <HAL_RCC_OscConfig+0x53c>
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fd f907 	bl	80030cc <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fd f903 	bl	80030cc <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e14b      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ed8:	4b7d      	ldr	r3, [pc, #500]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1ed      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ee6:	7ffb      	ldrb	r3, [r7, #31]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eec:	4b78      	ldr	r3, [pc, #480]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef0:	4a77      	ldr	r2, [pc, #476]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d03c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01c      	beq.n	8005f46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f0c:	4b70      	ldr	r3, [pc, #448]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f12:	4a6f      	ldr	r2, [pc, #444]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1c:	f7fd f8d6 	bl	80030cc <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f24:	f7fd f8d2 	bl	80030cc <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e11c      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f36:	4b66      	ldr	r3, [pc, #408]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ef      	beq.n	8005f24 <HAL_RCC_OscConfig+0x5cc>
 8005f44:	e01b      	b.n	8005f7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f46:	4b62      	ldr	r3, [pc, #392]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f4c:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f4e:	f023 0301 	bic.w	r3, r3, #1
 8005f52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fd f8b9 	bl	80030cc <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5e:	f7fd f8b5 	bl	80030cc <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e0ff      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f70:	4b57      	ldr	r3, [pc, #348]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1ef      	bne.n	8005f5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80f3 	beq.w	800616e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	f040 80c9 	bne.w	8006124 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f92:	4b4f      	ldr	r3, [pc, #316]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 0203 	and.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d12c      	bne.n	8006000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d123      	bne.n	8006000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d11b      	bne.n	8006000 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d113      	bne.n	8006000 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d109      	bne.n	8006000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d06b      	beq.n	80060d8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d062      	beq.n	80060cc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006006:	4b32      	ldr	r3, [pc, #200]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e0ac      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800601c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006020:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006022:	f7fd f853 	bl	80030cc <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006028:	e008      	b.n	800603c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602a:	f7fd f84f 	bl	80030cc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	2b02      	cmp	r3, #2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e099      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800603c:	4b24      	ldr	r3, [pc, #144]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1f0      	bne.n	800602a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006048:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	4b21      	ldr	r3, [pc, #132]	; (80060d4 <HAL_RCC_OscConfig+0x77c>)
 800604e:	4013      	ands	r3, r2
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006058:	3a01      	subs	r2, #1
 800605a:	0112      	lsls	r2, r2, #4
 800605c:	4311      	orrs	r1, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006062:	0212      	lsls	r2, r2, #8
 8006064:	4311      	orrs	r1, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800606a:	0852      	lsrs	r2, r2, #1
 800606c:	3a01      	subs	r2, #1
 800606e:	0552      	lsls	r2, r2, #21
 8006070:	4311      	orrs	r1, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006076:	0852      	lsrs	r2, r2, #1
 8006078:	3a01      	subs	r2, #1
 800607a:	0652      	lsls	r2, r2, #25
 800607c:	4311      	orrs	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006082:	06d2      	lsls	r2, r2, #27
 8006084:	430a      	orrs	r2, r1
 8006086:	4912      	ldr	r1, [pc, #72]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8006088:	4313      	orrs	r3, r2
 800608a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800608c:	4b10      	ldr	r3, [pc, #64]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 8006092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006096:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006098:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 800609e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060a4:	f7fd f812 	bl	80030cc <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060ac:	f7fd f80e 	bl	80030cc <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e058      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060be:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <HAL_RCC_OscConfig+0x778>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060ca:	e050      	b.n	800616e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e04f      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
 80060d0:	40021000 	.word	0x40021000
 80060d4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d8:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d144      	bne.n	800616e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060e4:	4b24      	ldr	r3, [pc, #144]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a23      	ldr	r2, [pc, #140]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 80060ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 80060f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060fc:	f7fc ffe6 	bl	80030cc <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006104:	f7fc ffe2 	bl	80030cc <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e02c      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006116:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x7ac>
 8006122:	e024      	b.n	800616e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b0c      	cmp	r3, #12
 8006128:	d01f      	beq.n	800616a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 8006130:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fc ffc9 	bl	80030cc <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613e:	f7fc ffc5 	bl	80030cc <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e00f      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006150:	4b09      	ldr	r3, [pc, #36]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f0      	bne.n	800613e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	4905      	ldr	r1, [pc, #20]	; (8006178 <HAL_RCC_OscConfig+0x820>)
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCC_OscConfig+0x824>)
 8006164:	4013      	ands	r3, r2
 8006166:	60cb      	str	r3, [r1, #12]
 8006168:	e001      	b.n	800616e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40021000 	.word	0x40021000
 800617c:	feeefffc 	.word	0xfeeefffc

08006180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0e7      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006194:	4b75      	ldr	r3, [pc, #468]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d910      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b72      	ldr	r3, [pc, #456]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 0207 	bic.w	r2, r3, #7
 80061aa:	4970      	ldr	r1, [pc, #448]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b6e      	ldr	r3, [pc, #440]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0cf      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d010      	beq.n	80061f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	4b66      	ldr	r3, [pc, #408]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061dc:	429a      	cmp	r2, r3
 80061de:	d908      	bls.n	80061f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e0:	4b63      	ldr	r3, [pc, #396]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4960      	ldr	r1, [pc, #384]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04c      	beq.n	8006298 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d107      	bne.n	8006216 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006206:	4b5a      	ldr	r3, [pc, #360]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d121      	bne.n	8006256 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e0a6      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d107      	bne.n	800622e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800621e:	4b54      	ldr	r3, [pc, #336]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d115      	bne.n	8006256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e09a      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d107      	bne.n	8006246 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006236:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e08e      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006246:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e086      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006256:	4b46      	ldr	r3, [pc, #280]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f023 0203 	bic.w	r2, r3, #3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4943      	ldr	r1, [pc, #268]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006264:	4313      	orrs	r3, r2
 8006266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006268:	f7fc ff30 	bl	80030cc <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626e:	e00a      	b.n	8006286 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006270:	f7fc ff2c 	bl	80030cc <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f241 3288 	movw	r2, #5000	; 0x1388
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e06e      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006286:	4b3a      	ldr	r3, [pc, #232]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 020c 	and.w	r2, r3, #12
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	429a      	cmp	r2, r3
 8006296:	d1eb      	bne.n	8006270 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d010      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	4b31      	ldr	r3, [pc, #196]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d208      	bcs.n	80062c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	492b      	ldr	r1, [pc, #172]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c6:	4b29      	ldr	r3, [pc, #164]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d210      	bcs.n	80062f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d4:	4b25      	ldr	r3, [pc, #148]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f023 0207 	bic.w	r2, r3, #7
 80062dc:	4923      	ldr	r1, [pc, #140]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e4:	4b21      	ldr	r3, [pc, #132]	; (800636c <HAL_RCC_ClockConfig+0x1ec>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d001      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e036      	b.n	8006364 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d008      	beq.n	8006314 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006302:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	4918      	ldr	r1, [pc, #96]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006310:	4313      	orrs	r3, r2
 8006312:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d009      	beq.n	8006334 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	4910      	ldr	r1, [pc, #64]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 8006330:	4313      	orrs	r3, r2
 8006332:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006334:	f000 f824 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8006338:	4602      	mov	r2, r0
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <HAL_RCC_ClockConfig+0x1f0>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	091b      	lsrs	r3, r3, #4
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	490b      	ldr	r1, [pc, #44]	; (8006374 <HAL_RCC_ClockConfig+0x1f4>)
 8006346:	5ccb      	ldrb	r3, [r1, r3]
 8006348:	f003 031f 	and.w	r3, r3, #31
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <HAL_RCC_ClockConfig+0x1f8>)
 8006352:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <HAL_RCC_ClockConfig+0x1fc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7fc fe67 	bl	800302c <HAL_InitTick>
 800635e:	4603      	mov	r3, r0
 8006360:	72fb      	strb	r3, [r7, #11]

  return status;
 8006362:	7afb      	ldrb	r3, [r7, #11]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40022000 	.word	0x40022000
 8006370:	40021000 	.word	0x40021000
 8006374:	0800a170 	.word	0x0800a170
 8006378:	20000000 	.word	0x20000000
 800637c:	20000004 	.word	0x20000004

08006380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638e:	4b3e      	ldr	r3, [pc, #248]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006398:	4b3b      	ldr	r3, [pc, #236]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x34>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b0c      	cmp	r3, #12
 80063ac:	d121      	bne.n	80063f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d11e      	bne.n	80063f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80063b4:	4b34      	ldr	r3, [pc, #208]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d107      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80063c0:	4b31      	ldr	r3, [pc, #196]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 80063c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	e005      	b.n	80063dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <HAL_RCC_GetSysClockFreq+0x10c>)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10d      	bne.n	8006408 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063f0:	e00a      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d102      	bne.n	80063fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063f8:	4b25      	ldr	r3, [pc, #148]	; (8006490 <HAL_RCC_GetSysClockFreq+0x110>)
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e004      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d101      	bne.n	8006408 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006404:	4b22      	ldr	r3, [pc, #136]	; (8006490 <HAL_RCC_GetSysClockFreq+0x110>)
 8006406:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d134      	bne.n	8006478 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800640e:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d003      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0xa6>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b03      	cmp	r3, #3
 8006422:	d003      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0xac>
 8006424:	e005      	b.n	8006432 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006426:	4b1a      	ldr	r3, [pc, #104]	; (8006490 <HAL_RCC_GetSysClockFreq+0x110>)
 8006428:	617b      	str	r3, [r7, #20]
      break;
 800642a:	e005      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800642c:	4b18      	ldr	r3, [pc, #96]	; (8006490 <HAL_RCC_GetSysClockFreq+0x110>)
 800642e:	617b      	str	r3, [r7, #20]
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	617b      	str	r3, [r7, #20]
      break;
 8006436:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006438:	4b13      	ldr	r3, [pc, #76]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	3301      	adds	r3, #1
 8006444:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	fb03 f202 	mul.w	r2, r3, r2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <HAL_RCC_GetSysClockFreq+0x108>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	0e5b      	lsrs	r3, r3, #25
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	3301      	adds	r3, #1
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006478:	69bb      	ldr	r3, [r7, #24]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3724      	adds	r7, #36	; 0x24
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40021000 	.word	0x40021000
 800648c:	0800a188 	.word	0x0800a188
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006498:	4b03      	ldr	r3, [pc, #12]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800649a:	681b      	ldr	r3, [r3, #0]
}
 800649c:	4618      	mov	r0, r3
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000000 	.word	0x20000000

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80064b0:	f7ff fff0 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4904      	ldr	r1, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	0800a180 	.word	0x0800a180

080064d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064dc:	f7ff ffda 	bl	8006494 <HAL_RCC_GetHCLKFreq>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4b06      	ldr	r3, [pc, #24]	; (80064fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	0adb      	lsrs	r3, r3, #11
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	4904      	ldr	r1, [pc, #16]	; (8006500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064ee:	5ccb      	ldrb	r3, [r1, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40021000 	.word	0x40021000
 8006500:	0800a180 	.word	0x0800a180

08006504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800650c:	2300      	movs	r3, #0
 800650e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006510:	4b2a      	ldr	r3, [pc, #168]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800651c:	f7ff f9b8 	bl	8005890 <HAL_PWREx_GetVoltageRange>
 8006520:	6178      	str	r0, [r7, #20]
 8006522:	e014      	b.n	800654e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006528:	4a24      	ldr	r2, [pc, #144]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652e:	6593      	str	r3, [r2, #88]	; 0x58
 8006530:	4b22      	ldr	r3, [pc, #136]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800653c:	f7ff f9a8 	bl	8005890 <HAL_PWREx_GetVoltageRange>
 8006540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006542:	4b1e      	ldr	r3, [pc, #120]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800654c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006554:	d10b      	bne.n	800656e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b80      	cmp	r3, #128	; 0x80
 800655a:	d919      	bls.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2ba0      	cmp	r3, #160	; 0xa0
 8006560:	d902      	bls.n	8006568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006562:	2302      	movs	r3, #2
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e013      	b.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006568:	2301      	movs	r3, #1
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e010      	b.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b80      	cmp	r3, #128	; 0x80
 8006572:	d902      	bls.n	800657a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006574:	2303      	movs	r3, #3
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	e00a      	b.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b80      	cmp	r3, #128	; 0x80
 800657e:	d102      	bne.n	8006586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006580:	2302      	movs	r3, #2
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	e004      	b.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b70      	cmp	r3, #112	; 0x70
 800658a:	d101      	bne.n	8006590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800658c:	2301      	movs	r3, #1
 800658e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006590:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f023 0207 	bic.w	r2, r3, #7
 8006598:	4909      	ldr	r1, [pc, #36]	; (80065c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80065a0:	4b07      	ldr	r3, [pc, #28]	; (80065c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d001      	beq.n	80065b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40022000 	.word	0x40022000

080065c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065cc:	2300      	movs	r3, #0
 80065ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065d0:	2300      	movs	r3, #0
 80065d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d031      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065e8:	d01a      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80065ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065ee:	d814      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d009      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f8:	d10f      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80065fa:	4b5d      	ldr	r3, [pc, #372]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	4a5c      	ldr	r2, [pc, #368]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006604:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006606:	e00c      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f9f0 	bl	80069f4 <RCCEx_PLLSAI1_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	74fb      	strb	r3, [r7, #19]
      break;
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006622:	7cfb      	ldrb	r3, [r7, #19]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006628:	4b51      	ldr	r3, [pc, #324]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	494e      	ldr	r1, [pc, #312]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800663e:	e001      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 809e 	beq.w	800678e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006652:	2300      	movs	r3, #0
 8006654:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006656:	4b46      	ldr	r3, [pc, #280]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006666:	2300      	movs	r3, #0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800666c:	4b40      	ldr	r3, [pc, #256]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006670:	4a3f      	ldr	r2, [pc, #252]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006676:	6593      	str	r3, [r2, #88]	; 0x58
 8006678:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800667a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006684:	2301      	movs	r3, #1
 8006686:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006688:	4b3a      	ldr	r3, [pc, #232]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a39      	ldr	r2, [pc, #228]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800668e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006692:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006694:	f7fc fd1a 	bl	80030cc <HAL_GetTick>
 8006698:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800669a:	e009      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669c:	f7fc fd16 	bl	80030cc <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d902      	bls.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	74fb      	strb	r3, [r7, #19]
        break;
 80066ae:	e005      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80066b0:	4b30      	ldr	r3, [pc, #192]	; (8006774 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0ef      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80066bc:	7cfb      	ldrb	r3, [r7, #19]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d15a      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066c2:	4b2b      	ldr	r3, [pc, #172]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01e      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d019      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066ea:	4b21      	ldr	r3, [pc, #132]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	4a1f      	ldr	r2, [pc, #124]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	4a1b      	ldr	r2, [pc, #108]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800670a:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d016      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fc fcd6 	bl	80030cc <HAL_GetTick>
 8006720:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006722:	e00b      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006724:	f7fc fcd2 	bl	80030cc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006732:	4293      	cmp	r3, r2
 8006734:	d902      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	74fb      	strb	r3, [r7, #19]
            break;
 800673a:	e006      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800673e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0ec      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800674a:	7cfb      	ldrb	r3, [r7, #19]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675e:	4904      	ldr	r1, [pc, #16]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006766:	e009      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006768:	7cfb      	ldrb	r3, [r7, #19]
 800676a:	74bb      	strb	r3, [r7, #18]
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800676e:	bf00      	nop
 8006770:	40021000 	.word	0x40021000
 8006774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006778:	7cfb      	ldrb	r3, [r7, #19]
 800677a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800677c:	7c7b      	ldrb	r3, [r7, #17]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d105      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006782:	4b9b      	ldr	r3, [pc, #620]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006786:	4a9a      	ldr	r2, [pc, #616]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800678c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800679a:	4b95      	ldr	r3, [pc, #596]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a0:	f023 0203 	bic.w	r2, r3, #3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	4991      	ldr	r1, [pc, #580]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067bc:	4b8c      	ldr	r3, [pc, #560]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f023 020c 	bic.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	4989      	ldr	r1, [pc, #548]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067de:	4b84      	ldr	r3, [pc, #528]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	4980      	ldr	r1, [pc, #512]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006800:	4b7b      	ldr	r3, [pc, #492]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	4978      	ldr	r1, [pc, #480]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006822:	4b73      	ldr	r3, [pc, #460]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	496f      	ldr	r1, [pc, #444]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006844:	4b6a      	ldr	r3, [pc, #424]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	4967      	ldr	r1, [pc, #412]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006866:	4b62      	ldr	r3, [pc, #392]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	495e      	ldr	r1, [pc, #376]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006888:	4b59      	ldr	r3, [pc, #356]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	4956      	ldr	r1, [pc, #344]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068aa:	4b51      	ldr	r3, [pc, #324]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	494d      	ldr	r1, [pc, #308]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d028      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068cc:	4b48      	ldr	r3, [pc, #288]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068da:	4945      	ldr	r1, [pc, #276]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ea:	d106      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068ec:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80068f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f6:	60d3      	str	r3, [r2, #12]
 80068f8:	e011      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006902:	d10c      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3304      	adds	r3, #4
 8006908:	2101      	movs	r1, #1
 800690a:	4618      	mov	r0, r3
 800690c:	f000 f872 	bl	80069f4 <RCCEx_PLLSAI1_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006914:	7cfb      	ldrb	r3, [r7, #19]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800691a:	7cfb      	ldrb	r3, [r7, #19]
 800691c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d028      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800692a:	4b31      	ldr	r3, [pc, #196]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	492d      	ldr	r1, [pc, #180]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006948:	d106      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800694a:	4b29      	ldr	r3, [pc, #164]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	4a28      	ldr	r2, [pc, #160]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006954:	60d3      	str	r3, [r2, #12]
 8006956:	e011      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006960:	d10c      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	2101      	movs	r1, #1
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f843 	bl	80069f4 <RCCEx_PLLSAI1_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006972:	7cfb      	ldrb	r3, [r7, #19]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006978:	7cfb      	ldrb	r3, [r7, #19]
 800697a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01c      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006988:	4b19      	ldr	r3, [pc, #100]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006996:	4916      	ldr	r1, [pc, #88]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069a6:	d10c      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	2102      	movs	r1, #2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f820 	bl	80069f4 <RCCEx_PLLSAI1_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80069be:	7cfb      	ldrb	r3, [r7, #19]
 80069c0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069dc:	4904      	ldr	r1, [pc, #16]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80069e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40021000 	.word	0x40021000

080069f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a02:	4b74      	ldr	r3, [pc, #464]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f003 0303 	and.w	r3, r3, #3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d018      	beq.n	8006a40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a0e:	4b71      	ldr	r3, [pc, #452]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0203 	and.w	r2, r3, #3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d10d      	bne.n	8006a3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
       ||
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a26:	4b6b      	ldr	r3, [pc, #428]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	091b      	lsrs	r3, r3, #4
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
       ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d047      	beq.n	8006aca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	73fb      	strb	r3, [r7, #15]
 8006a3e:	e044      	b.n	8006aca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d018      	beq.n	8006a7a <RCCEx_PLLSAI1_Config+0x86>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d825      	bhi.n	8006a98 <RCCEx_PLLSAI1_Config+0xa4>
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d002      	beq.n	8006a56 <RCCEx_PLLSAI1_Config+0x62>
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d009      	beq.n	8006a68 <RCCEx_PLLSAI1_Config+0x74>
 8006a54:	e020      	b.n	8006a98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a56:	4b5f      	ldr	r3, [pc, #380]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d11d      	bne.n	8006a9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a66:	e01a      	b.n	8006a9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a68:	4b5a      	ldr	r3, [pc, #360]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d116      	bne.n	8006aa2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a78:	e013      	b.n	8006aa2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a7a:	4b56      	ldr	r3, [pc, #344]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a86:	4b53      	ldr	r3, [pc, #332]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d109      	bne.n	8006aa6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a96:	e006      	b.n	8006aa6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9c:	e004      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a9e:	bf00      	nop
 8006aa0:	e002      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e000      	b.n	8006aa8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aa6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10d      	bne.n	8006aca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aae:	4b49      	ldr	r3, [pc, #292]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	430b      	orrs	r3, r1
 8006ac4:	4943      	ldr	r1, [pc, #268]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d17c      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006ad0:	4b40      	ldr	r3, [pc, #256]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a3f      	ldr	r2, [pc, #252]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006adc:	f7fc faf6 	bl	80030cc <HAL_GetTick>
 8006ae0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ae2:	e009      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ae4:	f7fc faf2 	bl	80030cc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d902      	bls.n	8006af8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	73fb      	strb	r3, [r7, #15]
        break;
 8006af6:	e005      	b.n	8006b04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006af8:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1ef      	bne.n	8006ae4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d15f      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d110      	bne.n	8006b32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b10:	4b30      	ldr	r3, [pc, #192]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6892      	ldr	r2, [r2, #8]
 8006b20:	0211      	lsls	r1, r2, #8
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68d2      	ldr	r2, [r2, #12]
 8006b26:	06d2      	lsls	r2, r2, #27
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	492a      	ldr	r1, [pc, #168]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	610b      	str	r3, [r1, #16]
 8006b30:	e027      	b.n	8006b82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d112      	bne.n	8006b5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b38:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006b40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6892      	ldr	r2, [r2, #8]
 8006b48:	0211      	lsls	r1, r2, #8
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6912      	ldr	r2, [r2, #16]
 8006b4e:	0852      	lsrs	r2, r2, #1
 8006b50:	3a01      	subs	r2, #1
 8006b52:	0552      	lsls	r2, r2, #21
 8006b54:	430a      	orrs	r2, r1
 8006b56:	491f      	ldr	r1, [pc, #124]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	610b      	str	r3, [r1, #16]
 8006b5c:	e011      	b.n	8006b82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b5e:	4b1d      	ldr	r3, [pc, #116]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6892      	ldr	r2, [r2, #8]
 8006b6e:	0211      	lsls	r1, r2, #8
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6952      	ldr	r2, [r2, #20]
 8006b74:	0852      	lsrs	r2, r2, #1
 8006b76:	3a01      	subs	r2, #1
 8006b78:	0652      	lsls	r2, r2, #25
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	4915      	ldr	r1, [pc, #84]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b82:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b8e:	f7fc fa9d 	bl	80030cc <HAL_GetTick>
 8006b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b94:	e009      	b.n	8006baa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b96:	f7fc fa99 	bl	80030cc <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d902      	bls.n	8006baa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8006ba8:	e005      	b.n	8006bb6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ef      	beq.n	8006b96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d106      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	4903      	ldr	r1, [pc, #12]	; (8006bd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40021000 	.word	0x40021000

08006bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e049      	b.n	8006c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fb fdfc 	bl	80027fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4610      	mov	r0, r2
 8006c18:	f000 faca 	bl	80071b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d001      	beq.n	8006ca0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e03b      	b.n	8006d18 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68da      	ldr	r2, [r3, #12]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0201 	orr.w	r2, r2, #1
 8006cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <HAL_TIM_Base_Start_IT+0x9c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_TIM_Base_Start_IT+0x4e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIM_Base_Start_IT+0x4e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a15      	ldr	r2, [pc, #84]	; (8006d28 <HAL_TIM_Base_Start_IT+0xa0>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d115      	bne.n	8006d02 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <HAL_TIM_Base_Start_IT+0xa4>)
 8006cde:	4013      	ands	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b06      	cmp	r3, #6
 8006ce6:	d015      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x8c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cee:	d011      	beq.n	8006d14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d00:	e008      	b.n	8006d14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
 8006d12:	e000      	b.n	8006d16 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	00010007 	.word	0x00010007

08006d30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6a1a      	ldr	r2, [r3, #32]
 8006d4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10f      	bne.n	8006d78 <HAL_TIM_Base_Stop_IT+0x48>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a1a      	ldr	r2, [r3, #32]
 8006d5e:	f240 4344 	movw	r3, #1092	; 0x444
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <HAL_TIM_Base_Stop_IT+0x48>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d122      	bne.n	8006dea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d11b      	bne.n	8006dea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f06f 0202 	mvn.w	r2, #2
 8006dba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d003      	beq.n	8006dd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f9ce 	bl	8007172 <HAL_TIM_IC_CaptureCallback>
 8006dd6:	e005      	b.n	8006de4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9c0 	bl	800715e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f9d1 	bl	8007186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d122      	bne.n	8006e3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d11b      	bne.n	8006e3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f06f 0204 	mvn.w	r2, #4
 8006e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9a4 	bl	8007172 <HAL_TIM_IC_CaptureCallback>
 8006e2a:	e005      	b.n	8006e38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f996 	bl	800715e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9a7 	bl	8007186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d122      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d11b      	bne.n	8006e92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f06f 0208 	mvn.w	r2, #8
 8006e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2204      	movs	r2, #4
 8006e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f97a 	bl	8007172 <HAL_TIM_IC_CaptureCallback>
 8006e7e:	e005      	b.n	8006e8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f96c 	bl	800715e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f97d 	bl	8007186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d122      	bne.n	8006ee6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f003 0310 	and.w	r3, r3, #16
 8006eaa:	2b10      	cmp	r3, #16
 8006eac:	d11b      	bne.n	8006ee6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f06f 0210 	mvn.w	r2, #16
 8006eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f950 	bl	8007172 <HAL_TIM_IC_CaptureCallback>
 8006ed2:	e005      	b.n	8006ee0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f942 	bl	800715e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f953 	bl	8007186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d10e      	bne.n	8006f12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d107      	bne.n	8006f12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f06f 0201 	mvn.w	r2, #1
 8006f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7fb fcad 	bl	800286c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d10e      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d107      	bne.n	8006f3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 faa7 	bl	800748c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f58:	2b80      	cmp	r3, #128	; 0x80
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa9a 	bl	80074a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f901 	bl	800719a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d10e      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d107      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0220 	mvn.w	r2, #32
 8006fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa5a 	bl	8007478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e0b6      	b.n	8007156 <HAL_TIM_ConfigClockSource+0x18a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800700a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007024:	d03e      	beq.n	80070a4 <HAL_TIM_ConfigClockSource+0xd8>
 8007026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702a:	f200 8087 	bhi.w	800713c <HAL_TIM_ConfigClockSource+0x170>
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007032:	f000 8086 	beq.w	8007142 <HAL_TIM_ConfigClockSource+0x176>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	d87f      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 800703c:	2b70      	cmp	r3, #112	; 0x70
 800703e:	d01a      	beq.n	8007076 <HAL_TIM_ConfigClockSource+0xaa>
 8007040:	2b70      	cmp	r3, #112	; 0x70
 8007042:	d87b      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 8007044:	2b60      	cmp	r3, #96	; 0x60
 8007046:	d050      	beq.n	80070ea <HAL_TIM_ConfigClockSource+0x11e>
 8007048:	2b60      	cmp	r3, #96	; 0x60
 800704a:	d877      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 800704c:	2b50      	cmp	r3, #80	; 0x50
 800704e:	d03c      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0xfe>
 8007050:	2b50      	cmp	r3, #80	; 0x50
 8007052:	d873      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 8007054:	2b40      	cmp	r3, #64	; 0x40
 8007056:	d058      	beq.n	800710a <HAL_TIM_ConfigClockSource+0x13e>
 8007058:	2b40      	cmp	r3, #64	; 0x40
 800705a:	d86f      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 800705c:	2b30      	cmp	r3, #48	; 0x30
 800705e:	d064      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x15e>
 8007060:	2b30      	cmp	r3, #48	; 0x30
 8007062:	d86b      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 8007064:	2b20      	cmp	r3, #32
 8007066:	d060      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x15e>
 8007068:	2b20      	cmp	r3, #32
 800706a:	d867      	bhi.n	800713c <HAL_TIM_ConfigClockSource+0x170>
 800706c:	2b00      	cmp	r3, #0
 800706e:	d05c      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x15e>
 8007070:	2b10      	cmp	r3, #16
 8007072:	d05a      	beq.n	800712a <HAL_TIM_ConfigClockSource+0x15e>
 8007074:	e062      	b.n	800713c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6899      	ldr	r1, [r3, #8]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f000 f971 	bl	800736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	609a      	str	r2, [r3, #8]
      break;
 80070a2:	e04f      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6818      	ldr	r0, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	6899      	ldr	r1, [r3, #8]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f000 f95a 	bl	800736c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070c6:	609a      	str	r2, [r3, #8]
      break;
 80070c8:	e03c      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f000 f8ce 	bl	8007278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2150      	movs	r1, #80	; 0x50
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f927 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 80070e8:	e02c      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6859      	ldr	r1, [r3, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 f8ed 	bl	80072d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2160      	movs	r1, #96	; 0x60
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f917 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8007108:	e01c      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	6859      	ldr	r1, [r3, #4]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	461a      	mov	r2, r3
 8007118:	f000 f8ae 	bl	8007278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	4618      	mov	r0, r3
 8007124:	f000 f907 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 8007128:	e00c      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f000 f8fe 	bl	8007336 <TIM_ITRx_SetConfig>
      break;
 800713a:	e003      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
      break;
 8007140:	e000      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
	...

080071b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2a      	ldr	r2, [pc, #168]	; (800726c <TIM_Base_SetConfig+0xbc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_Base_SetConfig+0x20>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d108      	bne.n	80071e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a21      	ldr	r2, [pc, #132]	; (800726c <TIM_Base_SetConfig+0xbc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0x52>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0x52>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <TIM_Base_SetConfig+0xc0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0x52>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <TIM_Base_SetConfig+0xc4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a0c      	ldr	r2, [pc, #48]	; (800726c <TIM_Base_SetConfig+0xbc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d007      	beq.n	8007250 <TIM_Base_SetConfig+0xa0>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <TIM_Base_SetConfig+0xc0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_Base_SetConfig+0xa0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <TIM_Base_SetConfig+0xc4>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d103      	bne.n	8007258 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	615a      	str	r2, [r3, #20]
}
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400

08007278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 030a 	bic.w	r3, r3, #10
 80072b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	621a      	str	r2, [r3, #32]
}
 80072ca:	bf00      	nop
 80072cc:	371c      	adds	r7, #28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b087      	sub	sp, #28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0210 	bic.w	r2, r3, #16
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	031b      	lsls	r3, r3, #12
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	f043 0307 	orr.w	r3, r3, #7
 8007358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]
}
 8007360:	bf00      	nop
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	431a      	orrs	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4313      	orrs	r3, r2
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	4313      	orrs	r3, r2
 8007398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	609a      	str	r2, [r3, #8]
}
 80073a0:	bf00      	nop
 80073a2:	371c      	adds	r7, #28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e04f      	b.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a21      	ldr	r2, [pc, #132]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d108      	bne.n	8007400 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007406:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a14      	ldr	r2, [pc, #80]	; (8007470 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d004      	beq.n	8007438 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a10      	ldr	r2, [pc, #64]	; (8007474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10c      	bne.n	8007452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800743e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4313      	orrs	r3, r2
 8007448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40014000 	.word	0x40014000

08007478 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e040      	b.n	8007548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fb fa98 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2224      	movs	r2, #36	; 0x24
 80074e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0201 	bic.w	r2, r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fd16 	bl	8007f24 <UART_SetConfig>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d101      	bne.n	8007502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e022      	b.n	8007548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 ff64 	bl	80083d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800751e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800752e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f042 0201 	orr.w	r2, r2, #1
 800753e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 ffeb 	bl	800851c <UART_CheckIdleState>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e02b      	b.n	80075ba <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2224      	movs	r2, #36	; 0x24
 8007566:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2200      	movs	r2, #0
 8007586:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2200      	movs	r2, #0
 800758e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f7fb fb97 	bl	8002cc4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08a      	sub	sp, #40	; 0x28
 80075c6:	af02      	add	r7, sp, #8
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	f040 8082 	bne.w	80076e0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Transmit+0x26>
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e07a      	b.n	80076e2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Transmit+0x38>
 80075f6:	2302      	movs	r3, #2
 80075f8:	e073      	b.n	80076e2 <HAL_UART_Transmit+0x120>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2221      	movs	r2, #33	; 0x21
 800760e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007610:	f7fb fd5c 	bl	80030cc <HAL_GetTick>
 8007614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	88fa      	ldrh	r2, [r7, #6]
 800761a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	88fa      	ldrh	r2, [r7, #6]
 8007622:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	d108      	bne.n	8007642 <HAL_UART_Transmit+0x80>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	e003      	b.n	800764a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007652:	e02d      	b.n	80076b0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	2200      	movs	r2, #0
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 ffa5 	bl	80085ae <UART_WaitOnFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e039      	b.n	80076e2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10b      	bne.n	800768c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	881a      	ldrh	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007680:	b292      	uxth	r2, r2
 8007682:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	3302      	adds	r3, #2
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	e008      	b.n	800769e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b292      	uxth	r2, r2
 8007696:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3301      	adds	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1cb      	bne.n	8007654 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	2140      	movs	r1, #64	; 0x40
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 ff71 	bl	80085ae <UART_WaitOnFlagUntilTimeout>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e005      	b.n	80076e2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e000      	b.n	80076e2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b08a      	sub	sp, #40	; 0x28
 80076ee:	af02      	add	r7, sp, #8
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	603b      	str	r3, [r7, #0]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fe:	2b20      	cmp	r3, #32
 8007700:	f040 80bf 	bne.w	8007882 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_UART_Receive+0x26>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e0b7      	b.n	8007884 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_UART_Receive+0x38>
 800771e:	2302      	movs	r3, #2
 8007720:	e0b0      	b.n	8007884 <HAL_UART_Receive+0x19a>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2222      	movs	r2, #34	; 0x22
 8007736:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800773e:	f7fb fcc5 	bl	80030cc <HAL_GetTick>
 8007742:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	88fa      	ldrh	r2, [r7, #6]
 8007750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775c:	d10e      	bne.n	800777c <HAL_UART_Receive+0x92>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <HAL_UART_Receive+0x88>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f240 12ff 	movw	r2, #511	; 0x1ff
 800776c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007770:	e02d      	b.n	80077ce <HAL_UART_Receive+0xe4>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	22ff      	movs	r2, #255	; 0xff
 8007776:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800777a:	e028      	b.n	80077ce <HAL_UART_Receive+0xe4>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10d      	bne.n	80077a0 <HAL_UART_Receive+0xb6>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <HAL_UART_Receive+0xac>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	22ff      	movs	r2, #255	; 0xff
 8007790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007794:	e01b      	b.n	80077ce <HAL_UART_Receive+0xe4>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	227f      	movs	r2, #127	; 0x7f
 800779a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800779e:	e016      	b.n	80077ce <HAL_UART_Receive+0xe4>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077a8:	d10d      	bne.n	80077c6 <HAL_UART_Receive+0xdc>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <HAL_UART_Receive+0xd2>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	227f      	movs	r2, #127	; 0x7f
 80077b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ba:	e008      	b.n	80077ce <HAL_UART_Receive+0xe4>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	223f      	movs	r2, #63	; 0x3f
 80077c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c4:	e003      	b.n	80077ce <HAL_UART_Receive+0xe4>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077de:	d108      	bne.n	80077f2 <HAL_UART_Receive+0x108>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d104      	bne.n	80077f2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	e003      	b.n	80077fa <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007802:	e033      	b.n	800786c <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2200      	movs	r2, #0
 800780c:	2120      	movs	r1, #32
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fecd 	bl	80085ae <UART_WaitOnFlagUntilTimeout>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e032      	b.n	8007884 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10c      	bne.n	800783e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800782a:	b29a      	uxth	r2, r3
 800782c:	8a7b      	ldrh	r3, [r7, #18]
 800782e:	4013      	ands	r3, r2
 8007830:	b29a      	uxth	r2, r3
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	3302      	adds	r3, #2
 800783a:	61bb      	str	r3, [r7, #24]
 800783c:	e00d      	b.n	800785a <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007844:	b29b      	uxth	r3, r3
 8007846:	b2da      	uxtb	r2, r3
 8007848:	8a7b      	ldrh	r3, [r7, #18]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4013      	ands	r3, r2
 800784e:	b2da      	uxtb	r2, r3
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1c5      	bne.n	8007804 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2220      	movs	r2, #32
 800787c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08a      	sub	sp, #40	; 0x28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	4613      	mov	r3, r2
 8007898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d142      	bne.n	8007928 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <HAL_UART_Receive_DMA+0x22>
 80078a8:	88fb      	ldrh	r3, [r7, #6]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e03b      	b.n	800792a <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d101      	bne.n	80078c0 <HAL_UART_Receive_DMA+0x34>
 80078bc:	2302      	movs	r3, #2
 80078be:	e034      	b.n	800792a <HAL_UART_Receive_DMA+0x9e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_UART_Receive_DMA+0xa8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d01f      	beq.n	8007918 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	613b      	str	r3, [r7, #16]
   return(result);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	69f9      	ldr	r1, [r7, #28]
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	61bb      	str	r3, [r7, #24]
   return(result);
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007918:	88fb      	ldrh	r3, [r7, #6]
 800791a:	461a      	mov	r2, r3
 800791c:	68b9      	ldr	r1, [r7, #8]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 ff0a 	bl	8008738 <UART_Start_Receive_DMA>
 8007924:	4603      	mov	r3, r0
 8007926:	e000      	b.n	800792a <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007928:	2302      	movs	r3, #2
  }
}
 800792a:	4618      	mov	r0, r3
 800792c:	3728      	adds	r7, #40	; 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40008000 	.word	0x40008000

08007938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b0ba      	sub	sp, #232	; 0xe8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800795e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007962:	f640 030f 	movw	r3, #2063	; 0x80f
 8007966:	4013      	ands	r3, r2
 8007968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800796c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007970:	2b00      	cmp	r3, #0
 8007972:	d115      	bne.n	80079a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00f      	beq.n	80079a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 82a6 	beq.w	8007ee2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
      }
      return;
 800799e:	e2a0      	b.n	8007ee2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80079a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8117 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079ba:	4b85      	ldr	r3, [pc, #532]	; (8007bd0 <HAL_UART_IRQHandler+0x298>)
 80079bc:	4013      	ands	r3, r2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 810a 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d011      	beq.n	80079f4 <HAL_UART_IRQHandler+0xbc>
 80079d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2201      	movs	r2, #1
 80079e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ea:	f043 0201 	orr.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d011      	beq.n	8007a24 <HAL_UART_IRQHandler+0xec>
 8007a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2202      	movs	r2, #2
 8007a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1a:	f043 0204 	orr.w	r2, r3, #4
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d011      	beq.n	8007a54 <HAL_UART_IRQHandler+0x11c>
 8007a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00b      	beq.n	8007a54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2204      	movs	r2, #4
 8007a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a4a:	f043 0202 	orr.w	r2, r3, #2
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d017      	beq.n	8007a90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f003 0320 	and.w	r3, r3, #32
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2208      	movs	r2, #8
 8007a7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a86:	f043 0208 	orr.w	r2, r3, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d012      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x18a>
 8007a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00c      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab8:	f043 0220 	orr.w	r2, r3, #32
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 820c 	beq.w	8007ee6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d007      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b40      	cmp	r3, #64	; 0x40
 8007b0c:	d005      	beq.n	8007b1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d04f      	beq.n	8007bba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fed8 	bl	80088d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d141      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1d9      	bne.n	8007b2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d013      	beq.n	8007baa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <HAL_UART_IRQHandler+0x29c>)
 8007b88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fd fae2 	bl	8005158 <HAL_DMA_Abort_IT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d017      	beq.n	8007bca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	e00f      	b.n	8007bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9b0 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb0:	e00b      	b.n	8007bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9ac 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	e007      	b.n	8007bca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f9a8 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007bc8:	e18d      	b.n	8007ee6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bca:	bf00      	nop
    return;
 8007bcc:	e18b      	b.n	8007ee6 <HAL_UART_IRQHandler+0x5ae>
 8007bce:	bf00      	nop
 8007bd0:	04000120 	.word	0x04000120
 8007bd4:	08008b6f 	.word	0x08008b6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	f040 8146 	bne.w	8007e6e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 813f 	beq.w	8007e6e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 8138 	beq.w	8007e6e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2210      	movs	r2, #16
 8007c04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c10:	2b40      	cmp	r3, #64	; 0x40
 8007c12:	f040 80b4 	bne.w	8007d7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 815f 	beq.w	8007eea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c36:	429a      	cmp	r2, r3
 8007c38:	f080 8157 	bcs.w	8007eea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 8085 	bne.w	8007d62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1da      	bne.n	8007c58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cac:	e853 3f00 	ldrex	r3, [r3]
 8007cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cb4:	f023 0301 	bic.w	r3, r3, #1
 8007cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e1      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e3      	bne.n	8007cde <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d32:	f023 0310 	bic.w	r3, r3, #16
 8007d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d44:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e4      	bne.n	8007d22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd f9bd 	bl	80050dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7fb f814 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d7c:	e0b5      	b.n	8007eea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 80a7 	beq.w	8007eee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007da0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80a2 	beq.w	8007eee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8007dce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd4:	e841 2300 	strex	r3, r2, [r1]
 8007dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e4      	bne.n	8007daa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dea:	e853 3f00 	ldrex	r3, [r3]
 8007dee:	623b      	str	r3, [r7, #32]
   return(result);
 8007df0:	6a3b      	ldr	r3, [r7, #32]
 8007df2:	f023 0301 	bic.w	r3, r3, #1
 8007df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e04:	633a      	str	r2, [r7, #48]	; 0x30
 8007e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e3      	bne.n	8007de0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0310 	bic.w	r3, r3, #16
 8007e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e4c:	61fb      	str	r3, [r7, #28]
 8007e4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	69b9      	ldr	r1, [r7, #24]
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e4      	bne.n	8007e2a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7fa ff9c 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e6c:	e03f      	b.n	8007eee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00e      	beq.n	8007e98 <HAL_UART_IRQHandler+0x560>
 8007e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d008      	beq.n	8007e98 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e8e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 feac 	bl	8008bee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e96:	e02d      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d008      	beq.n	8007ec2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01c      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
    }
    return;
 8007ec0:	e017      	b.n	8007ef2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d012      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fe5d 	bl	8008b9a <UART_EndTransmit_IT>
    return;
 8007ee0:	e008      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ee2:	bf00      	nop
 8007ee4:	e006      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ee6:	bf00      	nop
 8007ee8:	e004      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007eea:	bf00      	nop
 8007eec:	e002      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007eee:	bf00      	nop
 8007ef0:	e000      	b.n	8007ef4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ef2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ef4:	37e8      	adds	r7, #232	; 0xe8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop

08007efc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f28:	b08a      	sub	sp, #40	; 0x28
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	431a      	orrs	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	4b9e      	ldr	r3, [pc, #632]	; (80081cc <UART_SetConfig+0x2a8>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a93      	ldr	r2, [pc, #588]	; (80081d0 <UART_SetConfig+0x2ac>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d004      	beq.n	8007f90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a8a      	ldr	r2, [pc, #552]	; (80081d4 <UART_SetConfig+0x2b0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d126      	bne.n	8007ffc <UART_SetConfig+0xd8>
 8007fae:	4b8a      	ldr	r3, [pc, #552]	; (80081d8 <UART_SetConfig+0x2b4>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d81b      	bhi.n	8007ff4 <UART_SetConfig+0xd0>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <UART_SetConfig+0xa0>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007fd5 	.word	0x08007fd5
 8007fc8:	08007fe5 	.word	0x08007fe5
 8007fcc:	08007fdd 	.word	0x08007fdd
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fda:	e0ab      	b.n	8008134 <UART_SetConfig+0x210>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fe2:	e0a7      	b.n	8008134 <UART_SetConfig+0x210>
 8007fe4:	2304      	movs	r3, #4
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fea:	e0a3      	b.n	8008134 <UART_SetConfig+0x210>
 8007fec:	2308      	movs	r3, #8
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff2:	e09f      	b.n	8008134 <UART_SetConfig+0x210>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ffa:	e09b      	b.n	8008134 <UART_SetConfig+0x210>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a76      	ldr	r2, [pc, #472]	; (80081dc <UART_SetConfig+0x2b8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d138      	bne.n	8008078 <UART_SetConfig+0x154>
 8008006:	4b74      	ldr	r3, [pc, #464]	; (80081d8 <UART_SetConfig+0x2b4>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800c:	f003 030c 	and.w	r3, r3, #12
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d82d      	bhi.n	8008070 <UART_SetConfig+0x14c>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0xf8>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	08008051 	.word	0x08008051
 8008020:	08008071 	.word	0x08008071
 8008024:	08008071 	.word	0x08008071
 8008028:	08008071 	.word	0x08008071
 800802c:	08008061 	.word	0x08008061
 8008030:	08008071 	.word	0x08008071
 8008034:	08008071 	.word	0x08008071
 8008038:	08008071 	.word	0x08008071
 800803c:	08008059 	.word	0x08008059
 8008040:	08008071 	.word	0x08008071
 8008044:	08008071 	.word	0x08008071
 8008048:	08008071 	.word	0x08008071
 800804c:	08008069 	.word	0x08008069
 8008050:	2300      	movs	r3, #0
 8008052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008056:	e06d      	b.n	8008134 <UART_SetConfig+0x210>
 8008058:	2302      	movs	r3, #2
 800805a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800805e:	e069      	b.n	8008134 <UART_SetConfig+0x210>
 8008060:	2304      	movs	r3, #4
 8008062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008066:	e065      	b.n	8008134 <UART_SetConfig+0x210>
 8008068:	2308      	movs	r3, #8
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800806e:	e061      	b.n	8008134 <UART_SetConfig+0x210>
 8008070:	2310      	movs	r3, #16
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008076:	e05d      	b.n	8008134 <UART_SetConfig+0x210>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a58      	ldr	r2, [pc, #352]	; (80081e0 <UART_SetConfig+0x2bc>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d125      	bne.n	80080ce <UART_SetConfig+0x1aa>
 8008082:	4b55      	ldr	r3, [pc, #340]	; (80081d8 <UART_SetConfig+0x2b4>)
 8008084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008088:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800808c:	2b30      	cmp	r3, #48	; 0x30
 800808e:	d016      	beq.n	80080be <UART_SetConfig+0x19a>
 8008090:	2b30      	cmp	r3, #48	; 0x30
 8008092:	d818      	bhi.n	80080c6 <UART_SetConfig+0x1a2>
 8008094:	2b20      	cmp	r3, #32
 8008096:	d00a      	beq.n	80080ae <UART_SetConfig+0x18a>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d814      	bhi.n	80080c6 <UART_SetConfig+0x1a2>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <UART_SetConfig+0x182>
 80080a0:	2b10      	cmp	r3, #16
 80080a2:	d008      	beq.n	80080b6 <UART_SetConfig+0x192>
 80080a4:	e00f      	b.n	80080c6 <UART_SetConfig+0x1a2>
 80080a6:	2300      	movs	r3, #0
 80080a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080ac:	e042      	b.n	8008134 <UART_SetConfig+0x210>
 80080ae:	2302      	movs	r3, #2
 80080b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080b4:	e03e      	b.n	8008134 <UART_SetConfig+0x210>
 80080b6:	2304      	movs	r3, #4
 80080b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080bc:	e03a      	b.n	8008134 <UART_SetConfig+0x210>
 80080be:	2308      	movs	r3, #8
 80080c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c4:	e036      	b.n	8008134 <UART_SetConfig+0x210>
 80080c6:	2310      	movs	r3, #16
 80080c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080cc:	e032      	b.n	8008134 <UART_SetConfig+0x210>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a3f      	ldr	r2, [pc, #252]	; (80081d0 <UART_SetConfig+0x2ac>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d12a      	bne.n	800812e <UART_SetConfig+0x20a>
 80080d8:	4b3f      	ldr	r3, [pc, #252]	; (80081d8 <UART_SetConfig+0x2b4>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080e6:	d01a      	beq.n	800811e <UART_SetConfig+0x1fa>
 80080e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ec:	d81b      	bhi.n	8008126 <UART_SetConfig+0x202>
 80080ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f2:	d00c      	beq.n	800810e <UART_SetConfig+0x1ea>
 80080f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f8:	d815      	bhi.n	8008126 <UART_SetConfig+0x202>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <UART_SetConfig+0x1e2>
 80080fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008102:	d008      	beq.n	8008116 <UART_SetConfig+0x1f2>
 8008104:	e00f      	b.n	8008126 <UART_SetConfig+0x202>
 8008106:	2300      	movs	r3, #0
 8008108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810c:	e012      	b.n	8008134 <UART_SetConfig+0x210>
 800810e:	2302      	movs	r3, #2
 8008110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008114:	e00e      	b.n	8008134 <UART_SetConfig+0x210>
 8008116:	2304      	movs	r3, #4
 8008118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811c:	e00a      	b.n	8008134 <UART_SetConfig+0x210>
 800811e:	2308      	movs	r3, #8
 8008120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008124:	e006      	b.n	8008134 <UART_SetConfig+0x210>
 8008126:	2310      	movs	r3, #16
 8008128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812c:	e002      	b.n	8008134 <UART_SetConfig+0x210>
 800812e:	2310      	movs	r3, #16
 8008130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a25      	ldr	r2, [pc, #148]	; (80081d0 <UART_SetConfig+0x2ac>)
 800813a:	4293      	cmp	r3, r2
 800813c:	f040 808a 	bne.w	8008254 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008144:	2b08      	cmp	r3, #8
 8008146:	d824      	bhi.n	8008192 <UART_SetConfig+0x26e>
 8008148:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0x22c>)
 800814a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814e:	bf00      	nop
 8008150:	08008175 	.word	0x08008175
 8008154:	08008193 	.word	0x08008193
 8008158:	0800817d 	.word	0x0800817d
 800815c:	08008193 	.word	0x08008193
 8008160:	08008183 	.word	0x08008183
 8008164:	08008193 	.word	0x08008193
 8008168:	08008193 	.word	0x08008193
 800816c:	08008193 	.word	0x08008193
 8008170:	0800818b 	.word	0x0800818b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008174:	f7fe f99a 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8008178:	61f8      	str	r0, [r7, #28]
        break;
 800817a:	e010      	b.n	800819e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800817c:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <UART_SetConfig+0x2c0>)
 800817e:	61fb      	str	r3, [r7, #28]
        break;
 8008180:	e00d      	b.n	800819e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008182:	f7fe f8fd 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8008186:	61f8      	str	r0, [r7, #28]
        break;
 8008188:	e009      	b.n	800819e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800818a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818e:	61fb      	str	r3, [r7, #28]
        break;
 8008190:	e005      	b.n	800819e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800819c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 8109 	beq.w	80083b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4413      	add	r3, r2
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d305      	bcc.n	80081c2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d912      	bls.n	80081e8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80081c8:	e0f6      	b.n	80083b8 <UART_SetConfig+0x494>
 80081ca:	bf00      	nop
 80081cc:	efff69f3 	.word	0xefff69f3
 80081d0:	40008000 	.word	0x40008000
 80081d4:	40013800 	.word	0x40013800
 80081d8:	40021000 	.word	0x40021000
 80081dc:	40004400 	.word	0x40004400
 80081e0:	40004800 	.word	0x40004800
 80081e4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2200      	movs	r2, #0
 80081ec:	461c      	mov	r4, r3
 80081ee:	4615      	mov	r5, r2
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	f04f 0300 	mov.w	r3, #0
 80081f8:	022b      	lsls	r3, r5, #8
 80081fa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80081fe:	0222      	lsls	r2, r4, #8
 8008200:	68f9      	ldr	r1, [r7, #12]
 8008202:	6849      	ldr	r1, [r1, #4]
 8008204:	0849      	lsrs	r1, r1, #1
 8008206:	2000      	movs	r0, #0
 8008208:	4688      	mov	r8, r1
 800820a:	4681      	mov	r9, r0
 800820c:	eb12 0a08 	adds.w	sl, r2, r8
 8008210:	eb43 0b09 	adc.w	fp, r3, r9
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008222:	4650      	mov	r0, sl
 8008224:	4659      	mov	r1, fp
 8008226:	f7f8 fc49 	bl	8000abc <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4613      	mov	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008238:	d308      	bcc.n	800824c <UART_SetConfig+0x328>
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008240:	d204      	bcs.n	800824c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69ba      	ldr	r2, [r7, #24]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e0b5      	b.n	80083b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008252:	e0b1      	b.n	80083b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800825c:	d15d      	bne.n	800831a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800825e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008262:	2b08      	cmp	r3, #8
 8008264:	d827      	bhi.n	80082b6 <UART_SetConfig+0x392>
 8008266:	a201      	add	r2, pc, #4	; (adr r2, 800826c <UART_SetConfig+0x348>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008291 	.word	0x08008291
 8008270:	08008299 	.word	0x08008299
 8008274:	080082a1 	.word	0x080082a1
 8008278:	080082b7 	.word	0x080082b7
 800827c:	080082a7 	.word	0x080082a7
 8008280:	080082b7 	.word	0x080082b7
 8008284:	080082b7 	.word	0x080082b7
 8008288:	080082b7 	.word	0x080082b7
 800828c:	080082af 	.word	0x080082af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008290:	f7fe f90c 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8008294:	61f8      	str	r0, [r7, #28]
        break;
 8008296:	e014      	b.n	80082c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008298:	f7fe f91e 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 800829c:	61f8      	str	r0, [r7, #28]
        break;
 800829e:	e010      	b.n	80082c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a0:	4b4c      	ldr	r3, [pc, #304]	; (80083d4 <UART_SetConfig+0x4b0>)
 80082a2:	61fb      	str	r3, [r7, #28]
        break;
 80082a4:	e00d      	b.n	80082c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a6:	f7fe f86b 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 80082aa:	61f8      	str	r0, [r7, #28]
        break;
 80082ac:	e009      	b.n	80082c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b2:	61fb      	str	r3, [r7, #28]
        break;
 80082b4:	e005      	b.n	80082c2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80082b6:	2300      	movs	r3, #0
 80082b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80082c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d077      	beq.n	80083b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	005a      	lsls	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	085b      	lsrs	r3, r3, #1
 80082d2:	441a      	add	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2b0f      	cmp	r3, #15
 80082e2:	d916      	bls.n	8008312 <UART_SetConfig+0x3ee>
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ea:	d212      	bcs.n	8008312 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f023 030f 	bic.w	r3, r3, #15
 80082f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	085b      	lsrs	r3, r3, #1
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	b29a      	uxth	r2, r3
 8008302:	8afb      	ldrh	r3, [r7, #22]
 8008304:	4313      	orrs	r3, r2
 8008306:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	8afa      	ldrh	r2, [r7, #22]
 800830e:	60da      	str	r2, [r3, #12]
 8008310:	e052      	b.n	80083b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008318:	e04e      	b.n	80083b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800831a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800831e:	2b08      	cmp	r3, #8
 8008320:	d827      	bhi.n	8008372 <UART_SetConfig+0x44e>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x404>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	08008373 	.word	0x08008373
 8008338:	08008363 	.word	0x08008363
 800833c:	08008373 	.word	0x08008373
 8008340:	08008373 	.word	0x08008373
 8008344:	08008373 	.word	0x08008373
 8008348:	0800836b 	.word	0x0800836b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834c:	f7fe f8ae 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8008350:	61f8      	str	r0, [r7, #28]
        break;
 8008352:	e014      	b.n	800837e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008354:	f7fe f8c0 	bl	80064d8 <HAL_RCC_GetPCLK2Freq>
 8008358:	61f8      	str	r0, [r7, #28]
        break;
 800835a:	e010      	b.n	800837e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800835c:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <UART_SetConfig+0x4b0>)
 800835e:	61fb      	str	r3, [r7, #28]
        break;
 8008360:	e00d      	b.n	800837e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008362:	f7fe f80d 	bl	8006380 <HAL_RCC_GetSysClockFreq>
 8008366:	61f8      	str	r0, [r7, #28]
        break;
 8008368:	e009      	b.n	800837e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800836e:	61fb      	str	r3, [r7, #28]
        break;
 8008370:	e005      	b.n	800837e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800837c:	bf00      	nop
    }

    if (pclk != 0U)
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	085a      	lsrs	r2, r3, #1
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	441a      	add	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	fbb2 f3f3 	udiv	r3, r2, r3
 8008396:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b0f      	cmp	r3, #15
 800839c:	d909      	bls.n	80083b2 <UART_SetConfig+0x48e>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a4:	d205      	bcs.n	80083b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60da      	str	r2, [r3, #12]
 80083b0:	e002      	b.n	80083b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80083c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3728      	adds	r7, #40	; 0x28
 80083cc:	46bd      	mov	sp, r7
 80083ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083d2:	bf00      	nop
 80083d4:	00f42400 	.word	0x00f42400

080083d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00a      	beq.n	8008402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	430a      	orrs	r2, r1
 8008400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00a      	beq.n	8008424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01a      	beq.n	80084ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d6:	d10a      	bne.n	80084ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	605a      	str	r2, [r3, #4]
  }
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af02      	add	r7, sp, #8
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800852c:	f7fa fdce 	bl	80030cc <HAL_GetTick>
 8008530:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b08      	cmp	r3, #8
 800853e:	d10e      	bne.n	800855e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f82d 	bl	80085ae <UART_WaitOnFlagUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e023      	b.n	80085a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b04      	cmp	r3, #4
 800856a:	d10e      	bne.n	800858a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800856c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f817 	bl	80085ae <UART_WaitOnFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e00d      	b.n	80085a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2220      	movs	r2, #32
 8008594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b09c      	sub	sp, #112	; 0x70
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	603b      	str	r3, [r7, #0]
 80085ba:	4613      	mov	r3, r2
 80085bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085be:	e0a5      	b.n	800870c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	f000 80a1 	beq.w	800870c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ca:	f7fa fd7f 	bl	80030cc <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d302      	bcc.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x32>
 80085da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13e      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085f4:	667b      	str	r3, [r7, #100]	; 0x64
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008600:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008604:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800860c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	663b      	str	r3, [r7, #96]	; 0x60
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008632:	64ba      	str	r2, [r7, #72]	; 0x48
 8008634:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2220      	movs	r2, #32
 8008650:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e067      	b.n	800872e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d04f      	beq.n	800870c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800867a:	d147      	bne.n	800870c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008684:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800869a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	461a      	mov	r2, r3
 80086a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ac:	e841 2300 	strex	r3, r2, [r1]
 80086b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1e6      	bne.n	8008686 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	613b      	str	r3, [r7, #16]
   return(result);
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3308      	adds	r3, #8
 80086d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086d8:	623a      	str	r2, [r7, #32]
 80086da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	69f9      	ldr	r1, [r7, #28]
 80086de:	6a3a      	ldr	r2, [r7, #32]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e5      	bne.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2220      	movs	r2, #32
 80086f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2220      	movs	r2, #32
 80086f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e010      	b.n	800872e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	69da      	ldr	r2, [r3, #28]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4013      	ands	r3, r2
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	429a      	cmp	r2, r3
 800871a:	bf0c      	ite	eq
 800871c:	2301      	moveq	r3, #1
 800871e:	2300      	movne	r3, #0
 8008720:	b2db      	uxtb	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	429a      	cmp	r2, r3
 8008728:	f43f af4a 	beq.w	80085c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3770      	adds	r7, #112	; 0x70
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b096      	sub	sp, #88	; 0x58
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	88fa      	ldrh	r2, [r7, #6]
 8008750:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2222      	movs	r2, #34	; 0x22
 8008760:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008766:	2b00      	cmp	r3, #0
 8008768:	d02b      	beq.n	80087c2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800876e:	4a42      	ldr	r2, [pc, #264]	; (8008878 <UART_Start_Receive_DMA+0x140>)
 8008770:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008776:	4a41      	ldr	r2, [pc, #260]	; (800887c <UART_Start_Receive_DMA+0x144>)
 8008778:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877e:	4a40      	ldr	r2, [pc, #256]	; (8008880 <UART_Start_Receive_DMA+0x148>)
 8008780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008786:	2200      	movs	r2, #0
 8008788:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3324      	adds	r3, #36	; 0x24
 8008794:	4619      	mov	r1, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879a:	461a      	mov	r2, r3
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	f7fc fc3d 	bl	800501c <HAL_DMA_Start_IT>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00c      	beq.n	80087c2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2210      	movs	r2, #16
 80087ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2220      	movs	r2, #32
 80087bc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e055      	b.n	800886e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d018      	beq.n	8008804 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087da:	e853 3f00 	ldrex	r3, [r3]
 80087de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e6:	657b      	str	r3, [r7, #84]	; 0x54
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087f8:	e841 2300 	strex	r3, r2, [r1]
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e6      	bne.n	80087d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3308      	adds	r3, #8
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	f043 0301 	orr.w	r3, r3, #1
 800881a:	653b      	str	r3, [r7, #80]	; 0x50
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008824:	637a      	str	r2, [r7, #52]	; 0x34
 8008826:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800882a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e5      	bne.n	8008804 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3308      	adds	r3, #8
 800883e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	e853 3f00 	ldrex	r3, [r3]
 8008846:	613b      	str	r3, [r7, #16]
   return(result);
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008858:	623a      	str	r2, [r7, #32]
 800885a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885c:	69f9      	ldr	r1, [r7, #28]
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	e841 2300 	strex	r3, r2, [r1]
 8008864:	61bb      	str	r3, [r7, #24]
   return(result);
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1e5      	bne.n	8008838 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3758      	adds	r7, #88	; 0x58
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	08008997 	.word	0x08008997
 800887c:	08008abb 	.word	0x08008abb
 8008880:	08008af3 	.word	0x08008af3

08008884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b089      	sub	sp, #36	; 0x24
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	60bb      	str	r3, [r7, #8]
   return(result);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088a0:	61fb      	str	r3, [r7, #28]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6979      	ldr	r1, [r7, #20]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	613b      	str	r3, [r7, #16]
   return(result);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2220      	movs	r2, #32
 80088c2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80088c4:	bf00      	nop
 80088c6:	3724      	adds	r7, #36	; 0x24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b095      	sub	sp, #84	; 0x54
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f6:	643b      	str	r3, [r7, #64]	; 0x40
 80088f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	61fb      	str	r3, [r7, #28]
   return(result);
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	f023 0301 	bic.w	r3, r3, #1
 8008920:	64bb      	str	r3, [r7, #72]	; 0x48
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3308      	adds	r3, #8
 8008928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800892a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e5      	bne.n	800890a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008942:	2b01      	cmp	r3, #1
 8008944:	d118      	bne.n	8008978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	60bb      	str	r3, [r7, #8]
   return(result);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f023 0310 	bic.w	r3, r3, #16
 800895a:	647b      	str	r3, [r7, #68]	; 0x44
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	461a      	mov	r2, r3
 8008962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6979      	ldr	r1, [r7, #20]
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	613b      	str	r3, [r7, #16]
   return(result);
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e6      	bne.n	8008946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	665a      	str	r2, [r3, #100]	; 0x64
}
 800898a:	bf00      	nop
 800898c:	3754      	adds	r7, #84	; 0x54
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b09c      	sub	sp, #112	; 0x70
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d170      	bne.n	8008a94 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 80089b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80089d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80089da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	3308      	adds	r3, #8
 80089f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	667b      	str	r3, [r7, #100]	; 0x64
 8008a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a0c:	647a      	str	r2, [r7, #68]	; 0x44
 8008a0e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a14:	e841 2300 	strex	r3, r2, [r1]
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1e5      	bne.n	80089ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3308      	adds	r3, #8
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a36:	663b      	str	r3, [r7, #96]	; 0x60
 8008a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3308      	adds	r3, #8
 8008a3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a40:	633a      	str	r2, [r7, #48]	; 0x30
 8008a42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e5      	bne.n	8008a20 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a56:	2220      	movs	r2, #32
 8008a58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d118      	bne.n	8008a94 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0310 	bic.w	r3, r3, #16
 8008a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	69fa      	ldr	r2, [r7, #28]
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e6      	bne.n	8008a62 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d107      	bne.n	8008aac <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008aa6:	f7fa f97d 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008aaa:	e002      	b.n	8008ab2 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8008aac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008aae:	f7fa f95f 	bl	8002d70 <HAL_UART_RxCpltCallback>
}
 8008ab2:	bf00      	nop
 8008ab4:	3770      	adds	r7, #112	; 0x70
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d109      	bne.n	8008ae4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4619      	mov	r1, r3
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7fa f961 	bl	8002da4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ae2:	e002      	b.n	8008aea <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fa09 	bl	8007efc <HAL_UART_RxHalfCpltCallback>
}
 8008aea:	bf00      	nop
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b04:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b16:	2b80      	cmp	r3, #128	; 0x80
 8008b18:	d109      	bne.n	8008b2e <UART_DMAError+0x3c>
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b21      	cmp	r3, #33	; 0x21
 8008b1e:	d106      	bne.n	8008b2e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008b28:	6978      	ldr	r0, [r7, #20]
 8008b2a:	f7ff feab 	bl	8008884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b38:	2b40      	cmp	r3, #64	; 0x40
 8008b3a:	d109      	bne.n	8008b50 <UART_DMAError+0x5e>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b22      	cmp	r3, #34	; 0x22
 8008b40:	d106      	bne.n	8008b50 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff fec0 	bl	80088d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b56:	f043 0210 	orr.w	r2, r3, #16
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b60:	6978      	ldr	r0, [r7, #20]
 8008b62:	f7ff f9d5 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b66:	bf00      	nop
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f7ff f9bf 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b088      	sub	sp, #32
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	e853 3f00 	ldrex	r3, [r3]
 8008bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6979      	ldr	r1, [r7, #20]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e6      	bne.n	8008ba2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fa f8eb 	bl	8002dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008be6:	bf00      	nop
 8008be8:	3720      	adds	r7, #32
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b08c      	sub	sp, #48	; 0x30
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d14a      	bne.n	8008cae <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 8008c1e:	88fb      	ldrh	r3, [r7, #6]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e043      	b.n	8008cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e03c      	b.n	8008cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	461a      	mov	r2, r3
 8008c48:	68b9      	ldr	r1, [r7, #8]
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fd74 	bl	8008738 <UART_Start_Receive_DMA>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d124      	bne.n	8008ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d11d      	bne.n	8008ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2210      	movs	r2, #16
 8008c6c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f043 0310 	orr.w	r3, r3, #16
 8008c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c8e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6a39      	ldr	r1, [r7, #32]
 8008c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e6      	bne.n	8008c6e <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8008ca0:	e002      	b.n	8008ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cac:	e000      	b.n	8008cb0 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 8008cae:	2302      	movs	r3, #2
  }
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3730      	adds	r7, #48	; 0x30
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <__errno>:
 8008cb8:	4b01      	ldr	r3, [pc, #4]	; (8008cc0 <__errno+0x8>)
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	2000000c 	.word	0x2000000c

08008cc4 <__libc_init_array>:
 8008cc4:	b570      	push	{r4, r5, r6, lr}
 8008cc6:	4d0d      	ldr	r5, [pc, #52]	; (8008cfc <__libc_init_array+0x38>)
 8008cc8:	4c0d      	ldr	r4, [pc, #52]	; (8008d00 <__libc_init_array+0x3c>)
 8008cca:	1b64      	subs	r4, r4, r5
 8008ccc:	10a4      	asrs	r4, r4, #2
 8008cce:	2600      	movs	r6, #0
 8008cd0:	42a6      	cmp	r6, r4
 8008cd2:	d109      	bne.n	8008ce8 <__libc_init_array+0x24>
 8008cd4:	4d0b      	ldr	r5, [pc, #44]	; (8008d04 <__libc_init_array+0x40>)
 8008cd6:	4c0c      	ldr	r4, [pc, #48]	; (8008d08 <__libc_init_array+0x44>)
 8008cd8:	f001 f926 	bl	8009f28 <_init>
 8008cdc:	1b64      	subs	r4, r4, r5
 8008cde:	10a4      	asrs	r4, r4, #2
 8008ce0:	2600      	movs	r6, #0
 8008ce2:	42a6      	cmp	r6, r4
 8008ce4:	d105      	bne.n	8008cf2 <__libc_init_array+0x2e>
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cec:	4798      	blx	r3
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7ee      	b.n	8008cd0 <__libc_init_array+0xc>
 8008cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf6:	4798      	blx	r3
 8008cf8:	3601      	adds	r6, #1
 8008cfa:	e7f2      	b.n	8008ce2 <__libc_init_array+0x1e>
 8008cfc:	0800a408 	.word	0x0800a408
 8008d00:	0800a408 	.word	0x0800a408
 8008d04:	0800a408 	.word	0x0800a408
 8008d08:	0800a40c 	.word	0x0800a40c

08008d0c <memcpy>:
 8008d0c:	440a      	add	r2, r1
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d14:	d100      	bne.n	8008d18 <memcpy+0xc>
 8008d16:	4770      	bx	lr
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d22:	4291      	cmp	r1, r2
 8008d24:	d1f9      	bne.n	8008d1a <memcpy+0xe>
 8008d26:	bd10      	pop	{r4, pc}

08008d28 <memset>:
 8008d28:	4402      	add	r2, r0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d100      	bne.n	8008d32 <memset+0xa>
 8008d30:	4770      	bx	lr
 8008d32:	f803 1b01 	strb.w	r1, [r3], #1
 8008d36:	e7f9      	b.n	8008d2c <memset+0x4>

08008d38 <strstr>:
 8008d38:	780a      	ldrb	r2, [r1, #0]
 8008d3a:	b570      	push	{r4, r5, r6, lr}
 8008d3c:	b96a      	cbnz	r2, 8008d5a <strstr+0x22>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d109      	bne.n	8008d58 <strstr+0x20>
 8008d44:	460c      	mov	r4, r1
 8008d46:	4605      	mov	r5, r0
 8008d48:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0f6      	beq.n	8008d3e <strstr+0x6>
 8008d50:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008d54:	429e      	cmp	r6, r3
 8008d56:	d0f7      	beq.n	8008d48 <strstr+0x10>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	7803      	ldrb	r3, [r0, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1ef      	bne.n	8008d40 <strstr+0x8>
 8008d60:	4618      	mov	r0, r3
 8008d62:	e7ec      	b.n	8008d3e <strstr+0x6>

08008d64 <strtok>:
 8008d64:	4b16      	ldr	r3, [pc, #88]	; (8008dc0 <strtok+0x5c>)
 8008d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d68:	681e      	ldr	r6, [r3, #0]
 8008d6a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008d6c:	4605      	mov	r5, r0
 8008d6e:	b9fc      	cbnz	r4, 8008db0 <strtok+0x4c>
 8008d70:	2050      	movs	r0, #80	; 0x50
 8008d72:	9101      	str	r1, [sp, #4]
 8008d74:	f000 f90e 	bl	8008f94 <malloc>
 8008d78:	9901      	ldr	r1, [sp, #4]
 8008d7a:	65b0      	str	r0, [r6, #88]	; 0x58
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	b920      	cbnz	r0, 8008d8a <strtok+0x26>
 8008d80:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <strtok+0x60>)
 8008d82:	4811      	ldr	r0, [pc, #68]	; (8008dc8 <strtok+0x64>)
 8008d84:	2157      	movs	r1, #87	; 0x57
 8008d86:	f000 f8d5 	bl	8008f34 <__assert_func>
 8008d8a:	e9c0 4400 	strd	r4, r4, [r0]
 8008d8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008d92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008d96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008d9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008d9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008da2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008da6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008daa:	6184      	str	r4, [r0, #24]
 8008dac:	7704      	strb	r4, [r0, #28]
 8008dae:	6244      	str	r4, [r0, #36]	; 0x24
 8008db0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008db2:	2301      	movs	r3, #1
 8008db4:	4628      	mov	r0, r5
 8008db6:	b002      	add	sp, #8
 8008db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dbc:	f000 b806 	b.w	8008dcc <__strtok_r>
 8008dc0:	2000000c 	.word	0x2000000c
 8008dc4:	0800a1bc 	.word	0x0800a1bc
 8008dc8:	0800a1d3 	.word	0x0800a1d3

08008dcc <__strtok_r>:
 8008dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dce:	b908      	cbnz	r0, 8008dd4 <__strtok_r+0x8>
 8008dd0:	6810      	ldr	r0, [r2, #0]
 8008dd2:	b188      	cbz	r0, 8008df8 <__strtok_r+0x2c>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008ddc:	460f      	mov	r7, r1
 8008dde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008de2:	b91e      	cbnz	r6, 8008dec <__strtok_r+0x20>
 8008de4:	b965      	cbnz	r5, 8008e00 <__strtok_r+0x34>
 8008de6:	6015      	str	r5, [r2, #0]
 8008de8:	4628      	mov	r0, r5
 8008dea:	e005      	b.n	8008df8 <__strtok_r+0x2c>
 8008dec:	42b5      	cmp	r5, r6
 8008dee:	d1f6      	bne.n	8008dde <__strtok_r+0x12>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1f0      	bne.n	8008dd6 <__strtok_r+0xa>
 8008df4:	6014      	str	r4, [r2, #0]
 8008df6:	7003      	strb	r3, [r0, #0]
 8008df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfa:	461c      	mov	r4, r3
 8008dfc:	e00c      	b.n	8008e18 <__strtok_r+0x4c>
 8008dfe:	b915      	cbnz	r5, 8008e06 <__strtok_r+0x3a>
 8008e00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e04:	460e      	mov	r6, r1
 8008e06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008e0a:	42ab      	cmp	r3, r5
 8008e0c:	d1f7      	bne.n	8008dfe <__strtok_r+0x32>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0f3      	beq.n	8008dfa <__strtok_r+0x2e>
 8008e12:	2300      	movs	r3, #0
 8008e14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	e7ed      	b.n	8008df8 <__strtok_r+0x2c>

08008e1c <_strtol_l.constprop.0>:
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e22:	d001      	beq.n	8008e28 <_strtol_l.constprop.0+0xc>
 8008e24:	2b24      	cmp	r3, #36	; 0x24
 8008e26:	d906      	bls.n	8008e36 <_strtol_l.constprop.0+0x1a>
 8008e28:	f7ff ff46 	bl	8008cb8 <__errno>
 8008e2c:	2316      	movs	r3, #22
 8008e2e:	6003      	str	r3, [r0, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f1c <_strtol_l.constprop.0+0x100>
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	462e      	mov	r6, r5
 8008e3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e42:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008e46:	f017 0708 	ands.w	r7, r7, #8
 8008e4a:	d1f7      	bne.n	8008e3c <_strtol_l.constprop.0+0x20>
 8008e4c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e4e:	d132      	bne.n	8008eb6 <_strtol_l.constprop.0+0x9a>
 8008e50:	782c      	ldrb	r4, [r5, #0]
 8008e52:	2701      	movs	r7, #1
 8008e54:	1cb5      	adds	r5, r6, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d05b      	beq.n	8008f12 <_strtol_l.constprop.0+0xf6>
 8008e5a:	2b10      	cmp	r3, #16
 8008e5c:	d109      	bne.n	8008e72 <_strtol_l.constprop.0+0x56>
 8008e5e:	2c30      	cmp	r4, #48	; 0x30
 8008e60:	d107      	bne.n	8008e72 <_strtol_l.constprop.0+0x56>
 8008e62:	782c      	ldrb	r4, [r5, #0]
 8008e64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e68:	2c58      	cmp	r4, #88	; 0x58
 8008e6a:	d14d      	bne.n	8008f08 <_strtol_l.constprop.0+0xec>
 8008e6c:	786c      	ldrb	r4, [r5, #1]
 8008e6e:	2310      	movs	r3, #16
 8008e70:	3502      	adds	r5, #2
 8008e72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e76:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e7a:	f04f 0c00 	mov.w	ip, #0
 8008e7e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e82:	4666      	mov	r6, ip
 8008e84:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008e8c:	f1be 0f09 	cmp.w	lr, #9
 8008e90:	d816      	bhi.n	8008ec0 <_strtol_l.constprop.0+0xa4>
 8008e92:	4674      	mov	r4, lr
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	dd24      	ble.n	8008ee2 <_strtol_l.constprop.0+0xc6>
 8008e98:	f1bc 0f00 	cmp.w	ip, #0
 8008e9c:	db1e      	blt.n	8008edc <_strtol_l.constprop.0+0xc0>
 8008e9e:	45b1      	cmp	r9, r6
 8008ea0:	d31c      	bcc.n	8008edc <_strtol_l.constprop.0+0xc0>
 8008ea2:	d101      	bne.n	8008ea8 <_strtol_l.constprop.0+0x8c>
 8008ea4:	45a2      	cmp	sl, r4
 8008ea6:	db19      	blt.n	8008edc <_strtol_l.constprop.0+0xc0>
 8008ea8:	fb06 4603 	mla	r6, r6, r3, r4
 8008eac:	f04f 0c01 	mov.w	ip, #1
 8008eb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eb4:	e7e8      	b.n	8008e88 <_strtol_l.constprop.0+0x6c>
 8008eb6:	2c2b      	cmp	r4, #43	; 0x2b
 8008eb8:	bf04      	itt	eq
 8008eba:	782c      	ldrbeq	r4, [r5, #0]
 8008ebc:	1cb5      	addeq	r5, r6, #2
 8008ebe:	e7ca      	b.n	8008e56 <_strtol_l.constprop.0+0x3a>
 8008ec0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ec4:	f1be 0f19 	cmp.w	lr, #25
 8008ec8:	d801      	bhi.n	8008ece <_strtol_l.constprop.0+0xb2>
 8008eca:	3c37      	subs	r4, #55	; 0x37
 8008ecc:	e7e2      	b.n	8008e94 <_strtol_l.constprop.0+0x78>
 8008ece:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008ed2:	f1be 0f19 	cmp.w	lr, #25
 8008ed6:	d804      	bhi.n	8008ee2 <_strtol_l.constprop.0+0xc6>
 8008ed8:	3c57      	subs	r4, #87	; 0x57
 8008eda:	e7db      	b.n	8008e94 <_strtol_l.constprop.0+0x78>
 8008edc:	f04f 3cff 	mov.w	ip, #4294967295
 8008ee0:	e7e6      	b.n	8008eb0 <_strtol_l.constprop.0+0x94>
 8008ee2:	f1bc 0f00 	cmp.w	ip, #0
 8008ee6:	da05      	bge.n	8008ef4 <_strtol_l.constprop.0+0xd8>
 8008ee8:	2322      	movs	r3, #34	; 0x22
 8008eea:	6003      	str	r3, [r0, #0]
 8008eec:	4646      	mov	r6, r8
 8008eee:	b942      	cbnz	r2, 8008f02 <_strtol_l.constprop.0+0xe6>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	e79e      	b.n	8008e32 <_strtol_l.constprop.0+0x16>
 8008ef4:	b107      	cbz	r7, 8008ef8 <_strtol_l.constprop.0+0xdc>
 8008ef6:	4276      	negs	r6, r6
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	d0f9      	beq.n	8008ef0 <_strtol_l.constprop.0+0xd4>
 8008efc:	f1bc 0f00 	cmp.w	ip, #0
 8008f00:	d000      	beq.n	8008f04 <_strtol_l.constprop.0+0xe8>
 8008f02:	1e69      	subs	r1, r5, #1
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	e7f3      	b.n	8008ef0 <_strtol_l.constprop.0+0xd4>
 8008f08:	2430      	movs	r4, #48	; 0x30
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1b1      	bne.n	8008e72 <_strtol_l.constprop.0+0x56>
 8008f0e:	2308      	movs	r3, #8
 8008f10:	e7af      	b.n	8008e72 <_strtol_l.constprop.0+0x56>
 8008f12:	2c30      	cmp	r4, #48	; 0x30
 8008f14:	d0a5      	beq.n	8008e62 <_strtol_l.constprop.0+0x46>
 8008f16:	230a      	movs	r3, #10
 8008f18:	e7ab      	b.n	8008e72 <_strtol_l.constprop.0+0x56>
 8008f1a:	bf00      	nop
 8008f1c:	0800a26d 	.word	0x0800a26d

08008f20 <strtol>:
 8008f20:	4613      	mov	r3, r2
 8008f22:	460a      	mov	r2, r1
 8008f24:	4601      	mov	r1, r0
 8008f26:	4802      	ldr	r0, [pc, #8]	; (8008f30 <strtol+0x10>)
 8008f28:	6800      	ldr	r0, [r0, #0]
 8008f2a:	f7ff bf77 	b.w	8008e1c <_strtol_l.constprop.0>
 8008f2e:	bf00      	nop
 8008f30:	2000000c 	.word	0x2000000c

08008f34 <__assert_func>:
 8008f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f36:	4614      	mov	r4, r2
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <__assert_func+0x2c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4605      	mov	r5, r0
 8008f40:	68d8      	ldr	r0, [r3, #12]
 8008f42:	b14c      	cbz	r4, 8008f58 <__assert_func+0x24>
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <__assert_func+0x30>)
 8008f46:	9100      	str	r1, [sp, #0]
 8008f48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f4c:	4906      	ldr	r1, [pc, #24]	; (8008f68 <__assert_func+0x34>)
 8008f4e:	462b      	mov	r3, r5
 8008f50:	f000 f80e 	bl	8008f70 <fiprintf>
 8008f54:	f000 fcc4 	bl	80098e0 <abort>
 8008f58:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <__assert_func+0x38>)
 8008f5a:	461c      	mov	r4, r3
 8008f5c:	e7f3      	b.n	8008f46 <__assert_func+0x12>
 8008f5e:	bf00      	nop
 8008f60:	2000000c 	.word	0x2000000c
 8008f64:	0800a230 	.word	0x0800a230
 8008f68:	0800a23d 	.word	0x0800a23d
 8008f6c:	0800a26b 	.word	0x0800a26b

08008f70 <fiprintf>:
 8008f70:	b40e      	push	{r1, r2, r3}
 8008f72:	b503      	push	{r0, r1, lr}
 8008f74:	4601      	mov	r1, r0
 8008f76:	ab03      	add	r3, sp, #12
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <fiprintf+0x20>)
 8008f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	f000 f919 	bl	80091b8 <_vfiprintf_r>
 8008f86:	b002      	add	sp, #8
 8008f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f8c:	b003      	add	sp, #12
 8008f8e:	4770      	bx	lr
 8008f90:	2000000c 	.word	0x2000000c

08008f94 <malloc>:
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <malloc+0xc>)
 8008f96:	4601      	mov	r1, r0
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f000 b86f 	b.w	800907c <_malloc_r>
 8008f9e:	bf00      	nop
 8008fa0:	2000000c 	.word	0x2000000c

08008fa4 <_free_r>:
 8008fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	d044      	beq.n	8009034 <_free_r+0x90>
 8008faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fae:	9001      	str	r0, [sp, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fb6:	bfb8      	it	lt
 8008fb8:	18e4      	addlt	r4, r4, r3
 8008fba:	f000 feb9 	bl	8009d30 <__malloc_lock>
 8008fbe:	4a1e      	ldr	r2, [pc, #120]	; (8009038 <_free_r+0x94>)
 8008fc0:	9801      	ldr	r0, [sp, #4]
 8008fc2:	6813      	ldr	r3, [r2, #0]
 8008fc4:	b933      	cbnz	r3, 8008fd4 <_free_r+0x30>
 8008fc6:	6063      	str	r3, [r4, #4]
 8008fc8:	6014      	str	r4, [r2, #0]
 8008fca:	b003      	add	sp, #12
 8008fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd0:	f000 beb4 	b.w	8009d3c <__malloc_unlock>
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d908      	bls.n	8008fea <_free_r+0x46>
 8008fd8:	6825      	ldr	r5, [r4, #0]
 8008fda:	1961      	adds	r1, r4, r5
 8008fdc:	428b      	cmp	r3, r1
 8008fde:	bf01      	itttt	eq
 8008fe0:	6819      	ldreq	r1, [r3, #0]
 8008fe2:	685b      	ldreq	r3, [r3, #4]
 8008fe4:	1949      	addeq	r1, r1, r5
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	e7ed      	b.n	8008fc6 <_free_r+0x22>
 8008fea:	461a      	mov	r2, r3
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	b10b      	cbz	r3, 8008ff4 <_free_r+0x50>
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	d9fa      	bls.n	8008fea <_free_r+0x46>
 8008ff4:	6811      	ldr	r1, [r2, #0]
 8008ff6:	1855      	adds	r5, r2, r1
 8008ff8:	42a5      	cmp	r5, r4
 8008ffa:	d10b      	bne.n	8009014 <_free_r+0x70>
 8008ffc:	6824      	ldr	r4, [r4, #0]
 8008ffe:	4421      	add	r1, r4
 8009000:	1854      	adds	r4, r2, r1
 8009002:	42a3      	cmp	r3, r4
 8009004:	6011      	str	r1, [r2, #0]
 8009006:	d1e0      	bne.n	8008fca <_free_r+0x26>
 8009008:	681c      	ldr	r4, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	6053      	str	r3, [r2, #4]
 800900e:	4421      	add	r1, r4
 8009010:	6011      	str	r1, [r2, #0]
 8009012:	e7da      	b.n	8008fca <_free_r+0x26>
 8009014:	d902      	bls.n	800901c <_free_r+0x78>
 8009016:	230c      	movs	r3, #12
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	e7d6      	b.n	8008fca <_free_r+0x26>
 800901c:	6825      	ldr	r5, [r4, #0]
 800901e:	1961      	adds	r1, r4, r5
 8009020:	428b      	cmp	r3, r1
 8009022:	bf04      	itt	eq
 8009024:	6819      	ldreq	r1, [r3, #0]
 8009026:	685b      	ldreq	r3, [r3, #4]
 8009028:	6063      	str	r3, [r4, #4]
 800902a:	bf04      	itt	eq
 800902c:	1949      	addeq	r1, r1, r5
 800902e:	6021      	streq	r1, [r4, #0]
 8009030:	6054      	str	r4, [r2, #4]
 8009032:	e7ca      	b.n	8008fca <_free_r+0x26>
 8009034:	b003      	add	sp, #12
 8009036:	bd30      	pop	{r4, r5, pc}
 8009038:	20000b4c 	.word	0x20000b4c

0800903c <sbrk_aligned>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4e0e      	ldr	r6, [pc, #56]	; (8009078 <sbrk_aligned+0x3c>)
 8009040:	460c      	mov	r4, r1
 8009042:	6831      	ldr	r1, [r6, #0]
 8009044:	4605      	mov	r5, r0
 8009046:	b911      	cbnz	r1, 800904e <sbrk_aligned+0x12>
 8009048:	f000 fb7a 	bl	8009740 <_sbrk_r>
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	4621      	mov	r1, r4
 8009050:	4628      	mov	r0, r5
 8009052:	f000 fb75 	bl	8009740 <_sbrk_r>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	d00a      	beq.n	8009070 <sbrk_aligned+0x34>
 800905a:	1cc4      	adds	r4, r0, #3
 800905c:	f024 0403 	bic.w	r4, r4, #3
 8009060:	42a0      	cmp	r0, r4
 8009062:	d007      	beq.n	8009074 <sbrk_aligned+0x38>
 8009064:	1a21      	subs	r1, r4, r0
 8009066:	4628      	mov	r0, r5
 8009068:	f000 fb6a 	bl	8009740 <_sbrk_r>
 800906c:	3001      	adds	r0, #1
 800906e:	d101      	bne.n	8009074 <sbrk_aligned+0x38>
 8009070:	f04f 34ff 	mov.w	r4, #4294967295
 8009074:	4620      	mov	r0, r4
 8009076:	bd70      	pop	{r4, r5, r6, pc}
 8009078:	20000b50 	.word	0x20000b50

0800907c <_malloc_r>:
 800907c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	1ccd      	adds	r5, r1, #3
 8009082:	f025 0503 	bic.w	r5, r5, #3
 8009086:	3508      	adds	r5, #8
 8009088:	2d0c      	cmp	r5, #12
 800908a:	bf38      	it	cc
 800908c:	250c      	movcc	r5, #12
 800908e:	2d00      	cmp	r5, #0
 8009090:	4607      	mov	r7, r0
 8009092:	db01      	blt.n	8009098 <_malloc_r+0x1c>
 8009094:	42a9      	cmp	r1, r5
 8009096:	d905      	bls.n	80090a4 <_malloc_r+0x28>
 8009098:	230c      	movs	r3, #12
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	2600      	movs	r6, #0
 800909e:	4630      	mov	r0, r6
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	4e2e      	ldr	r6, [pc, #184]	; (8009160 <_malloc_r+0xe4>)
 80090a6:	f000 fe43 	bl	8009d30 <__malloc_lock>
 80090aa:	6833      	ldr	r3, [r6, #0]
 80090ac:	461c      	mov	r4, r3
 80090ae:	bb34      	cbnz	r4, 80090fe <_malloc_r+0x82>
 80090b0:	4629      	mov	r1, r5
 80090b2:	4638      	mov	r0, r7
 80090b4:	f7ff ffc2 	bl	800903c <sbrk_aligned>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	4604      	mov	r4, r0
 80090bc:	d14d      	bne.n	800915a <_malloc_r+0xde>
 80090be:	6834      	ldr	r4, [r6, #0]
 80090c0:	4626      	mov	r6, r4
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	d140      	bne.n	8009148 <_malloc_r+0xcc>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	4631      	mov	r1, r6
 80090ca:	4638      	mov	r0, r7
 80090cc:	eb04 0803 	add.w	r8, r4, r3
 80090d0:	f000 fb36 	bl	8009740 <_sbrk_r>
 80090d4:	4580      	cmp	r8, r0
 80090d6:	d13a      	bne.n	800914e <_malloc_r+0xd2>
 80090d8:	6821      	ldr	r1, [r4, #0]
 80090da:	3503      	adds	r5, #3
 80090dc:	1a6d      	subs	r5, r5, r1
 80090de:	f025 0503 	bic.w	r5, r5, #3
 80090e2:	3508      	adds	r5, #8
 80090e4:	2d0c      	cmp	r5, #12
 80090e6:	bf38      	it	cc
 80090e8:	250c      	movcc	r5, #12
 80090ea:	4629      	mov	r1, r5
 80090ec:	4638      	mov	r0, r7
 80090ee:	f7ff ffa5 	bl	800903c <sbrk_aligned>
 80090f2:	3001      	adds	r0, #1
 80090f4:	d02b      	beq.n	800914e <_malloc_r+0xd2>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	442b      	add	r3, r5
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	e00e      	b.n	800911c <_malloc_r+0xa0>
 80090fe:	6822      	ldr	r2, [r4, #0]
 8009100:	1b52      	subs	r2, r2, r5
 8009102:	d41e      	bmi.n	8009142 <_malloc_r+0xc6>
 8009104:	2a0b      	cmp	r2, #11
 8009106:	d916      	bls.n	8009136 <_malloc_r+0xba>
 8009108:	1961      	adds	r1, r4, r5
 800910a:	42a3      	cmp	r3, r4
 800910c:	6025      	str	r5, [r4, #0]
 800910e:	bf18      	it	ne
 8009110:	6059      	strne	r1, [r3, #4]
 8009112:	6863      	ldr	r3, [r4, #4]
 8009114:	bf08      	it	eq
 8009116:	6031      	streq	r1, [r6, #0]
 8009118:	5162      	str	r2, [r4, r5]
 800911a:	604b      	str	r3, [r1, #4]
 800911c:	4638      	mov	r0, r7
 800911e:	f104 060b 	add.w	r6, r4, #11
 8009122:	f000 fe0b 	bl	8009d3c <__malloc_unlock>
 8009126:	f026 0607 	bic.w	r6, r6, #7
 800912a:	1d23      	adds	r3, r4, #4
 800912c:	1af2      	subs	r2, r6, r3
 800912e:	d0b6      	beq.n	800909e <_malloc_r+0x22>
 8009130:	1b9b      	subs	r3, r3, r6
 8009132:	50a3      	str	r3, [r4, r2]
 8009134:	e7b3      	b.n	800909e <_malloc_r+0x22>
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	42a3      	cmp	r3, r4
 800913a:	bf0c      	ite	eq
 800913c:	6032      	streq	r2, [r6, #0]
 800913e:	605a      	strne	r2, [r3, #4]
 8009140:	e7ec      	b.n	800911c <_malloc_r+0xa0>
 8009142:	4623      	mov	r3, r4
 8009144:	6864      	ldr	r4, [r4, #4]
 8009146:	e7b2      	b.n	80090ae <_malloc_r+0x32>
 8009148:	4634      	mov	r4, r6
 800914a:	6876      	ldr	r6, [r6, #4]
 800914c:	e7b9      	b.n	80090c2 <_malloc_r+0x46>
 800914e:	230c      	movs	r3, #12
 8009150:	603b      	str	r3, [r7, #0]
 8009152:	4638      	mov	r0, r7
 8009154:	f000 fdf2 	bl	8009d3c <__malloc_unlock>
 8009158:	e7a1      	b.n	800909e <_malloc_r+0x22>
 800915a:	6025      	str	r5, [r4, #0]
 800915c:	e7de      	b.n	800911c <_malloc_r+0xa0>
 800915e:	bf00      	nop
 8009160:	20000b4c 	.word	0x20000b4c

08009164 <__sfputc_r>:
 8009164:	6893      	ldr	r3, [r2, #8]
 8009166:	3b01      	subs	r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	b410      	push	{r4}
 800916c:	6093      	str	r3, [r2, #8]
 800916e:	da08      	bge.n	8009182 <__sfputc_r+0x1e>
 8009170:	6994      	ldr	r4, [r2, #24]
 8009172:	42a3      	cmp	r3, r4
 8009174:	db01      	blt.n	800917a <__sfputc_r+0x16>
 8009176:	290a      	cmp	r1, #10
 8009178:	d103      	bne.n	8009182 <__sfputc_r+0x1e>
 800917a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917e:	f000 baef 	b.w	8009760 <__swbuf_r>
 8009182:	6813      	ldr	r3, [r2, #0]
 8009184:	1c58      	adds	r0, r3, #1
 8009186:	6010      	str	r0, [r2, #0]
 8009188:	7019      	strb	r1, [r3, #0]
 800918a:	4608      	mov	r0, r1
 800918c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009190:	4770      	bx	lr

08009192 <__sfputs_r>:
 8009192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	4614      	mov	r4, r2
 800919a:	18d5      	adds	r5, r2, r3
 800919c:	42ac      	cmp	r4, r5
 800919e:	d101      	bne.n	80091a4 <__sfputs_r+0x12>
 80091a0:	2000      	movs	r0, #0
 80091a2:	e007      	b.n	80091b4 <__sfputs_r+0x22>
 80091a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a8:	463a      	mov	r2, r7
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7ff ffda 	bl	8009164 <__sfputc_r>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d1f3      	bne.n	800919c <__sfputs_r+0xa>
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091b8 <_vfiprintf_r>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	460d      	mov	r5, r1
 80091be:	b09d      	sub	sp, #116	; 0x74
 80091c0:	4614      	mov	r4, r2
 80091c2:	4698      	mov	r8, r3
 80091c4:	4606      	mov	r6, r0
 80091c6:	b118      	cbz	r0, 80091d0 <_vfiprintf_r+0x18>
 80091c8:	6983      	ldr	r3, [r0, #24]
 80091ca:	b90b      	cbnz	r3, 80091d0 <_vfiprintf_r+0x18>
 80091cc:	f000 fcaa 	bl	8009b24 <__sinit>
 80091d0:	4b89      	ldr	r3, [pc, #548]	; (80093f8 <_vfiprintf_r+0x240>)
 80091d2:	429d      	cmp	r5, r3
 80091d4:	d11b      	bne.n	800920e <_vfiprintf_r+0x56>
 80091d6:	6875      	ldr	r5, [r6, #4]
 80091d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091da:	07d9      	lsls	r1, r3, #31
 80091dc:	d405      	bmi.n	80091ea <_vfiprintf_r+0x32>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	059a      	lsls	r2, r3, #22
 80091e2:	d402      	bmi.n	80091ea <_vfiprintf_r+0x32>
 80091e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091e6:	f000 fd3b 	bl	8009c60 <__retarget_lock_acquire_recursive>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	071b      	lsls	r3, r3, #28
 80091ee:	d501      	bpl.n	80091f4 <_vfiprintf_r+0x3c>
 80091f0:	692b      	ldr	r3, [r5, #16]
 80091f2:	b9eb      	cbnz	r3, 8009230 <_vfiprintf_r+0x78>
 80091f4:	4629      	mov	r1, r5
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 fb04 	bl	8009804 <__swsetup_r>
 80091fc:	b1c0      	cbz	r0, 8009230 <_vfiprintf_r+0x78>
 80091fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009200:	07dc      	lsls	r4, r3, #31
 8009202:	d50e      	bpl.n	8009222 <_vfiprintf_r+0x6a>
 8009204:	f04f 30ff 	mov.w	r0, #4294967295
 8009208:	b01d      	add	sp, #116	; 0x74
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	4b7b      	ldr	r3, [pc, #492]	; (80093fc <_vfiprintf_r+0x244>)
 8009210:	429d      	cmp	r5, r3
 8009212:	d101      	bne.n	8009218 <_vfiprintf_r+0x60>
 8009214:	68b5      	ldr	r5, [r6, #8]
 8009216:	e7df      	b.n	80091d8 <_vfiprintf_r+0x20>
 8009218:	4b79      	ldr	r3, [pc, #484]	; (8009400 <_vfiprintf_r+0x248>)
 800921a:	429d      	cmp	r5, r3
 800921c:	bf08      	it	eq
 800921e:	68f5      	ldreq	r5, [r6, #12]
 8009220:	e7da      	b.n	80091d8 <_vfiprintf_r+0x20>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	0598      	lsls	r0, r3, #22
 8009226:	d4ed      	bmi.n	8009204 <_vfiprintf_r+0x4c>
 8009228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800922a:	f000 fd1a 	bl	8009c62 <__retarget_lock_release_recursive>
 800922e:	e7e9      	b.n	8009204 <_vfiprintf_r+0x4c>
 8009230:	2300      	movs	r3, #0
 8009232:	9309      	str	r3, [sp, #36]	; 0x24
 8009234:	2320      	movs	r3, #32
 8009236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800923a:	f8cd 800c 	str.w	r8, [sp, #12]
 800923e:	2330      	movs	r3, #48	; 0x30
 8009240:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009404 <_vfiprintf_r+0x24c>
 8009244:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009248:	f04f 0901 	mov.w	r9, #1
 800924c:	4623      	mov	r3, r4
 800924e:	469a      	mov	sl, r3
 8009250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009254:	b10a      	cbz	r2, 800925a <_vfiprintf_r+0xa2>
 8009256:	2a25      	cmp	r2, #37	; 0x25
 8009258:	d1f9      	bne.n	800924e <_vfiprintf_r+0x96>
 800925a:	ebba 0b04 	subs.w	fp, sl, r4
 800925e:	d00b      	beq.n	8009278 <_vfiprintf_r+0xc0>
 8009260:	465b      	mov	r3, fp
 8009262:	4622      	mov	r2, r4
 8009264:	4629      	mov	r1, r5
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ff93 	bl	8009192 <__sfputs_r>
 800926c:	3001      	adds	r0, #1
 800926e:	f000 80aa 	beq.w	80093c6 <_vfiprintf_r+0x20e>
 8009272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009274:	445a      	add	r2, fp
 8009276:	9209      	str	r2, [sp, #36]	; 0x24
 8009278:	f89a 3000 	ldrb.w	r3, [sl]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80a2 	beq.w	80093c6 <_vfiprintf_r+0x20e>
 8009282:	2300      	movs	r3, #0
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800928c:	f10a 0a01 	add.w	sl, sl, #1
 8009290:	9304      	str	r3, [sp, #16]
 8009292:	9307      	str	r3, [sp, #28]
 8009294:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009298:	931a      	str	r3, [sp, #104]	; 0x68
 800929a:	4654      	mov	r4, sl
 800929c:	2205      	movs	r2, #5
 800929e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a2:	4858      	ldr	r0, [pc, #352]	; (8009404 <_vfiprintf_r+0x24c>)
 80092a4:	f7f6 ff9c 	bl	80001e0 <memchr>
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	b9d8      	cbnz	r0, 80092e4 <_vfiprintf_r+0x12c>
 80092ac:	06d1      	lsls	r1, r2, #27
 80092ae:	bf44      	itt	mi
 80092b0:	2320      	movmi	r3, #32
 80092b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b6:	0713      	lsls	r3, r2, #28
 80092b8:	bf44      	itt	mi
 80092ba:	232b      	movmi	r3, #43	; 0x2b
 80092bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b2a      	cmp	r3, #42	; 0x2a
 80092c6:	d015      	beq.n	80092f4 <_vfiprintf_r+0x13c>
 80092c8:	9a07      	ldr	r2, [sp, #28]
 80092ca:	4654      	mov	r4, sl
 80092cc:	2000      	movs	r0, #0
 80092ce:	f04f 0c0a 	mov.w	ip, #10
 80092d2:	4621      	mov	r1, r4
 80092d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092d8:	3b30      	subs	r3, #48	; 0x30
 80092da:	2b09      	cmp	r3, #9
 80092dc:	d94e      	bls.n	800937c <_vfiprintf_r+0x1c4>
 80092de:	b1b0      	cbz	r0, 800930e <_vfiprintf_r+0x156>
 80092e0:	9207      	str	r2, [sp, #28]
 80092e2:	e014      	b.n	800930e <_vfiprintf_r+0x156>
 80092e4:	eba0 0308 	sub.w	r3, r0, r8
 80092e8:	fa09 f303 	lsl.w	r3, r9, r3
 80092ec:	4313      	orrs	r3, r2
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	46a2      	mov	sl, r4
 80092f2:	e7d2      	b.n	800929a <_vfiprintf_r+0xe2>
 80092f4:	9b03      	ldr	r3, [sp, #12]
 80092f6:	1d19      	adds	r1, r3, #4
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	9103      	str	r1, [sp, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	bfbb      	ittet	lt
 8009300:	425b      	neglt	r3, r3
 8009302:	f042 0202 	orrlt.w	r2, r2, #2
 8009306:	9307      	strge	r3, [sp, #28]
 8009308:	9307      	strlt	r3, [sp, #28]
 800930a:	bfb8      	it	lt
 800930c:	9204      	strlt	r2, [sp, #16]
 800930e:	7823      	ldrb	r3, [r4, #0]
 8009310:	2b2e      	cmp	r3, #46	; 0x2e
 8009312:	d10c      	bne.n	800932e <_vfiprintf_r+0x176>
 8009314:	7863      	ldrb	r3, [r4, #1]
 8009316:	2b2a      	cmp	r3, #42	; 0x2a
 8009318:	d135      	bne.n	8009386 <_vfiprintf_r+0x1ce>
 800931a:	9b03      	ldr	r3, [sp, #12]
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	9203      	str	r2, [sp, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfb8      	it	lt
 8009326:	f04f 33ff 	movlt.w	r3, #4294967295
 800932a:	3402      	adds	r4, #2
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009414 <_vfiprintf_r+0x25c>
 8009332:	7821      	ldrb	r1, [r4, #0]
 8009334:	2203      	movs	r2, #3
 8009336:	4650      	mov	r0, sl
 8009338:	f7f6 ff52 	bl	80001e0 <memchr>
 800933c:	b140      	cbz	r0, 8009350 <_vfiprintf_r+0x198>
 800933e:	2340      	movs	r3, #64	; 0x40
 8009340:	eba0 000a 	sub.w	r0, r0, sl
 8009344:	fa03 f000 	lsl.w	r0, r3, r0
 8009348:	9b04      	ldr	r3, [sp, #16]
 800934a:	4303      	orrs	r3, r0
 800934c:	3401      	adds	r4, #1
 800934e:	9304      	str	r3, [sp, #16]
 8009350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009354:	482c      	ldr	r0, [pc, #176]	; (8009408 <_vfiprintf_r+0x250>)
 8009356:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800935a:	2206      	movs	r2, #6
 800935c:	f7f6 ff40 	bl	80001e0 <memchr>
 8009360:	2800      	cmp	r0, #0
 8009362:	d03f      	beq.n	80093e4 <_vfiprintf_r+0x22c>
 8009364:	4b29      	ldr	r3, [pc, #164]	; (800940c <_vfiprintf_r+0x254>)
 8009366:	bb1b      	cbnz	r3, 80093b0 <_vfiprintf_r+0x1f8>
 8009368:	9b03      	ldr	r3, [sp, #12]
 800936a:	3307      	adds	r3, #7
 800936c:	f023 0307 	bic.w	r3, r3, #7
 8009370:	3308      	adds	r3, #8
 8009372:	9303      	str	r3, [sp, #12]
 8009374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009376:	443b      	add	r3, r7
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
 800937a:	e767      	b.n	800924c <_vfiprintf_r+0x94>
 800937c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009380:	460c      	mov	r4, r1
 8009382:	2001      	movs	r0, #1
 8009384:	e7a5      	b.n	80092d2 <_vfiprintf_r+0x11a>
 8009386:	2300      	movs	r3, #0
 8009388:	3401      	adds	r4, #1
 800938a:	9305      	str	r3, [sp, #20]
 800938c:	4619      	mov	r1, r3
 800938e:	f04f 0c0a 	mov.w	ip, #10
 8009392:	4620      	mov	r0, r4
 8009394:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009398:	3a30      	subs	r2, #48	; 0x30
 800939a:	2a09      	cmp	r2, #9
 800939c:	d903      	bls.n	80093a6 <_vfiprintf_r+0x1ee>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0c5      	beq.n	800932e <_vfiprintf_r+0x176>
 80093a2:	9105      	str	r1, [sp, #20]
 80093a4:	e7c3      	b.n	800932e <_vfiprintf_r+0x176>
 80093a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093aa:	4604      	mov	r4, r0
 80093ac:	2301      	movs	r3, #1
 80093ae:	e7f0      	b.n	8009392 <_vfiprintf_r+0x1da>
 80093b0:	ab03      	add	r3, sp, #12
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	462a      	mov	r2, r5
 80093b6:	4b16      	ldr	r3, [pc, #88]	; (8009410 <_vfiprintf_r+0x258>)
 80093b8:	a904      	add	r1, sp, #16
 80093ba:	4630      	mov	r0, r6
 80093bc:	f3af 8000 	nop.w
 80093c0:	4607      	mov	r7, r0
 80093c2:	1c78      	adds	r0, r7, #1
 80093c4:	d1d6      	bne.n	8009374 <_vfiprintf_r+0x1bc>
 80093c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093c8:	07d9      	lsls	r1, r3, #31
 80093ca:	d405      	bmi.n	80093d8 <_vfiprintf_r+0x220>
 80093cc:	89ab      	ldrh	r3, [r5, #12]
 80093ce:	059a      	lsls	r2, r3, #22
 80093d0:	d402      	bmi.n	80093d8 <_vfiprintf_r+0x220>
 80093d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093d4:	f000 fc45 	bl	8009c62 <__retarget_lock_release_recursive>
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	065b      	lsls	r3, r3, #25
 80093dc:	f53f af12 	bmi.w	8009204 <_vfiprintf_r+0x4c>
 80093e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e2:	e711      	b.n	8009208 <_vfiprintf_r+0x50>
 80093e4:	ab03      	add	r3, sp, #12
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	462a      	mov	r2, r5
 80093ea:	4b09      	ldr	r3, [pc, #36]	; (8009410 <_vfiprintf_r+0x258>)
 80093ec:	a904      	add	r1, sp, #16
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f880 	bl	80094f4 <_printf_i>
 80093f4:	e7e4      	b.n	80093c0 <_vfiprintf_r+0x208>
 80093f6:	bf00      	nop
 80093f8:	0800a3c0 	.word	0x0800a3c0
 80093fc:	0800a3e0 	.word	0x0800a3e0
 8009400:	0800a3a0 	.word	0x0800a3a0
 8009404:	0800a36d 	.word	0x0800a36d
 8009408:	0800a377 	.word	0x0800a377
 800940c:	00000000 	.word	0x00000000
 8009410:	08009193 	.word	0x08009193
 8009414:	0800a373 	.word	0x0800a373

08009418 <_printf_common>:
 8009418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	4616      	mov	r6, r2
 800941e:	4699      	mov	r9, r3
 8009420:	688a      	ldr	r2, [r1, #8]
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009428:	4293      	cmp	r3, r2
 800942a:	bfb8      	it	lt
 800942c:	4613      	movlt	r3, r2
 800942e:	6033      	str	r3, [r6, #0]
 8009430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009434:	4607      	mov	r7, r0
 8009436:	460c      	mov	r4, r1
 8009438:	b10a      	cbz	r2, 800943e <_printf_common+0x26>
 800943a:	3301      	adds	r3, #1
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	0699      	lsls	r1, r3, #26
 8009442:	bf42      	ittt	mi
 8009444:	6833      	ldrmi	r3, [r6, #0]
 8009446:	3302      	addmi	r3, #2
 8009448:	6033      	strmi	r3, [r6, #0]
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	f015 0506 	ands.w	r5, r5, #6
 8009450:	d106      	bne.n	8009460 <_printf_common+0x48>
 8009452:	f104 0a19 	add.w	sl, r4, #25
 8009456:	68e3      	ldr	r3, [r4, #12]
 8009458:	6832      	ldr	r2, [r6, #0]
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	42ab      	cmp	r3, r5
 800945e:	dc26      	bgt.n	80094ae <_printf_common+0x96>
 8009460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009464:	1e13      	subs	r3, r2, #0
 8009466:	6822      	ldr	r2, [r4, #0]
 8009468:	bf18      	it	ne
 800946a:	2301      	movne	r3, #1
 800946c:	0692      	lsls	r2, r2, #26
 800946e:	d42b      	bmi.n	80094c8 <_printf_common+0xb0>
 8009470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009474:	4649      	mov	r1, r9
 8009476:	4638      	mov	r0, r7
 8009478:	47c0      	blx	r8
 800947a:	3001      	adds	r0, #1
 800947c:	d01e      	beq.n	80094bc <_printf_common+0xa4>
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	68e5      	ldr	r5, [r4, #12]
 8009482:	6832      	ldr	r2, [r6, #0]
 8009484:	f003 0306 	and.w	r3, r3, #6
 8009488:	2b04      	cmp	r3, #4
 800948a:	bf08      	it	eq
 800948c:	1aad      	subeq	r5, r5, r2
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	bf0c      	ite	eq
 8009494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009498:	2500      	movne	r5, #0
 800949a:	4293      	cmp	r3, r2
 800949c:	bfc4      	itt	gt
 800949e:	1a9b      	subgt	r3, r3, r2
 80094a0:	18ed      	addgt	r5, r5, r3
 80094a2:	2600      	movs	r6, #0
 80094a4:	341a      	adds	r4, #26
 80094a6:	42b5      	cmp	r5, r6
 80094a8:	d11a      	bne.n	80094e0 <_printf_common+0xc8>
 80094aa:	2000      	movs	r0, #0
 80094ac:	e008      	b.n	80094c0 <_printf_common+0xa8>
 80094ae:	2301      	movs	r3, #1
 80094b0:	4652      	mov	r2, sl
 80094b2:	4649      	mov	r1, r9
 80094b4:	4638      	mov	r0, r7
 80094b6:	47c0      	blx	r8
 80094b8:	3001      	adds	r0, #1
 80094ba:	d103      	bne.n	80094c4 <_printf_common+0xac>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c4:	3501      	adds	r5, #1
 80094c6:	e7c6      	b.n	8009456 <_printf_common+0x3e>
 80094c8:	18e1      	adds	r1, r4, r3
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	2030      	movs	r0, #48	; 0x30
 80094ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094d2:	4422      	add	r2, r4
 80094d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094dc:	3302      	adds	r3, #2
 80094de:	e7c7      	b.n	8009470 <_printf_common+0x58>
 80094e0:	2301      	movs	r3, #1
 80094e2:	4622      	mov	r2, r4
 80094e4:	4649      	mov	r1, r9
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c0      	blx	r8
 80094ea:	3001      	adds	r0, #1
 80094ec:	d0e6      	beq.n	80094bc <_printf_common+0xa4>
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7d9      	b.n	80094a6 <_printf_common+0x8e>
	...

080094f4 <_printf_i>:
 80094f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094f8:	7e0f      	ldrb	r7, [r1, #24]
 80094fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094fc:	2f78      	cmp	r7, #120	; 0x78
 80094fe:	4691      	mov	r9, r2
 8009500:	4680      	mov	r8, r0
 8009502:	460c      	mov	r4, r1
 8009504:	469a      	mov	sl, r3
 8009506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800950a:	d807      	bhi.n	800951c <_printf_i+0x28>
 800950c:	2f62      	cmp	r7, #98	; 0x62
 800950e:	d80a      	bhi.n	8009526 <_printf_i+0x32>
 8009510:	2f00      	cmp	r7, #0
 8009512:	f000 80d8 	beq.w	80096c6 <_printf_i+0x1d2>
 8009516:	2f58      	cmp	r7, #88	; 0x58
 8009518:	f000 80a3 	beq.w	8009662 <_printf_i+0x16e>
 800951c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009524:	e03a      	b.n	800959c <_printf_i+0xa8>
 8009526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800952a:	2b15      	cmp	r3, #21
 800952c:	d8f6      	bhi.n	800951c <_printf_i+0x28>
 800952e:	a101      	add	r1, pc, #4	; (adr r1, 8009534 <_printf_i+0x40>)
 8009530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009534:	0800958d 	.word	0x0800958d
 8009538:	080095a1 	.word	0x080095a1
 800953c:	0800951d 	.word	0x0800951d
 8009540:	0800951d 	.word	0x0800951d
 8009544:	0800951d 	.word	0x0800951d
 8009548:	0800951d 	.word	0x0800951d
 800954c:	080095a1 	.word	0x080095a1
 8009550:	0800951d 	.word	0x0800951d
 8009554:	0800951d 	.word	0x0800951d
 8009558:	0800951d 	.word	0x0800951d
 800955c:	0800951d 	.word	0x0800951d
 8009560:	080096ad 	.word	0x080096ad
 8009564:	080095d1 	.word	0x080095d1
 8009568:	0800968f 	.word	0x0800968f
 800956c:	0800951d 	.word	0x0800951d
 8009570:	0800951d 	.word	0x0800951d
 8009574:	080096cf 	.word	0x080096cf
 8009578:	0800951d 	.word	0x0800951d
 800957c:	080095d1 	.word	0x080095d1
 8009580:	0800951d 	.word	0x0800951d
 8009584:	0800951d 	.word	0x0800951d
 8009588:	08009697 	.word	0x08009697
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	602a      	str	r2, [r5, #0]
 8009594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800959c:	2301      	movs	r3, #1
 800959e:	e0a3      	b.n	80096e8 <_printf_i+0x1f4>
 80095a0:	6820      	ldr	r0, [r4, #0]
 80095a2:	6829      	ldr	r1, [r5, #0]
 80095a4:	0606      	lsls	r6, r0, #24
 80095a6:	f101 0304 	add.w	r3, r1, #4
 80095aa:	d50a      	bpl.n	80095c2 <_printf_i+0xce>
 80095ac:	680e      	ldr	r6, [r1, #0]
 80095ae:	602b      	str	r3, [r5, #0]
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	da03      	bge.n	80095bc <_printf_i+0xc8>
 80095b4:	232d      	movs	r3, #45	; 0x2d
 80095b6:	4276      	negs	r6, r6
 80095b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095bc:	485e      	ldr	r0, [pc, #376]	; (8009738 <_printf_i+0x244>)
 80095be:	230a      	movs	r3, #10
 80095c0:	e019      	b.n	80095f6 <_printf_i+0x102>
 80095c2:	680e      	ldr	r6, [r1, #0]
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095ca:	bf18      	it	ne
 80095cc:	b236      	sxthne	r6, r6
 80095ce:	e7ef      	b.n	80095b0 <_printf_i+0xbc>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	6820      	ldr	r0, [r4, #0]
 80095d4:	1d19      	adds	r1, r3, #4
 80095d6:	6029      	str	r1, [r5, #0]
 80095d8:	0601      	lsls	r1, r0, #24
 80095da:	d501      	bpl.n	80095e0 <_printf_i+0xec>
 80095dc:	681e      	ldr	r6, [r3, #0]
 80095de:	e002      	b.n	80095e6 <_printf_i+0xf2>
 80095e0:	0646      	lsls	r6, r0, #25
 80095e2:	d5fb      	bpl.n	80095dc <_printf_i+0xe8>
 80095e4:	881e      	ldrh	r6, [r3, #0]
 80095e6:	4854      	ldr	r0, [pc, #336]	; (8009738 <_printf_i+0x244>)
 80095e8:	2f6f      	cmp	r7, #111	; 0x6f
 80095ea:	bf0c      	ite	eq
 80095ec:	2308      	moveq	r3, #8
 80095ee:	230a      	movne	r3, #10
 80095f0:	2100      	movs	r1, #0
 80095f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f6:	6865      	ldr	r5, [r4, #4]
 80095f8:	60a5      	str	r5, [r4, #8]
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	bfa2      	ittt	ge
 80095fe:	6821      	ldrge	r1, [r4, #0]
 8009600:	f021 0104 	bicge.w	r1, r1, #4
 8009604:	6021      	strge	r1, [r4, #0]
 8009606:	b90e      	cbnz	r6, 800960c <_printf_i+0x118>
 8009608:	2d00      	cmp	r5, #0
 800960a:	d04d      	beq.n	80096a8 <_printf_i+0x1b4>
 800960c:	4615      	mov	r5, r2
 800960e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009612:	fb03 6711 	mls	r7, r3, r1, r6
 8009616:	5dc7      	ldrb	r7, [r0, r7]
 8009618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800961c:	4637      	mov	r7, r6
 800961e:	42bb      	cmp	r3, r7
 8009620:	460e      	mov	r6, r1
 8009622:	d9f4      	bls.n	800960e <_printf_i+0x11a>
 8009624:	2b08      	cmp	r3, #8
 8009626:	d10b      	bne.n	8009640 <_printf_i+0x14c>
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	07de      	lsls	r6, r3, #31
 800962c:	d508      	bpl.n	8009640 <_printf_i+0x14c>
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	4299      	cmp	r1, r3
 8009634:	bfde      	ittt	le
 8009636:	2330      	movle	r3, #48	; 0x30
 8009638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800963c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009640:	1b52      	subs	r2, r2, r5
 8009642:	6122      	str	r2, [r4, #16]
 8009644:	f8cd a000 	str.w	sl, [sp]
 8009648:	464b      	mov	r3, r9
 800964a:	aa03      	add	r2, sp, #12
 800964c:	4621      	mov	r1, r4
 800964e:	4640      	mov	r0, r8
 8009650:	f7ff fee2 	bl	8009418 <_printf_common>
 8009654:	3001      	adds	r0, #1
 8009656:	d14c      	bne.n	80096f2 <_printf_i+0x1fe>
 8009658:	f04f 30ff 	mov.w	r0, #4294967295
 800965c:	b004      	add	sp, #16
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	4835      	ldr	r0, [pc, #212]	; (8009738 <_printf_i+0x244>)
 8009664:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009668:	6829      	ldr	r1, [r5, #0]
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009670:	6029      	str	r1, [r5, #0]
 8009672:	061d      	lsls	r5, r3, #24
 8009674:	d514      	bpl.n	80096a0 <_printf_i+0x1ac>
 8009676:	07df      	lsls	r7, r3, #31
 8009678:	bf44      	itt	mi
 800967a:	f043 0320 	orrmi.w	r3, r3, #32
 800967e:	6023      	strmi	r3, [r4, #0]
 8009680:	b91e      	cbnz	r6, 800968a <_printf_i+0x196>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	f023 0320 	bic.w	r3, r3, #32
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	2310      	movs	r3, #16
 800968c:	e7b0      	b.n	80095f0 <_printf_i+0xfc>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f043 0320 	orr.w	r3, r3, #32
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	2378      	movs	r3, #120	; 0x78
 8009698:	4828      	ldr	r0, [pc, #160]	; (800973c <_printf_i+0x248>)
 800969a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800969e:	e7e3      	b.n	8009668 <_printf_i+0x174>
 80096a0:	0659      	lsls	r1, r3, #25
 80096a2:	bf48      	it	mi
 80096a4:	b2b6      	uxthmi	r6, r6
 80096a6:	e7e6      	b.n	8009676 <_printf_i+0x182>
 80096a8:	4615      	mov	r5, r2
 80096aa:	e7bb      	b.n	8009624 <_printf_i+0x130>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	6826      	ldr	r6, [r4, #0]
 80096b0:	6961      	ldr	r1, [r4, #20]
 80096b2:	1d18      	adds	r0, r3, #4
 80096b4:	6028      	str	r0, [r5, #0]
 80096b6:	0635      	lsls	r5, r6, #24
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	d501      	bpl.n	80096c0 <_printf_i+0x1cc>
 80096bc:	6019      	str	r1, [r3, #0]
 80096be:	e002      	b.n	80096c6 <_printf_i+0x1d2>
 80096c0:	0670      	lsls	r0, r6, #25
 80096c2:	d5fb      	bpl.n	80096bc <_printf_i+0x1c8>
 80096c4:	8019      	strh	r1, [r3, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	6123      	str	r3, [r4, #16]
 80096ca:	4615      	mov	r5, r2
 80096cc:	e7ba      	b.n	8009644 <_printf_i+0x150>
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	1d1a      	adds	r2, r3, #4
 80096d2:	602a      	str	r2, [r5, #0]
 80096d4:	681d      	ldr	r5, [r3, #0]
 80096d6:	6862      	ldr	r2, [r4, #4]
 80096d8:	2100      	movs	r1, #0
 80096da:	4628      	mov	r0, r5
 80096dc:	f7f6 fd80 	bl	80001e0 <memchr>
 80096e0:	b108      	cbz	r0, 80096e6 <_printf_i+0x1f2>
 80096e2:	1b40      	subs	r0, r0, r5
 80096e4:	6060      	str	r0, [r4, #4]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	2300      	movs	r3, #0
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f0:	e7a8      	b.n	8009644 <_printf_i+0x150>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	462a      	mov	r2, r5
 80096f6:	4649      	mov	r1, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	47d0      	blx	sl
 80096fc:	3001      	adds	r0, #1
 80096fe:	d0ab      	beq.n	8009658 <_printf_i+0x164>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	079b      	lsls	r3, r3, #30
 8009704:	d413      	bmi.n	800972e <_printf_i+0x23a>
 8009706:	68e0      	ldr	r0, [r4, #12]
 8009708:	9b03      	ldr	r3, [sp, #12]
 800970a:	4298      	cmp	r0, r3
 800970c:	bfb8      	it	lt
 800970e:	4618      	movlt	r0, r3
 8009710:	e7a4      	b.n	800965c <_printf_i+0x168>
 8009712:	2301      	movs	r3, #1
 8009714:	4632      	mov	r2, r6
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	47d0      	blx	sl
 800971c:	3001      	adds	r0, #1
 800971e:	d09b      	beq.n	8009658 <_printf_i+0x164>
 8009720:	3501      	adds	r5, #1
 8009722:	68e3      	ldr	r3, [r4, #12]
 8009724:	9903      	ldr	r1, [sp, #12]
 8009726:	1a5b      	subs	r3, r3, r1
 8009728:	42ab      	cmp	r3, r5
 800972a:	dcf2      	bgt.n	8009712 <_printf_i+0x21e>
 800972c:	e7eb      	b.n	8009706 <_printf_i+0x212>
 800972e:	2500      	movs	r5, #0
 8009730:	f104 0619 	add.w	r6, r4, #25
 8009734:	e7f5      	b.n	8009722 <_printf_i+0x22e>
 8009736:	bf00      	nop
 8009738:	0800a37e 	.word	0x0800a37e
 800973c:	0800a38f 	.word	0x0800a38f

08009740 <_sbrk_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d06      	ldr	r5, [pc, #24]	; (800975c <_sbrk_r+0x1c>)
 8009744:	2300      	movs	r3, #0
 8009746:	4604      	mov	r4, r0
 8009748:	4608      	mov	r0, r1
 800974a:	602b      	str	r3, [r5, #0]
 800974c:	f7f8 ff86 	bl	800265c <_sbrk>
 8009750:	1c43      	adds	r3, r0, #1
 8009752:	d102      	bne.n	800975a <_sbrk_r+0x1a>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b103      	cbz	r3, 800975a <_sbrk_r+0x1a>
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	bd38      	pop	{r3, r4, r5, pc}
 800975c:	20000b58 	.word	0x20000b58

08009760 <__swbuf_r>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	460e      	mov	r6, r1
 8009764:	4614      	mov	r4, r2
 8009766:	4605      	mov	r5, r0
 8009768:	b118      	cbz	r0, 8009772 <__swbuf_r+0x12>
 800976a:	6983      	ldr	r3, [r0, #24]
 800976c:	b90b      	cbnz	r3, 8009772 <__swbuf_r+0x12>
 800976e:	f000 f9d9 	bl	8009b24 <__sinit>
 8009772:	4b21      	ldr	r3, [pc, #132]	; (80097f8 <__swbuf_r+0x98>)
 8009774:	429c      	cmp	r4, r3
 8009776:	d12b      	bne.n	80097d0 <__swbuf_r+0x70>
 8009778:	686c      	ldr	r4, [r5, #4]
 800977a:	69a3      	ldr	r3, [r4, #24]
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	071a      	lsls	r2, r3, #28
 8009782:	d52f      	bpl.n	80097e4 <__swbuf_r+0x84>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	b36b      	cbz	r3, 80097e4 <__swbuf_r+0x84>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	6820      	ldr	r0, [r4, #0]
 800978c:	1ac0      	subs	r0, r0, r3
 800978e:	6963      	ldr	r3, [r4, #20]
 8009790:	b2f6      	uxtb	r6, r6
 8009792:	4283      	cmp	r3, r0
 8009794:	4637      	mov	r7, r6
 8009796:	dc04      	bgt.n	80097a2 <__swbuf_r+0x42>
 8009798:	4621      	mov	r1, r4
 800979a:	4628      	mov	r0, r5
 800979c:	f000 f92e 	bl	80099fc <_fflush_r>
 80097a0:	bb30      	cbnz	r0, 80097f0 <__swbuf_r+0x90>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	701e      	strb	r6, [r3, #0]
 80097b0:	6963      	ldr	r3, [r4, #20]
 80097b2:	3001      	adds	r0, #1
 80097b4:	4283      	cmp	r3, r0
 80097b6:	d004      	beq.n	80097c2 <__swbuf_r+0x62>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d506      	bpl.n	80097cc <__swbuf_r+0x6c>
 80097be:	2e0a      	cmp	r6, #10
 80097c0:	d104      	bne.n	80097cc <__swbuf_r+0x6c>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 f919 	bl	80099fc <_fflush_r>
 80097ca:	b988      	cbnz	r0, 80097f0 <__swbuf_r+0x90>
 80097cc:	4638      	mov	r0, r7
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <__swbuf_r+0x9c>)
 80097d2:	429c      	cmp	r4, r3
 80097d4:	d101      	bne.n	80097da <__swbuf_r+0x7a>
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	e7cf      	b.n	800977a <__swbuf_r+0x1a>
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <__swbuf_r+0xa0>)
 80097dc:	429c      	cmp	r4, r3
 80097de:	bf08      	it	eq
 80097e0:	68ec      	ldreq	r4, [r5, #12]
 80097e2:	e7ca      	b.n	800977a <__swbuf_r+0x1a>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4628      	mov	r0, r5
 80097e8:	f000 f80c 	bl	8009804 <__swsetup_r>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d0cb      	beq.n	8009788 <__swbuf_r+0x28>
 80097f0:	f04f 37ff 	mov.w	r7, #4294967295
 80097f4:	e7ea      	b.n	80097cc <__swbuf_r+0x6c>
 80097f6:	bf00      	nop
 80097f8:	0800a3c0 	.word	0x0800a3c0
 80097fc:	0800a3e0 	.word	0x0800a3e0
 8009800:	0800a3a0 	.word	0x0800a3a0

08009804 <__swsetup_r>:
 8009804:	4b32      	ldr	r3, [pc, #200]	; (80098d0 <__swsetup_r+0xcc>)
 8009806:	b570      	push	{r4, r5, r6, lr}
 8009808:	681d      	ldr	r5, [r3, #0]
 800980a:	4606      	mov	r6, r0
 800980c:	460c      	mov	r4, r1
 800980e:	b125      	cbz	r5, 800981a <__swsetup_r+0x16>
 8009810:	69ab      	ldr	r3, [r5, #24]
 8009812:	b913      	cbnz	r3, 800981a <__swsetup_r+0x16>
 8009814:	4628      	mov	r0, r5
 8009816:	f000 f985 	bl	8009b24 <__sinit>
 800981a:	4b2e      	ldr	r3, [pc, #184]	; (80098d4 <__swsetup_r+0xd0>)
 800981c:	429c      	cmp	r4, r3
 800981e:	d10f      	bne.n	8009840 <__swsetup_r+0x3c>
 8009820:	686c      	ldr	r4, [r5, #4]
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009828:	0719      	lsls	r1, r3, #28
 800982a:	d42c      	bmi.n	8009886 <__swsetup_r+0x82>
 800982c:	06dd      	lsls	r5, r3, #27
 800982e:	d411      	bmi.n	8009854 <__swsetup_r+0x50>
 8009830:	2309      	movs	r3, #9
 8009832:	6033      	str	r3, [r6, #0]
 8009834:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	f04f 30ff 	mov.w	r0, #4294967295
 800983e:	e03e      	b.n	80098be <__swsetup_r+0xba>
 8009840:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <__swsetup_r+0xd4>)
 8009842:	429c      	cmp	r4, r3
 8009844:	d101      	bne.n	800984a <__swsetup_r+0x46>
 8009846:	68ac      	ldr	r4, [r5, #8]
 8009848:	e7eb      	b.n	8009822 <__swsetup_r+0x1e>
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <__swsetup_r+0xd8>)
 800984c:	429c      	cmp	r4, r3
 800984e:	bf08      	it	eq
 8009850:	68ec      	ldreq	r4, [r5, #12]
 8009852:	e7e6      	b.n	8009822 <__swsetup_r+0x1e>
 8009854:	0758      	lsls	r0, r3, #29
 8009856:	d512      	bpl.n	800987e <__swsetup_r+0x7a>
 8009858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800985a:	b141      	cbz	r1, 800986e <__swsetup_r+0x6a>
 800985c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009860:	4299      	cmp	r1, r3
 8009862:	d002      	beq.n	800986a <__swsetup_r+0x66>
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff fb9d 	bl	8008fa4 <_free_r>
 800986a:	2300      	movs	r3, #0
 800986c:	6363      	str	r3, [r4, #52]	; 0x34
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009874:	81a3      	strh	r3, [r4, #12]
 8009876:	2300      	movs	r3, #0
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	6023      	str	r3, [r4, #0]
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	f043 0308 	orr.w	r3, r3, #8
 8009884:	81a3      	strh	r3, [r4, #12]
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	b94b      	cbnz	r3, 800989e <__swsetup_r+0x9a>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009894:	d003      	beq.n	800989e <__swsetup_r+0x9a>
 8009896:	4621      	mov	r1, r4
 8009898:	4630      	mov	r0, r6
 800989a:	f000 fa09 	bl	8009cb0 <__smakebuf_r>
 800989e:	89a0      	ldrh	r0, [r4, #12]
 80098a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098a4:	f010 0301 	ands.w	r3, r0, #1
 80098a8:	d00a      	beq.n	80098c0 <__swsetup_r+0xbc>
 80098aa:	2300      	movs	r3, #0
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	6963      	ldr	r3, [r4, #20]
 80098b0:	425b      	negs	r3, r3
 80098b2:	61a3      	str	r3, [r4, #24]
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	b943      	cbnz	r3, 80098ca <__swsetup_r+0xc6>
 80098b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098bc:	d1ba      	bne.n	8009834 <__swsetup_r+0x30>
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	0781      	lsls	r1, r0, #30
 80098c2:	bf58      	it	pl
 80098c4:	6963      	ldrpl	r3, [r4, #20]
 80098c6:	60a3      	str	r3, [r4, #8]
 80098c8:	e7f4      	b.n	80098b4 <__swsetup_r+0xb0>
 80098ca:	2000      	movs	r0, #0
 80098cc:	e7f7      	b.n	80098be <__swsetup_r+0xba>
 80098ce:	bf00      	nop
 80098d0:	2000000c 	.word	0x2000000c
 80098d4:	0800a3c0 	.word	0x0800a3c0
 80098d8:	0800a3e0 	.word	0x0800a3e0
 80098dc:	0800a3a0 	.word	0x0800a3a0

080098e0 <abort>:
 80098e0:	b508      	push	{r3, lr}
 80098e2:	2006      	movs	r0, #6
 80098e4:	f000 fa58 	bl	8009d98 <raise>
 80098e8:	2001      	movs	r0, #1
 80098ea:	f7f8 fe3f 	bl	800256c <_exit>
	...

080098f0 <__sflush_r>:
 80098f0:	898a      	ldrh	r2, [r1, #12]
 80098f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f6:	4605      	mov	r5, r0
 80098f8:	0710      	lsls	r0, r2, #28
 80098fa:	460c      	mov	r4, r1
 80098fc:	d458      	bmi.n	80099b0 <__sflush_r+0xc0>
 80098fe:	684b      	ldr	r3, [r1, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc05      	bgt.n	8009910 <__sflush_r+0x20>
 8009904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	dc02      	bgt.n	8009910 <__sflush_r+0x20>
 800990a:	2000      	movs	r0, #0
 800990c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009912:	2e00      	cmp	r6, #0
 8009914:	d0f9      	beq.n	800990a <__sflush_r+0x1a>
 8009916:	2300      	movs	r3, #0
 8009918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800991c:	682f      	ldr	r7, [r5, #0]
 800991e:	602b      	str	r3, [r5, #0]
 8009920:	d032      	beq.n	8009988 <__sflush_r+0x98>
 8009922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	075a      	lsls	r2, r3, #29
 8009928:	d505      	bpl.n	8009936 <__sflush_r+0x46>
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	1ac0      	subs	r0, r0, r3
 800992e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009930:	b10b      	cbz	r3, 8009936 <__sflush_r+0x46>
 8009932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009934:	1ac0      	subs	r0, r0, r3
 8009936:	2300      	movs	r3, #0
 8009938:	4602      	mov	r2, r0
 800993a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800993c:	6a21      	ldr	r1, [r4, #32]
 800993e:	4628      	mov	r0, r5
 8009940:	47b0      	blx	r6
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	d106      	bne.n	8009956 <__sflush_r+0x66>
 8009948:	6829      	ldr	r1, [r5, #0]
 800994a:	291d      	cmp	r1, #29
 800994c:	d82c      	bhi.n	80099a8 <__sflush_r+0xb8>
 800994e:	4a2a      	ldr	r2, [pc, #168]	; (80099f8 <__sflush_r+0x108>)
 8009950:	40ca      	lsrs	r2, r1
 8009952:	07d6      	lsls	r6, r2, #31
 8009954:	d528      	bpl.n	80099a8 <__sflush_r+0xb8>
 8009956:	2200      	movs	r2, #0
 8009958:	6062      	str	r2, [r4, #4]
 800995a:	04d9      	lsls	r1, r3, #19
 800995c:	6922      	ldr	r2, [r4, #16]
 800995e:	6022      	str	r2, [r4, #0]
 8009960:	d504      	bpl.n	800996c <__sflush_r+0x7c>
 8009962:	1c42      	adds	r2, r0, #1
 8009964:	d101      	bne.n	800996a <__sflush_r+0x7a>
 8009966:	682b      	ldr	r3, [r5, #0]
 8009968:	b903      	cbnz	r3, 800996c <__sflush_r+0x7c>
 800996a:	6560      	str	r0, [r4, #84]	; 0x54
 800996c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800996e:	602f      	str	r7, [r5, #0]
 8009970:	2900      	cmp	r1, #0
 8009972:	d0ca      	beq.n	800990a <__sflush_r+0x1a>
 8009974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009978:	4299      	cmp	r1, r3
 800997a:	d002      	beq.n	8009982 <__sflush_r+0x92>
 800997c:	4628      	mov	r0, r5
 800997e:	f7ff fb11 	bl	8008fa4 <_free_r>
 8009982:	2000      	movs	r0, #0
 8009984:	6360      	str	r0, [r4, #52]	; 0x34
 8009986:	e7c1      	b.n	800990c <__sflush_r+0x1c>
 8009988:	6a21      	ldr	r1, [r4, #32]
 800998a:	2301      	movs	r3, #1
 800998c:	4628      	mov	r0, r5
 800998e:	47b0      	blx	r6
 8009990:	1c41      	adds	r1, r0, #1
 8009992:	d1c7      	bne.n	8009924 <__sflush_r+0x34>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0c4      	beq.n	8009924 <__sflush_r+0x34>
 800999a:	2b1d      	cmp	r3, #29
 800999c:	d001      	beq.n	80099a2 <__sflush_r+0xb2>
 800999e:	2b16      	cmp	r3, #22
 80099a0:	d101      	bne.n	80099a6 <__sflush_r+0xb6>
 80099a2:	602f      	str	r7, [r5, #0]
 80099a4:	e7b1      	b.n	800990a <__sflush_r+0x1a>
 80099a6:	89a3      	ldrh	r3, [r4, #12]
 80099a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	e7ad      	b.n	800990c <__sflush_r+0x1c>
 80099b0:	690f      	ldr	r7, [r1, #16]
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	d0a9      	beq.n	800990a <__sflush_r+0x1a>
 80099b6:	0793      	lsls	r3, r2, #30
 80099b8:	680e      	ldr	r6, [r1, #0]
 80099ba:	bf08      	it	eq
 80099bc:	694b      	ldreq	r3, [r1, #20]
 80099be:	600f      	str	r7, [r1, #0]
 80099c0:	bf18      	it	ne
 80099c2:	2300      	movne	r3, #0
 80099c4:	eba6 0807 	sub.w	r8, r6, r7
 80099c8:	608b      	str	r3, [r1, #8]
 80099ca:	f1b8 0f00 	cmp.w	r8, #0
 80099ce:	dd9c      	ble.n	800990a <__sflush_r+0x1a>
 80099d0:	6a21      	ldr	r1, [r4, #32]
 80099d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099d4:	4643      	mov	r3, r8
 80099d6:	463a      	mov	r2, r7
 80099d8:	4628      	mov	r0, r5
 80099da:	47b0      	blx	r6
 80099dc:	2800      	cmp	r0, #0
 80099de:	dc06      	bgt.n	80099ee <__sflush_r+0xfe>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ec:	e78e      	b.n	800990c <__sflush_r+0x1c>
 80099ee:	4407      	add	r7, r0
 80099f0:	eba8 0800 	sub.w	r8, r8, r0
 80099f4:	e7e9      	b.n	80099ca <__sflush_r+0xda>
 80099f6:	bf00      	nop
 80099f8:	20400001 	.word	0x20400001

080099fc <_fflush_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	4605      	mov	r5, r0
 8009a02:	460c      	mov	r4, r1
 8009a04:	b913      	cbnz	r3, 8009a0c <_fflush_r+0x10>
 8009a06:	2500      	movs	r5, #0
 8009a08:	4628      	mov	r0, r5
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	b118      	cbz	r0, 8009a16 <_fflush_r+0x1a>
 8009a0e:	6983      	ldr	r3, [r0, #24]
 8009a10:	b90b      	cbnz	r3, 8009a16 <_fflush_r+0x1a>
 8009a12:	f000 f887 	bl	8009b24 <__sinit>
 8009a16:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <_fflush_r+0x6c>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d11b      	bne.n	8009a54 <_fflush_r+0x58>
 8009a1c:	686c      	ldr	r4, [r5, #4]
 8009a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0ef      	beq.n	8009a06 <_fflush_r+0xa>
 8009a26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a28:	07d0      	lsls	r0, r2, #31
 8009a2a:	d404      	bmi.n	8009a36 <_fflush_r+0x3a>
 8009a2c:	0599      	lsls	r1, r3, #22
 8009a2e:	d402      	bmi.n	8009a36 <_fflush_r+0x3a>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f000 f915 	bl	8009c60 <__retarget_lock_acquire_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f7ff ff59 	bl	80098f0 <__sflush_r>
 8009a3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a40:	07da      	lsls	r2, r3, #31
 8009a42:	4605      	mov	r5, r0
 8009a44:	d4e0      	bmi.n	8009a08 <_fflush_r+0xc>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	059b      	lsls	r3, r3, #22
 8009a4a:	d4dd      	bmi.n	8009a08 <_fflush_r+0xc>
 8009a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a4e:	f000 f908 	bl	8009c62 <__retarget_lock_release_recursive>
 8009a52:	e7d9      	b.n	8009a08 <_fflush_r+0xc>
 8009a54:	4b05      	ldr	r3, [pc, #20]	; (8009a6c <_fflush_r+0x70>)
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d101      	bne.n	8009a5e <_fflush_r+0x62>
 8009a5a:	68ac      	ldr	r4, [r5, #8]
 8009a5c:	e7df      	b.n	8009a1e <_fflush_r+0x22>
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <_fflush_r+0x74>)
 8009a60:	429c      	cmp	r4, r3
 8009a62:	bf08      	it	eq
 8009a64:	68ec      	ldreq	r4, [r5, #12]
 8009a66:	e7da      	b.n	8009a1e <_fflush_r+0x22>
 8009a68:	0800a3c0 	.word	0x0800a3c0
 8009a6c:	0800a3e0 	.word	0x0800a3e0
 8009a70:	0800a3a0 	.word	0x0800a3a0

08009a74 <std>:
 8009a74:	2300      	movs	r3, #0
 8009a76:	b510      	push	{r4, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a82:	6083      	str	r3, [r0, #8]
 8009a84:	8181      	strh	r1, [r0, #12]
 8009a86:	6643      	str	r3, [r0, #100]	; 0x64
 8009a88:	81c2      	strh	r2, [r0, #14]
 8009a8a:	6183      	str	r3, [r0, #24]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	2208      	movs	r2, #8
 8009a90:	305c      	adds	r0, #92	; 0x5c
 8009a92:	f7ff f949 	bl	8008d28 <memset>
 8009a96:	4b05      	ldr	r3, [pc, #20]	; (8009aac <std+0x38>)
 8009a98:	6263      	str	r3, [r4, #36]	; 0x24
 8009a9a:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <std+0x3c>)
 8009a9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <std+0x40>)
 8009aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009aa2:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <std+0x44>)
 8009aa4:	6224      	str	r4, [r4, #32]
 8009aa6:	6323      	str	r3, [r4, #48]	; 0x30
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	08009dd1 	.word	0x08009dd1
 8009ab0:	08009df3 	.word	0x08009df3
 8009ab4:	08009e2b 	.word	0x08009e2b
 8009ab8:	08009e4f 	.word	0x08009e4f

08009abc <_cleanup_r>:
 8009abc:	4901      	ldr	r1, [pc, #4]	; (8009ac4 <_cleanup_r+0x8>)
 8009abe:	f000 b8af 	b.w	8009c20 <_fwalk_reent>
 8009ac2:	bf00      	nop
 8009ac4:	080099fd 	.word	0x080099fd

08009ac8 <__sfmoreglue>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	2268      	movs	r2, #104	; 0x68
 8009acc:	1e4d      	subs	r5, r1, #1
 8009ace:	4355      	muls	r5, r2
 8009ad0:	460e      	mov	r6, r1
 8009ad2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ad6:	f7ff fad1 	bl	800907c <_malloc_r>
 8009ada:	4604      	mov	r4, r0
 8009adc:	b140      	cbz	r0, 8009af0 <__sfmoreglue+0x28>
 8009ade:	2100      	movs	r1, #0
 8009ae0:	e9c0 1600 	strd	r1, r6, [r0]
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	60a0      	str	r0, [r4, #8]
 8009ae8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009aec:	f7ff f91c 	bl	8008d28 <memset>
 8009af0:	4620      	mov	r0, r4
 8009af2:	bd70      	pop	{r4, r5, r6, pc}

08009af4 <__sfp_lock_acquire>:
 8009af4:	4801      	ldr	r0, [pc, #4]	; (8009afc <__sfp_lock_acquire+0x8>)
 8009af6:	f000 b8b3 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009afa:	bf00      	nop
 8009afc:	20000b55 	.word	0x20000b55

08009b00 <__sfp_lock_release>:
 8009b00:	4801      	ldr	r0, [pc, #4]	; (8009b08 <__sfp_lock_release+0x8>)
 8009b02:	f000 b8ae 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009b06:	bf00      	nop
 8009b08:	20000b55 	.word	0x20000b55

08009b0c <__sinit_lock_acquire>:
 8009b0c:	4801      	ldr	r0, [pc, #4]	; (8009b14 <__sinit_lock_acquire+0x8>)
 8009b0e:	f000 b8a7 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009b12:	bf00      	nop
 8009b14:	20000b56 	.word	0x20000b56

08009b18 <__sinit_lock_release>:
 8009b18:	4801      	ldr	r0, [pc, #4]	; (8009b20 <__sinit_lock_release+0x8>)
 8009b1a:	f000 b8a2 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009b1e:	bf00      	nop
 8009b20:	20000b56 	.word	0x20000b56

08009b24 <__sinit>:
 8009b24:	b510      	push	{r4, lr}
 8009b26:	4604      	mov	r4, r0
 8009b28:	f7ff fff0 	bl	8009b0c <__sinit_lock_acquire>
 8009b2c:	69a3      	ldr	r3, [r4, #24]
 8009b2e:	b11b      	cbz	r3, 8009b38 <__sinit+0x14>
 8009b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b34:	f7ff bff0 	b.w	8009b18 <__sinit_lock_release>
 8009b38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8009b3e:	4b13      	ldr	r3, [pc, #76]	; (8009b8c <__sinit+0x68>)
 8009b40:	4a13      	ldr	r2, [pc, #76]	; (8009b90 <__sinit+0x6c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	bf04      	itt	eq
 8009b4a:	2301      	moveq	r3, #1
 8009b4c:	61a3      	streq	r3, [r4, #24]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f000 f820 	bl	8009b94 <__sfp>
 8009b54:	6060      	str	r0, [r4, #4]
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 f81c 	bl	8009b94 <__sfp>
 8009b5c:	60a0      	str	r0, [r4, #8]
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 f818 	bl	8009b94 <__sfp>
 8009b64:	2200      	movs	r2, #0
 8009b66:	60e0      	str	r0, [r4, #12]
 8009b68:	2104      	movs	r1, #4
 8009b6a:	6860      	ldr	r0, [r4, #4]
 8009b6c:	f7ff ff82 	bl	8009a74 <std>
 8009b70:	68a0      	ldr	r0, [r4, #8]
 8009b72:	2201      	movs	r2, #1
 8009b74:	2109      	movs	r1, #9
 8009b76:	f7ff ff7d 	bl	8009a74 <std>
 8009b7a:	68e0      	ldr	r0, [r4, #12]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	2112      	movs	r1, #18
 8009b80:	f7ff ff78 	bl	8009a74 <std>
 8009b84:	2301      	movs	r3, #1
 8009b86:	61a3      	str	r3, [r4, #24]
 8009b88:	e7d2      	b.n	8009b30 <__sinit+0xc>
 8009b8a:	bf00      	nop
 8009b8c:	0800a1b8 	.word	0x0800a1b8
 8009b90:	08009abd 	.word	0x08009abd

08009b94 <__sfp>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	4607      	mov	r7, r0
 8009b98:	f7ff ffac 	bl	8009af4 <__sfp_lock_acquire>
 8009b9c:	4b1e      	ldr	r3, [pc, #120]	; (8009c18 <__sfp+0x84>)
 8009b9e:	681e      	ldr	r6, [r3, #0]
 8009ba0:	69b3      	ldr	r3, [r6, #24]
 8009ba2:	b913      	cbnz	r3, 8009baa <__sfp+0x16>
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff ffbd 	bl	8009b24 <__sinit>
 8009baa:	3648      	adds	r6, #72	; 0x48
 8009bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	d503      	bpl.n	8009bbc <__sfp+0x28>
 8009bb4:	6833      	ldr	r3, [r6, #0]
 8009bb6:	b30b      	cbz	r3, 8009bfc <__sfp+0x68>
 8009bb8:	6836      	ldr	r6, [r6, #0]
 8009bba:	e7f7      	b.n	8009bac <__sfp+0x18>
 8009bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009bc0:	b9d5      	cbnz	r5, 8009bf8 <__sfp+0x64>
 8009bc2:	4b16      	ldr	r3, [pc, #88]	; (8009c1c <__sfp+0x88>)
 8009bc4:	60e3      	str	r3, [r4, #12]
 8009bc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bca:	6665      	str	r5, [r4, #100]	; 0x64
 8009bcc:	f000 f847 	bl	8009c5e <__retarget_lock_init_recursive>
 8009bd0:	f7ff ff96 	bl	8009b00 <__sfp_lock_release>
 8009bd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009bd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009bdc:	6025      	str	r5, [r4, #0]
 8009bde:	61a5      	str	r5, [r4, #24]
 8009be0:	2208      	movs	r2, #8
 8009be2:	4629      	mov	r1, r5
 8009be4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009be8:	f7ff f89e 	bl	8008d28 <memset>
 8009bec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009bf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf8:	3468      	adds	r4, #104	; 0x68
 8009bfa:	e7d9      	b.n	8009bb0 <__sfp+0x1c>
 8009bfc:	2104      	movs	r1, #4
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7ff ff62 	bl	8009ac8 <__sfmoreglue>
 8009c04:	4604      	mov	r4, r0
 8009c06:	6030      	str	r0, [r6, #0]
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1d5      	bne.n	8009bb8 <__sfp+0x24>
 8009c0c:	f7ff ff78 	bl	8009b00 <__sfp_lock_release>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	e7ee      	b.n	8009bf4 <__sfp+0x60>
 8009c16:	bf00      	nop
 8009c18:	0800a1b8 	.word	0x0800a1b8
 8009c1c:	ffff0001 	.word	0xffff0001

08009c20 <_fwalk_reent>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	4606      	mov	r6, r0
 8009c26:	4688      	mov	r8, r1
 8009c28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c2c:	2700      	movs	r7, #0
 8009c2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c32:	f1b9 0901 	subs.w	r9, r9, #1
 8009c36:	d505      	bpl.n	8009c44 <_fwalk_reent+0x24>
 8009c38:	6824      	ldr	r4, [r4, #0]
 8009c3a:	2c00      	cmp	r4, #0
 8009c3c:	d1f7      	bne.n	8009c2e <_fwalk_reent+0xe>
 8009c3e:	4638      	mov	r0, r7
 8009c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c44:	89ab      	ldrh	r3, [r5, #12]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d907      	bls.n	8009c5a <_fwalk_reent+0x3a>
 8009c4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	d003      	beq.n	8009c5a <_fwalk_reent+0x3a>
 8009c52:	4629      	mov	r1, r5
 8009c54:	4630      	mov	r0, r6
 8009c56:	47c0      	blx	r8
 8009c58:	4307      	orrs	r7, r0
 8009c5a:	3568      	adds	r5, #104	; 0x68
 8009c5c:	e7e9      	b.n	8009c32 <_fwalk_reent+0x12>

08009c5e <__retarget_lock_init_recursive>:
 8009c5e:	4770      	bx	lr

08009c60 <__retarget_lock_acquire_recursive>:
 8009c60:	4770      	bx	lr

08009c62 <__retarget_lock_release_recursive>:
 8009c62:	4770      	bx	lr

08009c64 <__swhatbuf_r>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	460e      	mov	r6, r1
 8009c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	b096      	sub	sp, #88	; 0x58
 8009c70:	4614      	mov	r4, r2
 8009c72:	461d      	mov	r5, r3
 8009c74:	da08      	bge.n	8009c88 <__swhatbuf_r+0x24>
 8009c76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	602a      	str	r2, [r5, #0]
 8009c7e:	061a      	lsls	r2, r3, #24
 8009c80:	d410      	bmi.n	8009ca4 <__swhatbuf_r+0x40>
 8009c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c86:	e00e      	b.n	8009ca6 <__swhatbuf_r+0x42>
 8009c88:	466a      	mov	r2, sp
 8009c8a:	f000 f907 	bl	8009e9c <_fstat_r>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	dbf1      	blt.n	8009c76 <__swhatbuf_r+0x12>
 8009c92:	9a01      	ldr	r2, [sp, #4]
 8009c94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c9c:	425a      	negs	r2, r3
 8009c9e:	415a      	adcs	r2, r3
 8009ca0:	602a      	str	r2, [r5, #0]
 8009ca2:	e7ee      	b.n	8009c82 <__swhatbuf_r+0x1e>
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	b016      	add	sp, #88	; 0x58
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cb0 <__smakebuf_r>:
 8009cb0:	898b      	ldrh	r3, [r1, #12]
 8009cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cb4:	079d      	lsls	r5, r3, #30
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	d507      	bpl.n	8009ccc <__smakebuf_r+0x1c>
 8009cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	6123      	str	r3, [r4, #16]
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	6163      	str	r3, [r4, #20]
 8009cc8:	b002      	add	sp, #8
 8009cca:	bd70      	pop	{r4, r5, r6, pc}
 8009ccc:	ab01      	add	r3, sp, #4
 8009cce:	466a      	mov	r2, sp
 8009cd0:	f7ff ffc8 	bl	8009c64 <__swhatbuf_r>
 8009cd4:	9900      	ldr	r1, [sp, #0]
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff f9cf 	bl	800907c <_malloc_r>
 8009cde:	b948      	cbnz	r0, 8009cf4 <__smakebuf_r+0x44>
 8009ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce4:	059a      	lsls	r2, r3, #22
 8009ce6:	d4ef      	bmi.n	8009cc8 <__smakebuf_r+0x18>
 8009ce8:	f023 0303 	bic.w	r3, r3, #3
 8009cec:	f043 0302 	orr.w	r3, r3, #2
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	e7e3      	b.n	8009cbc <__smakebuf_r+0xc>
 8009cf4:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <__smakebuf_r+0x7c>)
 8009cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	6020      	str	r0, [r4, #0]
 8009cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	9b00      	ldr	r3, [sp, #0]
 8009d04:	6163      	str	r3, [r4, #20]
 8009d06:	9b01      	ldr	r3, [sp, #4]
 8009d08:	6120      	str	r0, [r4, #16]
 8009d0a:	b15b      	cbz	r3, 8009d24 <__smakebuf_r+0x74>
 8009d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d10:	4630      	mov	r0, r6
 8009d12:	f000 f8d5 	bl	8009ec0 <_isatty_r>
 8009d16:	b128      	cbz	r0, 8009d24 <__smakebuf_r+0x74>
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f023 0303 	bic.w	r3, r3, #3
 8009d1e:	f043 0301 	orr.w	r3, r3, #1
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	89a0      	ldrh	r0, [r4, #12]
 8009d26:	4305      	orrs	r5, r0
 8009d28:	81a5      	strh	r5, [r4, #12]
 8009d2a:	e7cd      	b.n	8009cc8 <__smakebuf_r+0x18>
 8009d2c:	08009abd 	.word	0x08009abd

08009d30 <__malloc_lock>:
 8009d30:	4801      	ldr	r0, [pc, #4]	; (8009d38 <__malloc_lock+0x8>)
 8009d32:	f7ff bf95 	b.w	8009c60 <__retarget_lock_acquire_recursive>
 8009d36:	bf00      	nop
 8009d38:	20000b54 	.word	0x20000b54

08009d3c <__malloc_unlock>:
 8009d3c:	4801      	ldr	r0, [pc, #4]	; (8009d44 <__malloc_unlock+0x8>)
 8009d3e:	f7ff bf90 	b.w	8009c62 <__retarget_lock_release_recursive>
 8009d42:	bf00      	nop
 8009d44:	20000b54 	.word	0x20000b54

08009d48 <_raise_r>:
 8009d48:	291f      	cmp	r1, #31
 8009d4a:	b538      	push	{r3, r4, r5, lr}
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	460d      	mov	r5, r1
 8009d50:	d904      	bls.n	8009d5c <_raise_r+0x14>
 8009d52:	2316      	movs	r3, #22
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	bd38      	pop	{r3, r4, r5, pc}
 8009d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d5e:	b112      	cbz	r2, 8009d66 <_raise_r+0x1e>
 8009d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d64:	b94b      	cbnz	r3, 8009d7a <_raise_r+0x32>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f000 f830 	bl	8009dcc <_getpid_r>
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	4601      	mov	r1, r0
 8009d70:	4620      	mov	r0, r4
 8009d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d76:	f000 b817 	b.w	8009da8 <_kill_r>
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d00a      	beq.n	8009d94 <_raise_r+0x4c>
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	d103      	bne.n	8009d8a <_raise_r+0x42>
 8009d82:	2316      	movs	r3, #22
 8009d84:	6003      	str	r3, [r0, #0]
 8009d86:	2001      	movs	r0, #1
 8009d88:	e7e7      	b.n	8009d5a <_raise_r+0x12>
 8009d8a:	2400      	movs	r4, #0
 8009d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d90:	4628      	mov	r0, r5
 8009d92:	4798      	blx	r3
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7e0      	b.n	8009d5a <_raise_r+0x12>

08009d98 <raise>:
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <raise+0xc>)
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	f7ff bfd3 	b.w	8009d48 <_raise_r>
 8009da2:	bf00      	nop
 8009da4:	2000000c 	.word	0x2000000c

08009da8 <_kill_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d07      	ldr	r5, [pc, #28]	; (8009dc8 <_kill_r+0x20>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f7f8 fbc9 	bl	800254c <_kill>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d102      	bne.n	8009dc4 <_kill_r+0x1c>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	b103      	cbz	r3, 8009dc4 <_kill_r+0x1c>
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000b58 	.word	0x20000b58

08009dcc <_getpid_r>:
 8009dcc:	f7f8 bbb6 	b.w	800253c <_getpid>

08009dd0 <__sread>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd8:	f000 f894 	bl	8009f04 <_read_r>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	bfab      	itete	ge
 8009de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009de2:	89a3      	ldrhlt	r3, [r4, #12]
 8009de4:	181b      	addge	r3, r3, r0
 8009de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dea:	bfac      	ite	ge
 8009dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dee:	81a3      	strhlt	r3, [r4, #12]
 8009df0:	bd10      	pop	{r4, pc}

08009df2 <__swrite>:
 8009df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	461f      	mov	r7, r3
 8009df8:	898b      	ldrh	r3, [r1, #12]
 8009dfa:	05db      	lsls	r3, r3, #23
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	4616      	mov	r6, r2
 8009e02:	d505      	bpl.n	8009e10 <__swrite+0x1e>
 8009e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e08:	2302      	movs	r3, #2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f000 f868 	bl	8009ee0 <_lseek_r>
 8009e10:	89a3      	ldrh	r3, [r4, #12]
 8009e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1a:	81a3      	strh	r3, [r4, #12]
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	463b      	mov	r3, r7
 8009e20:	4628      	mov	r0, r5
 8009e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e26:	f000 b817 	b.w	8009e58 <_write_r>

08009e2a <__sseek>:
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e32:	f000 f855 	bl	8009ee0 <_lseek_r>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	bf15      	itete	ne
 8009e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e46:	81a3      	strheq	r3, [r4, #12]
 8009e48:	bf18      	it	ne
 8009e4a:	81a3      	strhne	r3, [r4, #12]
 8009e4c:	bd10      	pop	{r4, pc}

08009e4e <__sclose>:
 8009e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e52:	f000 b813 	b.w	8009e7c <_close_r>
	...

08009e58 <_write_r>:
 8009e58:	b538      	push	{r3, r4, r5, lr}
 8009e5a:	4d07      	ldr	r5, [pc, #28]	; (8009e78 <_write_r+0x20>)
 8009e5c:	4604      	mov	r4, r0
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4611      	mov	r1, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	602a      	str	r2, [r5, #0]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f7f8 fba7 	bl	80025ba <_write>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	d102      	bne.n	8009e76 <_write_r+0x1e>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	b103      	cbz	r3, 8009e76 <_write_r+0x1e>
 8009e74:	6023      	str	r3, [r4, #0]
 8009e76:	bd38      	pop	{r3, r4, r5, pc}
 8009e78:	20000b58 	.word	0x20000b58

08009e7c <_close_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	; (8009e98 <_close_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f8 fbb3 	bl	80025f2 <_close>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_close_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_close_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000b58 	.word	0x20000b58

08009e9c <_fstat_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	; (8009ebc <_fstat_r+0x20>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f7f8 fbae 	bl	800260a <_fstat>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d102      	bne.n	8009eb8 <_fstat_r+0x1c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b103      	cbz	r3, 8009eb8 <_fstat_r+0x1c>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20000b58 	.word	0x20000b58

08009ec0 <_isatty_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d06      	ldr	r5, [pc, #24]	; (8009edc <_isatty_r+0x1c>)
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4608      	mov	r0, r1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	f7f8 fbad 	bl	800262a <_isatty>
 8009ed0:	1c43      	adds	r3, r0, #1
 8009ed2:	d102      	bne.n	8009eda <_isatty_r+0x1a>
 8009ed4:	682b      	ldr	r3, [r5, #0]
 8009ed6:	b103      	cbz	r3, 8009eda <_isatty_r+0x1a>
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	20000b58 	.word	0x20000b58

08009ee0 <_lseek_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	; (8009f00 <_lseek_r+0x20>)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	2200      	movs	r2, #0
 8009eec:	602a      	str	r2, [r5, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f7f8 fba6 	bl	8002640 <_lseek>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_lseek_r+0x1e>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_lseek_r+0x1e>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	20000b58 	.word	0x20000b58

08009f04 <_read_r>:
 8009f04:	b538      	push	{r3, r4, r5, lr}
 8009f06:	4d07      	ldr	r5, [pc, #28]	; (8009f24 <_read_r+0x20>)
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	602a      	str	r2, [r5, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	f7f8 fb34 	bl	8002580 <_read>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	d102      	bne.n	8009f22 <_read_r+0x1e>
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	b103      	cbz	r3, 8009f22 <_read_r+0x1e>
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	20000b58 	.word	0x20000b58

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr
